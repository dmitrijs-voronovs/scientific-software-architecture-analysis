id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/issues/1864:833,Energy Efficiency,Energy,Energy,833,"If during a BCCD(T) calculation CCENERGY errors out due to the CC iterations not converging, Psi4 crashes with an error due to a timer not being on. Cut down input that intentionally triggers the issue:; ```; memory 8 GiB; molecule {; 0 2; H 3.14661583 0.50221279 16.95640639; H -2.34237367 -1.18278602 -9.14879752; H -1.21364759 -0.97589031 -7.97279014; H -0.76962046 -0.48732090 -9.68891324; H -2.68966560 0.90001402 -8.13713011; O 3.52147514 -0.34931909 16.40682068; O -2.05471741 0.80770143 -8.67788722; C -1.63014171 -0.50652361 -8.79096870; symmetry c1; }. set basis aug-cc-pvdz; set reference rohf; set ints_tolerance 1e-14; set d_convergence 5e-9; set e_convergence 1e-10; set ccenergy maxiter 2. energy('BCCD(T)'); ```. Tail of the produced output:; ```; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -0.533075915819886 0.000e+00 0.006541 0.000000 0.000000 0.000000; 1 -0.556071307119493 7.982e-02 0.013677 0.000000 0.000000 0.000000; 2 -0.568751401183405 2.374e-02 0.014574 0.000000 0.000000 0.000000. ** Wave function not converged to 1.0e-07 ** . Traceback (most recent call last):; File ""/home/jzz/psi4conda/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2673, in run_bccd; ref_wfn = core.ccenergy(ref_wfn). RuntimeError: ; Fatal Error: Timer ccenergy is not on.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1584239292352/work/psi4/src/psi4/libqt/timer.cc on line: 1143; The most recent 5 function calls were:. psi::timer_off(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocato",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1864
https://github.com/psi4/psi4/issues/1864:1450,Energy Efficiency,energy,energy,1450,"22; C -1.63014171 -0.50652361 -8.79096870; symmetry c1; }. set basis aug-cc-pvdz; set reference rohf; set ints_tolerance 1e-14; set d_convergence 5e-9; set e_convergence 1e-10; set ccenergy maxiter 2. energy('BCCD(T)'); ```. Tail of the produced output:; ```; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -0.533075915819886 0.000e+00 0.006541 0.000000 0.000000 0.000000; 1 -0.556071307119493 7.982e-02 0.013677 0.000000 0.000000 0.000000; 2 -0.568751401183405 2.374e-02 0.014574 0.000000 0.000000 0.000000. ** Wave function not converged to 1.0e-07 ** . Traceback (most recent call last):; File ""/home/jzz/psi4conda/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2673, in run_bccd; ref_wfn = core.ccenergy(ref_wfn). RuntimeError: ; Fatal Error: Timer ccenergy is not on.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1584239292352/work/psi4/src/psi4/libqt/timer.cc on line: 1143; The most recent 5 function calls were:. psi::timer_off(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""rohf""); core.set_global_option(""INTS_TOLERANCE"", 1e-14); core.set_global_option(""D_CONVERGENCE"", 5e-9); core.set_global_option(""E_CONVERGENCE"", 1e-10); core.set_local_option(""CCENERGY"", ""MAXITER"", 2); --> energy('BCCD(T)'). Psi4 stopped on: Friday, 10 April 2020 10:27PM; Psi4 wall time for execution: 0:00:27.38. *** Psi4 encountered an error. Buy a developer mor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1864
https://github.com/psi4/psi4/issues/1864:1476,Energy Efficiency,energy,energy,1476,"22; C -1.63014171 -0.50652361 -8.79096870; symmetry c1; }. set basis aug-cc-pvdz; set reference rohf; set ints_tolerance 1e-14; set d_convergence 5e-9; set e_convergence 1e-10; set ccenergy maxiter 2. energy('BCCD(T)'); ```. Tail of the produced output:; ```; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -0.533075915819886 0.000e+00 0.006541 0.000000 0.000000 0.000000; 1 -0.556071307119493 7.982e-02 0.013677 0.000000 0.000000 0.000000; 2 -0.568751401183405 2.374e-02 0.014574 0.000000 0.000000 0.000000. ** Wave function not converged to 1.0e-07 ** . Traceback (most recent call last):; File ""/home/jzz/psi4conda/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2673, in run_bccd; ref_wfn = core.ccenergy(ref_wfn). RuntimeError: ; Fatal Error: Timer ccenergy is not on.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1584239292352/work/psi4/src/psi4/libqt/timer.cc on line: 1143; The most recent 5 function calls were:. psi::timer_off(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""rohf""); core.set_global_option(""INTS_TOLERANCE"", 1e-14); core.set_global_option(""D_CONVERGENCE"", 5e-9); core.set_global_option(""E_CONVERGENCE"", 1e-10); core.set_local_option(""CCENERGY"", ""MAXITER"", 2); --> energy('BCCD(T)'). Psi4 stopped on: Friday, 10 April 2020 10:27PM; Psi4 wall time for execution: 0:00:27.38. *** Psi4 encountered an error. Buy a developer mor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1864
https://github.com/psi4/psi4/issues/1864:2345,Energy Efficiency,energy,energy,2345,"171 -0.50652361 -8.79096870; symmetry c1; }. set basis aug-cc-pvdz; set reference rohf; set ints_tolerance 1e-14; set d_convergence 5e-9; set e_convergence 1e-10; set ccenergy maxiter 2. energy('BCCD(T)'); ```. Tail of the produced output:; ```; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -0.533075915819886 0.000e+00 0.006541 0.000000 0.000000 0.000000; 1 -0.556071307119493 7.982e-02 0.013677 0.000000 0.000000 0.000000; 2 -0.568751401183405 2.374e-02 0.014574 0.000000 0.000000 0.000000. ** Wave function not converged to 1.0e-07 ** . Traceback (most recent call last):; File ""/home/jzz/psi4conda/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2673, in run_bccd; ref_wfn = core.ccenergy(ref_wfn). RuntimeError: ; Fatal Error: Timer ccenergy is not on.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1584239292352/work/psi4/src/psi4/libqt/timer.cc on line: 1143; The most recent 5 function calls were:. psi::timer_off(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""rohf""); core.set_global_option(""INTS_TOLERANCE"", 1e-14); core.set_global_option(""D_CONVERGENCE"", 5e-9); core.set_global_option(""E_CONVERGENCE"", 1e-10); core.set_local_option(""CCENERGY"", ""MAXITER"", 2); --> energy('BCCD(T)'). Psi4 stopped on: Friday, 10 April 2020 10:27PM; Psi4 wall time for execution: 0:00:27.38. *** Psi4 encountered an error. Buy a developer more coffee!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1864
https://github.com/psi4/psi4/pull/1865:16,Deployability,Update,Updated,16,## Description; Updated SAPT(DFT) to support hybrid xc kernel in Disp2 for hybrid functional. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Hybrid xc kernel supported for SAPT(DFT) dispersion term. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865
https://github.com/psi4/psi4/pull/1865:270,Testability,Test,Tests,270,## Description; Updated SAPT(DFT) to support hybrid xc kernel in Disp2 for hybrid functional. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Hybrid xc kernel supported for SAPT(DFT) dispersion term. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865
https://github.com/psi4/psi4/pull/1865:344,Testability,test,tests,344,## Description; Updated SAPT(DFT) to support hybrid xc kernel in Disp2 for hybrid functional. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Hybrid xc kernel supported for SAPT(DFT) dispersion term. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865
https://github.com/psi4/psi4/pull/1865:435,Testability,test,tests,435,## Description; Updated SAPT(DFT) to support hybrid xc kernel in Disp2 for hybrid functional. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Hybrid xc kernel supported for SAPT(DFT) dispersion term. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1865
https://github.com/psi4/psi4/issues/1866:1857,Availability,error,error,1857,"m, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************. Written by; Mihaly Kallay, Peter R. Nagy, David Mester, Zoltan Rolik, Gyula Samu,; Jozsef Csontos, Jozsef Csoka, P. Bernat Szabo, Laszlo Gyevi-Nagy,; Bence Hegely, Istvan Ladjanszki, Lorant Szegedy, Bence Ladoczki,; Klara Petrov, Mate Farkas, Pal D. Mezei, and Adam Ganyecz. Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary. www.mrcc.hu. Release date: February 22, 2020. ************************ 2020-04-12 06:03:22 *************************; Executing minp... Reading input from MINP... Input file:. Checking keyword combinations... Basis set is not specified!. Fatal error in exec minp.; Program will stop. ************************ 2020-04-12 06:03:22 *************************; Error at the termination of mrcc.; **********************************************************************; ```. As it so happens, I was running `mrccsdt` not too long ago on the CCQC cluster. What I see looks like ; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on n081 at Sun Mar 8 14:10:25 2020; Module time: ; user time = 1.90 seconds = 0.03 minutes; system time = 0.87 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes; Total time: ; user time = 164.68 seconds = 2.74 minutes; system time = 15.26 seconds = 0.25 minutes; total time = 2719 seconds = 45.32 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 60000 ; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866
https://github.com/psi4/psi4/issues/1866:1969,Availability,Error,Error,1969,"2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************. Written by; Mihaly Kallay, Peter R. Nagy, David Mester, Zoltan Rolik, Gyula Samu,; Jozsef Csontos, Jozsef Csoka, P. Bernat Szabo, Laszlo Gyevi-Nagy,; Bence Hegely, Istvan Ladjanszki, Lorant Szegedy, Bence Ladoczki,; Klara Petrov, Mate Farkas, Pal D. Mezei, and Adam Ganyecz. Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary. www.mrcc.hu. Release date: February 22, 2020. ************************ 2020-04-12 06:03:22 *************************; Executing minp... Reading input from MINP... Input file:. Checking keyword combinations... Basis set is not specified!. Fatal error in exec minp.; Program will stop. ************************ 2020-04-12 06:03:22 *************************; Error at the termination of mrcc.; **********************************************************************; ```. As it so happens, I was running `mrccsdt` not too long ago on the CCQC cluster. What I see looks like ; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on n081 at Sun Mar 8 14:10:25 2020; Module time: ; user time = 1.90 seconds = 0.03 minutes; system time = 0.87 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes; Total time: ; user time = 164.68 seconds = 2.74 minutes; system time = 15.26 seconds = 0.25 minutes; total time = 2719 seconds = 45.32 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 60000 ; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866
https://github.com/psi4/psi4/issues/1866:1626,Deployability,Release,Release,1626,"ystem time = 0.37 seconds = 0.01 minutes; total time = 1 seconds = 0.02 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 48000; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************. Written by; Mihaly Kallay, Peter R. Nagy, David Mester, Zoltan Rolik, Gyula Samu,; Jozsef Csontos, Jozsef Csoka, P. Bernat Szabo, Laszlo Gyevi-Nagy,; Bence Hegely, Istvan Ladjanszki, Lorant Szegedy, Bence Ladoczki,; Klara Petrov, Mate Farkas, Pal D. Mezei, and Adam Ganyecz. Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary. www.mrcc.hu. Release date: February 22, 2020. ************************ 2020-04-12 06:03:22 *************************; Executing minp... Reading input from MINP... Input file:. Checking keyword combinations... Basis set is not specified!. Fatal error in exec minp.; Program will stop. ************************ 2020-04-12 06:03:22 *************************; Error at the termination of mrcc.; **********************************************************************; ```. As it so happens, I was running `mrccsdt` not too long ago on the CCQC cluster. What I see looks like ; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on n081 at Sun Mar 8 14:10:25 2020; Module time: ; user time = 1.90 seconds = 0.03 minutes; system time = 0.87 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes; Total time: ; user time = 164.68 seconds = 2.74 minutes; system time = 15.26 seconds = 0.25 minutes; total time = 2719 seconds = 45.32 minutes. ===== Begin fort.56 input for MRCC ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866
https://github.com/psi4/psi4/issues/1866:65,Integrability,interface,interface-with-mrcc,65,"Carrying forward from a [forum topic](http://forum.psicode.org/t/interface-with-mrcc/1748/6). I suspect that the latest MRCC is not compatible with Psi4. Alas, this is not something I can test easily myself, as it looks nontrivial to compile. A user reported that when trying to run `mrccsdt`, they get:; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on Manjaro at Sun Apr 12 06:03:22 2020; Module time:; user time = 0.61 seconds = 0.01 minutes; system time = 0.11 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 3.99 seconds = 0.07 minutes; system time = 0.37 seconds = 0.01 minutes; total time = 1 seconds = 0.02 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 48000; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************. Written by; Mihaly Kallay, Peter R. Nagy, David Mester, Zoltan Rolik, Gyula Samu,; Jozsef Csontos, Jozsef Csoka, P. Bernat Szabo, Laszlo Gyevi-Nagy,; Bence Hegely, Istvan Ladjanszki, Lorant Szegedy, Bence Ladoczki,; Klara Petrov, Mate Farkas, Pal D. Mezei, and Adam Ganyecz. Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary. www.mrcc.hu. Release date: February 22, 2020. ************************ 2020-04-12 06:03:22 *************************; Executing minp... Reading input from MINP... Input file:. Checking keyword combinations... Basis set is not specified!. Fatal error in exec minp.; Program will stop. ************************ 2020-04-12 06:03:22 *************************; Error at the termination of mrcc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866
https://github.com/psi4/psi4/issues/1866:3875,Integrability,interface,interface,3875,". As it so happens, I was running `mrccsdt` not too long ago on the CCQC cluster. What I see looks like ; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on n081 at Sun Mar 8 14:10:25 2020; Module time: ; user time = 1.90 seconds = 0.03 minutes; system time = 0.87 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes; Total time: ; user time = 164.68 seconds = 2.74 minutes; system time = 15.26 seconds = 0.25 minutes; total time = 2719 seconds = 45.32 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 60000 ; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************; ; Written by; Mihaly Kallay, Zoltan Rolik, Jozsef Csontos, Istvan Ladjanszki,; Lorant Szegedy, Bence Ladoczki, Gyula Samu, Klara Petrov,; Mate Farkas, Peter Nagy, David Mester, and Bence Hegely; ; Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary; ; www.mrcc.hu. ************************ 2020-03-08 14:10:25 *************************; Executing goldstone...; ```. The calculation goes on, but the important point is that MRCC is supposed to execute `goldstone` immediately and not even try to read input from the MINP file. My interpretation of the situation is that something in the new MRCC has broken Psi's direct interface, which avoided MINP input entirely. I'm not planning to get further involved in this issue, but I'm fairly sure we mentioned the MRCC interface in the paper, so this is bad. Curse you, upstream!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866
https://github.com/psi4/psi4/issues/1866:4019,Integrability,interface,interface,4019,". As it so happens, I was running `mrccsdt` not too long ago on the CCQC cluster. What I see looks like ; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on n081 at Sun Mar 8 14:10:25 2020; Module time: ; user time = 1.90 seconds = 0.03 minutes; system time = 0.87 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes; Total time: ; user time = 164.68 seconds = 2.74 minutes; system time = 15.26 seconds = 0.25 minutes; total time = 2719 seconds = 45.32 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 60000 ; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************; ; Written by; Mihaly Kallay, Zoltan Rolik, Jozsef Csontos, Istvan Ladjanszki,; Lorant Szegedy, Bence Ladoczki, Gyula Samu, Klara Petrov,; Mate Farkas, Peter Nagy, David Mester, and Bence Hegely; ; Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary; ; www.mrcc.hu. ************************ 2020-03-08 14:10:25 *************************; Executing goldstone...; ```. The calculation goes on, but the important point is that MRCC is supposed to execute `goldstone` immediately and not even try to read input from the MINP file. My interpretation of the situation is that something in the new MRCC has broken Psi's direct interface, which avoided MINP input entirely. I'm not planning to get further involved in this issue, but I'm fairly sure we mentioned the MRCC interface in the paper, so this is bad. Curse you, upstream!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866
https://github.com/psi4/psi4/issues/1866:3892,Safety,avoid,avoided,3892,". As it so happens, I was running `mrccsdt` not too long ago on the CCQC cluster. What I see looks like ; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on n081 at Sun Mar 8 14:10:25 2020; Module time: ; user time = 1.90 seconds = 0.03 minutes; system time = 0.87 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes; Total time: ; user time = 164.68 seconds = 2.74 minutes; system time = 15.26 seconds = 0.25 minutes; total time = 2719 seconds = 45.32 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 60000 ; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************; ; Written by; Mihaly Kallay, Zoltan Rolik, Jozsef Csontos, Istvan Ladjanszki,; Lorant Szegedy, Bence Ladoczki, Gyula Samu, Klara Petrov,; Mate Farkas, Peter Nagy, David Mester, and Bence Hegely; ; Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary; ; www.mrcc.hu. ************************ 2020-03-08 14:10:25 *************************; Executing goldstone...; ```. The calculation goes on, but the important point is that MRCC is supposed to execute `goldstone` immediately and not even try to read input from the MINP file. My interpretation of the situation is that something in the new MRCC has broken Psi's direct interface, which avoided MINP input entirely. I'm not planning to get further involved in this issue, but I'm fairly sure we mentioned the MRCC interface in the paper, so this is bad. Curse you, upstream!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866
https://github.com/psi4/psi4/issues/1866:188,Testability,test,test,188,"Carrying forward from a [forum topic](http://forum.psicode.org/t/interface-with-mrcc/1748/6). I suspect that the latest MRCC is not compatible with Psi4. Alas, this is not something I can test easily myself, as it looks nontrivial to compile. A user reported that when trying to run `mrccsdt`, they get:; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on Manjaro at Sun Apr 12 06:03:22 2020; Module time:; user time = 0.61 seconds = 0.01 minutes; system time = 0.11 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 3.99 seconds = 0.07 minutes; system time = 0.37 seconds = 0.01 minutes; total time = 1 seconds = 0.02 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 48000; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************. Written by; Mihaly Kallay, Peter R. Nagy, David Mester, Zoltan Rolik, Gyula Samu,; Jozsef Csontos, Jozsef Csoka, P. Bernat Szabo, Laszlo Gyevi-Nagy,; Bence Hegely, Istvan Ladjanszki, Lorant Szegedy, Bence Ladoczki,; Klara Petrov, Mate Farkas, Pal D. Mezei, and Adam Ganyecz. Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary. www.mrcc.hu. Release date: February 22, 2020. ************************ 2020-04-12 06:03:22 *************************; Executing minp... Reading input from MINP... Input file:. Checking keyword combinations... Basis set is not specified!. Fatal error in exec minp.; Program will stop. ************************ 2020-04-12 06:03:22 *************************; Error at the termination of mrcc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1866
https://github.com/psi4/psi4/issues/1867:8,Availability,error,error,8,"The new error printing in #1862 seems to struggle when the message it's trying to print contains newlines. Consider the following input file. ```; molecule {; symmetry c1; N; N 1.500; }; set {; basis cc-pVD; }; energy('scf'); ```. This will raise a syntax error because I have a malformed Z-matrix. The new box will print out. ```; !----------------------------------------------------------------------------------!; ! !; ! Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]: symmetry c1 N !; ! N 1.500 !; ! !; !----------------------------------------------------------------------------------!; ```. where the original error message is the more readable. ```; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; symmetry c1; N; N 1.500; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1867
https://github.com/psi4/psi4/issues/1867:256,Availability,error,error,256,"The new error printing in #1862 seems to struggle when the message it's trying to print contains newlines. Consider the following input file. ```; molecule {; symmetry c1; N; N 1.500; }; set {; basis cc-pVD; }; energy('scf'); ```. This will raise a syntax error because I have a malformed Z-matrix. The new box will print out. ```; !----------------------------------------------------------------------------------!; ! !; ! Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]: symmetry c1 N !; ! N 1.500 !; ! !; !----------------------------------------------------------------------------------!; ```. where the original error message is the more readable. ```; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; symmetry c1; N; N 1.500; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1867
https://github.com/psi4/psi4/issues/1867:635,Availability,error,error,635,"The new error printing in #1862 seems to struggle when the message it's trying to print contains newlines. Consider the following input file. ```; molecule {; symmetry c1; N; N 1.500; }; set {; basis cc-pVD; }; energy('scf'); ```. This will raise a syntax error because I have a malformed Z-matrix. The new box will print out. ```; !----------------------------------------------------------------------------------!; ! !; ! Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]: symmetry c1 N !; ! N 1.500 !; ! !; !----------------------------------------------------------------------------------!; ```. where the original error message is the more readable. ```; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; symmetry c1; N; N 1.500; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1867
https://github.com/psi4/psi4/issues/1867:211,Energy Efficiency,energy,energy,211,"The new error printing in #1862 seems to struggle when the message it's trying to print contains newlines. Consider the following input file. ```; molecule {; symmetry c1; N; N 1.500; }; set {; basis cc-pVD; }; energy('scf'); ```. This will raise a syntax error because I have a malformed Z-matrix. The new box will print out. ```; !----------------------------------------------------------------------------------!; ! !; ! Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]: symmetry c1 N !; ! N 1.500 !; ! !; !----------------------------------------------------------------------------------!; ```. where the original error message is the more readable. ```; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; symmetry c1; N; N 1.500; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1867
https://github.com/psi4/psi4/issues/1867:59,Integrability,message,message,59,"The new error printing in #1862 seems to struggle when the message it's trying to print contains newlines. Consider the following input file. ```; molecule {; symmetry c1; N; N 1.500; }; set {; basis cc-pVD; }; energy('scf'); ```. This will raise a syntax error because I have a malformed Z-matrix. The new box will print out. ```; !----------------------------------------------------------------------------------!; ! !; ! Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]: symmetry c1 N !; ! N 1.500 !; ! !; !----------------------------------------------------------------------------------!; ```. where the original error message is the more readable. ```; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; symmetry c1; N; N 1.500; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1867
https://github.com/psi4/psi4/issues/1867:641,Integrability,message,message,641,"The new error printing in #1862 seems to struggle when the message it's trying to print contains newlines. Consider the following input file. ```; molecule {; symmetry c1; N; N 1.500; }; set {; basis cc-pVD; }; energy('scf'); ```. This will raise a syntax error because I have a malformed Z-matrix. The new box will print out. ```; !----------------------------------------------------------------------------------!; ! !; ! Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]: symmetry c1 N !; ! N 1.500 !; ! !; !----------------------------------------------------------------------------------!; ```. where the original error message is the more readable. ```; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; symmetry c1; N; N 1.500; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1867
https://github.com/psi4/psi4/pull/1869:64,Availability,error,error,64,"## Description; There was a report that the slack link gave ""an error"". fwiw, when I regenerated the link, it was different. Link replaced and new paper partially added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1869
https://github.com/psi4/psi4/issues/1870:262,Availability,error,error,262,"Hi,. I am trying to install psi4 from source, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:522,Availability,error,error,522,"Hi,. I am trying to install psi4 from source, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:722,Availability,error,error,722,"Hi,. I am trying to install psi4 from source, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:20,Deployability,install,install,20,"Hi,. I am trying to install psi4 from source, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:1908,Performance,load,loaded,1908,"ts/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"", line 184, in <module>; import psi4; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 0.40 sec. Test Failed.; ""nbody-convergence"" end t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:2582,Performance,load,loaded,2582," ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"", line 184, in <module>; import psi4; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 0.40 sec. Test Failed.; ""nbody-convergence"" end time: Apr 16 15:44 CEST; ""nbody-convergence"" time elapsed: 00:00:00; ```. Thank you for your help !",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:502,Testability,test,tests,502,"Hi,. I am trying to install psi4 from source, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:743,Testability,test,test,743,"Hi,. I am trying to install psi4 from source, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:763,Testability,Test,Testing,763,"Hi,. I am trying to install psi4 from source, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:799,Testability,Test,Test,799,"Hi,. I am trying to install psi4 from source, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:907,Testability,test,tests,907,"Hi,. I am trying to install psi4 from source, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:974,Testability,test,tests,974,"Hi,. I am trying to install psi4 from source, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:1065,Testability,test,testresults,1065,"urce, as I need one feature recently added in psi4.; I am working on MacOS but uses GNU compiler (v8.3.0) because I don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:1077,Testability,log,log,1077,"don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found. During handling of the above exception, another exception occurred:. Tracebac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:1204,Testability,test,tests,1204,"don't manage to make it work with clang, and I'm usually always using GNU anyway. After several trial and error, I manage to build the code with the following CMake options:. cmake -H. -Bobjdir -DCMAKE_CXX_FLAGS=""-march=native"" -DOpenMP_LIBRARY_DIRS=/opt/intel/lib. Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found. During handling of the above exception, another exception occurred:. Tracebac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:1521,Testability,test,tests,1521,". Once built, I tried the ctest command to see if everything was working, but all tests fail with the error that libiomp5 seems to not be found. However, I have the following libraries in /opt/intel/lib:; libiomp5.a; libiomp5.dylib; libiomp5_db.dylib; libiompstubs5.a; libiompstubs5.dylib. Here is the error output for the test:; ```; 252/448 Testing: nbody-convergence; 252/448 Test: nbody-convergence; Command: ""/usr/local/bin/python3"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"", line 184, in <module>; import psi4; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise Impo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:2849,Testability,Test,Test,2849," ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"", line 184, in <module>; import psi4; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 0.40 sec. Test Failed.; ""nbody-convergence"" end time: Apr 16 15:44 CEST; ""nbody-convergence"" time elapsed: 00:00:00; ```. Thank you for your help !",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1870:2871,Testability,Test,Test,2871," ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"", line 184, in <module>; import psi4; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 0.40 sec. Test Failed.; ""nbody-convergence"" end time: Apr 16 15:44 CEST; ""nbody-convergence"" time elapsed: 00:00:00; ```. Thank you for your help !",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1870
https://github.com/psi4/psi4/issues/1871:179,Availability,error,error,179,"On issue #1861 , reading serialized wavefunctions for CASCI/detci computations was solved. However, I wonder if it was also solved for CASSCF calculations, as I get the following error when performing a CASSCF calculation with a given input wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:1516,Availability,error,error,1516,"ut = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:2494,Availability,Error,Error,2494,"# assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; The most recent 1 function calls were:. ```. EDIT: to run this input, note that I used the following options to generate my wavefunction object:. ```; psi4.set_options({'basis': 'STO-3G-DECON',; 'reference': 'rohf',; 'scf_type': 'direct',; 'guess': 'sad',; 'puream':true}); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:2578,Availability,Error,Error,2578,"# assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; The most recent 1 function calls were:. ```. EDIT: to run this input, note that I used the following options to generate my wavefunction object:. ```; psi4.set_options({'basis': 'STO-3G-DECON',; 'reference': 'rohf',; 'scf_type': 'direct',; 'guess': 'sad',; 'puream':true}); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:1120,Energy Efficiency,energy,energy,1120,"olved for CASSCF calculations, as I get the following error when performing a CASSCF calculation with a given input wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); Fi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:1142,Energy Efficiency,energy,energy,1142,"s I get the following error when performing a CASSCF calculation with a given input wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Gi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:1173,Energy Efficiency,energy,energy,1173,"nput wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 480",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:1255,Energy Efficiency,energy,energy,1255,"nput wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 480",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:1300,Energy Efficiency,energy,energy,1300," -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/st",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:1433,Energy Efficiency,energy,energy,1433,"97; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcsc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:1469,Energy Efficiency,energy,energy,1469,"60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_obj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:1857,Energy Efficiency,energy,energy,1857," : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; The most recent 1 function calls were:. ```. EDIT: to run this input, note that I used the following options to generate my wavefunction object:. ```; psi4.set_options({'basis': 'STO-3G-DECON',; 'reference': 'rohf',; 'scf_type': 'direc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:2037,Energy Efficiency,energy,energy,2037,"# assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; The most recent 1 function calls were:. ```. EDIT: to run this input, note that I used the following options to generate my wavefunction object:. ```; psi4.set_options({'basis': 'STO-3G-DECON',; 'reference': 'rohf',; 'scf_type': 'direct',; 'guess': 'sad',; 'puream':true}); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:2063,Energy Efficiency,energy,energy,2063,"# assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; The most recent 1 function calls were:. ```. EDIT: to run this input, note that I used the following options to generate my wavefunction object:. ```; psi4.set_options({'basis': 'STO-3G-DECON',; 'reference': 'rohf',; 'scf_type': 'direct',; 'guess': 'sad',; 'puream':true}); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1871:190,Performance,perform,performing,190,"On issue #1861 , reading serialized wavefunctions for CASCI/detci computations was solved. However, I wonder if it was also solved for CASSCF calculations, as I get the following error when performing a CASSCF calculation with a given input wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1871
https://github.com/psi4/psi4/issues/1872:785,Availability,ping,ping,785,"For the `fnocc` modules, [`cepa(0)` means `lccsd`](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L4655-L4660). I have only ever heard of `cepa(0)` meaning `lccd`. It is `lccd` in the `dct` module, it is `lccd` in the `occ` module, and it is `lccd` in the `dfocc` module. Can we make this consistent, or at least print a warning?. CEPA(0) is very important to my own research, and I had only ever heard of it as `lccd`. After doing some more digging, I've come across some sources that equate CEPA(0) and `lccsd`, but it seems to me to be a minority position. . Making this even more complicated, all requests for `cepa(0)` go to `fnocc`. `occ` and `dfocc` require `lccd`. `dct` also requires `cepa0`, but as a keyword rather than the energy name. Obligatory ping of @edeprince3 for `fnocc` issues and @loriab for defining methods consistently across modules and @jturney because this has been causing problems at CCQC.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872
https://github.com/psi4/psi4/issues/1872:761,Energy Efficiency,energy,energy,761,"For the `fnocc` modules, [`cepa(0)` means `lccsd`](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L4655-L4660). I have only ever heard of `cepa(0)` meaning `lccd`. It is `lccd` in the `dct` module, it is `lccd` in the `occ` module, and it is `lccd` in the `dfocc` module. Can we make this consistent, or at least print a warning?. CEPA(0) is very important to my own research, and I had only ever heard of it as `lccd`. After doing some more digging, I've come across some sources that equate CEPA(0) and `lccsd`, but it seems to me to be a minority position. . Making this even more complicated, all requests for `cepa(0)` go to `fnocc`. `occ` and `dfocc` require `lccd`. `dct` also requires `cepa0`, but as a keyword rather than the energy name. Obligatory ping of @edeprince3 for `fnocc` issues and @loriab for defining methods consistently across modules and @jturney because this has been causing problems at CCQC.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1872
https://github.com/psi4/psi4/pull/1873:1059,Availability,Error,Error,1059,"## Description; DCT's `cepa0` capabilities are removed. Per #1872, Psi has a problem with being consistent about what `cepa0` is. DCT has `cepa0` and is contributing to the problem. The best option is to just get rid of it. We only have it for testing purposes, but that's a Psi4Numpy task nowadays. The documentation even said don't use it for production. Besides, `cepa0`'s days as a useful point of comparison to `dct` are numbered. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removed `cepa0` functionality from `dct` module. Use `occ`, `dfocc`, or `fnocc` instead.; - [x] Removed test checking for consistency between `fnocc` and `dct` CEPA because `dct` no longer has `CEPA`. ## Questions; - [ ] One procedural concern: At what point are we pulling the plug on getting new PRs into 1.4? I do not want keeping up with my PRs to take time that core devs should be spending moving 1.4 forward. ## Checklist; - [x] `ctest -L quick` passes; - [x] `ctest -L dct` passes; - [x] Documentation updated; - [x] Error message added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1873
https://github.com/psi4/psi4/pull/1873:1044,Deployability,update,updated,1044,"## Description; DCT's `cepa0` capabilities are removed. Per #1872, Psi has a problem with being consistent about what `cepa0` is. DCT has `cepa0` and is contributing to the problem. The best option is to just get rid of it. We only have it for testing purposes, but that's a Psi4Numpy task nowadays. The documentation even said don't use it for production. Besides, `cepa0`'s days as a useful point of comparison to `dct` are numbered. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removed `cepa0` functionality from `dct` module. Use `occ`, `dfocc`, or `fnocc` instead.; - [x] Removed test checking for consistency between `fnocc` and `dct` CEPA because `dct` no longer has `CEPA`. ## Questions; - [ ] One procedural concern: At what point are we pulling the plug on getting new PRs into 1.4? I do not want keeping up with my PRs to take time that core devs should be spending moving 1.4 forward. ## Checklist; - [x] `ctest -L quick` passes; - [x] `ctest -L dct` passes; - [x] Documentation updated; - [x] Error message added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1873
https://github.com/psi4/psi4/pull/1873:1065,Integrability,message,message,1065,"## Description; DCT's `cepa0` capabilities are removed. Per #1872, Psi has a problem with being consistent about what `cepa0` is. DCT has `cepa0` and is contributing to the problem. The best option is to just get rid of it. We only have it for testing purposes, but that's a Psi4Numpy task nowadays. The documentation even said don't use it for production. Besides, `cepa0`'s days as a useful point of comparison to `dct` are numbered. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removed `cepa0` functionality from `dct` module. Use `occ`, `dfocc`, or `fnocc` instead.; - [x] Removed test checking for consistency between `fnocc` and `dct` CEPA because `dct` no longer has `CEPA`. ## Questions; - [ ] One procedural concern: At what point are we pulling the plug on getting new PRs into 1.4? I do not want keeping up with my PRs to take time that core devs should be spending moving 1.4 forward. ## Checklist; - [x] `ctest -L quick` passes; - [x] `ctest -L dct` passes; - [x] Documentation updated; - [x] Error message added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1873
https://github.com/psi4/psi4/pull/1873:244,Testability,test,testing,244,"## Description; DCT's `cepa0` capabilities are removed. Per #1872, Psi has a problem with being consistent about what `cepa0` is. DCT has `cepa0` and is contributing to the problem. The best option is to just get rid of it. We only have it for testing purposes, but that's a Psi4Numpy task nowadays. The documentation even said don't use it for production. Besides, `cepa0`'s days as a useful point of comparison to `dct` are numbered. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removed `cepa0` functionality from `dct` module. Use `occ`, `dfocc`, or `fnocc` instead.; - [x] Removed test checking for consistency between `fnocc` and `dct` CEPA because `dct` no longer has `CEPA`. ## Questions; - [ ] One procedural concern: At what point are we pulling the plug on getting new PRs into 1.4? I do not want keeping up with my PRs to take time that core devs should be spending moving 1.4 forward. ## Checklist; - [x] `ctest -L quick` passes; - [x] `ctest -L dct` passes; - [x] Documentation updated; - [x] Error message added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1873
https://github.com/psi4/psi4/pull/1873:638,Testability,test,test,638,"## Description; DCT's `cepa0` capabilities are removed. Per #1872, Psi has a problem with being consistent about what `cepa0` is. DCT has `cepa0` and is contributing to the problem. The best option is to just get rid of it. We only have it for testing purposes, but that's a Psi4Numpy task nowadays. The documentation even said don't use it for production. Besides, `cepa0`'s days as a useful point of comparison to `dct` are numbered. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removed `cepa0` functionality from `dct` module. Use `occ`, `dfocc`, or `fnocc` instead.; - [x] Removed test checking for consistency between `fnocc` and `dct` CEPA because `dct` no longer has `CEPA`. ## Questions; - [ ] One procedural concern: At what point are we pulling the plug on getting new PRs into 1.4? I do not want keeping up with my PRs to take time that core devs should be spending moving 1.4 forward. ## Checklist; - [x] `ctest -L quick` passes; - [x] `ctest -L dct` passes; - [x] Documentation updated; - [x] Error message added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1873
https://github.com/psi4/psi4/issues/1874:50,Availability,error,error-for-sapt-,50,"Edit: from forum post: http://forum.psicode.org/t/error-for-sapt-dmp2-calculation/1691; running `psi4 -p myprefix <input_file>` for a delta_mp2 SAPT calculations results in:. ```; PSIO_ERROR: Can't find TOC Entry DFMP2 Jm12; PSIO_ERROR: unit = 97, errval = 13; PSIO_ERROR: 13 (no such TOC entry); ```. uncommenting [this](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/change_namespace.cc#L69) , applied [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3918) reveals (at least); the 97 file (the Jm12 metric) still uses the default prefix (`psi`):. ```; /Users/kruse/scratch/PSI4/psi.44624.dimer.97; /Users/kruse/scratch/PSI4/psi.44624.monomerA.97; ```. ---; example input; ```; molecule water_dimer {; 0 1; O -0.003244 1.511274 0.000000; H 0.070125 0.540684 0.000000; H 0.900899 1.845934 0.000000; --; 0 1; O -0.003244 -1.375885 0.000000; H -0.459556 -1.734864 0.771839; H -0.459556 -1.734864 -0.771839. units angstrom; no_reorient; symmetry c1; }; set basis sto-3g; energy('sapt2+(3)dmp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1874
https://github.com/psi4/psi4/issues/1874:1016,Energy Efficiency,energy,energy,1016,"Edit: from forum post: http://forum.psicode.org/t/error-for-sapt-dmp2-calculation/1691; running `psi4 -p myprefix <input_file>` for a delta_mp2 SAPT calculations results in:. ```; PSIO_ERROR: Can't find TOC Entry DFMP2 Jm12; PSIO_ERROR: unit = 97, errval = 13; PSIO_ERROR: 13 (no such TOC entry); ```. uncommenting [this](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/change_namespace.cc#L69) , applied [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3918) reveals (at least); the 97 file (the Jm12 metric) still uses the default prefix (`psi`):. ```; /Users/kruse/scratch/PSI4/psi.44624.dimer.97; /Users/kruse/scratch/PSI4/psi.44624.monomerA.97; ```. ---; example input; ```; molecule water_dimer {; 0 1; O -0.003244 1.511274 0.000000; H 0.070125 0.540684 0.000000; H 0.900899 1.845934 0.000000; --; 0 1; O -0.003244 -1.375885 0.000000; H -0.459556 -1.734864 0.771839; H -0.459556 -1.734864 -0.771839. units angstrom; no_reorient; symmetry c1; }; set basis sto-3g; energy('sapt2+(3)dmp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1874
https://github.com/psi4/psi4/issues/1875:387,Availability,avail,available,387,"The current master branch of libxc includes support for double hybrids, as well as functionals with several range-separation constants (e.g. the HISS functional). It would be great to have Psi4 as an early adopter, so that we could test whether the interface is sane and the implementations are correct. The direct libxc interface will also include functionals like wB97M(2) that aren't available in Psi4 at the moment.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1875
https://github.com/psi4/psi4/issues/1875:249,Integrability,interface,interface,249,"The current master branch of libxc includes support for double hybrids, as well as functionals with several range-separation constants (e.g. the HISS functional). It would be great to have Psi4 as an early adopter, so that we could test whether the interface is sane and the implementations are correct. The direct libxc interface will also include functionals like wB97M(2) that aren't available in Psi4 at the moment.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1875
https://github.com/psi4/psi4/issues/1875:321,Integrability,interface,interface,321,"The current master branch of libxc includes support for double hybrids, as well as functionals with several range-separation constants (e.g. the HISS functional). It would be great to have Psi4 as an early adopter, so that we could test whether the interface is sane and the implementations are correct. The direct libxc interface will also include functionals like wB97M(2) that aren't available in Psi4 at the moment.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1875
https://github.com/psi4/psi4/issues/1875:232,Testability,test,test,232,"The current master branch of libxc includes support for double hybrids, as well as functionals with several range-separation constants (e.g. the HISS functional). It would be great to have Psi4 as an early adopter, so that we could test whether the interface is sane and the implementations are correct. The direct libxc interface will also include functionals like wB97M(2) that aren't available in Psi4 at the moment.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1875
https://github.com/psi4/psi4/issues/1876:293,Availability,error,error,293,"Minimal example; ```; molecule {; 0 1; Ne; }. my_pbe = {; ""name"": ""my pbe functional"",; ""x_functionals"" : {; ""GGA_X_PBE"" : {}; },; ""c_functionals"" : {; ""GGA_C_PBE"" : {}; }; }. set basis pcseg-1; set basis_guess pcseg-0 # Works	without	this line; energy('scf', dft_functional=my_pbe); ```. The error I get in psi4 1.3.2 is; ```; Traceback (most recent call last):; File ""/usr/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/usr/lib64/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 1272, in scf_helper; p4util.banner(name.upper()). AttributeError: 'dict' object has no attribute 'upper'. Printing out the relevant lines from the Psithon --> Python processed input file:; ""GGA_C_PBE"" : {}; }; }; core.set_global_option(""BASIS"", ""pcseg-1""); core.set_global_option(""BASIS_GUESS"", ""pcseg-0""); --> energy('scf', dft_functional=my_pbe); ```; and the same issue is also present in `master`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1876
https://github.com/psi4/psi4/issues/1876:246,Energy Efficiency,energy,energy,246,"Minimal example; ```; molecule {; 0 1; Ne; }. my_pbe = {; ""name"": ""my pbe functional"",; ""x_functionals"" : {; ""GGA_X_PBE"" : {}; },; ""c_functionals"" : {; ""GGA_C_PBE"" : {}; }; }. set basis pcseg-1; set basis_guess pcseg-0 # Works	without	this line; energy('scf', dft_functional=my_pbe); ```. The error I get in psi4 1.3.2 is; ```; Traceback (most recent call last):; File ""/usr/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/usr/lib64/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 1272, in scf_helper; p4util.banner(name.upper()). AttributeError: 'dict' object has no attribute 'upper'. Printing out the relevant lines from the Psithon --> Python processed input file:; ""GGA_C_PBE"" : {}; }; }; core.set_global_option(""BASIS"", ""pcseg-1""); core.set_global_option(""BASIS_GUESS"", ""pcseg-0""); --> energy('scf', dft_functional=my_pbe); ```; and the same issue is also present in `master`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1876
https://github.com/psi4/psi4/issues/1876:517,Energy Efficiency,energy,energy,517,"Minimal example; ```; molecule {; 0 1; Ne; }. my_pbe = {; ""name"": ""my pbe functional"",; ""x_functionals"" : {; ""GGA_X_PBE"" : {}; },; ""c_functionals"" : {; ""GGA_C_PBE"" : {}; }; }. set basis pcseg-1; set basis_guess pcseg-0 # Works	without	this line; energy('scf', dft_functional=my_pbe); ```. The error I get in psi4 1.3.2 is; ```; Traceback (most recent call last):; File ""/usr/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/usr/lib64/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 1272, in scf_helper; p4util.banner(name.upper()). AttributeError: 'dict' object has no attribute 'upper'. Printing out the relevant lines from the Psithon --> Python processed input file:; ""GGA_C_PBE"" : {}; }; }; core.set_global_option(""BASIS"", ""pcseg-1""); core.set_global_option(""BASIS_GUESS"", ""pcseg-0""); --> energy('scf', dft_functional=my_pbe); ```; and the same issue is also present in `master`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1876
https://github.com/psi4/psi4/issues/1876:543,Energy Efficiency,energy,energy,543,"Minimal example; ```; molecule {; 0 1; Ne; }. my_pbe = {; ""name"": ""my pbe functional"",; ""x_functionals"" : {; ""GGA_X_PBE"" : {}; },; ""c_functionals"" : {; ""GGA_C_PBE"" : {}; }; }. set basis pcseg-1; set basis_guess pcseg-0 # Works	without	this line; energy('scf', dft_functional=my_pbe); ```. The error I get in psi4 1.3.2 is; ```; Traceback (most recent call last):; File ""/usr/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/usr/lib64/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 1272, in scf_helper; p4util.banner(name.upper()). AttributeError: 'dict' object has no attribute 'upper'. Printing out the relevant lines from the Psithon --> Python processed input file:; ""GGA_C_PBE"" : {}; }; }; core.set_global_option(""BASIS"", ""pcseg-1""); core.set_global_option(""BASIS_GUESS"", ""pcseg-0""); --> energy('scf', dft_functional=my_pbe); ```; and the same issue is also present in `master`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1876
https://github.com/psi4/psi4/issues/1876:1099,Energy Efficiency,energy,energy,1099,"Minimal example; ```; molecule {; 0 1; Ne; }. my_pbe = {; ""name"": ""my pbe functional"",; ""x_functionals"" : {; ""GGA_X_PBE"" : {}; },; ""c_functionals"" : {; ""GGA_C_PBE"" : {}; }; }. set basis pcseg-1; set basis_guess pcseg-0 # Works	without	this line; energy('scf', dft_functional=my_pbe); ```. The error I get in psi4 1.3.2 is; ```; Traceback (most recent call last):; File ""/usr/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/usr/lib64/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 1272, in scf_helper; p4util.banner(name.upper()). AttributeError: 'dict' object has no attribute 'upper'. Printing out the relevant lines from the Psithon --> Python processed input file:; ""GGA_C_PBE"" : {}; }; }; core.set_global_option(""BASIS"", ""pcseg-1""); core.set_global_option(""BASIS_GUESS"", ""pcseg-0""); --> energy('scf', dft_functional=my_pbe); ```; and the same issue is also present in `master`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1876
https://github.com/psi4/psi4/issues/1877:491,Availability,error,error,491,"For historical reasons, Mk-MRCC was only implemented in Psi4 assuming small active spaces, and `psimrcc` rightly gives you [two](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L114-L124) [warnings](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L130-L143) that the equations it is using are not the exact Mk-MRCC equations if your active space is any larger. If you use Mk-MRPT2, the first warning fires, but the second does not. Further, the error message is specific to Mk-MRCC and says nothing about Mk-MRPT2. Is the Mk-MRPT2 procedure implemented in `psimrcc` exact or approximate? If it's exact, we need to stop the first warning from firing for Mk-MRPT2. If it's approximate, we need to make sure the second warning does fire for Mk-MRPT2. I checked the original paper, but couldn't find a clear statement either way, and I'd rather not learn Mk-MRCC theory just to fix this error message. I'm going to get back to giving `psimrcc` a wavefunction, so I'll fix this as part of that PR. I need to touch this part of the logic anyways. @fevangelista? @andysim?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877
https://github.com/psi4/psi4/issues/1877:929,Availability,error,error,929,"For historical reasons, Mk-MRCC was only implemented in Psi4 assuming small active spaces, and `psimrcc` rightly gives you [two](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L114-L124) [warnings](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L130-L143) that the equations it is using are not the exact Mk-MRCC equations if your active space is any larger. If you use Mk-MRPT2, the first warning fires, but the second does not. Further, the error message is specific to Mk-MRCC and says nothing about Mk-MRPT2. Is the Mk-MRPT2 procedure implemented in `psimrcc` exact or approximate? If it's exact, we need to stop the first warning from firing for Mk-MRPT2. If it's approximate, we need to make sure the second warning does fire for Mk-MRPT2. I checked the original paper, but couldn't find a clear statement either way, and I'd rather not learn Mk-MRCC theory just to fix this error message. I'm going to get back to giving `psimrcc` a wavefunction, so I'll fix this as part of that PR. I need to touch this part of the logic anyways. @fevangelista? @andysim?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877
https://github.com/psi4/psi4/issues/1877:497,Integrability,message,message,497,"For historical reasons, Mk-MRCC was only implemented in Psi4 assuming small active spaces, and `psimrcc` rightly gives you [two](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L114-L124) [warnings](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L130-L143) that the equations it is using are not the exact Mk-MRCC equations if your active space is any larger. If you use Mk-MRPT2, the first warning fires, but the second does not. Further, the error message is specific to Mk-MRCC and says nothing about Mk-MRPT2. Is the Mk-MRPT2 procedure implemented in `psimrcc` exact or approximate? If it's exact, we need to stop the first warning from firing for Mk-MRPT2. If it's approximate, we need to make sure the second warning does fire for Mk-MRPT2. I checked the original paper, but couldn't find a clear statement either way, and I'd rather not learn Mk-MRCC theory just to fix this error message. I'm going to get back to giving `psimrcc` a wavefunction, so I'll fix this as part of that PR. I need to touch this part of the logic anyways. @fevangelista? @andysim?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877
https://github.com/psi4/psi4/issues/1877:935,Integrability,message,message,935,"For historical reasons, Mk-MRCC was only implemented in Psi4 assuming small active spaces, and `psimrcc` rightly gives you [two](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L114-L124) [warnings](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L130-L143) that the equations it is using are not the exact Mk-MRCC equations if your active space is any larger. If you use Mk-MRPT2, the first warning fires, but the second does not. Further, the error message is specific to Mk-MRCC and says nothing about Mk-MRPT2. Is the Mk-MRPT2 procedure implemented in `psimrcc` exact or approximate? If it's exact, we need to stop the first warning from firing for Mk-MRPT2. If it's approximate, we need to make sure the second warning does fire for Mk-MRPT2. I checked the original paper, but couldn't find a clear statement either way, and I'd rather not learn Mk-MRCC theory just to fix this error message. I'm going to get back to giving `psimrcc` a wavefunction, so I'll fix this as part of that PR. I need to touch this part of the logic anyways. @fevangelista? @andysim?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877
https://github.com/psi4/psi4/issues/1877:1072,Testability,log,logic,1072,"For historical reasons, Mk-MRCC was only implemented in Psi4 assuming small active spaces, and `psimrcc` rightly gives you [two](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L114-L124) [warnings](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L130-L143) that the equations it is using are not the exact Mk-MRCC equations if your active space is any larger. If you use Mk-MRPT2, the first warning fires, but the second does not. Further, the error message is specific to Mk-MRCC and says nothing about Mk-MRPT2. Is the Mk-MRPT2 procedure implemented in `psimrcc` exact or approximate? If it's exact, we need to stop the first warning from firing for Mk-MRPT2. If it's approximate, we need to make sure the second warning does fire for Mk-MRPT2. I checked the original paper, but couldn't find a clear statement either way, and I'd rather not learn Mk-MRCC theory just to fix this error message. I'm going to get back to giving `psimrcc` a wavefunction, so I'll fix this as part of that PR. I need to touch this part of the logic anyways. @fevangelista? @andysim?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877
https://github.com/psi4/psi4/issues/1877:844,Usability,clear,clear,844,"For historical reasons, Mk-MRCC was only implemented in Psi4 assuming small active spaces, and `psimrcc` rightly gives you [two](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L114-L124) [warnings](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L130-L143) that the equations it is using are not the exact Mk-MRCC equations if your active space is any larger. If you use Mk-MRPT2, the first warning fires, but the second does not. Further, the error message is specific to Mk-MRCC and says nothing about Mk-MRPT2. Is the Mk-MRPT2 procedure implemented in `psimrcc` exact or approximate? If it's exact, we need to stop the first warning from firing for Mk-MRPT2. If it's approximate, we need to make sure the second warning does fire for Mk-MRPT2. I checked the original paper, but couldn't find a clear statement either way, and I'd rather not learn Mk-MRCC theory just to fix this error message. I'm going to get back to giving `psimrcc` a wavefunction, so I'll fix this as part of that PR. I need to touch this part of the logic anyways. @fevangelista? @andysim?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877
https://github.com/psi4/psi4/issues/1877:891,Usability,learn,learn,891,"For historical reasons, Mk-MRCC was only implemented in Psi4 assuming small active spaces, and `psimrcc` rightly gives you [two](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L114-L124) [warnings](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L130-L143) that the equations it is using are not the exact Mk-MRCC equations if your active space is any larger. If you use Mk-MRPT2, the first warning fires, but the second does not. Further, the error message is specific to Mk-MRCC and says nothing about Mk-MRPT2. Is the Mk-MRPT2 procedure implemented in `psimrcc` exact or approximate? If it's exact, we need to stop the first warning from firing for Mk-MRPT2. If it's approximate, we need to make sure the second warning does fire for Mk-MRPT2. I checked the original paper, but couldn't find a clear statement either way, and I'd rather not learn Mk-MRCC theory just to fix this error message. I'm going to get back to giving `psimrcc` a wavefunction, so I'll fix this as part of that PR. I need to touch this part of the logic anyways. @fevangelista? @andysim?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1877
https://github.com/psi4/psi4/issues/1878:194,Deployability,release,release,194,"Hi,. I am now using the developer version 1.4a2.dev215, and I realized that some of my calculation are not giving the same results as before. I asked someone to do the same calculation with the release version of psi4 and we indeed have something really different. We did H4, square shape. I enclose the output of both files. Note that this was done with the OpenFermion-Psi4 interface and the output contains HF, CISD, FCI and CCSD calculations. I do not see any difference in the settings, so I don't understand why I get wrong HF energy for instance. Can anyone see something or knows something about it ?. [version_1.4a2.dev215.txt](https://github.com/psi4/psi4/files/4579640/version_1.4a2.dev215.txt); [release_1.3.2.txt](https://github.com/psi4/psi4/files/4579639/release_1.3.2.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1878
https://github.com/psi4/psi4/issues/1878:533,Energy Efficiency,energy,energy,533,"Hi,. I am now using the developer version 1.4a2.dev215, and I realized that some of my calculation are not giving the same results as before. I asked someone to do the same calculation with the release version of psi4 and we indeed have something really different. We did H4, square shape. I enclose the output of both files. Note that this was done with the OpenFermion-Psi4 interface and the output contains HF, CISD, FCI and CCSD calculations. I do not see any difference in the settings, so I don't understand why I get wrong HF energy for instance. Can anyone see something or knows something about it ?. [version_1.4a2.dev215.txt](https://github.com/psi4/psi4/files/4579640/version_1.4a2.dev215.txt); [release_1.3.2.txt](https://github.com/psi4/psi4/files/4579639/release_1.3.2.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1878
https://github.com/psi4/psi4/issues/1878:376,Integrability,interface,interface,376,"Hi,. I am now using the developer version 1.4a2.dev215, and I realized that some of my calculation are not giving the same results as before. I asked someone to do the same calculation with the release version of psi4 and we indeed have something really different. We did H4, square shape. I enclose the output of both files. Note that this was done with the OpenFermion-Psi4 interface and the output contains HF, CISD, FCI and CCSD calculations. I do not see any difference in the settings, so I don't understand why I get wrong HF energy for instance. Can anyone see something or knows something about it ?. [version_1.4a2.dev215.txt](https://github.com/psi4/psi4/files/4579640/version_1.4a2.dev215.txt); [release_1.3.2.txt](https://github.com/psi4/psi4/files/4579639/release_1.3.2.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1878
https://github.com/psi4/psi4/pull/1879:470,Modifiability,refactor,refactor,470,"## Description; This PR eliminates the old debugging and timer system from `psimrcc`. All debugger code is gone for good, since we have `lldb` and such nowadays. All timer code now uses the more standard `libqt` timer system. This eliminates two globals from psimrcc and several hundreds of lines of code. This also eliminates some functions that were never completely coded. They had no reason to be in the code. This is part of the yak shaving needed for the gradient refactor. Yes, seriously. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated `psimrcc` globals and standardized timer behavior. ## Checklist; - [x] `ctest -R psimrcc -j4` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1879
https://github.com/psi4/psi4/pull/1880:52,Testability,Test,Tests,52,## Description; Resolves #1876. ## Checklist; - [x] Tests added for any new features into `dft-custom`; - [x] `ctest -L dft` and `ctest -R castup` both pass fine. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1880
https://github.com/psi4/psi4/issues/1881:1093,Energy Efficiency,energy,energy,1093,"I would expect the two attached calculations to give the same result but they don't. The difference is that in one input, the geometry is in angstroms, while in the other the same geometry is specified in Bohr. Somehow, the term `Additional nuclear repulsion` is computed very differently:. ```; $ grep ""nuclear"" */psi4.out; case1/psi4.out: Old nuclear repulsion = 0.529177210670000; case1/psi4.out: Additional nuclear repulsion = 0.330403525088017; case1/psi4.out: Total nuclear repulsion = 0.859580735758017; case2/psi4.out: Old nuclear repulsion = 0.529177525830478; case2/psi4.out: Additional nuclear repulsion = 0.793766288745717; case2/psi4.out: Total nuclear repulsion = 1.322943814576195; ```. In- and outputs attached: [cases.zip](https://github.com/psi4/psi4/files/4586584/cases.zip). Input files for convenience:. `case1/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. `case2/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.889725; units bohr; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. The results for `case2` seem correct while `case1` seems wrong. In both cases, the output mentions the same position of the external charge in atomic untis:. `case1/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```. `case2/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881
https://github.com/psi4/psi4/issues/1881:1382,Energy Efficiency,energy,energy,1382,"I would expect the two attached calculations to give the same result but they don't. The difference is that in one input, the geometry is in angstroms, while in the other the same geometry is specified in Bohr. Somehow, the term `Additional nuclear repulsion` is computed very differently:. ```; $ grep ""nuclear"" */psi4.out; case1/psi4.out: Old nuclear repulsion = 0.529177210670000; case1/psi4.out: Additional nuclear repulsion = 0.330403525088017; case1/psi4.out: Total nuclear repulsion = 0.859580735758017; case2/psi4.out: Old nuclear repulsion = 0.529177525830478; case2/psi4.out: Additional nuclear repulsion = 0.793766288745717; case2/psi4.out: Total nuclear repulsion = 1.322943814576195; ```. In- and outputs attached: [cases.zip](https://github.com/psi4/psi4/files/4586584/cases.zip). Input files for convenience:. `case1/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. `case2/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.889725; units bohr; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. The results for `case2` seem correct while `case1` seems wrong. In both cases, the output mentions the same position of the external charge in atomic untis:. `case1/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```. `case2/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881
https://github.com/psi4/psi4/issues/1881:1535,Energy Efficiency,charge,charge,1535,"I would expect the two attached calculations to give the same result but they don't. The difference is that in one input, the geometry is in angstroms, while in the other the same geometry is specified in Bohr. Somehow, the term `Additional nuclear repulsion` is computed very differently:. ```; $ grep ""nuclear"" */psi4.out; case1/psi4.out: Old nuclear repulsion = 0.529177210670000; case1/psi4.out: Additional nuclear repulsion = 0.330403525088017; case1/psi4.out: Total nuclear repulsion = 0.859580735758017; case2/psi4.out: Old nuclear repulsion = 0.529177525830478; case2/psi4.out: Additional nuclear repulsion = 0.793766288745717; case2/psi4.out: Total nuclear repulsion = 1.322943814576195; ```. In- and outputs attached: [cases.zip](https://github.com/psi4/psi4/files/4586584/cases.zip). Input files for convenience:. `case1/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. `case2/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.889725; units bohr; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. The results for `case2` seem correct while `case1` seems wrong. In both cases, the output mentions the same position of the external charge in atomic untis:. `case1/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```. `case2/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881
https://github.com/psi4/psi4/issues/1881:1624,Energy Efficiency,Charge,Charges,1624,"I would expect the two attached calculations to give the same result but they don't. The difference is that in one input, the geometry is in angstroms, while in the other the same geometry is specified in Bohr. Somehow, the term `Additional nuclear repulsion` is computed very differently:. ```; $ grep ""nuclear"" */psi4.out; case1/psi4.out: Old nuclear repulsion = 0.529177210670000; case1/psi4.out: Additional nuclear repulsion = 0.330403525088017; case1/psi4.out: Total nuclear repulsion = 0.859580735758017; case2/psi4.out: Old nuclear repulsion = 0.529177525830478; case2/psi4.out: Additional nuclear repulsion = 0.793766288745717; case2/psi4.out: Total nuclear repulsion = 1.322943814576195; ```. In- and outputs attached: [cases.zip](https://github.com/psi4/psi4/files/4586584/cases.zip). Input files for convenience:. `case1/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. `case2/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.889725; units bohr; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. The results for `case2` seem correct while `case1` seems wrong. In both cases, the output mentions the same position of the external charge in atomic untis:. `case1/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```. `case2/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881
https://github.com/psi4/psi4/issues/1881:1759,Energy Efficiency,Charge,Charges,1759,"I would expect the two attached calculations to give the same result but they don't. The difference is that in one input, the geometry is in angstroms, while in the other the same geometry is specified in Bohr. Somehow, the term `Additional nuclear repulsion` is computed very differently:. ```; $ grep ""nuclear"" */psi4.out; case1/psi4.out: Old nuclear repulsion = 0.529177210670000; case1/psi4.out: Additional nuclear repulsion = 0.330403525088017; case1/psi4.out: Total nuclear repulsion = 0.859580735758017; case2/psi4.out: Old nuclear repulsion = 0.529177525830478; case2/psi4.out: Additional nuclear repulsion = 0.793766288745717; case2/psi4.out: Total nuclear repulsion = 1.322943814576195; ```. In- and outputs attached: [cases.zip](https://github.com/psi4/psi4/files/4586584/cases.zip). Input files for convenience:. `case1/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. `case2/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.889725; units bohr; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. The results for `case2` seem correct while `case1` seems wrong. In both cases, the output mentions the same position of the external charge in atomic untis:. `case1/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```. `case2/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1881
https://github.com/psi4/psi4/pull/1882:28,Deployability,Update,Updated,28,## Description/Todos; - [x] Updated documentation for the `Ca_subset` and `Cb_subset` functions to explicitly show the accepted argument values. ## Checklist; - [x] Built the docs. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1882
https://github.com/psi4/psi4/pull/1884:631,Availability,avail,available,631,"## Description; Tries to set the correct density label and solves some bugs with writing the incorrect densities. Relates issue: #1272 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] deducts density label (`|SCF|MP2|CC|CI|DCT`) for the FCHK file from the method.; - [x] allows PSI4 method names as density label with option `strict_label=False`; - [x] related issue [1886](https://github.com/psi4/psi4/issues/1886) is handled within the FCHK driver.; - [x] new pytests for FCHK files that check if the correct SCF density and SCF orbital coefficients is set.; - [x] No densities available from `occ` gradients. FCHK driver exists with a warning.; - [x] DCT, DFOCC densities available; - [x] exposes `Vector.copy()` to python; - [x] better ECP support. Fixes #2021.; - [x] adds a 'compare_fchkfiles` function. ## Checklist; - [x] docs changed to reflect that the high-level `fchk()` should be called (instead of `FCHKWriter()` directly); - [x] new test passes; - [x] manual inspect of various fchk files using this (ugly) script: https://gist.github.com/hokru/f1b00a87665ac345415b4ad3e0006f1d. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884
https://github.com/psi4/psi4/pull/1884:726,Availability,avail,available,726,"## Description; Tries to set the correct density label and solves some bugs with writing the incorrect densities. Relates issue: #1272 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] deducts density label (`|SCF|MP2|CC|CI|DCT`) for the FCHK file from the method.; - [x] allows PSI4 method names as density label with option `strict_label=False`; - [x] related issue [1886](https://github.com/psi4/psi4/issues/1886) is handled within the FCHK driver.; - [x] new pytests for FCHK files that check if the correct SCF density and SCF orbital coefficients is set.; - [x] No densities available from `occ` gradients. FCHK driver exists with a warning.; - [x] DCT, DFOCC densities available; - [x] exposes `Vector.copy()` to python; - [x] better ECP support. Fixes #2021.; - [x] adds a 'compare_fchkfiles` function. ## Checklist; - [x] docs changed to reflect that the high-level `fchk()` should be called (instead of `FCHKWriter()` directly); - [x] new test passes; - [x] manual inspect of various fchk files using this (ugly) script: https://gist.github.com/hokru/f1b00a87665ac345415b4ad3e0006f1d. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884
https://github.com/psi4/psi4/pull/1884:743,Security,expose,exposes,743,"## Description; Tries to set the correct density label and solves some bugs with writing the incorrect densities. Relates issue: #1272 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] deducts density label (`|SCF|MP2|CC|CI|DCT`) for the FCHK file from the method.; - [x] allows PSI4 method names as density label with option `strict_label=False`; - [x] related issue [1886](https://github.com/psi4/psi4/issues/1886) is handled within the FCHK driver.; - [x] new pytests for FCHK files that check if the correct SCF density and SCF orbital coefficients is set.; - [x] No densities available from `occ` gradients. FCHK driver exists with a warning.; - [x] DCT, DFOCC densities available; - [x] exposes `Vector.copy()` to python; - [x] better ECP support. Fixes #2021.; - [x] adds a 'compare_fchkfiles` function. ## Checklist; - [x] docs changed to reflect that the high-level `fchk()` should be called (instead of `FCHKWriter()` directly); - [x] new test passes; - [x] manual inspect of various fchk files using this (ugly) script: https://gist.github.com/hokru/f1b00a87665ac345415b4ad3e0006f1d. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884
https://github.com/psi4/psi4/pull/1884:999,Testability,test,test,999,"## Description; Tries to set the correct density label and solves some bugs with writing the incorrect densities. Relates issue: #1272 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] deducts density label (`|SCF|MP2|CC|CI|DCT`) for the FCHK file from the method.; - [x] allows PSI4 method names as density label with option `strict_label=False`; - [x] related issue [1886](https://github.com/psi4/psi4/issues/1886) is handled within the FCHK driver.; - [x] new pytests for FCHK files that check if the correct SCF density and SCF orbital coefficients is set.; - [x] No densities available from `occ` gradients. FCHK driver exists with a warning.; - [x] DCT, DFOCC densities available; - [x] exposes `Vector.copy()` to python; - [x] better ECP support. Fixes #2021.; - [x] adds a 'compare_fchkfiles` function. ## Checklist; - [x] docs changed to reflect that the high-level `fchk()` should be called (instead of `FCHKWriter()` directly); - [x] new test passes; - [x] manual inspect of various fchk files using this (ugly) script: https://gist.github.com/hokru/f1b00a87665ac345415b4ad3e0006f1d. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1884
https://github.com/psi4/psi4/pull/1885:252,Testability,test,tests,252,"## Description; Allows TDSCF code to be called from any SCF (HF,DFT) computation. . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Implement functions in proc.py; - [X] Add options handling; - [x] Add tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1885
https://github.com/psi4/psi4/issues/1886:524,Testability,test,test,524,"RHF DF-MP2 gradient calculations with the `dfmp2` module will replace the SCF orbital data on the wavefunction objects with MP2 natural orbitals and NO occupations.; This is the default for RHF calculations with `gradient('mp2')`. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L2368-L2388. This is undocumented and atypical behaviour compared to other modules.; It is also a good idea to preserve the SCF orbital data. @JonathonMisiewicz suggested a NO specific entry on the `dfmp2` wavefunction. ---; test script. ```; import psi4; import numpy as np. def run_psi4fchk(geom,method):; e, wfn = psi4.gradient(method, return_wfn=True,mol=geom); print(f""Ca_ao of {method}: \n"",wfn.Ca_subset(""AO"",""ALL"").np); return 0. psi4.set_output_file(""output.dat"", False); geom_rhf = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; """"""). psi4.set_options({; ""SCF_TYPE"": ""DF"",; ""BASIS"": ""minix"",; ""df_basis_dct"":""def2-svp-ri"",; ""dct_type"":""DF"",; ""cc_type"":""conv"",; ""df_basis_scf"":""def2-universal-jkfit"",; # ""reference"":""uhf"",; # 'scf_type':'pk',; 'mp2_type':'df',; }). to_test=['scf','mp2']; for m in to_test[:]:; psi4.activate(geom_rhf); run_psi4fchk(geom_rhf,m.upper()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1886
https://github.com/psi4/psi4/issues/1886:320,Usability,undo,undocumented,320,"RHF DF-MP2 gradient calculations with the `dfmp2` module will replace the SCF orbital data on the wavefunction objects with MP2 natural orbitals and NO occupations.; This is the default for RHF calculations with `gradient('mp2')`. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L2368-L2388. This is undocumented and atypical behaviour compared to other modules.; It is also a good idea to preserve the SCF orbital data. @JonathonMisiewicz suggested a NO specific entry on the `dfmp2` wavefunction. ---; test script. ```; import psi4; import numpy as np. def run_psi4fchk(geom,method):; e, wfn = psi4.gradient(method, return_wfn=True,mol=geom); print(f""Ca_ao of {method}: \n"",wfn.Ca_subset(""AO"",""ALL"").np); return 0. psi4.set_output_file(""output.dat"", False); geom_rhf = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; """"""). psi4.set_options({; ""SCF_TYPE"": ""DF"",; ""BASIS"": ""minix"",; ""df_basis_dct"":""def2-svp-ri"",; ""dct_type"":""DF"",; ""cc_type"":""conv"",; ""df_basis_scf"":""def2-universal-jkfit"",; # ""reference"":""uhf"",; # 'scf_type':'pk',; 'mp2_type':'df',; }). to_test=['scf','mp2']; for m in to_test[:]:; psi4.activate(geom_rhf); run_psi4fchk(geom_rhf,m.upper()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1886
https://github.com/psi4/psi4/pull/1887:47,Availability,fault,fault,47,## Description; This PR fixes the segmentation fault of `CCEnergyWavefunction::rotation()` when there are frozen virtual orbitals. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1887
https://github.com/psi4/psi4/pull/1887:151,Testability,Test,Tests,151,## Description; This PR fixes the segmentation fault of `CCEnergyWavefunction::rotation()` when there are frozen virtual orbitals. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1887
https://github.com/psi4/psi4/pull/1887:225,Testability,test,tests,225,## Description; This PR fixes the segmentation fault of `CCEnergyWavefunction::rotation()` when there are frozen virtual orbitals. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1887
https://github.com/psi4/psi4/pull/1887:316,Testability,test,tests,316,## Description; This PR fixes the segmentation fault of `CCEnergyWavefunction::rotation()` when there are frozen virtual orbitals. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1887
https://github.com/psi4/psi4/issues/1888:115,Availability,avail,available,115,link: http://forum.psicode.org/t/compute-property-at-given-3d-coordinates/1781. The basic functionality is already available in the ESP code: https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1015,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1888
https://github.com/psi4/psi4/pull/1889:162,Performance,load,loader,162,"## Description; To ward off tampering with editable python files in distributed psi4, add build option to compile each python file into its own `.so`. The python loader, in its beneficence, doesn't care whether files are .py or .so, so long as they're in the right spot in the filesys. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `ENABLE_CYTHONIZE` build option to invoke; - [x] presently compiling most python files but not those that are a bother or repeat library names (qcdb, util), those that have references to missing objects, or the `__init__.py` files (need a better lib naming system), or the top-level py files (psi4/__init__.py, extras, header).; - [x] this is a crude cmake hookup. could be consolidated into a fn, and need to `rm -rf stage/lib/psi4/driver` to trigger total rebuild upon changing any py file.; - [x] corrected various missing imports and non-existing objects that compilation notices. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1889
https://github.com/psi4/psi4/pull/1889:993,Testability,Test,Tests,993,"## Description; To ward off tampering with editable python files in distributed psi4, add build option to compile each python file into its own `.so`. The python loader, in its beneficence, doesn't care whether files are .py or .so, so long as they're in the right spot in the filesys. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `ENABLE_CYTHONIZE` build option to invoke; - [x] presently compiling most python files but not those that are a bother or repeat library names (qcdb, util), those that have references to missing objects, or the `__init__.py` files (need a better lib naming system), or the top-level py files (psi4/__init__.py, extras, header).; - [x] this is a crude cmake hookup. could be consolidated into a fn, and need to `rm -rf stage/lib/psi4/driver` to trigger total rebuild upon changing any py file.; - [x] corrected various missing imports and non-existing objects that compilation notices. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1889
https://github.com/psi4/psi4/pull/1889:1067,Testability,test,tests,1067,"## Description; To ward off tampering with editable python files in distributed psi4, add build option to compile each python file into its own `.so`. The python loader, in its beneficence, doesn't care whether files are .py or .so, so long as they're in the right spot in the filesys. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `ENABLE_CYTHONIZE` build option to invoke; - [x] presently compiling most python files but not those that are a bother or repeat library names (qcdb, util), those that have references to missing objects, or the `__init__.py` files (need a better lib naming system), or the top-level py files (psi4/__init__.py, extras, header).; - [x] this is a crude cmake hookup. could be consolidated into a fn, and need to `rm -rf stage/lib/psi4/driver` to trigger total rebuild upon changing any py file.; - [x] corrected various missing imports and non-existing objects that compilation notices. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1889
https://github.com/psi4/psi4/pull/1889:1158,Testability,test,tests,1158,"## Description; To ward off tampering with editable python files in distributed psi4, add build option to compile each python file into its own `.so`. The python loader, in its beneficence, doesn't care whether files are .py or .so, so long as they're in the right spot in the filesys. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `ENABLE_CYTHONIZE` build option to invoke; - [x] presently compiling most python files but not those that are a bother or repeat library names (qcdb, util), those that have references to missing objects, or the `__init__.py` files (need a better lib naming system), or the top-level py files (psi4/__init__.py, extras, header).; - [x] this is a crude cmake hookup. could be consolidated into a fn, and need to `rm -rf stage/lib/psi4/driver` to trigger total rebuild upon changing any py file.; - [x] corrected various missing imports and non-existing objects that compilation notices. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1889
https://github.com/psi4/psi4/issues/1890:586,Modifiability,variab,variable,586,Carried forward from [forum post](http://forum.psicode.org/t/calculating-transition-and-state-density-matrices-and-dipole-moment-matrices/1784). The API to get transition density matrix elements out of a `detci` computation currently fails unless the first state is zero. This is [not expected behavior](https://github.com/psi4/psi4/issues/1638#issuecomment-489080431). Doing `grep` for a minute leads me to think the culprit is [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/opdm.cc#L113-L117). This looks like an extremely easy fix: just loop over another variable to change the first element in the tuple as well. Can a developer more experienced in the ways of `detci` (probably @dgasmith) confirm this?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1890
https://github.com/psi4/psi4/pull/1891:1067,Energy Efficiency,energy,energy,1067,"## Description; On Python 3.8.2, I was getting the following warnings; ```; /usr/lib/psi4/driver/qcdb/modelchems.py:95: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:148: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:170: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:192: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/procrouting/proc.py:1249: SyntaxWarning: ""is"" with a literal. Did you mean ""==""?; read_orbitals = core.get_option('SCF', 'GUESS') is ""READ""; ```; after running something like ; ```; #! Sample HF/cc-pVDZ H2O Computation; import psi4; psi4.set_memory('500 MB'). h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy('scf/cc-pvdz'); ```. It looked like two simple fixes. The string formatting was missing a `%` and the comparison could be replaced by `==`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fewer warnings. ## Questions; - [ ] Does this need a test?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1891
https://github.com/psi4/psi4/pull/1891:1365,Testability,test,test,1365,"## Description; On Python 3.8.2, I was getting the following warnings; ```; /usr/lib/psi4/driver/qcdb/modelchems.py:95: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:148: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:170: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:192: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/procrouting/proc.py:1249: SyntaxWarning: ""is"" with a literal. Did you mean ""==""?; read_orbitals = core.get_option('SCF', 'GUESS') is ""READ""; ```; after running something like ; ```; #! Sample HF/cc-pVDZ H2O Computation; import psi4; psi4.set_memory('500 MB'). h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy('scf/cc-pvdz'); ```. It looked like two simple fixes. The string formatting was missing a `%` and the comparison could be replaced by `==`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fewer warnings. ## Questions; - [ ] Does this need a test?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1891
https://github.com/psi4/psi4/pull/1891:1392,Testability,Test,Tests,1392,"## Description; On Python 3.8.2, I was getting the following warnings; ```; /usr/lib/psi4/driver/qcdb/modelchems.py:95: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:148: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:170: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:192: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/procrouting/proc.py:1249: SyntaxWarning: ""is"" with a literal. Did you mean ""==""?; read_orbitals = core.get_option('SCF', 'GUESS') is ""READ""; ```; after running something like ; ```; #! Sample HF/cc-pVDZ H2O Computation; import psi4; psi4.set_memory('500 MB'). h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy('scf/cc-pvdz'); ```. It looked like two simple fixes. The string formatting was missing a `%` and the comparison could be replaced by `==`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fewer warnings. ## Questions; - [ ] Does this need a test?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1891
https://github.com/psi4/psi4/pull/1891:1466,Testability,test,tests,1466,"## Description; On Python 3.8.2, I was getting the following warnings; ```; /usr/lib/psi4/driver/qcdb/modelchems.py:95: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:148: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:170: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:192: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/procrouting/proc.py:1249: SyntaxWarning: ""is"" with a literal. Did you mean ""==""?; read_orbitals = core.get_option('SCF', 'GUESS') is ""READ""; ```; after running something like ; ```; #! Sample HF/cc-pVDZ H2O Computation; import psi4; psi4.set_memory('500 MB'). h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy('scf/cc-pvdz'); ```. It looked like two simple fixes. The string formatting was missing a `%` and the comparison could be replaced by `==`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fewer warnings. ## Questions; - [ ] Does this need a test?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1891
https://github.com/psi4/psi4/pull/1891:1557,Testability,test,tests,1557,"## Description; On Python 3.8.2, I was getting the following warnings; ```; /usr/lib/psi4/driver/qcdb/modelchems.py:95: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:148: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:170: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:192: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/procrouting/proc.py:1249: SyntaxWarning: ""is"" with a literal. Did you mean ""==""?; read_orbitals = core.get_option('SCF', 'GUESS') is ""READ""; ```; after running something like ; ```; #! Sample HF/cc-pVDZ H2O Computation; import psi4; psi4.set_memory('500 MB'). h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy('scf/cc-pvdz'); ```. It looked like two simple fixes. The string formatting was missing a `%` and the comparison could be replaced by `==`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fewer warnings. ## Questions; - [ ] Does this need a test?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1891
https://github.com/psi4/psi4/pull/1891:1114,Usability,simpl,simple,1114,"## Description; On Python 3.8.2, I was getting the following warnings; ```; /usr/lib/psi4/driver/qcdb/modelchems.py:95: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:148: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:170: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/qcdb/modelchems.py:192: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?; text += """""" %17s: %s\n"""""" (rol, cit.doi); /usr/lib/psi4/driver/procrouting/proc.py:1249: SyntaxWarning: ""is"" with a literal. Did you mean ""==""?; read_orbitals = core.get_option('SCF', 'GUESS') is ""READ""; ```; after running something like ; ```; #! Sample HF/cc-pVDZ H2O Computation; import psi4; psi4.set_memory('500 MB'). h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy('scf/cc-pvdz'); ```. It looked like two simple fixes. The string formatting was missing a `%` and the comparison could be replaced by `==`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fewer warnings. ## Questions; - [ ] Does this need a test?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1891
https://github.com/psi4/psi4/pull/1892:74,Availability,avail,available,74,"## Description; Add rotational strength as new property, which has become available in adcc 0.14.3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Rotational strength for all ADC methods from adcc; - [x] Velocity gauge for oscillator strength. ## Questions; - [x] Adcc now allows oscillator strengths to be computed in both velocity and length gauge. What is the canonical way to expose this in Psi4?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1892
https://github.com/psi4/psi4/pull/1892:431,Security,expose,expose,431,"## Description; Add rotational strength as new property, which has become available in adcc 0.14.3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Rotational strength for all ADC methods from adcc; - [x] Velocity gauge for oscillator strength. ## Questions; - [x] Adcc now allows oscillator strengths to be computed in both velocity and length gauge. What is the canonical way to expose this in Psi4?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1892
https://github.com/psi4/psi4/pull/1892:473,Testability,Test,Tests,473,"## Description; Add rotational strength as new property, which has become available in adcc 0.14.3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Rotational strength for all ADC methods from adcc; - [x] Velocity gauge for oscillator strength. ## Questions; - [x] Adcc now allows oscillator strengths to be computed in both velocity and length gauge. What is the canonical way to expose this in Psi4?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1892
https://github.com/psi4/psi4/pull/1892:547,Testability,test,tests,547,"## Description; Add rotational strength as new property, which has become available in adcc 0.14.3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Rotational strength for all ADC methods from adcc; - [x] Velocity gauge for oscillator strength. ## Questions; - [x] Adcc now allows oscillator strengths to be computed in both velocity and length gauge. What is the canonical way to expose this in Psi4?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1892
https://github.com/psi4/psi4/pull/1892:638,Testability,test,tests,638,"## Description; Add rotational strength as new property, which has become available in adcc 0.14.3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Rotational strength for all ADC methods from adcc; - [x] Velocity gauge for oscillator strength. ## Questions; - [x] Adcc now allows oscillator strengths to be computed in both velocity and length gauge. What is the canonical way to expose this in Psi4?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1892
https://github.com/psi4/psi4/pull/1893:180,Availability,avail,available,180,"## Description; Added core BrianQC functionality; - psi4 can now be compiled with the USING_BrianQC switch; - when compiled with BrianQC, several operations can be computed on the available GPUs through the BrianQC module, including Fock building and diagonalization. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1893
https://github.com/psi4/psi4/pull/1895:637,Testability,test,test,637,"## Description; Adds capabilities for overlap half-derivative integrals and exports them to Python side for use in calculating VCD. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds `.def(""ao_overlap_half_deriv1"")` and `.def(""mo_overlap_half_deriv1"")` binding to `psi4/src/export_mints.cc`; - [x] Adds `ao_overlap_half_deriv1()` and `mo_overlap_half_deriv1()` definition/declaration to `psi4/src/psi4/libmints/mintshelper.cc(h)`; - [x] Adds `ao_overlap_half_deriv1_helper()` helper function to `psi4/src/psi4/libmints/mintshelper.cc(h)`. ## Questions; - None. ## Checklist; - [x] Add test in `/tests/pytests/test_mints.py`; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1895
https://github.com/psi4/psi4/pull/1895:647,Testability,test,tests,647,"## Description; Adds capabilities for overlap half-derivative integrals and exports them to Python side for use in calculating VCD. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds `.def(""ao_overlap_half_deriv1"")` and `.def(""mo_overlap_half_deriv1"")` binding to `psi4/src/export_mints.cc`; - [x] Adds `ao_overlap_half_deriv1()` and `mo_overlap_half_deriv1()` definition/declaration to `psi4/src/psi4/libmints/mintshelper.cc(h)`; - [x] Adds `ao_overlap_half_deriv1_helper()` helper function to `psi4/src/psi4/libmints/mintshelper.cc(h)`. ## Questions; - None. ## Checklist; - [x] Add test in `/tests/pytests/test_mints.py`; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1895
https://github.com/psi4/psi4/pull/1895:717,Testability,test,tests,717,"## Description; Adds capabilities for overlap half-derivative integrals and exports them to Python side for use in calculating VCD. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds `.def(""ao_overlap_half_deriv1"")` and `.def(""mo_overlap_half_deriv1"")` binding to `psi4/src/export_mints.cc`; - [x] Adds `ao_overlap_half_deriv1()` and `mo_overlap_half_deriv1()` definition/declaration to `psi4/src/psi4/libmints/mintshelper.cc(h)`; - [x] Adds `ao_overlap_half_deriv1_helper()` helper function to `psi4/src/psi4/libmints/mintshelper.cc(h)`. ## Questions; - None. ## Checklist; - [x] Add test in `/tests/pytests/test_mints.py`; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1895
https://github.com/psi4/psi4/pull/1895:808,Testability,test,tests,808,"## Description; Adds capabilities for overlap half-derivative integrals and exports them to Python side for use in calculating VCD. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds `.def(""ao_overlap_half_deriv1"")` and `.def(""mo_overlap_half_deriv1"")` binding to `psi4/src/export_mints.cc`; - [x] Adds `ao_overlap_half_deriv1()` and `mo_overlap_half_deriv1()` definition/declaration to `psi4/src/psi4/libmints/mintshelper.cc(h)`; - [x] Adds `ao_overlap_half_deriv1_helper()` helper function to `psi4/src/psi4/libmints/mintshelper.cc(h)`. ## Questions; - None. ## Checklist; - [x] Add test in `/tests/pytests/test_mints.py`; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1895
https://github.com/psi4/psi4/pull/1896:138,Availability,toler,tolerance,138,"## Description; MKL 2020.1 often selects a different basis fn set than 2019.4 or 2020.0, so answers often differ by 1.14e-8. This relaxes tolerance to 2.e-8. Alternative is to add `mkl!=2020.1` to `conda create` line, but this would be disruptive to conda packaging. * **Note** A definitive test of above statement that returns to 1.e-8 but bans 2020.1 is running at https://dev.azure.com/psi4/psi4/_build/results?buildId=1969&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a , but I'll get a head start and submit this PR. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896
https://github.com/psi4/psi4/pull/1896:291,Testability,test,test,291,"## Description; MKL 2020.1 often selects a different basis fn set than 2019.4 or 2020.0, so answers often differ by 1.14e-8. This relaxes tolerance to 2.e-8. Alternative is to add `mkl!=2020.1` to `conda create` line, but this would be disruptive to conda packaging. * **Note** A definitive test of above statement that returns to 1.e-8 but bans 2020.1 is running at https://dev.azure.com/psi4/psi4/_build/results?buildId=1969&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a , but I'll get a head start and submit this PR. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896
https://github.com/psi4/psi4/pull/1896:432,Testability,log,logs,432,"## Description; MKL 2020.1 often selects a different basis fn set than 2019.4 or 2020.0, so answers often differ by 1.14e-8. This relaxes tolerance to 2.e-8. Alternative is to add `mkl!=2020.1` to `conda create` line, but this would be disruptive to conda packaging. * **Note** A definitive test of above statement that returns to 1.e-8 but bans 2020.1 is running at https://dev.azure.com/psi4/psi4/_build/results?buildId=1969&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a , but I'll get a head start and submit this PR. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1896
https://github.com/psi4/psi4/issues/1897:3011,Availability,avail,available,3011," heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:463,Deployability,continuous,continuous,463,"I was running the following input as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:303,Energy Efficiency,energy,energy,303,"I was running the following input as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:512,Energy Efficiency,energy,energy,512,"I was running the following input as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:779,Energy Efficiency,Energy,Energy,779,"I was running the following input as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:960,Energy Efficiency,ENERGY,ENERGY,960,"I was running the following input as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:1022,Energy Efficiency,ENERGY,ENERGY,1022," as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:1082,Energy Efficiency,ENERGY,ENERGY,1082,"171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:1144,Energy Efficiency,ENERGY,ENERGY,1144,"0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; --------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:1202,Energy Efficiency,ENERGY,ENERGY,1202,"convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; --------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:1264,Energy Efficiency,ENERGY,ENERGY,1264,"7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:1326,Energy Efficiency,ENERGY,ENERGY,1326," + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. -------------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:1396,Energy Efficiency,ENERGY,ENERGY,1396,"g-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:1658,Energy Efficiency,Energy,Energy,1658,------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-c,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:2383,Energy Efficiency,Energy,Energy,2383,"GY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:2858,Energy Efficiency,energy,energy,2858,"orl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:3330,Energy Efficiency,Energy,Energy,3330,"---------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ----------------------------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:3511,Energy Efficiency,ENERGY,ENERGY,3511,"y-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:3571,Energy Efficiency,ENERGY,ENERGY,3571,"eavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ----------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:3633,Energy Efficiency,ENERGY,ENERGY,3633,"ta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:3693,Energy Efficiency,ENERGY,ENERGY,3693,"ghest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:3755,Energy Efficiency,ENERGY,ENERGY,3755,"------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; cor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:3815,Energy Efficiency,ENERGY,ENERGY,3815,"-----------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_h",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:3875,Energy Efficiency,ENERGY,ENERGY,3875,"f-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:3930,Energy Efficiency,ENERGY,ENERGY,3930,"ch I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:3992,Energy Efficiency,ENERGY,ENERGY,3992,"-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; -------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:4051,Energy Efficiency,ENERGY,ENERGY,4051," doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; ----------------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:4121,Energy Efficiency,ENERGY,ENERGY,4121,"e, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. -------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:4176,Energy Efficiency,ENERGY,ENERGY,4176, summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. --------------------------------------------------------------------------------------------,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:4238,Energy Efficiency,ENERGY,ENERGY,4238,------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; -----------------------------------------,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:4500,Energy Efficiency,Energy,Energy,4500,Y; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-c,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:5225,Energy Efficiency,Energy,Energy,5225,GY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00160622 xtpl_highest_1; total CBS -150.20089375; ---------------------------------------------------------------------------------------------------------; ```; Which as an aside does have some weird duplicates like ; ```hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY```. The order is a bit a different but everything does seem to match. But the mp2 energies are not the same. mp2/dz from the singlepoint:. ```delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1```. mp2/dz from the hessian:; ```mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY```. The hessian mp2 energy comes from this df-mp2 calculation. This should be a conventional mp2 calculation afaik; ```; //>>>>>>>>>,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:5800,Energy Efficiency,ENERGY,ENERGY,5800,")z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00160622 xtpl_highest_1; total CBS -150.20089375; ---------------------------------------------------------------------------------------------------------; ```; Which as an aside does have some weird duplicates like ; ```hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY```. The order is a bit a different but everything does seem to match. But the mp2 energies are not the same. mp2/dz from the singlepoint:. ```delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1```. mp2/dz from the hessian:; ```mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY```. The hessian mp2 energy comes from this df-mp2 calculation. This should be a conventional mp2 calculation afaik; ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // DFMP2 //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (HEAVY-AUG-CC-PV(D+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; ----------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:6103,Energy Efficiency,ENERGY,ENERGY,6103,"--------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00160622 xtpl_highest_1; total CBS -150.20089375; ---------------------------------------------------------------------------------------------------------; ```; Which as an aside does have some weird duplicates like ; ```hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY```. The order is a bit a different but everything does seem to match. But the mp2 energies are not the same. mp2/dz from the singlepoint:. ```delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1```. mp2/dz from the hessian:; ```mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY```. The hessian mp2 energy comes from this df-mp2 calculation. This should be a conventional mp2 calculation afaik; ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // DFMP2 //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (HEAVY-AUG-CC-PV(D+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:6130,Energy Efficiency,energy,energy,6130,"------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00160622 xtpl_highest_1; total CBS -150.20089375; ---------------------------------------------------------------------------------------------------------; ```; Which as an aside does have some weird duplicates like ; ```hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY```. The order is a bit a different but everything does seem to match. But the mp2 energies are not the same. mp2/dz from the singlepoint:. ```delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1```. mp2/dz from the hessian:; ```mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY```. The hessian mp2 energy comes from this df-mp2 calculation. This should be a conventional mp2 calculation afaik; ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // DFMP2 //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (HEAVY-AUG-CC-PV(D+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:7271,Energy Efficiency,Energy,Energy,7271,"ld be a conventional mp2 calculation afaik; ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // DFMP2 //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (HEAVY-AUG-CC-PV(D+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradient",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:7316,Energy Efficiency,Energy,Energy,7316,"<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (HEAVY-AUG-CC-PV(D+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:7361,Energy Efficiency,Energy,Energy,7361," Name: (HEAVY-AUG-CC-PV(D+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calcula",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:7410,Energy Efficiency,Energy,Energy,7410,"; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conv",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:7457,Energy Efficiency,Energy,Energy,7457,"208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conventional mp2 without needing to use the explicit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:7498,Energy Efficiency,Energy,Energy,7498,"/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conventional mp2 without needing to use the explicit cbs syntax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:7826,Energy Efficiency,Energy,Energy,7826,"/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conventional mp2 without needing to use the explicit cbs syntax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:7879,Energy Efficiency,Energy,Energy,7879,"/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conventional mp2 without needing to use the explicit cbs syntax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:7930,Energy Efficiency,Energy,Energy,7930,"/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conventional mp2 without needing to use the explicit cbs syntax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:7975,Energy Efficiency,Energy,Energy,7975,"/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conventional mp2 without needing to use the explicit cbs syntax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:791,Modifiability,Variab,Variable,791,"I was running the following input as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:3342,Modifiability,Variab,Variable,3342,"---------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ----------------------------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:3153,Performance,perform,performed,3153," heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:6329,Performance,Load,Loading,6329,"-------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00160622 xtpl_highest_1; total CBS -150.20089375; ---------------------------------------------------------------------------------------------------------; ```; Which as an aside does have some weird duplicates like ; ```hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY```. The order is a bit a different but everything does seem to match. But the mp2 energies are not the same. mp2/dz from the singlepoint:. ```delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1```. mp2/dz from the hessian:; ```mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY```. The hessian mp2 energy comes from this df-mp2 calculation. This should be a conventional mp2 calculation afaik; ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // DFMP2 //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (HEAVY-AUG-CC-PV(D+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:8294,Performance,perform,perform,8294,"/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conventional mp2 without needing to use the explicit cbs syntax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:8386,Performance,perform,perform,8386,"/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conventional mp2 without needing to use the explicit cbs syntax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:39,Testability,test,test,39,"I was running the following input as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1897:637,Testability,test,testing,637,"I was running the following input as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1897
https://github.com/psi4/psi4/issues/1898:84,Deployability,update,update,84,"what needs to happen:. - [x] wait for https://github.com/psi4/psi4/pull/1101; - [ ] update gcp used by PSI4 (I already have Gerrit's new code) (LAB edit: https://github.com/psi4/psi4/pull/2791); - [ ] setup a modified B97 (GGA); - [ ] provide the custom basis set; - [ ] hook up all components. If someone is eager to do this let me know, I can help. Otherwise I'll do it once the libxc5 move is complete.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1898
https://github.com/psi4/psi4/issues/1899:396,Testability,test,test,396,"When calling ; oeprop.cc: 1057 compute_esp_over_grid_in_memory for more than one thread garbage is produced. The reason is most probably that; epot->compute(ints, origin);; is not threadsafe, because it uses a single non thread-local internal buffer. The solution for the moment should be to remove the ; #pragma omp parallel for; in front of this section. I will send a pull request with a unit test in a few seconds, which can be used to reproduce and fix this issue. The unit test will be called python-mints14.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1899
https://github.com/psi4/psi4/issues/1899:479,Testability,test,test,479,"When calling ; oeprop.cc: 1057 compute_esp_over_grid_in_memory for more than one thread garbage is produced. The reason is most probably that; epot->compute(ints, origin);; is not threadsafe, because it uses a single non thread-local internal buffer. The solution for the moment should be to remove the ; #pragma omp parallel for; in front of this section. I will send a pull request with a unit test in a few seconds, which can be used to reproduce and fix this issue. The unit test will be called python-mints14.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1899
https://github.com/psi4/psi4/pull/1900:148,Safety,safe,safe,148,"## Description; This pull request fixes #1899 . Multithreaded computation of the ESP potential was invalid, because a buffer_ object was not thread-safe. This pull request disables multithreaded calculation of the ESP on grid for the moment and also adds a unit test to check.; ## Todos; No Todos, this is really just a trivial disable. ## Questions; No question. ## Checklist; - [X] Tests added for any new features. ; - [X] I ran the libmints tests (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1900
https://github.com/psi4/psi4/pull/1900:262,Testability,test,test,262,"## Description; This pull request fixes #1899 . Multithreaded computation of the ESP potential was invalid, because a buffer_ object was not thread-safe. This pull request disables multithreaded calculation of the ESP on grid for the moment and also adds a unit test to check.; ## Todos; No Todos, this is really just a trivial disable. ## Questions; No question. ## Checklist; - [X] Tests added for any new features. ; - [X] I ran the libmints tests (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1900
https://github.com/psi4/psi4/pull/1900:384,Testability,Test,Tests,384,"## Description; This pull request fixes #1899 . Multithreaded computation of the ESP potential was invalid, because a buffer_ object was not thread-safe. This pull request disables multithreaded calculation of the ESP on grid for the moment and also adds a unit test to check.; ## Todos; No Todos, this is really just a trivial disable. ## Questions; No question. ## Checklist; - [X] Tests added for any new features. ; - [X] I ran the libmints tests (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1900
https://github.com/psi4/psi4/pull/1900:445,Testability,test,tests,445,"## Description; This pull request fixes #1899 . Multithreaded computation of the ESP potential was invalid, because a buffer_ object was not thread-safe. This pull request disables multithreaded calculation of the ESP on grid for the moment and also adds a unit test to check.; ## Todos; No Todos, this is really just a trivial disable. ## Questions; No question. ## Checklist; - [X] Tests added for any new features. ; - [X] I ran the libmints tests (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1900
https://github.com/psi4/psi4/pull/1900:532,Testability,test,tests,532,"## Description; This pull request fixes #1899 . Multithreaded computation of the ESP potential was invalid, because a buffer_ object was not thread-safe. This pull request disables multithreaded calculation of the ESP on grid for the moment and also adds a unit test to check.; ## Todos; No Todos, this is really just a trivial disable. ## Questions; No question. ## Checklist; - [X] Tests added for any new features. ; - [X] I ran the libmints tests (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1900
https://github.com/psi4/psi4/pull/1901:159,Deployability,release,release,159,"## Description; As part of #1877, and the ongoing subproject to give `psimrcc` a wavefunction, the goal of this PR is to eliminate the various `allocate` and `release` calls in psimrcc so we can remove the MemoryManager global. They will be replaced with `std::vector`, smart pointers, or more direct creation of raw pointers where appropriate. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Modernizing of `psimrcc` memory management.; - [x] Speed is fine!. ## Questions; - [x] ~~Is there a better way to handle the `std::vector` replacements in `blas_diis.cc`? I'm not happy that I need to do a `reinterpret_cast`, but it's at least (marginally) better than C-style casts. Just focus on the third commit.~~ There is no better way.; ## Checklist; - [x] All psimrcc tests pass as of the last commit. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901
https://github.com/psi4/psi4/pull/1901:144,Energy Efficiency,allocate,allocate,144,"## Description; As part of #1877, and the ongoing subproject to give `psimrcc` a wavefunction, the goal of this PR is to eliminate the various `allocate` and `release` calls in psimrcc so we can remove the MemoryManager global. They will be replaced with `std::vector`, smart pointers, or more direct creation of raw pointers where appropriate. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Modernizing of `psimrcc` memory management.; - [x] Speed is fine!. ## Questions; - [x] ~~Is there a better way to handle the `std::vector` replacements in `blas_diis.cc`? I'm not happy that I need to do a `reinterpret_cast`, but it's at least (marginally) better than C-style casts. Just focus on the third commit.~~ There is no better way.; ## Checklist; - [x] All psimrcc tests pass as of the last commit. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901
https://github.com/psi4/psi4/pull/1901:817,Testability,test,tests,817,"## Description; As part of #1877, and the ongoing subproject to give `psimrcc` a wavefunction, the goal of this PR is to eliminate the various `allocate` and `release` calls in psimrcc so we can remove the MemoryManager global. They will be replaced with `std::vector`, smart pointers, or more direct creation of raw pointers where appropriate. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Modernizing of `psimrcc` memory management.; - [x] Speed is fine!. ## Questions; - [x] ~~Is there a better way to handle the `std::vector` replacements in `blas_diis.cc`? I'm not happy that I need to do a `reinterpret_cast`, but it's at least (marginally) better than C-style casts. Just focus on the third commit.~~ There is no better way.; ## Checklist; - [x] All psimrcc tests pass as of the last commit. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1901
https://github.com/psi4/psi4/issues/1902:33,Availability,error,error,33,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:93,Availability,ERROR,ERROR,93,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:233,Availability,ERROR,ERROR,233,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:379,Availability,ERROR,ERROR,379,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:527,Availability,ERROR,ERROR,527,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:679,Availability,ERROR,ERROR,679,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:817,Availability,ERROR,ERROR,817,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:957,Availability,ERROR,ERROR,957,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1101,Availability,ERROR,ERROR,1101,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1259,Availability,ERROR,ERROR,1259,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1410,Availability,ERROR,ERROR,1410,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1550,Availability,ERROR,ERROR,1550,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:76,Deployability,install,installation,76,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:209,Deployability,configurat,configuration,209,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:355,Deployability,configurat,configuration,355,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:503,Deployability,configurat,configuration,503,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:655,Deployability,configurat,configuration,655,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:793,Deployability,configurat,configuration,793,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:933,Deployability,configurat,configuration,933,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1077,Deployability,configurat,configuration,1077,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1235,Deployability,configurat,configuration,1235,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1386,Deployability,configurat,configuration,1386,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1526,Deployability,configurat,configuration,1526,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1671,Deployability,configurat,configuration,1671,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:39,Integrability,message,message,39,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:209,Modifiability,config,configuration,209,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:355,Modifiability,config,configuration,355,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:503,Modifiability,config,configuration,503,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:655,Modifiability,config,configuration,655,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:793,Modifiability,config,configuration,793,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:933,Modifiability,config,configuration,933,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1077,Modifiability,config,configuration,1077,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1235,Modifiability,config,configuration,1235,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1386,Modifiability,config,configuration,1386,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1526,Modifiability,config,configuration,1526,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1671,Modifiability,config,configuration,1671,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:65,Testability,test,test,65,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:154,Testability,test,tests,154,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:294,Testability,test,tests,294,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:440,Testability,test,tests,440,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:588,Testability,test,tests,588,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:740,Testability,test,tests,740,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:878,Testability,test,tests,878,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1018,Testability,test,tests,1018,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1162,Testability,test,tests,1162,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1320,Testability,test,tests,1320,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1471,Testability,test,tests,1471,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1611,Testability,test,tests,1611,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1902:1768,Testability,test,test,1768,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1902
https://github.com/psi4/psi4/issues/1903:1952,Availability,error,error,1952,"river/qcdb/molecule.py; @@ -1470,11 +1470,11 @@ class Molecule(LibmintsMolecule):; # * this can legitimately happen if total chg or mult has been set; # independently b/c fragment chg/mult not reset. so try again.; print(; - """"""Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred.""""""; + """"""Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning.""""""; ); molrec['fragment_charges'] = [None] * len(fragments); molrec['fragment_multiplicities'] = [None] * len(fragments); - validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); + validated_molrec = qcel.molparse.from_arrays(speclabel=False, nonphysical=True, verbose=0, domain='qm', **molrec); forgive.append('fragment_charges'); forgive.append('fragment_multiplicities'); compare_molrecs(validated_molrec, molrec, 'to_dict', atol=1.e-6, forgive=forgive, verbose=0). ```. Uncomment:; https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/from_schema.py#L85; For numerical hessians (FINDIF) one needs to set `nonphysical=True,` above as a work around or figure out the following error:. ```; File ""/Users/kruse/qc/psi4.bin/lib/psi4/driver/driver_findif.py"", line 417, in assemble_gradient_from_energies; mol = core.Molecule.from_schema(findifrec[""molecule""], verbose=0); File ""/Users/kruse/qc/psi4.bin/lib/psi4/driver/molutil.py"", line 200, in molecule_from_schema; molrec = qcel.molparse.from_schema(molschema, verbose=verbose); File ""/Users/kruse/qc/miniconda3/envs/p4dev/lib/python3.7/site-packages/qcelemental/molparse/from_schema.py"", line 85, in from_schema; nonphysical=nonphysical,. NameError: name 'nonphysical' is not defined; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1903
https://github.com/psi4/psi4/pull/1904:424,Testability,Test,Tests,424,"## Description; This PR contains changes necessary to make Psi4 bare-bones compatible with the development branch of Libxc. Note, however, that the Libxc API will be breaking again in the development branch when double hybrids are introduced. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Add support for double hybrids. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1904
https://github.com/psi4/psi4/pull/1904:498,Testability,test,tests,498,"## Description; This PR contains changes necessary to make Psi4 bare-bones compatible with the development branch of Libxc. Note, however, that the Libxc API will be breaking again in the development branch when double hybrids are introduced. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Add support for double hybrids. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1904
https://github.com/psi4/psi4/pull/1904:589,Testability,test,tests,589,"## Description; This PR contains changes necessary to make Psi4 bare-bones compatible with the development branch of Libxc. Note, however, that the Libxc API will be breaking again in the development branch when double hybrids are introduced. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Add support for double hybrids. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1904
https://github.com/psi4/psi4/pull/1905:45,Deployability,update,update,45,"## Description; as it says on the tin. also, update DOI and add papers in README. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1905
https://github.com/psi4/psi4/issues/1906:508,Deployability,release,releases,508,"Following from https://github.com/psi4/psi4/pull/1896#issuecomment-633623036, we observe that MKL 2020.1 (from conda) produces different answers at about 1e-8 in run-to-run execution for DF-HF at any basis set on Intel processors. https://software.intel.com/content/www/us/en/develop/documentation/mkl-windows-developer-guide/top/obtaining-numerically-reproducible-results/specifying-code-branches.html. Relevant envvar is `MKL_CBWR`. In the CI we're preempting with `MKL_CBWR=AUTO`. Will monitor future MKL releases. Please add to affected test list as you find them. * always passes: `COMPATIBLE`, `SSE2`, `AVX`, `AUTO`; * mixed pass/fail: `MKL_CBWR` unset; * always fails: `SSE4_2`. #### known affected test cases. * scf-cholesky-basis; * psimrcc-ccsd_t-4; * one of the IRCs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1906
https://github.com/psi4/psi4/issues/1906:489,Energy Efficiency,monitor,monitor,489,"Following from https://github.com/psi4/psi4/pull/1896#issuecomment-633623036, we observe that MKL 2020.1 (from conda) produces different answers at about 1e-8 in run-to-run execution for DF-HF at any basis set on Intel processors. https://software.intel.com/content/www/us/en/develop/documentation/mkl-windows-developer-guide/top/obtaining-numerically-reproducible-results/specifying-code-branches.html. Relevant envvar is `MKL_CBWR`. In the CI we're preempting with `MKL_CBWR=AUTO`. Will monitor future MKL releases. Please add to affected test list as you find them. * always passes: `COMPATIBLE`, `SSE2`, `AVX`, `AUTO`; * mixed pass/fail: `MKL_CBWR` unset; * always fails: `SSE4_2`. #### known affected test cases. * scf-cholesky-basis; * psimrcc-ccsd_t-4; * one of the IRCs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1906
https://github.com/psi4/psi4/issues/1906:541,Testability,test,test,541,"Following from https://github.com/psi4/psi4/pull/1896#issuecomment-633623036, we observe that MKL 2020.1 (from conda) produces different answers at about 1e-8 in run-to-run execution for DF-HF at any basis set on Intel processors. https://software.intel.com/content/www/us/en/develop/documentation/mkl-windows-developer-guide/top/obtaining-numerically-reproducible-results/specifying-code-branches.html. Relevant envvar is `MKL_CBWR`. In the CI we're preempting with `MKL_CBWR=AUTO`. Will monitor future MKL releases. Please add to affected test list as you find them. * always passes: `COMPATIBLE`, `SSE2`, `AVX`, `AUTO`; * mixed pass/fail: `MKL_CBWR` unset; * always fails: `SSE4_2`. #### known affected test cases. * scf-cholesky-basis; * psimrcc-ccsd_t-4; * one of the IRCs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1906
https://github.com/psi4/psi4/issues/1906:706,Testability,test,test,706,"Following from https://github.com/psi4/psi4/pull/1896#issuecomment-633623036, we observe that MKL 2020.1 (from conda) produces different answers at about 1e-8 in run-to-run execution for DF-HF at any basis set on Intel processors. https://software.intel.com/content/www/us/en/develop/documentation/mkl-windows-developer-guide/top/obtaining-numerically-reproducible-results/specifying-code-branches.html. Relevant envvar is `MKL_CBWR`. In the CI we're preempting with `MKL_CBWR=AUTO`. Will monitor future MKL releases. Please add to affected test list as you find them. * always passes: `COMPATIBLE`, `SSE2`, `AVX`, `AUTO`; * mixed pass/fail: `MKL_CBWR` unset; * always fails: `SSE4_2`. #### known affected test cases. * scf-cholesky-basis; * psimrcc-ccsd_t-4; * one of the IRCs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1906
https://github.com/psi4/psi4/issues/1906:320,Usability,guid,guide,320,"Following from https://github.com/psi4/psi4/pull/1896#issuecomment-633623036, we observe that MKL 2020.1 (from conda) produces different answers at about 1e-8 in run-to-run execution for DF-HF at any basis set on Intel processors. https://software.intel.com/content/www/us/en/develop/documentation/mkl-windows-developer-guide/top/obtaining-numerically-reproducible-results/specifying-code-branches.html. Relevant envvar is `MKL_CBWR`. In the CI we're preempting with `MKL_CBWR=AUTO`. Will monitor future MKL releases. Please add to affected test list as you find them. * always passes: `COMPATIBLE`, `SSE2`, `AVX`, `AUTO`; * mixed pass/fail: `MKL_CBWR` unset; * always fails: `SSE4_2`. #### known affected test cases. * scf-cholesky-basis; * psimrcc-ccsd_t-4; * one of the IRCs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1906
https://github.com/psi4/psi4/issues/1907:1918,Availability,error,error,1918,"anual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am not talking complete non-sense here. Also, while the CASSCF bit worked, the CASSCF energy is much higher than I expected (by ~0.2 hartree). The C-state minimum lies above the 3P+3P limit, instead ~2-3 eV below it. So, it would also be helpful if someone could teach me the best way to carry out the CASSCF calculation on the C state. Thanks,. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907
https://github.com/psi4/psi4/issues/1907:1946,Availability,fault,fault,1946,"anual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am not talking complete non-sense here. Also, while the CASSCF bit worked, the CASSCF energy is much higher than I expected (by ~0.2 hartree). The C-state minimum lies above the 3P+3P limit, instead ~2-3 eV below it. So, it would also be helpful if someone could teach me the best way to carry out the CASSCF calculation on the C state. Thanks,. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907
https://github.com/psi4/psi4/issues/1907:687,Deployability,configurat,configurations,687,"Hi,; I am just wondering if anyone could provide an example/instruction how to carry out (or if it is feasible to carry out) MRCI calculation using Psi4. In this paper (https://doi.org/10.1063/1.1867379), it sounded like that it was possible to carry out MRCI on Psi 3.2, but I couldn't find much information on the Psi4 manual (nor on the Psi3 manual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907
https://github.com/psi4/psi4/issues/1907:986,Deployability,configurat,configuration,986,"Hi,; I am just wondering if anyone could provide an example/instruction how to carry out (or if it is feasible to carry out) MRCI calculation using Psi4. In this paper (https://doi.org/10.1063/1.1867379), it sounded like that it was possible to carry out MRCI on Psi 3.2, but I couldn't find much information on the Psi4 manual (nor on the Psi3 manual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907
https://github.com/psi4/psi4/issues/1907:625,Energy Efficiency,energy,energy,625,"Hi,; I am just wondering if anyone could provide an example/instruction how to carry out (or if it is feasible to carry out) MRCI calculation using Psi4. In this paper (https://doi.org/10.1063/1.1867379), it sounded like that it was possible to carry out MRCI on Psi 3.2, but I couldn't find much information on the Psi4 manual (nor on the Psi3 manual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907
https://github.com/psi4/psi4/issues/1907:1392,Energy Efficiency,energy,energy,1392,"anual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am not talking complete non-sense here. Also, while the CASSCF bit worked, the CASSCF energy is much higher than I expected (by ~0.2 hartree). The C-state minimum lies above the 3P+3P limit, instead ~2-3 eV below it. So, it would also be helpful if someone could teach me the best way to carry out the CASSCF calculation on the C state. Thanks,. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907
https://github.com/psi4/psi4/issues/1907:1773,Energy Efficiency,energy,energy,1773,"anual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am not talking complete non-sense here. Also, while the CASSCF bit worked, the CASSCF energy is much higher than I expected (by ~0.2 hartree). The C-state minimum lies above the 3P+3P limit, instead ~2-3 eV below it. So, it would also be helpful if someone could teach me the best way to carry out the CASSCF calculation on the C state. Thanks,. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907
https://github.com/psi4/psi4/issues/1907:2084,Energy Efficiency,energy,energy,2084,"anual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am not talking complete non-sense here. Also, while the CASSCF bit worked, the CASSCF energy is much higher than I expected (by ~0.2 hartree). The C-state minimum lies above the 3P+3P limit, instead ~2-3 eV below it. So, it would also be helpful if someone could teach me the best way to carry out the CASSCF calculation on the C state. Thanks,. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907
https://github.com/psi4/psi4/issues/1907:1924,Integrability,message,message,1924,"anual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am not talking complete non-sense here. Also, while the CASSCF bit worked, the CASSCF energy is much higher than I expected (by ~0.2 hartree). The C-state minimum lies above the 3P+3P limit, instead ~2-3 eV below it. So, it would also be helpful if someone could teach me the best way to carry out the CASSCF calculation on the C state. Thanks,. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907
https://github.com/psi4/psi4/issues/1907:687,Modifiability,config,configurations,687,"Hi,; I am just wondering if anyone could provide an example/instruction how to carry out (or if it is feasible to carry out) MRCI calculation using Psi4. In this paper (https://doi.org/10.1063/1.1867379), it sounded like that it was possible to carry out MRCI on Psi 3.2, but I couldn't find much information on the Psi4 manual (nor on the Psi3 manual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907
https://github.com/psi4/psi4/issues/1907:986,Modifiability,config,configuration,986,"Hi,; I am just wondering if anyone could provide an example/instruction how to carry out (or if it is feasible to carry out) MRCI calculation using Psi4. In this paper (https://doi.org/10.1063/1.1867379), it sounded like that it was possible to carry out MRCI on Psi 3.2, but I couldn't find much information on the Psi4 manual (nor on the Psi3 manual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907
https://github.com/psi4/psi4/issues/1907:612,Performance,optimiz,optimize,612,"Hi,; I am just wondering if anyone could provide an example/instruction how to carry out (or if it is feasible to carry out) MRCI calculation using Psi4. In this paper (https://doi.org/10.1063/1.1867379), it sounded like that it was possible to carry out MRCI on Psi 3.2, but I couldn't find much information on the Psi4 manual (nor on the Psi3 manual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1907
https://github.com/psi4/psi4/issues/1908:120,Energy Efficiency,energy,energy,120,"Hi all,. I've been running x2c calculations and when I checked for a simple Fe atom I encountered a bug I guess, as the energy is plain wrong with x2c in the cc-pVDZ basis when ```puream = false```. Here is the script I use:. ```; import psi4; ; psi4.geometry(""""""; Fe 0. 0. 0.; symmetry c1; """"""); psi4.set_options({'basis':""cc-pvdz-decon"",; 'basis_relativistic': ""cc-pvdz-decon"",; 'reference': ""rhf"",; 'relativistic': ""X2C"",; 'puream':""false""}). scf_e, scf_wfn = psi4.energy('scf', return_wfn=True); print(""Hartree-Fock energy: {}"".format(scf_e)); ```. Just replacing ```puream = true``` fixes the issue. Any idea of the reason of this ?; Note that ```sto-3g-decon``` works like a charm with ```puream = false```, so it might be a problem in the f shell ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1908
https://github.com/psi4/psi4/issues/1908:468,Energy Efficiency,energy,energy,468,"Hi all,. I've been running x2c calculations and when I checked for a simple Fe atom I encountered a bug I guess, as the energy is plain wrong with x2c in the cc-pVDZ basis when ```puream = false```. Here is the script I use:. ```; import psi4; ; psi4.geometry(""""""; Fe 0. 0. 0.; symmetry c1; """"""); psi4.set_options({'basis':""cc-pvdz-decon"",; 'basis_relativistic': ""cc-pvdz-decon"",; 'reference': ""rhf"",; 'relativistic': ""X2C"",; 'puream':""false""}). scf_e, scf_wfn = psi4.energy('scf', return_wfn=True); print(""Hartree-Fock energy: {}"".format(scf_e)); ```. Just replacing ```puream = true``` fixes the issue. Any idea of the reason of this ?; Note that ```sto-3g-decon``` works like a charm with ```puream = false```, so it might be a problem in the f shell ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1908
https://github.com/psi4/psi4/issues/1908:520,Energy Efficiency,energy,energy,520,"Hi all,. I've been running x2c calculations and when I checked for a simple Fe atom I encountered a bug I guess, as the energy is plain wrong with x2c in the cc-pVDZ basis when ```puream = false```. Here is the script I use:. ```; import psi4; ; psi4.geometry(""""""; Fe 0. 0. 0.; symmetry c1; """"""); psi4.set_options({'basis':""cc-pvdz-decon"",; 'basis_relativistic': ""cc-pvdz-decon"",; 'reference': ""rhf"",; 'relativistic': ""X2C"",; 'puream':""false""}). scf_e, scf_wfn = psi4.energy('scf', return_wfn=True); print(""Hartree-Fock energy: {}"".format(scf_e)); ```. Just replacing ```puream = true``` fixes the issue. Any idea of the reason of this ?; Note that ```sto-3g-decon``` works like a charm with ```puream = false```, so it might be a problem in the f shell ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1908
https://github.com/psi4/psi4/issues/1908:69,Usability,simpl,simple,69,"Hi all,. I've been running x2c calculations and when I checked for a simple Fe atom I encountered a bug I guess, as the energy is plain wrong with x2c in the cc-pVDZ basis when ```puream = false```. Here is the script I use:. ```; import psi4; ; psi4.geometry(""""""; Fe 0. 0. 0.; symmetry c1; """"""); psi4.set_options({'basis':""cc-pvdz-decon"",; 'basis_relativistic': ""cc-pvdz-decon"",; 'reference': ""rhf"",; 'relativistic': ""X2C"",; 'puream':""false""}). scf_e, scf_wfn = psi4.energy('scf', return_wfn=True); print(""Hartree-Fock energy: {}"".format(scf_e)); ```. Just replacing ```puream = true``` fixes the issue. Any idea of the reason of this ?; Note that ```sto-3g-decon``` works like a charm with ```puream = false```, so it might be a problem in the f shell ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1908
https://github.com/psi4/psi4/pull/1909:958,Availability,ping,ping,958,"## Description; Closes #1872. . CEPA Conventions Now:; `dct`: Does not know about CEPA(0), per #1873 ; `occ`: Every use of CEPA or CEPA(0) is now converted to LCCD. The section header and the final results section include [CEPA(0)] in parentheses. The same applies to the orbital optimized methods. The string ""OCEPA"" is still used internally as a wavefunction type when referring to LCCD, but that part of `occ` could use refactoring anyways, so I'm not going to spend the time to change it for something that relatively minor.; `dfocc`: Unchanged, because it always said `lccd` anyways. Bozkaya changed his preferred name for the method from CEPA to LCCD between `occ` and `dfocc`; `fnocc`: For consistency with the other CEPA methods, this still uses CEPA(0) to refer to both LCCD and LCCSD for the final results, but the start of the computation writes out Linearized CCD or Linearized CCSD.; Driver: This is unchanged. `cepa(0)` means LCCSD. Obligatory ping to notify @edeprince3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Standardizes CEPA terminology in Psi output. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909
https://github.com/psi4/psi4/pull/1909:423,Modifiability,refactor,refactoring,423,"## Description; Closes #1872. . CEPA Conventions Now:; `dct`: Does not know about CEPA(0), per #1873 ; `occ`: Every use of CEPA or CEPA(0) is now converted to LCCD. The section header and the final results section include [CEPA(0)] in parentheses. The same applies to the orbital optimized methods. The string ""OCEPA"" is still used internally as a wavefunction type when referring to LCCD, but that part of `occ` could use refactoring anyways, so I'm not going to spend the time to change it for something that relatively minor.; `dfocc`: Unchanged, because it always said `lccd` anyways. Bozkaya changed his preferred name for the method from CEPA to LCCD between `occ` and `dfocc`; `fnocc`: For consistency with the other CEPA methods, this still uses CEPA(0) to refer to both LCCD and LCCSD for the final results, but the start of the computation writes out Linearized CCD or Linearized CCSD.; Driver: This is unchanged. `cepa(0)` means LCCSD. Obligatory ping to notify @edeprince3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Standardizes CEPA terminology in Psi output. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909
https://github.com/psi4/psi4/pull/1909:280,Performance,optimiz,optimized,280,"## Description; Closes #1872. . CEPA Conventions Now:; `dct`: Does not know about CEPA(0), per #1873 ; `occ`: Every use of CEPA or CEPA(0) is now converted to LCCD. The section header and the final results section include [CEPA(0)] in parentheses. The same applies to the orbital optimized methods. The string ""OCEPA"" is still used internally as a wavefunction type when referring to LCCD, but that part of `occ` could use refactoring anyways, so I'm not going to spend the time to change it for something that relatively minor.; `dfocc`: Unchanged, because it always said `lccd` anyways. Bozkaya changed his preferred name for the method from CEPA to LCCD between `occ` and `dfocc`; `fnocc`: For consistency with the other CEPA methods, this still uses CEPA(0) to refer to both LCCD and LCCSD for the final results, but the start of the computation writes out Linearized CCD or Linearized CCSD.; Driver: This is unchanged. `cepa(0)` means LCCSD. Obligatory ping to notify @edeprince3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Standardizes CEPA terminology in Psi output. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909
https://github.com/psi4/psi4/pull/1909:1155,Testability,test,tests,1155,"## Description; Closes #1872. . CEPA Conventions Now:; `dct`: Does not know about CEPA(0), per #1873 ; `occ`: Every use of CEPA or CEPA(0) is now converted to LCCD. The section header and the final results section include [CEPA(0)] in parentheses. The same applies to the orbital optimized methods. The string ""OCEPA"" is still used internally as a wavefunction type when referring to LCCD, but that part of `occ` could use refactoring anyways, so I'm not going to spend the time to change it for something that relatively minor.; `dfocc`: Unchanged, because it always said `lccd` anyways. Bozkaya changed his preferred name for the method from CEPA to LCCD between `occ` and `dfocc`; `fnocc`: For consistency with the other CEPA methods, this still uses CEPA(0) to refer to both LCCD and LCCSD for the final results, but the start of the computation writes out Linearized CCD or Linearized CCSD.; Driver: This is unchanged. `cepa(0)` means LCCSD. Obligatory ping to notify @edeprince3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Standardizes CEPA terminology in Psi output. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1909
https://github.com/psi4/psi4/pull/1910:273,Testability,test,tests,273,"## Description; Closes #1890. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] When DETCI computes TDMs, it does so for all excitations to higher roots, not just excitations from the ground state.; - [x] Added OPDM and TPDM tests. ## Questions; - [x] ~~Is it worth adding the i > j case, or is it i < j the standard convention for multistate problems? If so, rather than have these be explicitly constructed, it's probably best to just take the adjoint of the i < j case.~~ Added.; - [x] ~~We currently have zero test coverage of OPDMs from `detci`. We could check that Matrices are equal for a same-state OPDM and a TDM. This is a bit larger than usual for a Matrix comparison, but I think it'll be fine with H2/cc-pVDZ. I assume this would go in pytests?~~ Added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1910
https://github.com/psi4/psi4/pull/1910:562,Testability,test,test,562,"## Description; Closes #1890. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] When DETCI computes TDMs, it does so for all excitations to higher roots, not just excitations from the ground state.; - [x] Added OPDM and TPDM tests. ## Questions; - [x] ~~Is it worth adding the i > j case, or is it i < j the standard convention for multistate problems? If so, rather than have these be explicitly constructed, it's probably best to just take the adjoint of the i < j case.~~ Added.; - [x] ~~We currently have zero test coverage of OPDMs from `detci`. We could check that Matrices are equal for a same-state OPDM and a TDM. This is a bit larger than usual for a Matrix comparison, but I think it'll be fine with H2/cc-pVDZ. I assume this would go in pytests?~~ Added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1910
https://github.com/psi4/psi4/pull/1911:97,Energy Efficiency,Reduce,Reduces,97,"## Description; Calculates exchange terms in a single tensor rather than contracting and adding. Reduces the cost of contractions against SCF coefficients in range separated DFT. Changes the working equation for calculating the coulomb matrix in range separated DFT calculations. This lowers the number of tensors that Psi4 needs to store, reducing memory costs and extending the number of cases operable by DFHelper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Extend formulations to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1911
https://github.com/psi4/psi4/pull/1911:73,Integrability,contract,contracting,73,"## Description; Calculates exchange terms in a single tensor rather than contracting and adding. Reduces the cost of contractions against SCF coefficients in range separated DFT. Changes the working equation for calculating the coulomb matrix in range separated DFT calculations. This lowers the number of tensors that Psi4 needs to store, reducing memory costs and extending the number of cases operable by DFHelper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Extend formulations to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1911
https://github.com/psi4/psi4/pull/1911:117,Integrability,contract,contractions,117,"## Description; Calculates exchange terms in a single tensor rather than contracting and adding. Reduces the cost of contractions against SCF coefficients in range separated DFT. Changes the working equation for calculating the coulomb matrix in range separated DFT calculations. This lowers the number of tensors that Psi4 needs to store, reducing memory costs and extending the number of cases operable by DFHelper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Extend formulations to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1911
https://github.com/psi4/psi4/pull/1911:366,Modifiability,extend,extending,366,"## Description; Calculates exchange terms in a single tensor rather than contracting and adding. Reduces the cost of contractions against SCF coefficients in range separated DFT. Changes the working equation for calculating the coulomb matrix in range separated DFT calculations. This lowers the number of tensors that Psi4 needs to store, reducing memory costs and extending the number of cases operable by DFHelper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Extend formulations to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1911
https://github.com/psi4/psi4/pull/1911:516,Modifiability,Extend,Extend,516,"## Description; Calculates exchange terms in a single tensor rather than contracting and adding. Reduces the cost of contractions against SCF coefficients in range separated DFT. Changes the working equation for calculating the coulomb matrix in range separated DFT calculations. This lowers the number of tensors that Psi4 needs to store, reducing memory costs and extending the number of cases operable by DFHelper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Extend formulations to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1911
https://github.com/psi4/psi4/pull/1911:634,Testability,test,tests,634,"## Description; Calculates exchange terms in a single tensor rather than contracting and adding. Reduces the cost of contractions against SCF coefficients in range separated DFT. Changes the working equation for calculating the coulomb matrix in range separated DFT calculations. This lowers the number of tensors that Psi4 needs to store, reducing memory costs and extending the number of cases operable by DFHelper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Extend formulations to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1911
https://github.com/psi4/psi4/pull/1911:725,Testability,test,tests,725,"## Description; Calculates exchange terms in a single tensor rather than contracting and adding. Reduces the cost of contractions against SCF coefficients in range separated DFT. Changes the working equation for calculating the coulomb matrix in range separated DFT calculations. This lowers the number of tensors that Psi4 needs to store, reducing memory costs and extending the number of cases operable by DFHelper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Extend formulations to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1911
https://github.com/psi4/psi4/issues/1912:796,Availability,error,error,796,"Using latest Psi4 from conda `psi4/label/dev` (`1.4a2.dev523+e25656e`), if I modify the test in `cc3` to use density fitting and freeze both core and virtuals as follows:; ```; molecule h2o {; 0 1; O; H 1 0.97; H 1 0.97 2 103.0; }. set {; basis 6-31G**; r_convergence 10; e_convergence 10; freeze_core True; num_frozen_uocc 10; cc_type df; }. ccsd_e, ccsd_wfn = frequencies('ccsd', dertype=1, return_wfn=True); fd_freqs_grad = ccsd_wfn.frequencies(). ccsd_e, ccsd_wfn, frequencies('ccsd', dertype=0, return_wfn=True); fd_freqs_energy = ccsd_wfn.frequencies(). compare_vectors(fd_freqs_grad, fd_freqs_energy, 1, ""CCSD Grads vs. Energies Findif (3-pt.) freqs to 0.1 cm^-1"") #TEST; ```. Psi4 fails with `<built-in method dfocc of PyCapsule object at 0x7f3fee2aab70> returned NULL without setting an error`. However, if I replace `ccsd` by `ccsd(t)`, it runs and passes the test, which seems to indicate `ccsd` gradients for frozen virtuals are actually available somewhere.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912
https://github.com/psi4/psi4/issues/1912:950,Availability,avail,available,950,"Using latest Psi4 from conda `psi4/label/dev` (`1.4a2.dev523+e25656e`), if I modify the test in `cc3` to use density fitting and freeze both core and virtuals as follows:; ```; molecule h2o {; 0 1; O; H 1 0.97; H 1 0.97 2 103.0; }. set {; basis 6-31G**; r_convergence 10; e_convergence 10; freeze_core True; num_frozen_uocc 10; cc_type df; }. ccsd_e, ccsd_wfn = frequencies('ccsd', dertype=1, return_wfn=True); fd_freqs_grad = ccsd_wfn.frequencies(). ccsd_e, ccsd_wfn, frequencies('ccsd', dertype=0, return_wfn=True); fd_freqs_energy = ccsd_wfn.frequencies(). compare_vectors(fd_freqs_grad, fd_freqs_energy, 1, ""CCSD Grads vs. Energies Findif (3-pt.) freqs to 0.1 cm^-1"") #TEST; ```. Psi4 fails with `<built-in method dfocc of PyCapsule object at 0x7f3fee2aab70> returned NULL without setting an error`. However, if I replace `ccsd` by `ccsd(t)`, it runs and passes the test, which seems to indicate `ccsd` gradients for frozen virtuals are actually available somewhere.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912
https://github.com/psi4/psi4/issues/1912:88,Testability,test,test,88,"Using latest Psi4 from conda `psi4/label/dev` (`1.4a2.dev523+e25656e`), if I modify the test in `cc3` to use density fitting and freeze both core and virtuals as follows:; ```; molecule h2o {; 0 1; O; H 1 0.97; H 1 0.97 2 103.0; }. set {; basis 6-31G**; r_convergence 10; e_convergence 10; freeze_core True; num_frozen_uocc 10; cc_type df; }. ccsd_e, ccsd_wfn = frequencies('ccsd', dertype=1, return_wfn=True); fd_freqs_grad = ccsd_wfn.frequencies(). ccsd_e, ccsd_wfn, frequencies('ccsd', dertype=0, return_wfn=True); fd_freqs_energy = ccsd_wfn.frequencies(). compare_vectors(fd_freqs_grad, fd_freqs_energy, 1, ""CCSD Grads vs. Energies Findif (3-pt.) freqs to 0.1 cm^-1"") #TEST; ```. Psi4 fails with `<built-in method dfocc of PyCapsule object at 0x7f3fee2aab70> returned NULL without setting an error`. However, if I replace `ccsd` by `ccsd(t)`, it runs and passes the test, which seems to indicate `ccsd` gradients for frozen virtuals are actually available somewhere.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912
https://github.com/psi4/psi4/issues/1912:673,Testability,TEST,TEST,673,"Using latest Psi4 from conda `psi4/label/dev` (`1.4a2.dev523+e25656e`), if I modify the test in `cc3` to use density fitting and freeze both core and virtuals as follows:; ```; molecule h2o {; 0 1; O; H 1 0.97; H 1 0.97 2 103.0; }. set {; basis 6-31G**; r_convergence 10; e_convergence 10; freeze_core True; num_frozen_uocc 10; cc_type df; }. ccsd_e, ccsd_wfn = frequencies('ccsd', dertype=1, return_wfn=True); fd_freqs_grad = ccsd_wfn.frequencies(). ccsd_e, ccsd_wfn, frequencies('ccsd', dertype=0, return_wfn=True); fd_freqs_energy = ccsd_wfn.frequencies(). compare_vectors(fd_freqs_grad, fd_freqs_energy, 1, ""CCSD Grads vs. Energies Findif (3-pt.) freqs to 0.1 cm^-1"") #TEST; ```. Psi4 fails with `<built-in method dfocc of PyCapsule object at 0x7f3fee2aab70> returned NULL without setting an error`. However, if I replace `ccsd` by `ccsd(t)`, it runs and passes the test, which seems to indicate `ccsd` gradients for frozen virtuals are actually available somewhere.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912
https://github.com/psi4/psi4/issues/1912:870,Testability,test,test,870,"Using latest Psi4 from conda `psi4/label/dev` (`1.4a2.dev523+e25656e`), if I modify the test in `cc3` to use density fitting and freeze both core and virtuals as follows:; ```; molecule h2o {; 0 1; O; H 1 0.97; H 1 0.97 2 103.0; }. set {; basis 6-31G**; r_convergence 10; e_convergence 10; freeze_core True; num_frozen_uocc 10; cc_type df; }. ccsd_e, ccsd_wfn = frequencies('ccsd', dertype=1, return_wfn=True); fd_freqs_grad = ccsd_wfn.frequencies(). ccsd_e, ccsd_wfn, frequencies('ccsd', dertype=0, return_wfn=True); fd_freqs_energy = ccsd_wfn.frequencies(). compare_vectors(fd_freqs_grad, fd_freqs_energy, 1, ""CCSD Grads vs. Energies Findif (3-pt.) freqs to 0.1 cm^-1"") #TEST; ```. Psi4 fails with `<built-in method dfocc of PyCapsule object at 0x7f3fee2aab70> returned NULL without setting an error`. However, if I replace `ccsd` by `ccsd(t)`, it runs and passes the test, which seems to indicate `ccsd` gradients for frozen virtuals are actually available somewhere.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1912
https://github.com/psi4/psi4/pull/1913:171,Deployability,update,update,171,"## Description; Provide a brief description of the PR's purpose here. ## Todos; - [x] bump pb11 internal build to v2.5.0; - [x] bump ambit internal build to v0.4.1; - [x] update paper and acknowledge more folks in header; - [x] add extra arg to bindings of so_overlap/kinetic so p4n ref impl can run as-is; - [x] fix missing qcvars, wfn settings in fnocc and occ for conventional LCCD; - [x] add conventional LCCD tests to standard_suite courtesy of @JonathonMisiewicz reference implementation over at p4n, https://github.com/psi4/psi4numpy/tree/master/Coupled-Electron-Pair-Approximation; - [x] depends on https://github.com/MolSSI/QCEngine/pull/244 for data. Furthermore all standard_suite tests are presently suppressed until qcng v0.15 minted. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1913
https://github.com/psi4/psi4/pull/1913:596,Integrability,depend,depends,596,"## Description; Provide a brief description of the PR's purpose here. ## Todos; - [x] bump pb11 internal build to v2.5.0; - [x] bump ambit internal build to v0.4.1; - [x] update paper and acknowledge more folks in header; - [x] add extra arg to bindings of so_overlap/kinetic so p4n ref impl can run as-is; - [x] fix missing qcvars, wfn settings in fnocc and occ for conventional LCCD; - [x] add conventional LCCD tests to standard_suite courtesy of @JonathonMisiewicz reference implementation over at p4n, https://github.com/psi4/psi4numpy/tree/master/Coupled-Electron-Pair-Approximation; - [x] depends on https://github.com/MolSSI/QCEngine/pull/244 for data. Furthermore all standard_suite tests are presently suppressed until qcng v0.15 minted. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1913
https://github.com/psi4/psi4/pull/1913:414,Testability,test,tests,414,"## Description; Provide a brief description of the PR's purpose here. ## Todos; - [x] bump pb11 internal build to v2.5.0; - [x] bump ambit internal build to v0.4.1; - [x] update paper and acknowledge more folks in header; - [x] add extra arg to bindings of so_overlap/kinetic so p4n ref impl can run as-is; - [x] fix missing qcvars, wfn settings in fnocc and occ for conventional LCCD; - [x] add conventional LCCD tests to standard_suite courtesy of @JonathonMisiewicz reference implementation over at p4n, https://github.com/psi4/psi4numpy/tree/master/Coupled-Electron-Pair-Approximation; - [x] depends on https://github.com/MolSSI/QCEngine/pull/244 for data. Furthermore all standard_suite tests are presently suppressed until qcng v0.15 minted. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1913
https://github.com/psi4/psi4/pull/1913:692,Testability,test,tests,692,"## Description; Provide a brief description of the PR's purpose here. ## Todos; - [x] bump pb11 internal build to v2.5.0; - [x] bump ambit internal build to v0.4.1; - [x] update paper and acknowledge more folks in header; - [x] add extra arg to bindings of so_overlap/kinetic so p4n ref impl can run as-is; - [x] fix missing qcvars, wfn settings in fnocc and occ for conventional LCCD; - [x] add conventional LCCD tests to standard_suite courtesy of @JonathonMisiewicz reference implementation over at p4n, https://github.com/psi4/psi4numpy/tree/master/Coupled-Electron-Pair-Approximation; - [x] depends on https://github.com/MolSSI/QCEngine/pull/244 for data. Furthermore all standard_suite tests are presently suppressed until qcng v0.15 minted. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1913
https://github.com/psi4/psi4/pull/1914:18,Deployability,Update,Update,18,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1914
https://github.com/psi4/psi4/pull/1914:44,Energy Efficiency,adapt,adapt,44,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1914
https://github.com/psi4/psi4/pull/1914:50,Integrability,interface,interface,50,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1914
https://github.com/psi4/psi4/pull/1914:44,Modifiability,adapt,adapt,44,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1914
https://github.com/psi4/psi4/pull/1914:150,Safety,detect,detects,150,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1914
https://github.com/psi4/psi4/pull/1914:119,Testability,test,test,119,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1914
https://github.com/psi4/psi4/pull/1914:233,Testability,Test,Tests,233,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1914
https://github.com/psi4/psi4/pull/1914:307,Testability,test,tests,307,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1914
https://github.com/psi4/psi4/pull/1914:398,Testability,test,tests,398,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1914
https://github.com/psi4/psi4/pull/1915:850,Safety,safe,safe,850,"## Description; This is part of an ongoing PR series to centralize the code for density-fitted correlated gradients into `libmints`, just like the code for correlated gradients with conventional integrals. This is a subproject of #1736. This PR eliminates the file `ref_grad.cc` from `dfocc`. It was introduced [when `dfocc` was first created](https://github.com/psi4/psi4archive/commit/79e61e76d60b2ef5e1d7b4574788c61e24d02c25#diff-ea59ef1daf3141c3d76dee8823286b82) and is dead code. It looks like it was created for DF-SCF gradients. That is the task of [scfgrad](https://github.com/psi4/psi4/tree/master/psi4/src/psi4/scfgrad), so is not needed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminates an entire file of dead code. ## Questions; - [x] @bozkaya, can you confirm `ref_grad.cc` is safe to delete?. ## Checklist; - [x] `ctest -L df` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1915
https://github.com/psi4/psi4/issues/1916:749,Availability,error,error,749,"Running the following input file; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }. set {; scf_type mem_df; basis cc-pvdz; num_frozen_uocc 4; mp2_type df; }. analytic = gradient(""mp2""); findif = gradient(""mp2"", dertype=0). compare_matrices(analytic, findif, 4, ""DF-MP2 Gradient""); ```. gives me. ```; Expected:; [[-0. 0.000000000003 -0.034538336725]; [ 0. -0.035340551119 0.017269168364]; [ 0. 0.035340551116 0.017269168361]]; Observed:; [[ 0. 0.000000000422 -0.029704789758]; [ 0. -0.030742173112 0.014852395042]; [ 0. 0.030742172689 0.014852394715]]; Difference (passed elements are zeroed):; [[ 0. 0. 0.004833546968]; [ 0. 0.004598378007 -0.002416773321]; [ 0. -0.004598378426 -0.002416773646]]; ```. So we have a third decimal place error(!) in DF-MP2 frozen virtual gradients. Frozen core gradients test fine. @loriab, take note of this during your standardization and testing pass. Core developers, assign this to me. If it's a simple fix, this will be part of DFGrad II. Otherwise, this will be DFGrad III. I'm also requesting, given the severity of this bug, that it be made a Psi 1.4 target.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1916
https://github.com/psi4/psi4/issues/1916:816,Testability,test,test,816,"Running the following input file; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }. set {; scf_type mem_df; basis cc-pvdz; num_frozen_uocc 4; mp2_type df; }. analytic = gradient(""mp2""); findif = gradient(""mp2"", dertype=0). compare_matrices(analytic, findif, 4, ""DF-MP2 Gradient""); ```. gives me. ```; Expected:; [[-0. 0.000000000003 -0.034538336725]; [ 0. -0.035340551119 0.017269168364]; [ 0. 0.035340551116 0.017269168361]]; Observed:; [[ 0. 0.000000000422 -0.029704789758]; [ 0. -0.030742173112 0.014852395042]; [ 0. 0.030742172689 0.014852394715]]; Difference (passed elements are zeroed):; [[ 0. 0. 0.004833546968]; [ 0. 0.004598378007 -0.002416773321]; [ 0. -0.004598378426 -0.002416773646]]; ```. So we have a third decimal place error(!) in DF-MP2 frozen virtual gradients. Frozen core gradients test fine. @loriab, take note of this during your standardization and testing pass. Core developers, assign this to me. If it's a simple fix, this will be part of DFGrad II. Otherwise, this will be DFGrad III. I'm also requesting, given the severity of this bug, that it be made a Psi 1.4 target.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1916
https://github.com/psi4/psi4/issues/1916:886,Testability,test,testing,886,"Running the following input file; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }. set {; scf_type mem_df; basis cc-pvdz; num_frozen_uocc 4; mp2_type df; }. analytic = gradient(""mp2""); findif = gradient(""mp2"", dertype=0). compare_matrices(analytic, findif, 4, ""DF-MP2 Gradient""); ```. gives me. ```; Expected:; [[-0. 0.000000000003 -0.034538336725]; [ 0. -0.035340551119 0.017269168364]; [ 0. 0.035340551116 0.017269168361]]; Observed:; [[ 0. 0.000000000422 -0.029704789758]; [ 0. -0.030742173112 0.014852395042]; [ 0. 0.030742172689 0.014852394715]]; Difference (passed elements are zeroed):; [[ 0. 0. 0.004833546968]; [ 0. 0.004598378007 -0.002416773321]; [ 0. -0.004598378426 -0.002416773646]]; ```. So we have a third decimal place error(!) in DF-MP2 frozen virtual gradients. Frozen core gradients test fine. @loriab, take note of this during your standardization and testing pass. Core developers, assign this to me. If it's a simple fix, this will be part of DFGrad II. Otherwise, this will be DFGrad III. I'm also requesting, given the severity of this bug, that it be made a Psi 1.4 target.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1916
https://github.com/psi4/psi4/issues/1916:946,Usability,simpl,simple,946,"Running the following input file; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }. set {; scf_type mem_df; basis cc-pvdz; num_frozen_uocc 4; mp2_type df; }. analytic = gradient(""mp2""); findif = gradient(""mp2"", dertype=0). compare_matrices(analytic, findif, 4, ""DF-MP2 Gradient""); ```. gives me. ```; Expected:; [[-0. 0.000000000003 -0.034538336725]; [ 0. -0.035340551119 0.017269168364]; [ 0. 0.035340551116 0.017269168361]]; Observed:; [[ 0. 0.000000000422 -0.029704789758]; [ 0. -0.030742173112 0.014852395042]; [ 0. 0.030742172689 0.014852394715]]; Difference (passed elements are zeroed):; [[ 0. 0. 0.004833546968]; [ 0. 0.004598378007 -0.002416773321]; [ 0. -0.004598378426 -0.002416773646]]; ```. So we have a third decimal place error(!) in DF-MP2 frozen virtual gradients. Frozen core gradients test fine. @loriab, take note of this during your standardization and testing pass. Core developers, assign this to me. If it's a simple fix, this will be part of DFGrad II. Otherwise, this will be DFGrad III. I'm also requesting, given the severity of this bug, that it be made a Psi 1.4 target.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1916
https://github.com/psi4/psi4/pull/1917:752,Energy Efficiency,energy,energy,752,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1917
https://github.com/psi4/psi4/pull/1917:155,Modifiability,flexible,flexible,155,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1917
https://github.com/psi4/psi4/pull/1917:1564,Safety,safe,safe,1564,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1917
https://github.com/psi4/psi4/pull/1917:1627,Safety,safe,safe,1627,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1917
https://github.com/psi4/psi4/pull/1917:24,Security,expose,exposes,24,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1917
https://github.com/psi4/psi4/pull/1917:423,Testability,test,testing,423,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1917
https://github.com/psi4/psi4/pull/1917:1497,Testability,test,tests,1497,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1917
https://github.com/psi4/psi4/pull/1917:1589,Testability,test,test,1589,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1917
https://github.com/psi4/psi4/pull/1917:1653,Testability,Test,Tests,1653,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1917
https://github.com/psi4/psi4/pull/1917:1727,Testability,test,tests,1727,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1917
https://github.com/psi4/psi4/pull/1917:1818,Testability,test,tests,1818,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1917
https://github.com/psi4/psi4/pull/1917:1582,Usability,simpl,simple,1582,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1917
https://github.com/psi4/psi4/issues/1918:1493,Availability,repair,repair,1493,"The following input file; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set solver_precondition subspace; set solver_n_guess 3. gradient('mp2/cc-pvdz'); ```; segfaults due to a bad access exception. While the segfault occurred on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L290), the real problem is earlier. The loop structure [assumes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L280-L285) that `x_` and `b_` have the same number of elements. But the last method we ran [was `setup`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L163-L164), which [clears `x_`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L276). Even then, `setup` appears to have its own, unrelated problem. The preconditioner submatrix `A_` is [populated using the results of a `products_x()` call](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L259-L272). But `x_` [consists of zero vectors](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L251), so the submatrix guess procedure is just an overcomplicated way to write zero at present. That is probably very bad for the algorithm. Making matters even worse, I have not been able to find a standard conjugate gradients preconditioner with a name similar to ""SUBSPACE,"" so I cannot figure out how this algorithm was supposed to work. In short, this code is broken, and I would say beyond repair. Can I eliminate all the code for the ""SUBSPACE"" preconditioner from the `CGRSolver`? We'd just fall back to the ""JACOBI"" preconditioner, which is the default anyways.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1918
https://github.com/psi4/psi4/issues/1918:185,Security,access,access,185,"The following input file; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set solver_precondition subspace; set solver_n_guess 3. gradient('mp2/cc-pvdz'); ```; segfaults due to a bad access exception. While the segfault occurred on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L290), the real problem is earlier. The loop structure [assumes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L280-L285) that `x_` and `b_` have the same number of elements. But the last method we ran [was `setup`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L163-L164), which [clears `x_`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L276). Even then, `setup` appears to have its own, unrelated problem. The preconditioner submatrix `A_` is [populated using the results of a `products_x()` call](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L259-L272). But `x_` [consists of zero vectors](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L251), so the submatrix guess procedure is just an overcomplicated way to write zero at present. That is probably very bad for the algorithm. Making matters even worse, I have not been able to find a standard conjugate gradients preconditioner with a name similar to ""SUBSPACE,"" so I cannot figure out how this algorithm was supposed to work. In short, this code is broken, and I would say beyond repair. Can I eliminate all the code for the ""SUBSPACE"" preconditioner from the `CGRSolver`? We'd just fall back to the ""JACOBI"" preconditioner, which is the default anyways.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1918
https://github.com/psi4/psi4/issues/1918:654,Usability,clear,clears,654,"The following input file; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set solver_precondition subspace; set solver_n_guess 3. gradient('mp2/cc-pvdz'); ```; segfaults due to a bad access exception. While the segfault occurred on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L290), the real problem is earlier. The loop structure [assumes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L280-L285) that `x_` and `b_` have the same number of elements. But the last method we ran [was `setup`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L163-L164), which [clears `x_`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L276). Even then, `setup` appears to have its own, unrelated problem. The preconditioner submatrix `A_` is [populated using the results of a `products_x()` call](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L259-L272). But `x_` [consists of zero vectors](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L251), so the submatrix guess procedure is just an overcomplicated way to write zero at present. That is probably very bad for the algorithm. Making matters even worse, I have not been able to find a standard conjugate gradients preconditioner with a name similar to ""SUBSPACE,"" so I cannot figure out how this algorithm was supposed to work. In short, this code is broken, and I would say beyond repair. Can I eliminate all the code for the ""SUBSPACE"" preconditioner from the `CGRSolver`? We'd just fall back to the ""JACOBI"" preconditioner, which is the default anyways.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1918
https://github.com/psi4/psi4/pull/1919:430,Testability,Test,Tested,430,"## Description; Fixes #1918 by removing the subspace preconditioner, per @robertodr's recommendation. This also adds some more comments to the code, crucially, the fact that this solves the problem `Hx=b` as opposed to `Hx+b=0`. Signs are important. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Disables the broken subspace preconditioner in the CGRSolver. ## Checklist; - [x] Tested that a helpful warning runs if the user specifies a subspace preconditioner for the CGRSolver. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1919
https://github.com/psi4/psi4/issues/1920:647,Availability,error,error,647,"Sorry, @hokru. I've been trying to build Francesco and Shuhe's [DSRG-PT2 gradient plugin](https://github.com/ustcwsh/Shuhe_Project) to test a theory. (In multiple senses of ""theory."") Shuhe's code was written for Python 2, so Psi rightly complains about invalid syntax. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 19, in <module>. File ""./../dsrgpt2_plug/__init__.py"", line 45; print ""imported so file: "", sofile; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""imported so file: "", sofile)?; ```. The error message that Holger's message extractor gives me is less readable. ```; !----------------------------------------------------------------------------------!; ! !; ! "", sofile !; ! , ^ !; ! ,SyntaxError: Missing parentheses in call to 'print'. Did you mean !; ! print(""imported so file: "", sofile)? !; ! !; !----------------------------------------------------------------------------------!; ```. The error extractor should be patched to just report the SyntaxError.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1920
https://github.com/psi4/psi4/issues/1920:1054,Availability,error,error,1054,"Sorry, @hokru. I've been trying to build Francesco and Shuhe's [DSRG-PT2 gradient plugin](https://github.com/ustcwsh/Shuhe_Project) to test a theory. (In multiple senses of ""theory."") Shuhe's code was written for Python 2, so Psi rightly complains about invalid syntax. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 19, in <module>. File ""./../dsrgpt2_plug/__init__.py"", line 45; print ""imported so file: "", sofile; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""imported so file: "", sofile)?; ```. The error message that Holger's message extractor gives me is less readable. ```; !----------------------------------------------------------------------------------!; ! !; ! "", sofile !; ! , ^ !; ! ,SyntaxError: Missing parentheses in call to 'print'. Did you mean !; ! print(""imported so file: "", sofile)? !; ! !; !----------------------------------------------------------------------------------!; ```. The error extractor should be patched to just report the SyntaxError.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1920
https://github.com/psi4/psi4/issues/1920:1080,Deployability,patch,patched,1080,"Sorry, @hokru. I've been trying to build Francesco and Shuhe's [DSRG-PT2 gradient plugin](https://github.com/ustcwsh/Shuhe_Project) to test a theory. (In multiple senses of ""theory."") Shuhe's code was written for Python 2, so Psi rightly complains about invalid syntax. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 19, in <module>. File ""./../dsrgpt2_plug/__init__.py"", line 45; print ""imported so file: "", sofile; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""imported so file: "", sofile)?; ```. The error message that Holger's message extractor gives me is less readable. ```; !----------------------------------------------------------------------------------!; ! !; ! "", sofile !; ! , ^ !; ! ,SyntaxError: Missing parentheses in call to 'print'. Did you mean !; ! print(""imported so file: "", sofile)? !; ! !; !----------------------------------------------------------------------------------!; ```. The error extractor should be patched to just report the SyntaxError.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1920
https://github.com/psi4/psi4/issues/1920:653,Integrability,message,message,653,"Sorry, @hokru. I've been trying to build Francesco and Shuhe's [DSRG-PT2 gradient plugin](https://github.com/ustcwsh/Shuhe_Project) to test a theory. (In multiple senses of ""theory."") Shuhe's code was written for Python 2, so Psi rightly complains about invalid syntax. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 19, in <module>. File ""./../dsrgpt2_plug/__init__.py"", line 45; print ""imported so file: "", sofile; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""imported so file: "", sofile)?; ```. The error message that Holger's message extractor gives me is less readable. ```; !----------------------------------------------------------------------------------!; ! !; ! "", sofile !; ! , ^ !; ! ,SyntaxError: Missing parentheses in call to 'print'. Did you mean !; ! print(""imported so file: "", sofile)? !; ! !; !----------------------------------------------------------------------------------!; ```. The error extractor should be patched to just report the SyntaxError.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1920
https://github.com/psi4/psi4/issues/1920:675,Integrability,message,message,675,"Sorry, @hokru. I've been trying to build Francesco and Shuhe's [DSRG-PT2 gradient plugin](https://github.com/ustcwsh/Shuhe_Project) to test a theory. (In multiple senses of ""theory."") Shuhe's code was written for Python 2, so Psi rightly complains about invalid syntax. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 19, in <module>. File ""./../dsrgpt2_plug/__init__.py"", line 45; print ""imported so file: "", sofile; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""imported so file: "", sofile)?; ```. The error message that Holger's message extractor gives me is less readable. ```; !----------------------------------------------------------------------------------!; ! !; ! "", sofile !; ! , ^ !; ! ,SyntaxError: Missing parentheses in call to 'print'. Did you mean !; ! print(""imported so file: "", sofile)? !; ! !; !----------------------------------------------------------------------------------!; ```. The error extractor should be patched to just report the SyntaxError.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1920
https://github.com/psi4/psi4/issues/1920:82,Modifiability,plugin,plugin,82,"Sorry, @hokru. I've been trying to build Francesco and Shuhe's [DSRG-PT2 gradient plugin](https://github.com/ustcwsh/Shuhe_Project) to test a theory. (In multiple senses of ""theory."") Shuhe's code was written for Python 2, so Psi rightly complains about invalid syntax. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 19, in <module>. File ""./../dsrgpt2_plug/__init__.py"", line 45; print ""imported so file: "", sofile; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""imported so file: "", sofile)?; ```. The error message that Holger's message extractor gives me is less readable. ```; !----------------------------------------------------------------------------------!; ! !; ! "", sofile !; ! , ^ !; ! ,SyntaxError: Missing parentheses in call to 'print'. Did you mean !; ! print(""imported so file: "", sofile)? !; ! !; !----------------------------------------------------------------------------------!; ```. The error extractor should be patched to just report the SyntaxError.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1920
https://github.com/psi4/psi4/issues/1920:135,Testability,test,test,135,"Sorry, @hokru. I've been trying to build Francesco and Shuhe's [DSRG-PT2 gradient plugin](https://github.com/ustcwsh/Shuhe_Project) to test a theory. (In multiple senses of ""theory."") Shuhe's code was written for Python 2, so Psi rightly complains about invalid syntax. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 19, in <module>. File ""./../dsrgpt2_plug/__init__.py"", line 45; print ""imported so file: "", sofile; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""imported so file: "", sofile)?; ```. The error message that Holger's message extractor gives me is less readable. ```; !----------------------------------------------------------------------------------!; ! !; ! "", sofile !; ! , ^ !; ! ,SyntaxError: Missing parentheses in call to 'print'. Did you mean !; ! print(""imported so file: "", sofile)? !; ! !; !----------------------------------------------------------------------------------!; ```. The error extractor should be patched to just report the SyntaxError.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1920
https://github.com/psi4/psi4/issues/1921:48087,Availability,error,error,48087,"= 179.050978 0.000006 0.918241 179.969219; 	 458 D(80,79,81,82) = -0.723483 -0.000001 0.699743 -0.023740; 	 459 R(1,57) = 4.556972 0.028391 82.812579 87.369551; 	 460 R(1,59) = 4.234547 -0.016108 88.866233 93.100780; 	 461 R(1,61) = 5.234532 -0.079923 136.786876 142.021408; 	 462 R(3,10) = 4.421241 -0.017502 87.218679 91.639920; 	 463 R(3,59) = 3.917839 0.129694 117.366756 121.284594; 	 464 R(26,42) = 5.126758 -0.254383 106.705426 111.832184; 	 465 R(27,42) = 5.013692 -0.066414 135.796477 140.810169; 	 466 R(27,43) = 3.922541 0.040579 56.026763 59.949304; 	 467 R(31,42) = 4.773179 -0.049073 86.931871 91.705050; 	 468 R(36,42) = 5.289417 -0.215249 119.067163 124.356580; 	 469 R(38,42) = 4.228544 -0.108830 108.926322 113.154866; 	 470 R(38,48) = 3.625076 0.487672 45.283805 48.908881; 	 471 R(40,42) = 3.912528 0.142787 93.032857 96.945385; 	 472 R(40,43) = 3.961431 -0.231133 75.232676 79.194108; 	 473 R(43,51) = 4.402298 -0.008954 137.557753 141.960051; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB33148410F for__signal_handl Unknown Unknown; libpthread-2.31.s 00007FB3362A83C0 Unknown Unknown Unknown; libc-2.31.so 00007FB3360E718B gsignal Unknown Unknown; libc-2.31.so 00007FB3360C6859 abort Unknown Unknown; core.cpython-37m- 00007FB3339FF4C7 Unknown Unknown Unknown; core.cpython-37m- 00007FB332555F1D Unknown Unknown Unknown; core.cpython-37m- 00007FB33256F3B1 Unknown Unknown Unknown; core.cpython-37m- 00007FB3320330E6 Unknown Unknown Unknown; python3.7 000055D780EDE114 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D780EDE231 _PyCFunction_Fast Unknown Unknown; python3.7 000055D780F42A5D _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780EDD917 _PyFunction_FastC Unknown Unknown; python3.7 000055D780F3F0A6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780E985F4 PyEval_EvalCodeEx Unknown Unknown",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921
https://github.com/psi4/psi4/issues/1921:18105,Energy Efficiency,energy,energy,18105,"015; 	 D(74,73,72,81) = -3.122676	 -178.916163; 	 D(74,73,75,76) = -0.011641	 -0.666985; 	 D(74,73,75,77) = 3.122888	 178.928328; 	 D(75,73,72,81) = -0.019333	 -1.107720; 	 D(75,77,79,80) = 3.131087	 179.398052; 	 D(75,77,79,81) = -0.015352	 -0.879608; 	 D(76,75,77,78) = -0.007210	 -0.413100; 	 D(76,75,77,79) = 3.133177	 179.517791; 	 D(77,79,81,82) = 3.133788	 179.552810; 	 D(78,77,79,80) = -0.011717	 -0.671362; 	 D(78,77,79,81) = 3.125029	 179.050978; 	 D(80,79,81,82) = -0.012627	 -0.723483; 	 R(1,57) = 8.611430	 4.556972; 	 R(1,59) = 8.002134	 4.234547; 	 R(1,61) = 9.891833	 5.234532; 	 R(3,10) = 8.354935	 4.421241; 	 R(3,59) = 7.403642	 3.917839; 	 R(26,42) = 9.688168	 5.126758; 	 R(27,42) = 9.474505	 5.013692; 	 R(27,43) = 7.412528	 3.922541; 	 R(31,42) = 9.020000	 4.773179; 	 R(36,42) = 9.995549	 5.289417; 	 R(38,42) = 7.990790	 4.228544; 	 R(38,48) = 6.850401	 3.625076; 	 R(40,42) = 7.393607	 3.912528; 	 R(40,43) = 7.486021	 3.961431; 	 R(43,51) = 8.319137	 4.402298. 	Current energy : -3922.0645401701. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1. 	Determining step-restricting scale parameter for RS-RFO.; 	Maximum step size allowed 0.50000. 	 Iter |step| alpha rfo_root ; 	------------------------------------------------; 	 0 0.83062 1.00000 1; 	 1 0.62444 1.92936 1; 	 2 0.52908 2.80267 1; 	 3 0.50229 3.14703 1; 	 4 0.50002 3.17893 1; 	 5 0.50000 3.17916 1; 	------------------------------------------------; 	Norm of target step-size 0.50000; 	Projected energy change by RFO approximation: -0.2098497469. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921
https://github.com/psi4/psi4/issues/1921:18696,Energy Efficiency,energy,energy,18696,"3,10) = 8.354935	 4.421241; 	 R(3,59) = 7.403642	 3.917839; 	 R(26,42) = 9.688168	 5.126758; 	 R(27,42) = 9.474505	 5.013692; 	 R(27,43) = 7.412528	 3.922541; 	 R(31,42) = 9.020000	 4.773179; 	 R(36,42) = 9.995549	 5.289417; 	 R(38,42) = 7.990790	 4.228544; 	 R(38,48) = 6.850401	 3.625076; 	 R(40,42) = 7.393607	 3.912528; 	 R(40,43) = 7.486021	 3.961431; 	 R(43,51) = 8.319137	 4.402298. 	Current energy : -3922.0645401701. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1. 	Determining step-restricting scale parameter for RS-RFO.; 	Maximum step size allowed 0.50000. 	 Iter |step| alpha rfo_root ; 	------------------------------------------------; 	 0 0.83062 1.00000 1; 	 1 0.62444 1.92936 1; 	 2 0.52908 2.80267 1; 	 3 0.50229 3.14703 1; 	 4 0.50002 3.17893 1; 	 5 0.50000 3.17916 1; 	------------------------------------------------; 	Norm of target step-size 0.50000; 	Projected energy change by RFO approximation: -0.2098497469. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.335710 0.090136 63.980301 66.316011; 	 2 R(1,3) = 2.326476 0.109678 63.375593 65.702069; 	 3 R(1,4) = 2.007516 0.188032 51.365464 53.372981; 	 4 R(1,7) = 2.016049 0.114287 51.538366 53.554415; 	 5 R(4,5) = 1.384412 -0.275784 46.225609 47.610021; 	 6 R(4,13) = 1.412329 -0.576035 19.811852 21.224182; 	 7 R(5,6) = 1.038942 -0.187283 12.792781 13.831723; 	 8 R(5,10) = 1.416684 -0.377534 28.841613 30.258297; 	 9 R(7,8) = 1.376927 -0.247751 46.770531 48.147458; 	 10 R(7,29) = 1.458156 -0.535463 11.368978 12.827134; 	 11 R(8,9) = 1.022473 -0.080776 17.987589 19.010062; 	 12 R(8,26) = 1.399864 -0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921
https://github.com/psi4/psi4/issues/1921:48127,Integrability,Rout,Routine,48127,"= 179.050978 0.000006 0.918241 179.969219; 	 458 D(80,79,81,82) = -0.723483 -0.000001 0.699743 -0.023740; 	 459 R(1,57) = 4.556972 0.028391 82.812579 87.369551; 	 460 R(1,59) = 4.234547 -0.016108 88.866233 93.100780; 	 461 R(1,61) = 5.234532 -0.079923 136.786876 142.021408; 	 462 R(3,10) = 4.421241 -0.017502 87.218679 91.639920; 	 463 R(3,59) = 3.917839 0.129694 117.366756 121.284594; 	 464 R(26,42) = 5.126758 -0.254383 106.705426 111.832184; 	 465 R(27,42) = 5.013692 -0.066414 135.796477 140.810169; 	 466 R(27,43) = 3.922541 0.040579 56.026763 59.949304; 	 467 R(31,42) = 4.773179 -0.049073 86.931871 91.705050; 	 468 R(36,42) = 5.289417 -0.215249 119.067163 124.356580; 	 469 R(38,42) = 4.228544 -0.108830 108.926322 113.154866; 	 470 R(38,48) = 3.625076 0.487672 45.283805 48.908881; 	 471 R(40,42) = 3.912528 0.142787 93.032857 96.945385; 	 472 R(40,43) = 3.961431 -0.231133 75.232676 79.194108; 	 473 R(43,51) = 4.402298 -0.008954 137.557753 141.960051; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB33148410F for__signal_handl Unknown Unknown; libpthread-2.31.s 00007FB3362A83C0 Unknown Unknown Unknown; libc-2.31.so 00007FB3360E718B gsignal Unknown Unknown; libc-2.31.so 00007FB3360C6859 abort Unknown Unknown; core.cpython-37m- 00007FB3339FF4C7 Unknown Unknown Unknown; core.cpython-37m- 00007FB332555F1D Unknown Unknown Unknown; core.cpython-37m- 00007FB33256F3B1 Unknown Unknown Unknown; core.cpython-37m- 00007FB3320330E6 Unknown Unknown Unknown; python3.7 000055D780EDE114 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D780EDE231 _PyCFunction_Fast Unknown Unknown; python3.7 000055D780F42A5D _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780EDD917 _PyFunction_FastC Unknown Unknown; python3.7 000055D780F3F0A6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780E985F4 PyEval_EvalCodeEx Unknown Unknown",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921
https://github.com/psi4/psi4/issues/1921:9,Performance,optimiz,optimization,9,"Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.413853	 2.335710; 	 R(1,3) = 4.396402	 2.326476; 	 R(1,4) = 3.793656	 2.007516; 	 R(1,7) = 3.809780	 2.016049; 	 R(4,5) = 2.616159	 1.384412; 	 R(4,13) = 2.668916	 1.412329; 	 R(5,6) = 1.963315	 1.038942; 	 R(5,10) = 2.677145	 1.416684; 	 R(7,8) = 2.602016	 1.376927; 	 R(7,29) = 2.755516	 1.458156; 	 R(8,9) = 1.932195	 1.022473; 	 R(8,26) = 2.645360	 1.399864; 	 R(10,11) = 2.753932	 1.457318; 	 R(10,15) = 2.759721	 1.460381; 	 R(11,12) = 2.041576	 1.080355; 	 R(11,13) = 2.590332	 1.370745; 	 R(13,14) = 2.036558	 1.077700; 	 R(15,16) = 2.659974	 1.407597; 	 R(15,24) = 2.642044	 1.398110; 	 R(16,17) = 2.044694	 1.082006; 	 R(16,18) = 2.630038	 1.391756; 	 R(18,19) = 2.044735	 1.082027; 	 R(18,20) = 2.637386	 1.395644; 	 R(20,21) = 2.038431	 1.078691; 	 R(20,22) = 2.641133	 1.397628; 	 R(22,23) = 2.040026	 1.079535; 	 R(22,24) = 2.631332	 1.392441; 	 R(24,25) = 2.044993	 1.082163; 	 R(26,27) = 2.527061	 1.337263; 	 R(26,31) = 2.792237	 1.477588; 	 R(27,28) = 2.042107	 1.080636; 	 R(27,29) = 2.822048	 1.493363; 	 R(29,30) = 2.100722	 1.111654; 	 R(29,58) = 5.078473	 2.687412; 	 R(31,32) = 2.664874	 1.410191; 	 R(31,40) = 2.651117	 1.402911; 	 R(32,33) = 2.041331	 1.080226; 	 R(32,34) = 2.630156	 1.391819; 	 R(34,35) = 2.045401	 1.082380; 	 R(34,36) = 2.634668	 1.394206; 	 R(36,37) = 2.040435	 1.079752; 	 R(36,38) = 2.640649	 1.397371; 	 R(38,39) = 2.040995	 1.080048; 	 R(38,40) = 2.635383	 1.394585; 	 R(40,41) = 2.041778	 1.080462; 	 R(42,43) = 4.405069	 2.331062; 	 R(42,44) = 4.409579	 2.333449; 	 R(42,45) = 3.790992	 2.006107; 	 R(42,48) = 3.811335	 2.016872; 	 R(45,46) = 2.616045	 1.384352; 	 R(45,54) = 2.676356	 1.416267; 	 R(46,47) = 1.967660	 1.041241; 	 R(46,51) = 2.675888	 1.416019; 	 R(48,49) = 2.600961	 1.376369; 	 R(48,70) = 2.754963	 1.457863; 	 R(49,50) = 1.935929	 1.024450; 	 R(49,67) = 2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921
https://github.com/psi4/psi4/issues/1921:56,Performance,optimiz,optimization,56,"Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.413853	 2.335710; 	 R(1,3) = 4.396402	 2.326476; 	 R(1,4) = 3.793656	 2.007516; 	 R(1,7) = 3.809780	 2.016049; 	 R(4,5) = 2.616159	 1.384412; 	 R(4,13) = 2.668916	 1.412329; 	 R(5,6) = 1.963315	 1.038942; 	 R(5,10) = 2.677145	 1.416684; 	 R(7,8) = 2.602016	 1.376927; 	 R(7,29) = 2.755516	 1.458156; 	 R(8,9) = 1.932195	 1.022473; 	 R(8,26) = 2.645360	 1.399864; 	 R(10,11) = 2.753932	 1.457318; 	 R(10,15) = 2.759721	 1.460381; 	 R(11,12) = 2.041576	 1.080355; 	 R(11,13) = 2.590332	 1.370745; 	 R(13,14) = 2.036558	 1.077700; 	 R(15,16) = 2.659974	 1.407597; 	 R(15,24) = 2.642044	 1.398110; 	 R(16,17) = 2.044694	 1.082006; 	 R(16,18) = 2.630038	 1.391756; 	 R(18,19) = 2.044735	 1.082027; 	 R(18,20) = 2.637386	 1.395644; 	 R(20,21) = 2.038431	 1.078691; 	 R(20,22) = 2.641133	 1.397628; 	 R(22,23) = 2.040026	 1.079535; 	 R(22,24) = 2.631332	 1.392441; 	 R(24,25) = 2.044993	 1.082163; 	 R(26,27) = 2.527061	 1.337263; 	 R(26,31) = 2.792237	 1.477588; 	 R(27,28) = 2.042107	 1.080636; 	 R(27,29) = 2.822048	 1.493363; 	 R(29,30) = 2.100722	 1.111654; 	 R(29,58) = 5.078473	 2.687412; 	 R(31,32) = 2.664874	 1.410191; 	 R(31,40) = 2.651117	 1.402911; 	 R(32,33) = 2.041331	 1.080226; 	 R(32,34) = 2.630156	 1.391819; 	 R(34,35) = 2.045401	 1.082380; 	 R(34,36) = 2.634668	 1.394206; 	 R(36,37) = 2.040435	 1.079752; 	 R(36,38) = 2.640649	 1.397371; 	 R(38,39) = 2.040995	 1.080048; 	 R(38,40) = 2.635383	 1.394585; 	 R(40,41) = 2.041778	 1.080462; 	 R(42,43) = 4.405069	 2.331062; 	 R(42,44) = 4.409579	 2.333449; 	 R(42,45) = 3.790992	 2.006107; 	 R(42,48) = 3.811335	 2.016872; 	 R(45,46) = 2.616045	 1.384352; 	 R(45,54) = 2.676356	 1.416267; 	 R(46,47) = 1.967660	 1.041241; 	 R(46,51) = 2.675888	 1.416019; 	 R(48,49) = 2.600961	 1.376369; 	 R(48,70) = 2.754963	 1.457863; 	 R(49,50) = 1.935929	 1.024450; 	 R(49,67) = 2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921
https://github.com/psi4/psi4/issues/1921:18209,Performance,optimiz,optimization,18209,") = 3.122888	 178.928328; 	 D(75,73,72,81) = -0.019333	 -1.107720; 	 D(75,77,79,80) = 3.131087	 179.398052; 	 D(75,77,79,81) = -0.015352	 -0.879608; 	 D(76,75,77,78) = -0.007210	 -0.413100; 	 D(76,75,77,79) = 3.133177	 179.517791; 	 D(77,79,81,82) = 3.133788	 179.552810; 	 D(78,77,79,80) = -0.011717	 -0.671362; 	 D(78,77,79,81) = 3.125029	 179.050978; 	 D(80,79,81,82) = -0.012627	 -0.723483; 	 R(1,57) = 8.611430	 4.556972; 	 R(1,59) = 8.002134	 4.234547; 	 R(1,61) = 9.891833	 5.234532; 	 R(3,10) = 8.354935	 4.421241; 	 R(3,59) = 7.403642	 3.917839; 	 R(26,42) = 9.688168	 5.126758; 	 R(27,42) = 9.474505	 5.013692; 	 R(27,43) = 7.412528	 3.922541; 	 R(31,42) = 9.020000	 4.773179; 	 R(36,42) = 9.995549	 5.289417; 	 R(38,42) = 7.990790	 4.228544; 	 R(38,48) = 6.850401	 3.625076; 	 R(40,42) = 7.393607	 3.912528; 	 R(40,43) = 7.486021	 3.961431; 	 R(43,51) = 8.319137	 4.402298. 	Current energy : -3922.0645401701. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1. 	Determining step-restricting scale parameter for RS-RFO.; 	Maximum step size allowed 0.50000. 	 Iter |step| alpha rfo_root ; 	------------------------------------------------; 	 0 0.83062 1.00000 1; 	 1 0.62444 1.92936 1; 	 2 0.52908 2.80267 1; 	 3 0.50229 3.14703 1; 	 4 0.50002 3.17893 1; 	 5 0.50000 3.17916 1; 	------------------------------------------------; 	Norm of target step-size 0.50000; 	Projected energy change by RFO approximation: -0.2098497469. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.335710 0.090136 63.980301 66.316011; 	 2 R(1,3) = 2.326476 0.109678 63.375593 65.702069; 	 3 R(1,4)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921
https://github.com/psi4/psi4/issues/1921:48099,Safety,Abort,Abort,48099,"= 179.050978 0.000006 0.918241 179.969219; 	 458 D(80,79,81,82) = -0.723483 -0.000001 0.699743 -0.023740; 	 459 R(1,57) = 4.556972 0.028391 82.812579 87.369551; 	 460 R(1,59) = 4.234547 -0.016108 88.866233 93.100780; 	 461 R(1,61) = 5.234532 -0.079923 136.786876 142.021408; 	 462 R(3,10) = 4.421241 -0.017502 87.218679 91.639920; 	 463 R(3,59) = 3.917839 0.129694 117.366756 121.284594; 	 464 R(26,42) = 5.126758 -0.254383 106.705426 111.832184; 	 465 R(27,42) = 5.013692 -0.066414 135.796477 140.810169; 	 466 R(27,43) = 3.922541 0.040579 56.026763 59.949304; 	 467 R(31,42) = 4.773179 -0.049073 86.931871 91.705050; 	 468 R(36,42) = 5.289417 -0.215249 119.067163 124.356580; 	 469 R(38,42) = 4.228544 -0.108830 108.926322 113.154866; 	 470 R(38,48) = 3.625076 0.487672 45.283805 48.908881; 	 471 R(40,42) = 3.912528 0.142787 93.032857 96.945385; 	 472 R(40,43) = 3.961431 -0.231133 75.232676 79.194108; 	 473 R(43,51) = 4.402298 -0.008954 137.557753 141.960051; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB33148410F for__signal_handl Unknown Unknown; libpthread-2.31.s 00007FB3362A83C0 Unknown Unknown Unknown; libc-2.31.so 00007FB3360E718B gsignal Unknown Unknown; libc-2.31.so 00007FB3360C6859 abort Unknown Unknown; core.cpython-37m- 00007FB3339FF4C7 Unknown Unknown Unknown; core.cpython-37m- 00007FB332555F1D Unknown Unknown Unknown; core.cpython-37m- 00007FB33256F3B1 Unknown Unknown Unknown; core.cpython-37m- 00007FB3320330E6 Unknown Unknown Unknown; python3.7 000055D780EDE114 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D780EDE231 _PyCFunction_Fast Unknown Unknown; python3.7 000055D780F42A5D _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780EDD917 _PyFunction_FastC Unknown Unknown; python3.7 000055D780F3F0A6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780E985F4 PyEval_EvalCodeEx Unknown Unknown",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921
https://github.com/psi4/psi4/issues/1921:48357,Safety,abort,abort,48357,"9923 136.786876 142.021408; 	 462 R(3,10) = 4.421241 -0.017502 87.218679 91.639920; 	 463 R(3,59) = 3.917839 0.129694 117.366756 121.284594; 	 464 R(26,42) = 5.126758 -0.254383 106.705426 111.832184; 	 465 R(27,42) = 5.013692 -0.066414 135.796477 140.810169; 	 466 R(27,43) = 3.922541 0.040579 56.026763 59.949304; 	 467 R(31,42) = 4.773179 -0.049073 86.931871 91.705050; 	 468 R(36,42) = 5.289417 -0.215249 119.067163 124.356580; 	 469 R(38,42) = 4.228544 -0.108830 108.926322 113.154866; 	 470 R(38,48) = 3.625076 0.487672 45.283805 48.908881; 	 471 R(40,42) = 3.912528 0.142787 93.032857 96.945385; 	 472 R(40,43) = 3.961431 -0.231133 75.232676 79.194108; 	 473 R(43,51) = 4.402298 -0.008954 137.557753 141.960051; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB33148410F for__signal_handl Unknown Unknown; libpthread-2.31.s 00007FB3362A83C0 Unknown Unknown Unknown; libc-2.31.so 00007FB3360E718B gsignal Unknown Unknown; libc-2.31.so 00007FB3360C6859 abort Unknown Unknown; core.cpython-37m- 00007FB3339FF4C7 Unknown Unknown Unknown; core.cpython-37m- 00007FB332555F1D Unknown Unknown Unknown; core.cpython-37m- 00007FB33256F3B1 Unknown Unknown Unknown; core.cpython-37m- 00007FB3320330E6 Unknown Unknown Unknown; python3.7 000055D780EDE114 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D780EDE231 _PyCFunction_Fast Unknown Unknown; python3.7 000055D780F42A5D _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780EDD917 _PyFunction_FastC Unknown Unknown; python3.7 000055D780F3F0A6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780E985F4 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D780E9861C PyEval_EvalCode Unknown Unknown; python3.7 000055D780F99974 Unknown Unknown Unknown; python3.7 000055D780FA4BDD PyRun_StringFlags Unknown Unknown; python3.7 000055D780F4D854 Unknown Unknown Unknown; python3.7 000055D78",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1921
https://github.com/psi4/psi4/pull/1922:24,Deployability,update,updates,24,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1922
https://github.com/psi4/psi4/pull/1922:252,Deployability,Update,Updated,252,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1922
https://github.com/psi4/psi4/pull/1922:43,Integrability,interface,interface,43,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1922
https://github.com/psi4/psi4/pull/1922:260,Integrability,interface,interface,260,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1922
https://github.com/psi4/psi4/pull/1922:124,Performance,perform,performance,124,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1922
https://github.com/psi4/psi4/pull/1922:368,Testability,Test,Tests,368,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1922
https://github.com/psi4/psi4/pull/1922:442,Testability,test,tests,442,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1922
https://github.com/psi4/psi4/pull/1922:533,Testability,test,tests,533,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1922
https://github.com/psi4/psi4/pull/1923:78,Availability,error,errors,78,"## Description; This PR closes #1916 and corrects a bug causing third-decimal errors in gradients computed by `dfmp2` with the frozen virtual approximation. See the commit marked ""Bugfix!"" to see exactly what the issue was. There was a sign error, and Rob was looping over frozen core orbitals when he meant to loop over frozen virtual orbitals. More importantly for me, this code inserts many, many comments into Rob's code, so I know what I'm doing when I modify it throughout the rest of this PR series. This includes uncovering a very devious computational trick, that as far as I know is unpublished, and also some errors in the original papers. Many thanks to Francesco and Shuhe for the DSRG-PT2 paper, which formed part of the Rosetta Stone for figuring out how this code works. Several explicit types are now `auto`. Reviewers, double-check that I didn't accidentally remove a pass-by-reference or `const` declaration when doing so. Lastly, `test_gradients.py` has been added to pytests to confirm the accuracy of `dfmp2` gradients. This PR series will culminate with the addition of DF-ODC-12 to `test_gradients.py`. Currently, DF-ODC-12 would fail due to #1579. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Corrects a critical bug causing errors in frozen virtual gradients computed with the `dfmp2` module; - [x] Adds many comments to `dfmp2`; - [x] Replaces a lot of explicit type with `auto`. ## Checklist; - [x] Tests added for newly working features; - [x] `dfmp2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1923
https://github.com/psi4/psi4/pull/1923:241,Availability,error,error,241,"## Description; This PR closes #1916 and corrects a bug causing third-decimal errors in gradients computed by `dfmp2` with the frozen virtual approximation. See the commit marked ""Bugfix!"" to see exactly what the issue was. There was a sign error, and Rob was looping over frozen core orbitals when he meant to loop over frozen virtual orbitals. More importantly for me, this code inserts many, many comments into Rob's code, so I know what I'm doing when I modify it throughout the rest of this PR series. This includes uncovering a very devious computational trick, that as far as I know is unpublished, and also some errors in the original papers. Many thanks to Francesco and Shuhe for the DSRG-PT2 paper, which formed part of the Rosetta Stone for figuring out how this code works. Several explicit types are now `auto`. Reviewers, double-check that I didn't accidentally remove a pass-by-reference or `const` declaration when doing so. Lastly, `test_gradients.py` has been added to pytests to confirm the accuracy of `dfmp2` gradients. This PR series will culminate with the addition of DF-ODC-12 to `test_gradients.py`. Currently, DF-ODC-12 would fail due to #1579. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Corrects a critical bug causing errors in frozen virtual gradients computed with the `dfmp2` module; - [x] Adds many comments to `dfmp2`; - [x] Replaces a lot of explicit type with `auto`. ## Checklist; - [x] Tests added for newly working features; - [x] `dfmp2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1923
https://github.com/psi4/psi4/pull/1923:620,Availability,error,errors,620,"## Description; This PR closes #1916 and corrects a bug causing third-decimal errors in gradients computed by `dfmp2` with the frozen virtual approximation. See the commit marked ""Bugfix!"" to see exactly what the issue was. There was a sign error, and Rob was looping over frozen core orbitals when he meant to loop over frozen virtual orbitals. More importantly for me, this code inserts many, many comments into Rob's code, so I know what I'm doing when I modify it throughout the rest of this PR series. This includes uncovering a very devious computational trick, that as far as I know is unpublished, and also some errors in the original papers. Many thanks to Francesco and Shuhe for the DSRG-PT2 paper, which formed part of the Rosetta Stone for figuring out how this code works. Several explicit types are now `auto`. Reviewers, double-check that I didn't accidentally remove a pass-by-reference or `const` declaration when doing so. Lastly, `test_gradients.py` has been added to pytests to confirm the accuracy of `dfmp2` gradients. This PR series will culminate with the addition of DF-ODC-12 to `test_gradients.py`. Currently, DF-ODC-12 would fail due to #1579. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Corrects a critical bug causing errors in frozen virtual gradients computed with the `dfmp2` module; - [x] Adds many comments to `dfmp2`; - [x] Replaces a lot of explicit type with `auto`. ## Checklist; - [x] Tests added for newly working features; - [x] `dfmp2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1923
https://github.com/psi4/psi4/pull/1923:1303,Availability,error,errors,1303,"## Description; This PR closes #1916 and corrects a bug causing third-decimal errors in gradients computed by `dfmp2` with the frozen virtual approximation. See the commit marked ""Bugfix!"" to see exactly what the issue was. There was a sign error, and Rob was looping over frozen core orbitals when he meant to loop over frozen virtual orbitals. More importantly for me, this code inserts many, many comments into Rob's code, so I know what I'm doing when I modify it throughout the rest of this PR series. This includes uncovering a very devious computational trick, that as far as I know is unpublished, and also some errors in the original papers. Many thanks to Francesco and Shuhe for the DSRG-PT2 paper, which formed part of the Rosetta Stone for figuring out how this code works. Several explicit types are now `auto`. Reviewers, double-check that I didn't accidentally remove a pass-by-reference or `const` declaration when doing so. Lastly, `test_gradients.py` has been added to pytests to confirm the accuracy of `dfmp2` gradients. This PR series will culminate with the addition of DF-ODC-12 to `test_gradients.py`. Currently, DF-ODC-12 would fail due to #1579. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Corrects a critical bug causing errors in frozen virtual gradients computed with the `dfmp2` module; - [x] Adds many comments to `dfmp2`; - [x] Replaces a lot of explicit type with `auto`. ## Checklist; - [x] Tests added for newly working features; - [x] `dfmp2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1923
https://github.com/psi4/psi4/pull/1923:1480,Testability,Test,Tests,1480,"## Description; This PR closes #1916 and corrects a bug causing third-decimal errors in gradients computed by `dfmp2` with the frozen virtual approximation. See the commit marked ""Bugfix!"" to see exactly what the issue was. There was a sign error, and Rob was looping over frozen core orbitals when he meant to loop over frozen virtual orbitals. More importantly for me, this code inserts many, many comments into Rob's code, so I know what I'm doing when I modify it throughout the rest of this PR series. This includes uncovering a very devious computational trick, that as far as I know is unpublished, and also some errors in the original papers. Many thanks to Francesco and Shuhe for the DSRG-PT2 paper, which formed part of the Rosetta Stone for figuring out how this code works. Several explicit types are now `auto`. Reviewers, double-check that I didn't accidentally remove a pass-by-reference or `const` declaration when doing so. Lastly, `test_gradients.py` has been added to pytests to confirm the accuracy of `dfmp2` gradients. This PR series will culminate with the addition of DF-ODC-12 to `test_gradients.py`. Currently, DF-ODC-12 would fail due to #1579. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Corrects a critical bug causing errors in frozen virtual gradients computed with the `dfmp2` module; - [x] Adds many comments to `dfmp2`; - [x] Replaces a lot of explicit type with `auto`. ## Checklist; - [x] Tests added for newly working features; - [x] `dfmp2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1923
https://github.com/psi4/psi4/pull/1923:1534,Testability,test,tests,1534,"## Description; This PR closes #1916 and corrects a bug causing third-decimal errors in gradients computed by `dfmp2` with the frozen virtual approximation. See the commit marked ""Bugfix!"" to see exactly what the issue was. There was a sign error, and Rob was looping over frozen core orbitals when he meant to loop over frozen virtual orbitals. More importantly for me, this code inserts many, many comments into Rob's code, so I know what I'm doing when I modify it throughout the rest of this PR series. This includes uncovering a very devious computational trick, that as far as I know is unpublished, and also some errors in the original papers. Many thanks to Francesco and Shuhe for the DSRG-PT2 paper, which formed part of the Rosetta Stone for figuring out how this code works. Several explicit types are now `auto`. Reviewers, double-check that I didn't accidentally remove a pass-by-reference or `const` declaration when doing so. Lastly, `test_gradients.py` has been added to pytests to confirm the accuracy of `dfmp2` gradients. This PR series will culminate with the addition of DF-ODC-12 to `test_gradients.py`. Currently, DF-ODC-12 would fail due to #1579. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Corrects a critical bug causing errors in frozen virtual gradients computed with the `dfmp2` module; - [x] Adds many comments to `dfmp2`; - [x] Replaces a lot of explicit type with `auto`. ## Checklist; - [x] Tests added for newly working features; - [x] `dfmp2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1923
https://github.com/psi4/psi4/issues/1924:542,Availability,error,error,542,"Carried forward from [forums](http://forum.psicode.org/t/psi4-crashes-abort-trap-signal-with-no-information/1806/5). The following input file; ```; molecule { ; -1 1; N 1.105000 0.080000 -0.002000; O 0.484000 -0.993000 -0.081000; O 0.484000 1.153000 0.078000; O 2.347000 0.080000 -0.002000; }; set {; g_convergence GAU_LOOSE; geom_maxiter 3; }; memory 700MB; optimize('wb97x/6-31G*'); ```; leads optking to abort the computation on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/optking.cc#L578). It looks like an error was raised somewhere else, but there's no indication of where.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1924
https://github.com/psi4/psi4/issues/1924:359,Performance,optimiz,optimize,359,"Carried forward from [forums](http://forum.psicode.org/t/psi4-crashes-abort-trap-signal-with-no-information/1806/5). The following input file; ```; molecule { ; -1 1; N 1.105000 0.080000 -0.002000; O 0.484000 -0.993000 -0.081000; O 0.484000 1.153000 0.078000; O 2.347000 0.080000 -0.002000; }; set {; g_convergence GAU_LOOSE; geom_maxiter 3; }; memory 700MB; optimize('wb97x/6-31G*'); ```; leads optking to abort the computation on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/optking.cc#L578). It looks like an error was raised somewhere else, but there's no indication of where.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1924
https://github.com/psi4/psi4/issues/1924:70,Safety,abort,abort-trap-signal-with-no-information,70,"Carried forward from [forums](http://forum.psicode.org/t/psi4-crashes-abort-trap-signal-with-no-information/1806/5). The following input file; ```; molecule { ; -1 1; N 1.105000 0.080000 -0.002000; O 0.484000 -0.993000 -0.081000; O 0.484000 1.153000 0.078000; O 2.347000 0.080000 -0.002000; }; set {; g_convergence GAU_LOOSE; geom_maxiter 3; }; memory 700MB; optimize('wb97x/6-31G*'); ```; leads optking to abort the computation on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/optking.cc#L578). It looks like an error was raised somewhere else, but there's no indication of where.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1924
https://github.com/psi4/psi4/issues/1924:407,Safety,abort,abort,407,"Carried forward from [forums](http://forum.psicode.org/t/psi4-crashes-abort-trap-signal-with-no-information/1806/5). The following input file; ```; molecule { ; -1 1; N 1.105000 0.080000 -0.002000; O 0.484000 -0.993000 -0.081000; O 0.484000 1.153000 0.078000; O 2.347000 0.080000 -0.002000; }; set {; g_convergence GAU_LOOSE; geom_maxiter 3; }; memory 700MB; optimize('wb97x/6-31G*'); ```; leads optking to abort the computation on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/optking.cc#L578). It looks like an error was raised somewhere else, but there's no indication of where.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1924
https://github.com/psi4/psi4/pull/1925:266,Availability,error,error,266,## Description; The main script (`run_psi4.py` in the source tree or `psi4` when installed) was importing qcelemental before it had a chance to modify the Python search path. If you didn't already have a copy of qcelemental in your Python search path would cause an error. Encountered this on our cluster while trying to run the tests. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1925
https://github.com/psi4/psi4/pull/1925:81,Deployability,install,installed,81,## Description; The main script (`run_psi4.py` in the source tree or `psi4` when installed) was importing qcelemental before it had a chance to modify the Python search path. If you didn't already have a copy of qcelemental in your Python search path would cause an error. Encountered this on our cluster while trying to run the tests. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1925
https://github.com/psi4/psi4/pull/1925:329,Testability,test,tests,329,## Description; The main script (`run_psi4.py` in the source tree or `psi4` when installed) was importing qcelemental before it had a chance to modify the Python search path. If you didn't already have a copy of qcelemental in your Python search path would cause an error. Encountered this on our cluster while trying to run the tests. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1925
https://github.com/psi4/psi4/pull/1926:41,Testability,test,test,41,"## Description; now we can have >1 detci test in the whole pytest suite. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] cepa directed to fnocc was running conv when user requested (unavailable) df. now stops. thanks, @JonathonMisiewicz ; - [x] close detci files so independent psiapi calcs possible. ## Questions; - [x] @CDSherrill should `CI_FILE_START` be shifted so others aren't confused by seeming overlap with https://github.com/psi4/psi4/blob/master/psi4/include/psi4/psifiles.h#L77-L81 ? maybe 350. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1926
https://github.com/psi4/psi4/pull/1926:578,Testability,Test,Tests,578,"## Description; now we can have >1 detci test in the whole pytest suite. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] cepa directed to fnocc was running conv when user requested (unavailable) df. now stops. thanks, @JonathonMisiewicz ; - [x] close detci files so independent psiapi calcs possible. ## Questions; - [x] @CDSherrill should `CI_FILE_START` be shifted so others aren't confused by seeming overlap with https://github.com/psi4/psi4/blob/master/psi4/include/psi4/psifiles.h#L77-L81 ? maybe 350. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1926
https://github.com/psi4/psi4/pull/1926:652,Testability,test,tests,652,"## Description; now we can have >1 detci test in the whole pytest suite. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] cepa directed to fnocc was running conv when user requested (unavailable) df. now stops. thanks, @JonathonMisiewicz ; - [x] close detci files so independent psiapi calcs possible. ## Questions; - [x] @CDSherrill should `CI_FILE_START` be shifted so others aren't confused by seeming overlap with https://github.com/psi4/psi4/blob/master/psi4/include/psi4/psifiles.h#L77-L81 ? maybe 350. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1926
https://github.com/psi4/psi4/pull/1926:743,Testability,test,tests,743,"## Description; now we can have >1 detci test in the whole pytest suite. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] cepa directed to fnocc was running conv when user requested (unavailable) df. now stops. thanks, @JonathonMisiewicz ; - [x] close detci files so independent psiapi calcs possible. ## Questions; - [x] @CDSherrill should `CI_FILE_START` be shifted so others aren't confused by seeming overlap with https://github.com/psi4/psi4/blob/master/psi4/include/psi4/psifiles.h#L77-L81 ? maybe 350. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1926
https://github.com/psi4/psi4/pull/1927:45,Modifiability,variab,variable,45,"## Description; Assigning an int to an array variable accepts it as a one-item array, rather than throwing a fit. @robertodr, this should work for https://github.com/psi4/psi4/pull/1814#issuecomment-642655962. Feel free to just incorporate these lines into your TDDFT PR. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1927
https://github.com/psi4/psi4/pull/1927:292,Testability,Test,Tests,292,"## Description; Assigning an int to an array variable accepts it as a one-item array, rather than throwing a fit. @robertodr, this should work for https://github.com/psi4/psi4/pull/1814#issuecomment-642655962. Feel free to just incorporate these lines into your TDDFT PR. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1927
https://github.com/psi4/psi4/pull/1927:366,Testability,test,tests,366,"## Description; Assigning an int to an array variable accepts it as a one-item array, rather than throwing a fit. @robertodr, this should work for https://github.com/psi4/psi4/pull/1814#issuecomment-642655962. Feel free to just incorporate these lines into your TDDFT PR. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1927
https://github.com/psi4/psi4/pull/1927:457,Testability,test,tests,457,"## Description; Assigning an int to an array variable accepts it as a one-item array, rather than throwing a fit. @robertodr, this should work for https://github.com/psi4/psi4/pull/1814#issuecomment-642655962. Feel free to just incorporate these lines into your TDDFT PR. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1927
https://github.com/psi4/psi4/pull/1928:1304,Testability,Test,Tests,1304,"## Description; UHF CCSD gradients were crashing but only in subsequent jobs like the below. Culprit was freeing the opdm https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccdensity/ccdensity.cc#L416. opdm wasn't getting set for UHF, but it wasn't null either for `free_block` to pass by. Is this a sensible solution?. ```; molecule hf {; H; F 1 0.917; }. set reference rhf; gradient(""ccsd/cc-pvdz"", molecule=hf). clean(). set reference uhf; gradient(""ccsd/cc-pvdz"", molecule=hf); ```. snapshot of what was getting set for the various references:; ```; >>> grep O ccdensity/sortone* | grep -v OEI | grep O | grep opdm; ccdensity/sortone_RHF.cc:** matrix, O (moinfo.opdm), which we also symmetrize by computing Opq; ccdensity/sortone_RHF.cc: moinfo.opdm = O;; ccdensity/sortone_ROHF.cc:** matrix, O (moinfo.opdm), which we also symmetrize by computing Opq; ccdensity/sortone_ROHF.cc: moinfo.opdm_a = O_a;; ccdensity/sortone_ROHF.cc: moinfo.opdm_b = O_b;; ccdensity/sortone_ROHF.cc: moinfo.opdm = O;; ccdensity/sortone_UHF.cc:** spin-factored matrices, O_a (moinfo.opdm_a) and O_b; ccdensity/sortone_UHF.cc:** (moinfo.opdm_b), which we also symmetrize by computing Opq = 1/2; ccdensity/sortone_UHF.cc: moinfo.opdm_a = O_a;; ccdensity/sortone_UHF.cc: moinfo.opdm_b = O_b;; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] all CC tests run. ## Status; - [x] Ready for review; - [x] Ready for merge. closes #1652",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1928
https://github.com/psi4/psi4/pull/1928:1352,Testability,test,tests,1352,"## Description; UHF CCSD gradients were crashing but only in subsequent jobs like the below. Culprit was freeing the opdm https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccdensity/ccdensity.cc#L416. opdm wasn't getting set for UHF, but it wasn't null either for `free_block` to pass by. Is this a sensible solution?. ```; molecule hf {; H; F 1 0.917; }. set reference rhf; gradient(""ccsd/cc-pvdz"", molecule=hf). clean(). set reference uhf; gradient(""ccsd/cc-pvdz"", molecule=hf); ```. snapshot of what was getting set for the various references:; ```; >>> grep O ccdensity/sortone* | grep -v OEI | grep O | grep opdm; ccdensity/sortone_RHF.cc:** matrix, O (moinfo.opdm), which we also symmetrize by computing Opq; ccdensity/sortone_RHF.cc: moinfo.opdm = O;; ccdensity/sortone_ROHF.cc:** matrix, O (moinfo.opdm), which we also symmetrize by computing Opq; ccdensity/sortone_ROHF.cc: moinfo.opdm_a = O_a;; ccdensity/sortone_ROHF.cc: moinfo.opdm_b = O_b;; ccdensity/sortone_ROHF.cc: moinfo.opdm = O;; ccdensity/sortone_UHF.cc:** spin-factored matrices, O_a (moinfo.opdm_a) and O_b; ccdensity/sortone_UHF.cc:** (moinfo.opdm_b), which we also symmetrize by computing Opq = 1/2; ccdensity/sortone_UHF.cc: moinfo.opdm_a = O_a;; ccdensity/sortone_UHF.cc: moinfo.opdm_b = O_b;; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] all CC tests run. ## Status; - [x] Ready for review; - [x] Ready for merge. closes #1652",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1928
https://github.com/psi4/psi4/pull/1930:416,Testability,Test,Tests,416,"## Description; In some basis sets that contain ECPs, the ""valence"" f-shell is included in the effective core. This seems true for all post-lanthanide/actinide atoms. . In current master, those 60 ECP electrons are always frozen, but in a non-ECP basis with frozen core we'd freeze only 54 of those. The simple solution is to always freeze the 4f electrons (for 6th period) if the shell is full. ## Checklist; - [x] Tests added for any new features; - [x] `ctest -L ecp` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1930
https://github.com/psi4/psi4/pull/1930:304,Usability,simpl,simple,304,"## Description; In some basis sets that contain ECPs, the ""valence"" f-shell is included in the effective core. This seems true for all post-lanthanide/actinide atoms. . In current master, those 60 ECP electrons are always frozen, but in a non-ECP basis with frozen core we'd freeze only 54 of those. The simple solution is to always freeze the 4f electrons (for 6th period) if the shell is full. ## Checklist; - [x] Tests added for any new features; - [x] `ctest -L ecp` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1930
https://github.com/psi4/psi4/issues/1931:397,Availability,error,error,397,"Carried forward from [the forums](http://forum.psicode.org/t/a-roots-per-irrep-value-crashes-cc3/1826). The following input file. ```; molecule radical {; 0 2; O 0.0000000000 0.0000000000 0.1081705869; H 0.0000000000 0.0000000000 -0.8651605869; units angstrom; symmetry C1; }; set {; basis ""6-31+G(d)""; reference ""uhf""; freeze_core true; roots_per_irrep [3] ; }; energy('eom-cc3'); ```. gives the error `Parameter 3 was incorrect on entry to DGEBAL.` and then segfaults. Initial debugging attempts indicate that at the time [this line is executed](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L555) `G[0][0] = NaN`, causing the subsequent matrix diagonalization to fail. Determining why `G[0][0] = NaN` will require expert attention. If there is some legitimate reason for the failure, a more helpful error message should be printed instead. The only one I can think of is if we were capturing only one state of a degenerate pair. But as the original poster remarked, setting `roots_per_irrep` to other numbers like 2 or 4 worked just fine, and when I set `roots_per_irrep` to 4, none of the roots had the same EOM energy. That seems to eliminate the ""degenerate pair"" hypothesis.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1931
https://github.com/psi4/psi4/issues/1931:804,Availability,failure,failure,804,"Carried forward from [the forums](http://forum.psicode.org/t/a-roots-per-irrep-value-crashes-cc3/1826). The following input file. ```; molecule radical {; 0 2; O 0.0000000000 0.0000000000 0.1081705869; H 0.0000000000 0.0000000000 -0.8651605869; units angstrom; symmetry C1; }; set {; basis ""6-31+G(d)""; reference ""uhf""; freeze_core true; roots_per_irrep [3] ; }; energy('eom-cc3'); ```. gives the error `Parameter 3 was incorrect on entry to DGEBAL.` and then segfaults. Initial debugging attempts indicate that at the time [this line is executed](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L555) `G[0][0] = NaN`, causing the subsequent matrix diagonalization to fail. Determining why `G[0][0] = NaN` will require expert attention. If there is some legitimate reason for the failure, a more helpful error message should be printed instead. The only one I can think of is if we were capturing only one state of a degenerate pair. But as the original poster remarked, setting `roots_per_irrep` to other numbers like 2 or 4 worked just fine, and when I set `roots_per_irrep` to 4, none of the roots had the same EOM energy. That seems to eliminate the ""degenerate pair"" hypothesis.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1931
https://github.com/psi4/psi4/issues/1931:828,Availability,error,error,828,"Carried forward from [the forums](http://forum.psicode.org/t/a-roots-per-irrep-value-crashes-cc3/1826). The following input file. ```; molecule radical {; 0 2; O 0.0000000000 0.0000000000 0.1081705869; H 0.0000000000 0.0000000000 -0.8651605869; units angstrom; symmetry C1; }; set {; basis ""6-31+G(d)""; reference ""uhf""; freeze_core true; roots_per_irrep [3] ; }; energy('eom-cc3'); ```. gives the error `Parameter 3 was incorrect on entry to DGEBAL.` and then segfaults. Initial debugging attempts indicate that at the time [this line is executed](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L555) `G[0][0] = NaN`, causing the subsequent matrix diagonalization to fail. Determining why `G[0][0] = NaN` will require expert attention. If there is some legitimate reason for the failure, a more helpful error message should be printed instead. The only one I can think of is if we were capturing only one state of a degenerate pair. But as the original poster remarked, setting `roots_per_irrep` to other numbers like 2 or 4 worked just fine, and when I set `roots_per_irrep` to 4, none of the roots had the same EOM energy. That seems to eliminate the ""degenerate pair"" hypothesis.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1931
https://github.com/psi4/psi4/issues/1931:363,Energy Efficiency,energy,energy,363,"Carried forward from [the forums](http://forum.psicode.org/t/a-roots-per-irrep-value-crashes-cc3/1826). The following input file. ```; molecule radical {; 0 2; O 0.0000000000 0.0000000000 0.1081705869; H 0.0000000000 0.0000000000 -0.8651605869; units angstrom; symmetry C1; }; set {; basis ""6-31+G(d)""; reference ""uhf""; freeze_core true; roots_per_irrep [3] ; }; energy('eom-cc3'); ```. gives the error `Parameter 3 was incorrect on entry to DGEBAL.` and then segfaults. Initial debugging attempts indicate that at the time [this line is executed](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L555) `G[0][0] = NaN`, causing the subsequent matrix diagonalization to fail. Determining why `G[0][0] = NaN` will require expert attention. If there is some legitimate reason for the failure, a more helpful error message should be printed instead. The only one I can think of is if we were capturing only one state of a degenerate pair. But as the original poster remarked, setting `roots_per_irrep` to other numbers like 2 or 4 worked just fine, and when I set `roots_per_irrep` to 4, none of the roots had the same EOM energy. That seems to eliminate the ""degenerate pair"" hypothesis.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1931
https://github.com/psi4/psi4/issues/1931:1142,Energy Efficiency,energy,energy,1142,"Carried forward from [the forums](http://forum.psicode.org/t/a-roots-per-irrep-value-crashes-cc3/1826). The following input file. ```; molecule radical {; 0 2; O 0.0000000000 0.0000000000 0.1081705869; H 0.0000000000 0.0000000000 -0.8651605869; units angstrom; symmetry C1; }; set {; basis ""6-31+G(d)""; reference ""uhf""; freeze_core true; roots_per_irrep [3] ; }; energy('eom-cc3'); ```. gives the error `Parameter 3 was incorrect on entry to DGEBAL.` and then segfaults. Initial debugging attempts indicate that at the time [this line is executed](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L555) `G[0][0] = NaN`, causing the subsequent matrix diagonalization to fail. Determining why `G[0][0] = NaN` will require expert attention. If there is some legitimate reason for the failure, a more helpful error message should be printed instead. The only one I can think of is if we were capturing only one state of a degenerate pair. But as the original poster remarked, setting `roots_per_irrep` to other numbers like 2 or 4 worked just fine, and when I set `roots_per_irrep` to 4, none of the roots had the same EOM energy. That seems to eliminate the ""degenerate pair"" hypothesis.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1931
https://github.com/psi4/psi4/issues/1931:834,Integrability,message,message,834,"Carried forward from [the forums](http://forum.psicode.org/t/a-roots-per-irrep-value-crashes-cc3/1826). The following input file. ```; molecule radical {; 0 2; O 0.0000000000 0.0000000000 0.1081705869; H 0.0000000000 0.0000000000 -0.8651605869; units angstrom; symmetry C1; }; set {; basis ""6-31+G(d)""; reference ""uhf""; freeze_core true; roots_per_irrep [3] ; }; energy('eom-cc3'); ```. gives the error `Parameter 3 was incorrect on entry to DGEBAL.` and then segfaults. Initial debugging attempts indicate that at the time [this line is executed](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L555) `G[0][0] = NaN`, causing the subsequent matrix diagonalization to fail. Determining why `G[0][0] = NaN` will require expert attention. If there is some legitimate reason for the failure, a more helpful error message should be printed instead. The only one I can think of is if we were capturing only one state of a degenerate pair. But as the original poster remarked, setting `roots_per_irrep` to other numbers like 2 or 4 worked just fine, and when I set `roots_per_irrep` to 4, none of the roots had the same EOM energy. That seems to eliminate the ""degenerate pair"" hypothesis.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1931
https://github.com/psi4/psi4/issues/1932:72,Availability,failure,failure,72,reporting on the forum:; http://forum.psicode.org/t/esp-cube-generation-failure/1827. related to #1871,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1932
https://github.com/psi4/psi4/pull/1933:1392,Testability,test,tests,1392,"The global `_default_psio_manager_` shared_ptr can destruct; before Process::Environment. However, some destructors called; from Process::Environment may require it. So have Process::Environment; keep a copy of the shared_ptr. ## Description; Some tasks being run by QCArchive/QCEngine would hang indefinitely, even though the calculation finished. GDB showed memory corruption when destructing the Process::Environment. The cause was related to the destructor for DIISManager calling PSIO::close. https://github.com/psi4/psi4/blob/8d1a8787504a481f61956fb22b282b6f30005ebc/psi4/src/psi4/libpsio/close.cc#L82 . `PSIOManager::shared_object()` returns a copy of the global shared_ptr `_default_psio_manager_`. The main issue is that `_default_psio_manager_` can be destructed before Process::Environment, as order of destruction is not well-defined for globals. The easiest solution is for Process::Environment to hold a copy of the shared_ptr for the global psio manager, even if it is not used. This prevents premature destruction. How this issue caused indefinite hanging/locking isn't very clear, but crazy stuff can happen with memory corruptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Fix crashing/hanging in certain instances due to using already destructed global objects. ## Checklist; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1933
https://github.com/psi4/psi4/pull/1933:1483,Testability,test,tests,1483,"The global `_default_psio_manager_` shared_ptr can destruct; before Process::Environment. However, some destructors called; from Process::Environment may require it. So have Process::Environment; keep a copy of the shared_ptr. ## Description; Some tasks being run by QCArchive/QCEngine would hang indefinitely, even though the calculation finished. GDB showed memory corruption when destructing the Process::Environment. The cause was related to the destructor for DIISManager calling PSIO::close. https://github.com/psi4/psi4/blob/8d1a8787504a481f61956fb22b282b6f30005ebc/psi4/src/psi4/libpsio/close.cc#L82 . `PSIOManager::shared_object()` returns a copy of the global shared_ptr `_default_psio_manager_`. The main issue is that `_default_psio_manager_` can be destructed before Process::Environment, as order of destruction is not well-defined for globals. The easiest solution is for Process::Environment to hold a copy of the shared_ptr for the global psio manager, even if it is not used. This prevents premature destruction. How this issue caused indefinite hanging/locking isn't very clear, but crazy stuff can happen with memory corruptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Fix crashing/hanging in certain instances due to using already destructed global objects. ## Checklist; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1933
https://github.com/psi4/psi4/pull/1933:1091,Usability,clear,clear,1091,"The global `_default_psio_manager_` shared_ptr can destruct; before Process::Environment. However, some destructors called; from Process::Environment may require it. So have Process::Environment; keep a copy of the shared_ptr. ## Description; Some tasks being run by QCArchive/QCEngine would hang indefinitely, even though the calculation finished. GDB showed memory corruption when destructing the Process::Environment. The cause was related to the destructor for DIISManager calling PSIO::close. https://github.com/psi4/psi4/blob/8d1a8787504a481f61956fb22b282b6f30005ebc/psi4/src/psi4/libpsio/close.cc#L82 . `PSIOManager::shared_object()` returns a copy of the global shared_ptr `_default_psio_manager_`. The main issue is that `_default_psio_manager_` can be destructed before Process::Environment, as order of destruction is not well-defined for globals. The easiest solution is for Process::Environment to hold a copy of the shared_ptr for the global psio manager, even if it is not used. This prevents premature destruction. How this issue caused indefinite hanging/locking isn't very clear, but crazy stuff can happen with memory corruptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Fix crashing/hanging in certain instances due to using already destructed global objects. ## Checklist; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1933
https://github.com/psi4/psi4/pull/1934:33,Deployability,Patch,Patch,33,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1934
https://github.com/psi4/psi4/pull/1934:527,Deployability,patch,patch,527,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1934
https://github.com/psi4/psi4/pull/1934:25,Modifiability,plugin,plugin,25,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1934
https://github.com/psi4/psi4/pull/1934:279,Security,validat,validating,279,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1934
https://github.com/psi4/psi4/pull/1934:423,Security,validat,validation,423,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1934
https://github.com/psi4/psi4/pull/1934:207,Testability,test,test,207,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1934
https://github.com/psi4/psi4/pull/1934:800,Testability,Test,Tests,800,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1934
https://github.com/psi4/psi4/pull/1934:874,Testability,test,tests,874,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1934
https://github.com/psi4/psi4/pull/1934:965,Testability,test,tests,965,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1934
https://github.com/psi4/psi4/pull/1935:445,Availability,error,error,445,"## Description; Some info about module-level provenance of a Wfn would be handy. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `Wavefunction.module_` member data and export; - [x] add setting to most modules (not psimrcc or fockci); - [x] incorporate into stdsuite testing. ## Questions; - [x] @dgasmith I've given mcscf its own name. prefer ""detci""?; - [x] @maxscheurer I edited a couple error messages to ADCC from ADC. ok?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1935
https://github.com/psi4/psi4/pull/1935:451,Integrability,message,messages,451,"## Description; Some info about module-level provenance of a Wfn would be handy. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `Wavefunction.module_` member data and export; - [x] add setting to most modules (not psimrcc or fockci); - [x] incorporate into stdsuite testing. ## Questions; - [x] @dgasmith I've given mcscf its own name. prefer ""detci""?; - [x] @maxscheurer I edited a couple error messages to ADCC from ADC. ok?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1935
https://github.com/psi4/psi4/pull/1935:321,Testability,test,testing,321,"## Description; Some info about module-level provenance of a Wfn would be handy. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `Wavefunction.module_` member data and export; - [x] add setting to most modules (not psimrcc or fockci); - [x] incorporate into stdsuite testing. ## Questions; - [x] @dgasmith I've given mcscf its own name. prefer ""detci""?; - [x] @maxscheurer I edited a couple error messages to ADCC from ADC. ok?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1935
https://github.com/psi4/psi4/pull/1935:503,Testability,Test,Tests,503,"## Description; Some info about module-level provenance of a Wfn would be handy. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `Wavefunction.module_` member data and export; - [x] add setting to most modules (not psimrcc or fockci); - [x] incorporate into stdsuite testing. ## Questions; - [x] @dgasmith I've given mcscf its own name. prefer ""detci""?; - [x] @maxscheurer I edited a couple error messages to ADCC from ADC. ok?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1935
https://github.com/psi4/psi4/pull/1935:577,Testability,test,tests,577,"## Description; Some info about module-level provenance of a Wfn would be handy. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `Wavefunction.module_` member data and export; - [x] add setting to most modules (not psimrcc or fockci); - [x] incorporate into stdsuite testing. ## Questions; - [x] @dgasmith I've given mcscf its own name. prefer ""detci""?; - [x] @maxscheurer I edited a couple error messages to ADCC from ADC. ok?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1935
https://github.com/psi4/psi4/pull/1935:668,Testability,test,tests,668,"## Description; Some info about module-level provenance of a Wfn would be handy. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `Wavefunction.module_` member data and export; - [x] add setting to most modules (not psimrcc or fockci); - [x] incorporate into stdsuite testing. ## Questions; - [x] @dgasmith I've given mcscf its own name. prefer ""detci""?; - [x] @maxscheurer I edited a couple error messages to ADCC from ADC. ok?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1935
https://github.com/psi4/psi4/issues/1936:311,Energy Efficiency,energy,energy,311,"Hi,. I am new to psi4 and am having a question about how to read in initial guess wfn. Below is my input:; ```; memory 4000 mb; molecule mol {; 0 3; 	O 1.09800 -0.01685 0.05354; 	O 2.24893 -0.01685 0.05354; }; set basis 6-31g*; set puream false; set reference uhf; set scf_type direct; set guess read; e, wfn = energy('scf', molecule=mol, return_wfn=True, restart_file=""./psi-wfn.npy"") ; molden(wfn, 'psi4-out.molden'); wfn.to_file('psi-wfn-new'); ```; But it does not seem to use the guess wfn (psi-wfn.npy) and still need 12 cycles to converge (I kept the same basis set and method in this test).; ```; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```. I also did a comparison test where I have these two subsequential jobs in the same input file, and I found the second job loaded the wfn file from the previous job. Do I need to change the naming of the wfn file to a specific format? Or does psi4 currently support reading .npy (or other types of the wfn files) from different jobs? Thanks in advance for you help!. Best,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1936
https://github.com/psi4/psi4/issues/1936:805,Performance,load,loaded,805,"Hi,. I am new to psi4 and am having a question about how to read in initial guess wfn. Below is my input:; ```; memory 4000 mb; molecule mol {; 0 3; 	O 1.09800 -0.01685 0.05354; 	O 2.24893 -0.01685 0.05354; }; set basis 6-31g*; set puream false; set reference uhf; set scf_type direct; set guess read; e, wfn = energy('scf', molecule=mol, return_wfn=True, restart_file=""./psi-wfn.npy"") ; molden(wfn, 'psi4-out.molden'); wfn.to_file('psi-wfn-new'); ```; But it does not seem to use the guess wfn (psi-wfn.npy) and still need 12 cycles to converge (I kept the same basis set and method in this test).; ```; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```. I also did a comparison test where I have these two subsequential jobs in the same input file, and I found the second job loaded the wfn file from the previous job. Do I need to change the naming of the wfn file to a specific format? Or does psi4 currently support reading .npy (or other types of the wfn files) from different jobs? Thanks in advance for you help!. Best,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1936
https://github.com/psi4/psi4/issues/1936:592,Testability,test,test,592,"Hi,. I am new to psi4 and am having a question about how to read in initial guess wfn. Below is my input:; ```; memory 4000 mb; molecule mol {; 0 3; 	O 1.09800 -0.01685 0.05354; 	O 2.24893 -0.01685 0.05354; }; set basis 6-31g*; set puream false; set reference uhf; set scf_type direct; set guess read; e, wfn = energy('scf', molecule=mol, return_wfn=True, restart_file=""./psi-wfn.npy"") ; molden(wfn, 'psi4-out.molden'); wfn.to_file('psi-wfn-new'); ```; But it does not seem to use the guess wfn (psi-wfn.npy) and still need 12 cycles to converge (I kept the same basis set and method in this test).; ```; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```. I also did a comparison test where I have these two subsequential jobs in the same input file, and I found the second job loaded the wfn file from the previous job. Do I need to change the naming of the wfn file to a specific format? Or does psi4 currently support reading .npy (or other types of the wfn files) from different jobs? Thanks in advance for you help!. Best,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1936
https://github.com/psi4/psi4/issues/1936:707,Testability,test,test,707,"Hi,. I am new to psi4 and am having a question about how to read in initial guess wfn. Below is my input:; ```; memory 4000 mb; molecule mol {; 0 3; 	O 1.09800 -0.01685 0.05354; 	O 2.24893 -0.01685 0.05354; }; set basis 6-31g*; set puream false; set reference uhf; set scf_type direct; set guess read; e, wfn = energy('scf', molecule=mol, return_wfn=True, restart_file=""./psi-wfn.npy"") ; molden(wfn, 'psi4-out.molden'); wfn.to_file('psi-wfn-new'); ```; But it does not seem to use the guess wfn (psi-wfn.npy) and still need 12 cycles to converge (I kept the same basis set and method in this test).; ```; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```. I also did a comparison test where I have these two subsequential jobs in the same input file, and I found the second job loaded the wfn file from the previous job. Do I need to change the naming of the wfn file to a specific format? Or does psi4 currently support reading .npy (or other types of the wfn files) from different jobs? Thanks in advance for you help!. Best,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1936
https://github.com/psi4/psi4/pull/1937:656,Modifiability,variab,variables,656,"## Description; finish off low-cepa testing and API standardization. ## Todos; - [x] df-lccd from dfocc (tested against @JonathonMisiewicz's p4n impl); - [x] cd-lccd from dfocc (tested against itself); - [x] added ability to do freq with nonphysical masses #1903 (needs qcel 0.15.1); - [x] bumped qcel to v0.15.1; - changes to test_qcel_molparse_to_string are formatting, and updating against expanded test file in qcel. no need for review.; - [x] bumped qcng to v0.15.0; - [x] activated stdsuite. only a couple min extra tests are run in quick. ## Questions; - [x] @bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound? (I'll repeat this Q in a separate comment b/c I'm not sure of GH notifications upon edit.). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1937
https://github.com/psi4/psi4/pull/1937:764,Modifiability,variab,variables,764,"## Description; finish off low-cepa testing and API standardization. ## Todos; - [x] df-lccd from dfocc (tested against @JonathonMisiewicz's p4n impl); - [x] cd-lccd from dfocc (tested against itself); - [x] added ability to do freq with nonphysical masses #1903 (needs qcel 0.15.1); - [x] bumped qcel to v0.15.1; - changes to test_qcel_molparse_to_string are formatting, and updating against expanded test file in qcel. no need for review.; - [x] bumped qcng to v0.15.0; - [x] activated stdsuite. only a couple min extra tests are run in quick. ## Questions; - [x] @bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound? (I'll repeat this Q in a separate comment b/c I'm not sure of GH notifications upon edit.). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1937
https://github.com/psi4/psi4/pull/1937:36,Testability,test,testing,36,"## Description; finish off low-cepa testing and API standardization. ## Todos; - [x] df-lccd from dfocc (tested against @JonathonMisiewicz's p4n impl); - [x] cd-lccd from dfocc (tested against itself); - [x] added ability to do freq with nonphysical masses #1903 (needs qcel 0.15.1); - [x] bumped qcel to v0.15.1; - changes to test_qcel_molparse_to_string are formatting, and updating against expanded test file in qcel. no need for review.; - [x] bumped qcng to v0.15.0; - [x] activated stdsuite. only a couple min extra tests are run in quick. ## Questions; - [x] @bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound? (I'll repeat this Q in a separate comment b/c I'm not sure of GH notifications upon edit.). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1937
https://github.com/psi4/psi4/pull/1937:105,Testability,test,tested,105,"## Description; finish off low-cepa testing and API standardization. ## Todos; - [x] df-lccd from dfocc (tested against @JonathonMisiewicz's p4n impl); - [x] cd-lccd from dfocc (tested against itself); - [x] added ability to do freq with nonphysical masses #1903 (needs qcel 0.15.1); - [x] bumped qcel to v0.15.1; - changes to test_qcel_molparse_to_string are formatting, and updating against expanded test file in qcel. no need for review.; - [x] bumped qcng to v0.15.0; - [x] activated stdsuite. only a couple min extra tests are run in quick. ## Questions; - [x] @bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound? (I'll repeat this Q in a separate comment b/c I'm not sure of GH notifications upon edit.). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1937
https://github.com/psi4/psi4/pull/1937:178,Testability,test,tested,178,"## Description; finish off low-cepa testing and API standardization. ## Todos; - [x] df-lccd from dfocc (tested against @JonathonMisiewicz's p4n impl); - [x] cd-lccd from dfocc (tested against itself); - [x] added ability to do freq with nonphysical masses #1903 (needs qcel 0.15.1); - [x] bumped qcel to v0.15.1; - changes to test_qcel_molparse_to_string are formatting, and updating against expanded test file in qcel. no need for review.; - [x] bumped qcng to v0.15.0; - [x] activated stdsuite. only a couple min extra tests are run in quick. ## Questions; - [x] @bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound? (I'll repeat this Q in a separate comment b/c I'm not sure of GH notifications upon edit.). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1937
https://github.com/psi4/psi4/pull/1937:402,Testability,test,test,402,"## Description; finish off low-cepa testing and API standardization. ## Todos; - [x] df-lccd from dfocc (tested against @JonathonMisiewicz's p4n impl); - [x] cd-lccd from dfocc (tested against itself); - [x] added ability to do freq with nonphysical masses #1903 (needs qcel 0.15.1); - [x] bumped qcel to v0.15.1; - changes to test_qcel_molparse_to_string are formatting, and updating against expanded test file in qcel. no need for review.; - [x] bumped qcng to v0.15.0; - [x] activated stdsuite. only a couple min extra tests are run in quick. ## Questions; - [x] @bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound? (I'll repeat this Q in a separate comment b/c I'm not sure of GH notifications upon edit.). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1937
https://github.com/psi4/psi4/pull/1937:522,Testability,test,tests,522,"## Description; finish off low-cepa testing and API standardization. ## Todos; - [x] df-lccd from dfocc (tested against @JonathonMisiewicz's p4n impl); - [x] cd-lccd from dfocc (tested against itself); - [x] added ability to do freq with nonphysical masses #1903 (needs qcel 0.15.1); - [x] bumped qcel to v0.15.1; - changes to test_qcel_molparse_to_string are formatting, and updating against expanded test file in qcel. no need for review.; - [x] bumped qcng to v0.15.0; - [x] activated stdsuite. only a couple min extra tests are run in quick. ## Questions; - [x] @bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound? (I'll repeat this Q in a separate comment b/c I'm not sure of GH notifications upon edit.). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1937
https://github.com/psi4/psi4/pull/1937:934,Testability,Test,Tests,934,"## Description; finish off low-cepa testing and API standardization. ## Todos; - [x] df-lccd from dfocc (tested against @JonathonMisiewicz's p4n impl); - [x] cd-lccd from dfocc (tested against itself); - [x] added ability to do freq with nonphysical masses #1903 (needs qcel 0.15.1); - [x] bumped qcel to v0.15.1; - changes to test_qcel_molparse_to_string are formatting, and updating against expanded test file in qcel. no need for review.; - [x] bumped qcng to v0.15.0; - [x] activated stdsuite. only a couple min extra tests are run in quick. ## Questions; - [x] @bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound? (I'll repeat this Q in a separate comment b/c I'm not sure of GH notifications upon edit.). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1937
https://github.com/psi4/psi4/pull/1937:1008,Testability,test,tests,1008,"## Description; finish off low-cepa testing and API standardization. ## Todos; - [x] df-lccd from dfocc (tested against @JonathonMisiewicz's p4n impl); - [x] cd-lccd from dfocc (tested against itself); - [x] added ability to do freq with nonphysical masses #1903 (needs qcel 0.15.1); - [x] bumped qcel to v0.15.1; - changes to test_qcel_molparse_to_string are formatting, and updating against expanded test file in qcel. no need for review.; - [x] bumped qcng to v0.15.0; - [x] activated stdsuite. only a couple min extra tests are run in quick. ## Questions; - [x] @bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound? (I'll repeat this Q in a separate comment b/c I'm not sure of GH notifications upon edit.). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1937
https://github.com/psi4/psi4/pull/1937:1099,Testability,test,tests,1099,"## Description; finish off low-cepa testing and API standardization. ## Todos; - [x] df-lccd from dfocc (tested against @JonathonMisiewicz's p4n impl); - [x] cd-lccd from dfocc (tested against itself); - [x] added ability to do freq with nonphysical masses #1903 (needs qcel 0.15.1); - [x] bumped qcel to v0.15.1; - changes to test_qcel_molparse_to_string are formatting, and updating against expanded test file in qcel. no need for review.; - [x] bumped qcng to v0.15.0; - [x] activated stdsuite. only a couple min extra tests are run in quick. ## Questions; - [x] @bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound? (I'll repeat this Q in a separate comment b/c I'm not sure of GH notifications upon edit.). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1937
https://github.com/psi4/psi4/issues/1939:136,Availability,error,error,136,"Hello,. I realize that there is a warning about PCM failing with symmetry point groups however, it would be nice to add like a 1-3 line error message that would go a long way to helping out any user that has not read all of the docs very carefully.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1939
https://github.com/psi4/psi4/issues/1939:142,Integrability,message,message,142,"Hello,. I realize that there is a warning about PCM failing with symmetry point groups however, it would be nice to add like a 1-3 line error message that would go a long way to helping out any user that has not read all of the docs very carefully.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1939
https://github.com/psi4/psi4/issues/1940:439,Deployability,update,update,439,"tasks for after #1721. feel free to add items. - [ ] switch CI to conda package, not from-source build; - [ ] remove Libint1 & Libint1t; - [ ] remove ERD #1780 ; - [ ] determine the best way to handle spherical harmonic max AM requirements in libmints, without the LIBINT_MAX_AM macro; - [ ] ~fix lgtm l2 build and move extra cmake out of main CMakeLists.txt~ LGTM defunct; - [ ] resolve `libint2_DIR` vs. `Libint2_DIR` with Valeev; - [x] update sphinx<2 requirement -- we're on 7 now?; - [ ] update one electron integrals to use Libint2, and remove existing routines",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1940
https://github.com/psi4/psi4/issues/1940:493,Deployability,update,update,493,"tasks for after #1721. feel free to add items. - [ ] switch CI to conda package, not from-source build; - [ ] remove Libint1 & Libint1t; - [ ] remove ERD #1780 ; - [ ] determine the best way to handle spherical harmonic max AM requirements in libmints, without the LIBINT_MAX_AM macro; - [ ] ~fix lgtm l2 build and move extra cmake out of main CMakeLists.txt~ LGTM defunct; - [ ] resolve `libint2_DIR` vs. `Libint2_DIR` with Valeev; - [x] update sphinx<2 requirement -- we're on 7 now?; - [ ] update one electron integrals to use Libint2, and remove existing routines",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1940
https://github.com/psi4/psi4/issues/1940:559,Integrability,rout,routines,559,"tasks for after #1721. feel free to add items. - [ ] switch CI to conda package, not from-source build; - [ ] remove Libint1 & Libint1t; - [ ] remove ERD #1780 ; - [ ] determine the best way to handle spherical harmonic max AM requirements in libmints, without the LIBINT_MAX_AM macro; - [ ] ~fix lgtm l2 build and move extra cmake out of main CMakeLists.txt~ LGTM defunct; - [ ] resolve `libint2_DIR` vs. `Libint2_DIR` with Valeev; - [x] update sphinx<2 requirement -- we're on 7 now?; - [ ] update one electron integrals to use Libint2, and remove existing routines",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1940
https://github.com/psi4/psi4/issues/1941:437,Availability,error,error,437,"initially asked in the [forum](http://forum.psicode.org/t/mo-basis-dipole-moments-and-amplitudes-at-positions/1856). my desired use-case is to calculate the amplitude at some list of points, actually (not over all space), so that would also be an reasonable API. the current ""state of the art"" is [here](https://gist.github.com/hokru/9b93fffc093dce0e8af8b9e54c120bb2), which clearly is a lot of work to get amplitudes, and prone to user error. perhaps a useful jumping-off point: [here is where the cubemap creates orbital iso-amplitude contours](https://github.com/psi4/psi4/blob/fbb2ff444490bf6b43cb6e027637d8fd857adcee/psi4/src/psi4/libcubeprop/csg.cc#L628-L653)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1941
https://github.com/psi4/psi4/issues/1941:375,Usability,clear,clearly,375,"initially asked in the [forum](http://forum.psicode.org/t/mo-basis-dipole-moments-and-amplitudes-at-positions/1856). my desired use-case is to calculate the amplitude at some list of points, actually (not over all space), so that would also be an reasonable API. the current ""state of the art"" is [here](https://gist.github.com/hokru/9b93fffc093dce0e8af8b9e54c120bb2), which clearly is a lot of work to get amplitudes, and prone to user error. perhaps a useful jumping-off point: [here is where the cubemap creates orbital iso-amplitude contours](https://github.com/psi4/psi4/blob/fbb2ff444490bf6b43cb6e027637d8fd857adcee/psi4/src/psi4/libcubeprop/csg.cc#L628-L653)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1941
https://github.com/psi4/psi4/pull/1942:1234,Deployability,Update,Updated,1234,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1942
https://github.com/psi4/psi4/pull/1942:47,Integrability,interface,interface,47,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1942
https://github.com/psi4/psi4/pull/1942:685,Integrability,depend,depends,685,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1942
https://github.com/psi4/psi4/pull/1942:205,Modifiability,variab,variable,205,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1942
https://github.com/psi4/psi4/pull/1942:1252,Testability,test,test,1252,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1942
https://github.com/psi4/psi4/issues/1943:170,Availability,error,error,170,wb97X-V with density threshold of 1e-10 stops before printing the first SCF/SAD energy in the SCF iteration output. I dont have access to gcc5 and I cannot reproduce the error otherwise for now. e.g.:; https://dev.azure.com/psi4/psi4/_build/results?buildId=2170&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a&t=895e49e6-cad9-5b25-6d66-c0b61859d928&l=801,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1943
https://github.com/psi4/psi4/issues/1943:80,Energy Efficiency,energy,energy,80,wb97X-V with density threshold of 1e-10 stops before printing the first SCF/SAD energy in the SCF iteration output. I dont have access to gcc5 and I cannot reproduce the error otherwise for now. e.g.:; https://dev.azure.com/psi4/psi4/_build/results?buildId=2170&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a&t=895e49e6-cad9-5b25-6d66-c0b61859d928&l=801,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1943
https://github.com/psi4/psi4/issues/1943:128,Security,access,access,128,wb97X-V with density threshold of 1e-10 stops before printing the first SCF/SAD energy in the SCF iteration output. I dont have access to gcc5 and I cannot reproduce the error otherwise for now. e.g.:; https://dev.azure.com/psi4/psi4/_build/results?buildId=2170&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a&t=895e49e6-cad9-5b25-6d66-c0b61859d928&l=801,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1943
https://github.com/psi4/psi4/issues/1943:267,Testability,log,logs,267,wb97X-V with density threshold of 1e-10 stops before printing the first SCF/SAD energy in the SCF iteration output. I dont have access to gcc5 and I cannot reproduce the error otherwise for now. e.g.:; https://dev.azure.com/psi4/psi4/_build/results?buildId=2170&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a&t=895e49e6-cad9-5b25-6d66-c0b61859d928&l=801,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1943
https://github.com/psi4/psi4/issues/1944:37,Energy Efficiency,power,powerful,37,"The Psithon input could be made more powerful if it could accept a python dictionary. For example, this could be useful when the user wants to specify orbital spaces:; ```; docc = {'a1' : 3, 'b2' : 1, 'b2' : 1} # converted internally to an option of the form [['a1',3], ['b1',1], ['b2',1]]; ```; There are probably several other potential uses for this feature.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1944
https://github.com/psi4/psi4/pull/1945:127,Testability,Test,Tests,127,"## Description; closes #1943 ; reviewers, any reason for the `RHS.original_coef_` inconsistency formerly?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1945
https://github.com/psi4/psi4/pull/1945:201,Testability,test,tests,201,"## Description; closes #1943 ; reviewers, any reason for the `RHS.original_coef_` inconsistency formerly?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1945
https://github.com/psi4/psi4/pull/1945:292,Testability,test,tests,292,"## Description; closes #1943 ; reviewers, any reason for the `RHS.original_coef_` inconsistency formerly?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1945
https://github.com/psi4/psi4/pull/1946:104,Energy Efficiency,charge,charges,104,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/pull/1946:535,Energy Efficiency,charge,charges,535,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/pull/1946:628,Energy Efficiency,charge,charges,628,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/pull/1946:653,Energy Efficiency,charge,charges,653,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/pull/1946:676,Energy Efficiency,charge,charges,676,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/pull/1946:701,Energy Efficiency,charge,charges,701,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/pull/1946:1038,Energy Efficiency,charge,charges,1038,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/pull/1946:1206,Energy Efficiency,charge,charges,1206,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/pull/1946:1051,Performance,perform,performance,1051,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/pull/1946:1120,Performance,perform,performance,1120,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/pull/1946:358,Testability,benchmark,benchmark,358,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/pull/1946:1293,Testability,test,tests,1293,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/pull/1946:1620,Testability,test,tests,1620,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/pull/1946:1642,Testability,test,test,1642,"## Description; This PR threads the calculation of one-electron potential integrals from external point charges. It replaces a call to `OneBodyAOInt.compute()`, which is not threaded and computes the full N-by-N matrix, with a new threaded `for` loop over pairs of shells so that only the lower triangle of the symmetric matrix is calculated. Here's a quick benchmark of times for a SAPT0/jun-cc-pVDZ calculation of a nucleic acid base pair (144 electrons, 425 basis functions, 1879 auxiliary basis functions) with 7393 external point charges on an Intel Xeon E5-2695v4 with 18 cores in each of 2 sockets:. Cores | Old code, no charges | Old code, with charges | New code, no charges | New code, with charges; ----- | ------- | ------- | ------- | -------; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.65 | 1.08 | 1.71 | 1.68; 4 | 2.43 | 1.14 | 2.64 | 2.61; 8 | 3.25 | 1.20 | 3.08 | 4.01; 16 | 5.29 | 1.24 | 2.61 | 2.90; 32 | 5.36 | 1.23 | 4.24 | 7.04. Each column shows the speedup relative to the calculation with 1 core (i.e. t_1 / t_c). With charges, the performance of the old code scales poorly with additional cores; the performance of the new code matches or exceeds the scaling of the calculation without charges. ## Questions; - [x] The resulting matrix `V_charge` is always symmetric in my tests. Are there any cases where this would not be true?; - [ ] I opted to replace `force_cartesian_ ? shell(i).ncartesian() : shell(i).nfunction()` from `OneBodyAOInt.compute()` with `shell(i).nfunction()`. Are there any cases where `force_cartesian_` needs to be checked for this potential?. ## Checklist; - [x] Passes smoke tests and `fsapt-ext` test added in #1608. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1946
https://github.com/psi4/psi4/issues/1947:782,Availability,down,downloads,782,"I ran a geometry optimization. Psi4 said the optimization converged in two steps, despite the delta E criterion not being met. . input file:; ```; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C -4.203390 -0.066910 -0.001310; C -4.193940 -1.465920 -0.000650; C -2.996540 0.640780 -0.000920; C -1.780230 -0.050540 0.000130; C -1.770780 -1.449550 0.000790; C -2.977630 -2.157240 0.000400; H -2.970320 -3.239550 0.000910; H -0.829810 -1.984370 0.001610; H -5.127590 -2.013410 -0.000960; H -5.144360 0.467920 -0.002130; H -0.846580 0.496950 0.000440; H -3.003850 1.723100 -0.001430; }. nrg, wfn = optimize('B3LYP', return_wfn=True); ```. top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; -----------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947
https://github.com/psi4/psi4/issues/1947:816,Deployability,release,release,816,"I ran a geometry optimization. Psi4 said the optimization converged in two steps, despite the delta E criterion not being met. . input file:; ```; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C -4.203390 -0.066910 -0.001310; C -4.193940 -1.465920 -0.000650; C -2.996540 0.640780 -0.000920; C -1.780230 -0.050540 0.000130; C -1.770780 -1.449550 0.000790; C -2.977630 -2.157240 0.000400; H -2.970320 -3.239550 0.000910; H -0.829810 -1.984370 0.001610; H -5.127590 -2.013410 -0.000960; H -5.144360 0.467920 -0.002130; H -0.846580 0.496950 0.000440; H -3.003850 1.723100 -0.001430; }. nrg, wfn = optimize('B3LYP', return_wfn=True); ```. top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; -----------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947
https://github.com/psi4/psi4/issues/1947:1158,Energy Efficiency,Energy,Energy,1158,"P; }. molecule {; 0 1; C -4.203390 -0.066910 -0.001310; C -4.193940 -1.465920 -0.000650; C -2.996540 0.640780 -0.000920; C -1.780230 -0.050540 0.000130; C -1.770780 -1.449550 0.000790; C -2.977630 -2.157240 0.000400; H -2.970320 -3.239550 0.000910; H -0.829810 -1.984370 0.001610; H -5.127590 -2.013410 -0.000960; H -5.144360 0.467920 -0.002130; H -0.846580 0.496950 0.000440; H -3.003850 1.723100 -0.001430; }. nrg, wfn = optimize('B3LYP', return_wfn=True); ```. top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947
https://github.com/psi4/psi4/issues/1947:1892,Energy Efficiency,Energy,Energy,1892,"=. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; -------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947
https://github.com/psi4/psi4/issues/1947:2849,Energy Efficiency,Energy,Energy,2849,"-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 3 -232.08477734 -6.09e-08 * 2.64e-05 * 7.35e-06 o 5.46e-05 * 1.76e-05 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 3 steps) ****; ```. If I manually specify the default:; ```; set {; g_convergence QCHEM; }; ```; the optimization finishes prematurely.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947
https://github.com/psi4/psi4/issues/1947:17,Performance,optimiz,optimization,17,"I ran a geometry optimization. Psi4 said the optimization converged in two steps, despite the delta E criterion not being met. . input file:; ```; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C -4.203390 -0.066910 -0.001310; C -4.193940 -1.465920 -0.000650; C -2.996540 0.640780 -0.000920; C -1.780230 -0.050540 0.000130; C -1.770780 -1.449550 0.000790; C -2.977630 -2.157240 0.000400; H -2.970320 -3.239550 0.000910; H -0.829810 -1.984370 0.001610; H -5.127590 -2.013410 -0.000960; H -5.144360 0.467920 -0.002130; H -0.846580 0.496950 0.000440; H -3.003850 1.723100 -0.001430; }. nrg, wfn = optimize('B3LYP', return_wfn=True); ```. top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; -----------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947
https://github.com/psi4/psi4/issues/1947:45,Performance,optimiz,optimization,45,"I ran a geometry optimization. Psi4 said the optimization converged in two steps, despite the delta E criterion not being met. . input file:; ```; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C -4.203390 -0.066910 -0.001310; C -4.193940 -1.465920 -0.000650; C -2.996540 0.640780 -0.000920; C -1.780230 -0.050540 0.000130; C -1.770780 -1.449550 0.000790; C -2.977630 -2.157240 0.000400; H -2.970320 -3.239550 0.000910; H -0.829810 -1.984370 0.001610; H -5.127590 -2.013410 -0.000960; H -5.144360 0.467920 -0.002130; H -0.846580 0.496950 0.000440; H -3.003850 1.723100 -0.001430; }. nrg, wfn = optimize('B3LYP', return_wfn=True); ```. top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; -----------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947
https://github.com/psi4/psi4/issues/1947:613,Performance,optimiz,optimize,613,"I ran a geometry optimization. Psi4 said the optimization converged in two steps, despite the delta E criterion not being met. . input file:; ```; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C -4.203390 -0.066910 -0.001310; C -4.193940 -1.465920 -0.000650; C -2.996540 0.640780 -0.000920; C -1.780230 -0.050540 0.000130; C -1.770780 -1.449550 0.000790; C -2.977630 -2.157240 0.000400; H -2.970320 -3.239550 0.000910; H -0.829810 -1.984370 0.001610; H -5.127590 -2.013410 -0.000960; H -5.144360 0.467920 -0.002130; H -0.846580 0.496950 0.000440; H -3.003850 1.723100 -0.001430; }. nrg, wfn = optimize('B3LYP', return_wfn=True); ```. top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; -----------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947
https://github.com/psi4/psi4/issues/1947:1635,Performance,Optimiz,Optimization,1635,"top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947
https://github.com/psi4/psi4/issues/1947:1684,Performance,Optimiz,Optimization,1684," using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947
https://github.com/psi4/psi4/issues/1947:2516,Performance,optimiz,optimization,2516,"-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 3 -232.08477734 -6.09e-08 * 2.64e-05 * 7.35e-06 o 5.46e-05 * 1.76e-05 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 3 steps) ****; ```. If I manually specify the default:; ```; set {; g_convergence QCHEM; }; ```; the optimization finishes prematurely.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947
https://github.com/psi4/psi4/issues/1947:3328,Performance,Optimiz,Optimization,3328,"-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 3 -232.08477734 -6.09e-08 * 2.64e-05 * 7.35e-06 o 5.46e-05 * 1.76e-05 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 3 steps) ****; ```. If I manually specify the default:; ```; set {; g_convergence QCHEM; }; ```; the optimization finishes prematurely.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947
https://github.com/psi4/psi4/issues/1947:3459,Performance,optimiz,optimization,3459,"-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 3 -232.08477734 -6.09e-08 * 2.64e-05 * 7.35e-06 o 5.46e-05 * 1.76e-05 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 3 steps) ****; ```. If I manually specify the default:; ```; set {; g_convergence QCHEM; }; ```; the optimization finishes prematurely.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1947
https://github.com/psi4/psi4/pull/1948:286,Testability,test,test,286,## Description; This PR (finally) fixes issue #1830 with USAPT0 by introducing a bunch of conditionals. I also uncovered and corrected a bug in the Exch-Disp term in USAPT0 while working on this. ## Questions; - [x] Does anybody have acces to another UHF-based SAPT0 code that we could test against ?. ## Checklist; - [x] Tests need to be run; - [x] There should probably be some kind of announcement about the USAPT0 Exch-Disp term. ## Status; - [x ] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1948
https://github.com/psi4/psi4/pull/1948:322,Testability,Test,Tests,322,## Description; This PR (finally) fixes issue #1830 with USAPT0 by introducing a bunch of conditionals. I also uncovered and corrected a bug in the Exch-Disp term in USAPT0 while working on this. ## Questions; - [x] Does anybody have acces to another UHF-based SAPT0 code that we could test against ?. ## Checklist; - [x] Tests need to be run; - [x] There should probably be some kind of announcement about the USAPT0 Exch-Disp term. ## Status; - [x ] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1948
https://github.com/psi4/psi4/pull/1949:495,Availability,ping,pings,495,"## Description; PSIMRCC has a wavefunction now. This is **not** the last PR in the PSIMRCC series. Another brief PR will be needed for clang format and to finish moving the responsibility of keeping track of ""free memory"" to the wavefunction. You'll notice that at present, the `free_memory_` variable isn't modified. That used to be ""done"" by myriad allocate/release statements, which were removed in #1901. This is a very long PR as it is, so I'm moving that task to a separate PR. Obligatory pings: @loriab, @fevangelista, @andysim. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] PSIMRCC has a wavefunction!. ## Checklist; - [x] Quick tests and psimrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1949
https://github.com/psi4/psi4/pull/1949:360,Deployability,release,release,360,"## Description; PSIMRCC has a wavefunction now. This is **not** the last PR in the PSIMRCC series. Another brief PR will be needed for clang format and to finish moving the responsibility of keeping track of ""free memory"" to the wavefunction. You'll notice that at present, the `free_memory_` variable isn't modified. That used to be ""done"" by myriad allocate/release statements, which were removed in #1901. This is a very long PR as it is, so I'm moving that task to a separate PR. Obligatory pings: @loriab, @fevangelista, @andysim. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] PSIMRCC has a wavefunction!. ## Checklist; - [x] Quick tests and psimrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1949
https://github.com/psi4/psi4/pull/1949:351,Energy Efficiency,allocate,allocate,351,"## Description; PSIMRCC has a wavefunction now. This is **not** the last PR in the PSIMRCC series. Another brief PR will be needed for clang format and to finish moving the responsibility of keeping track of ""free memory"" to the wavefunction. You'll notice that at present, the `free_memory_` variable isn't modified. That used to be ""done"" by myriad allocate/release statements, which were removed in #1901. This is a very long PR as it is, so I'm moving that task to a separate PR. Obligatory pings: @loriab, @fevangelista, @andysim. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] PSIMRCC has a wavefunction!. ## Checklist; - [x] Quick tests and psimrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1949
https://github.com/psi4/psi4/pull/1949:293,Modifiability,variab,variable,293,"## Description; PSIMRCC has a wavefunction now. This is **not** the last PR in the PSIMRCC series. Another brief PR will be needed for clang format and to finish moving the responsibility of keeping track of ""free memory"" to the wavefunction. You'll notice that at present, the `free_memory_` variable isn't modified. That used to be ""done"" by myriad allocate/release statements, which were removed in #1901. This is a very long PR as it is, so I'm moving that task to a separate PR. Obligatory pings: @loriab, @fevangelista, @andysim. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] PSIMRCC has a wavefunction!. ## Checklist; - [x] Quick tests and psimrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1949
https://github.com/psi4/psi4/pull/1949:689,Testability,test,tests,689,"## Description; PSIMRCC has a wavefunction now. This is **not** the last PR in the PSIMRCC series. Another brief PR will be needed for clang format and to finish moving the responsibility of keeping track of ""free memory"" to the wavefunction. You'll notice that at present, the `free_memory_` variable isn't modified. That used to be ""done"" by myriad allocate/release statements, which were removed in #1901. This is a very long PR as it is, so I'm moving that task to a separate PR. Obligatory pings: @loriab, @fevangelista, @andysim. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] PSIMRCC has a wavefunction!. ## Checklist; - [x] Quick tests and psimrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1949
https://github.com/psi4/psi4/pull/1949:707,Testability,test,tests,707,"## Description; PSIMRCC has a wavefunction now. This is **not** the last PR in the PSIMRCC series. Another brief PR will be needed for clang format and to finish moving the responsibility of keeping track of ""free memory"" to the wavefunction. You'll notice that at present, the `free_memory_` variable isn't modified. That used to be ""done"" by myriad allocate/release statements, which were removed in #1901. This is a very long PR as it is, so I'm moving that task to a separate PR. Obligatory pings: @loriab, @fevangelista, @andysim. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] PSIMRCC has a wavefunction!. ## Checklist; - [x] Quick tests and psimrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1949
https://github.com/psi4/psi4/pull/1950:225,Modifiability,variab,variable,225,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1950
https://github.com/psi4/psi4/pull/1950:429,Modifiability,variab,variable,429,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1950
https://github.com/psi4/psi4/pull/1950:29,Security,access,access,29,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1950
https://github.com/psi4/psi4/pull/1950:411,Testability,test,test,411,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1950
https://github.com/psi4/psi4/pull/1950:460,Testability,Test,Tests,460,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1950
https://github.com/psi4/psi4/pull/1950:534,Testability,test,tests,534,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1950
https://github.com/psi4/psi4/pull/1950:625,Testability,test,tests,625,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1950
https://github.com/psi4/psi4/pull/1950:362,Usability,guid,guidelines,362,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1950
https://github.com/psi4/psi4/pull/1951:1234,Deployability,Update,Updated,1234,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1951
https://github.com/psi4/psi4/pull/1951:47,Integrability,interface,interface,47,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1951
https://github.com/psi4/psi4/pull/1951:685,Integrability,depend,depends,685,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1951
https://github.com/psi4/psi4/pull/1951:205,Modifiability,variab,variable,205,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1951
https://github.com/psi4/psi4/pull/1951:1252,Testability,test,test,1252,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1951
https://github.com/psi4/psi4/issues/1954:210,Testability,test,tests,210,"I've been fiddling with isapt with the FISAPT_DO_PLOT set to true to generate cube files, etc. The coordinates in the resultant geom.xyz files are very wrong, although the energies appear to be correct and all tests pass. Running tests/isapt/input.dat through a conda nighty build (1.4a2.dev723) generates the following geom.xyz file (in both the plot and fsapt subdirectories):; ```; 19; 0 1 C5H12O2; O 0.000000000000 2.942220000000 0.000000000000; H 0.000000000000 2.054360000000 0.000000000000; O 0.000000000000 0.000000000000 0.000000000000; H 0.000000000000 0.000000000000 -1.284510000000; C 2.330480000000 -1.002690000000 0.000000000000; C 1.897250000000 0.000000000000 0.000000000000; C 2.282320000000 1.506690000000 0.000000000000; C 1.822040000000 2.846080000000 0.000000000000; C 2.379050000000 4.020990000000 0.000000000000; H 3.412460000000 -1.030300000000 0.000000000000; H 2.053620000000 -1.843720000000 0.000000000000; H 1.827140000000 -1.163820000000 0.000000000000; H 2.362430000000 0.000000000000 -1.576360000000; H 3.369620000000 1.514140000000 0.000000000000; H 1.812510000000 1.380600000000 1.281400000000; H 2.143440000000 2.929670000000 -1.338430000000; H 3.473200000000 4.024000000000 0.000000000000; H 2.035350000000 3.992160000000 1.536350000000; H 2.024810000000 4.967850000000 0.000000000000; ```; which has lots of seemingly random (although repeatable) x, y, or z coordinates set to zero (and overlapping atoms) when compared with the expected geom.xyz from the plot-ref subdirectory:; ```; 19. O 0.399870000000 2.942220000000 -0.265350000000; H 0.058930000000 2.054360000000 -0.509620000000; O 0.481220000000 0.302770000000 -0.777630000000; H 0.261060000000 -0.500050000000 -1.284510000000; C 2.330480000000 -1.002690000000 0.037710000000; C 1.897250000000 0.315330000000 -0.590090000000; C 2.282320000000 1.506690000000 0.297090000000; C 1.822040000000 2.846080000000 -0.294320000000; C 2.379050000000 4.020990000000 0.496390000000; H 3.412460000000 -1.030300000000 0.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1954
https://github.com/psi4/psi4/issues/1954:230,Testability,test,tests,230,"I've been fiddling with isapt with the FISAPT_DO_PLOT set to true to generate cube files, etc. The coordinates in the resultant geom.xyz files are very wrong, although the energies appear to be correct and all tests pass. Running tests/isapt/input.dat through a conda nighty build (1.4a2.dev723) generates the following geom.xyz file (in both the plot and fsapt subdirectories):; ```; 19; 0 1 C5H12O2; O 0.000000000000 2.942220000000 0.000000000000; H 0.000000000000 2.054360000000 0.000000000000; O 0.000000000000 0.000000000000 0.000000000000; H 0.000000000000 0.000000000000 -1.284510000000; C 2.330480000000 -1.002690000000 0.000000000000; C 1.897250000000 0.000000000000 0.000000000000; C 2.282320000000 1.506690000000 0.000000000000; C 1.822040000000 2.846080000000 0.000000000000; C 2.379050000000 4.020990000000 0.000000000000; H 3.412460000000 -1.030300000000 0.000000000000; H 2.053620000000 -1.843720000000 0.000000000000; H 1.827140000000 -1.163820000000 0.000000000000; H 2.362430000000 0.000000000000 -1.576360000000; H 3.369620000000 1.514140000000 0.000000000000; H 1.812510000000 1.380600000000 1.281400000000; H 2.143440000000 2.929670000000 -1.338430000000; H 3.473200000000 4.024000000000 0.000000000000; H 2.035350000000 3.992160000000 1.536350000000; H 2.024810000000 4.967850000000 0.000000000000; ```; which has lots of seemingly random (although repeatable) x, y, or z coordinates set to zero (and overlapping atoms) when compared with the expected geom.xyz from the plot-ref subdirectory:; ```; 19. O 0.399870000000 2.942220000000 -0.265350000000; H 0.058930000000 2.054360000000 -0.509620000000; O 0.481220000000 0.302770000000 -0.777630000000; H 0.261060000000 -0.500050000000 -1.284510000000; C 2.330480000000 -1.002690000000 0.037710000000; C 1.897250000000 0.315330000000 -0.590090000000; C 2.282320000000 1.506690000000 0.297090000000; C 1.822040000000 2.846080000000 -0.294320000000; C 2.379050000000 4.020990000000 0.496390000000; H 3.412460000000 -1.030300000000 0.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1954
https://github.com/psi4/psi4/pull/1955:413,Testability,test,tests,413,"## Description; This PR fixed a problem that prevents setting string options for modules when these are not defined to be global. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] When calling `Options::set_str` we now check if the option `key` exists in global. If yes, check if it matches any of the choices. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1955
https://github.com/psi4/psi4/pull/1955:504,Testability,test,tests,504,"## Description; This PR fixed a problem that prevents setting string options for modules when these are not defined to be global. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] When calling `Options::set_str` we now check if the option `key` exists in global. If yes, check if it matches any of the choices. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1955
https://github.com/psi4/psi4/pull/1956:641,Deployability,update,update,641,"## Description; This PR covers some miscellanea needed to fully finish the `psimrcc` series, which will close #1877. Ready for review, but not yet merge. I need @fevangelista to answer the questions, and then to run clang format. And then I can assess where I'm at for the libtrans refactor preliminary to the gradient refactor. It'll end one of these days... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removes some dead code; - [x] `free_memory_` is now actually used; - [x] Clang formatting. ## Questions; - [x] special_matrices.cc::MatrixBase and derived subclasses currently do not update the free memory. While I can make it update memory, that would require giving each Matrix a wavefunction. Should I add memory costs for this?; - [x] I assumed that the memory cost of the index.cc classes was negligible, as these are three-index or smaller. Should I add memory costs for this?1. ## Checklist; - [x] psirmrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1956
https://github.com/psi4/psi4/pull/1956:685,Deployability,update,update,685,"## Description; This PR covers some miscellanea needed to fully finish the `psimrcc` series, which will close #1877. Ready for review, but not yet merge. I need @fevangelista to answer the questions, and then to run clang format. And then I can assess where I'm at for the libtrans refactor preliminary to the gradient refactor. It'll end one of these days... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removes some dead code; - [x] `free_memory_` is now actually used; - [x] Clang formatting. ## Questions; - [x] special_matrices.cc::MatrixBase and derived subclasses currently do not update the free memory. While I can make it update memory, that would require giving each Matrix a wavefunction. Should I add memory costs for this?; - [x] I assumed that the memory cost of the index.cc classes was negligible, as these are three-index or smaller. Should I add memory costs for this?1. ## Checklist; - [x] psirmrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1956
https://github.com/psi4/psi4/pull/1956:282,Modifiability,refactor,refactor,282,"## Description; This PR covers some miscellanea needed to fully finish the `psimrcc` series, which will close #1877. Ready for review, but not yet merge. I need @fevangelista to answer the questions, and then to run clang format. And then I can assess where I'm at for the libtrans refactor preliminary to the gradient refactor. It'll end one of these days... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removes some dead code; - [x] `free_memory_` is now actually used; - [x] Clang formatting. ## Questions; - [x] special_matrices.cc::MatrixBase and derived subclasses currently do not update the free memory. While I can make it update memory, that would require giving each Matrix a wavefunction. Should I add memory costs for this?; - [x] I assumed that the memory cost of the index.cc classes was negligible, as these are three-index or smaller. Should I add memory costs for this?1. ## Checklist; - [x] psirmrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1956
https://github.com/psi4/psi4/pull/1956:319,Modifiability,refactor,refactor,319,"## Description; This PR covers some miscellanea needed to fully finish the `psimrcc` series, which will close #1877. Ready for review, but not yet merge. I need @fevangelista to answer the questions, and then to run clang format. And then I can assess where I'm at for the libtrans refactor preliminary to the gradient refactor. It'll end one of these days... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removes some dead code; - [x] `free_memory_` is now actually used; - [x] Clang formatting. ## Questions; - [x] special_matrices.cc::MatrixBase and derived subclasses currently do not update the free memory. While I can make it update memory, that would require giving each Matrix a wavefunction. Should I add memory costs for this?; - [x] I assumed that the memory cost of the index.cc classes was negligible, as these are three-index or smaller. Should I add memory costs for this?1. ## Checklist; - [x] psirmrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1956
https://github.com/psi4/psi4/pull/1956:972,Testability,test,tests,972,"## Description; This PR covers some miscellanea needed to fully finish the `psimrcc` series, which will close #1877. Ready for review, but not yet merge. I need @fevangelista to answer the questions, and then to run clang format. And then I can assess where I'm at for the libtrans refactor preliminary to the gradient refactor. It'll end one of these days... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removes some dead code; - [x] `free_memory_` is now actually used; - [x] Clang formatting. ## Questions; - [x] special_matrices.cc::MatrixBase and derived subclasses currently do not update the free memory. While I can make it update memory, that would require giving each Matrix a wavefunction. Should I add memory costs for this?; - [x] I assumed that the memory cost of the index.cc classes was negligible, as these are three-index or smaller. Should I add memory costs for this?1. ## Checklist; - [x] psirmrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1956
https://github.com/psi4/psi4/issues/1957:1041,Energy Efficiency,charge,charge,1041,"When a symmetric molecule is run explicitly in `C1` symmetry the `fnocc` DF-CCSD(T) calculations seems to initialise [Mintshelper](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L168) when accessing the 1e-integrals given the output below (molecule+detailed basis set info are printed). CONV-CCSD(T) does not print this, but its 1e-ints come from IWL files I think.; For DF-CC they are requested here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L727. Maybe a problem with missing cached integrals and the re-computation triggers the Mintshelper init?. DF-CCSD(T) output example:; ```; ...; ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 5; Number of active virtual orbitals: 8; Number of frozen virtual orbitals: 0. Molecular point group: c1; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.079135765818 15.994914619570; H 0.000000000000 -0.707106781187 0.627971015369 1.007825032230; H 0.000000000000 0.707106781187 0.627971015369 1.007825032230. -AO BASIS SET INFORMATION:; Name = 3-21G; Blend = 3-21G; Total number of shells = 9; Number of primitives = 15; ...; ```. example input:; ```; molecule mol {; symmetry c1; O; H 1 R; H 1 R 2 A; }; mol.R = 1.0; mol.A = 90.0. set cc_type df; energy('fno-ccsd(t)/3-21g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1957
https://github.com/psi4/psi4/issues/1957:1608,Energy Efficiency,energy,energy,1608,"When a symmetric molecule is run explicitly in `C1` symmetry the `fnocc` DF-CCSD(T) calculations seems to initialise [Mintshelper](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L168) when accessing the 1e-integrals given the output below (molecule+detailed basis set info are printed). CONV-CCSD(T) does not print this, but its 1e-ints come from IWL files I think.; For DF-CC they are requested here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L727. Maybe a problem with missing cached integrals and the re-computation triggers the Mintshelper init?. DF-CCSD(T) output example:; ```; ...; ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 5; Number of active virtual orbitals: 8; Number of frozen virtual orbitals: 0. Molecular point group: c1; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.079135765818 15.994914619570; H 0.000000000000 -0.707106781187 0.627971015369 1.007825032230; H 0.000000000000 0.707106781187 0.627971015369 1.007825032230. -AO BASIS SET INFORMATION:; Name = 3-21G; Blend = 3-21G; Total number of shells = 9; Number of primitives = 15; ...; ```. example input:; ```; molecule mol {; symmetry c1; O; H 1 R; H 1 R 2 A; }; mol.R = 1.0; mol.A = 90.0. set cc_type df; energy('fno-ccsd(t)/3-21g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1957
https://github.com/psi4/psi4/issues/1957:542,Performance,cache,cached,542,"When a symmetric molecule is run explicitly in `C1` symmetry the `fnocc` DF-CCSD(T) calculations seems to initialise [Mintshelper](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L168) when accessing the 1e-integrals given the output below (molecule+detailed basis set info are printed). CONV-CCSD(T) does not print this, but its 1e-ints come from IWL files I think.; For DF-CC they are requested here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L727. Maybe a problem with missing cached integrals and the re-computation triggers the Mintshelper init?. DF-CCSD(T) output example:; ```; ...; ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 5; Number of active virtual orbitals: 8; Number of frozen virtual orbitals: 0. Molecular point group: c1; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.079135765818 15.994914619570; H 0.000000000000 -0.707106781187 0.627971015369 1.007825032230; H 0.000000000000 0.707106781187 0.627971015369 1.007825032230. -AO BASIS SET INFORMATION:; Name = 3-21G; Blend = 3-21G; Total number of shells = 9; Number of primitives = 15; ...; ```. example input:; ```; molecule mol {; symmetry c1; O; H 1 R; H 1 R 2 A; }; mol.R = 1.0; mol.A = 90.0. set cc_type df; energy('fno-ccsd(t)/3-21g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1957
https://github.com/psi4/psi4/issues/1957:221,Security,access,accessing,221,"When a symmetric molecule is run explicitly in `C1` symmetry the `fnocc` DF-CCSD(T) calculations seems to initialise [Mintshelper](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L168) when accessing the 1e-integrals given the output below (molecule+detailed basis set info are printed). CONV-CCSD(T) does not print this, but its 1e-ints come from IWL files I think.; For DF-CC they are requested here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L727. Maybe a problem with missing cached integrals and the re-computation triggers the Mintshelper init?. DF-CCSD(T) output example:; ```; ...; ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 5; Number of active virtual orbitals: 8; Number of frozen virtual orbitals: 0. Molecular point group: c1; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.079135765818 15.994914619570; H 0.000000000000 -0.707106781187 0.627971015369 1.007825032230; H 0.000000000000 0.707106781187 0.627971015369 1.007825032230. -AO BASIS SET INFORMATION:; Name = 3-21G; Blend = 3-21G; Total number of shells = 9; Number of primitives = 15; ...; ```. example input:; ```; molecule mol {; symmetry c1; O; H 1 R; H 1 R 2 A; }; mol.R = 1.0; mol.A = 90.0. set cc_type df; energy('fno-ccsd(t)/3-21g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1957
https://github.com/psi4/psi4/pull/1958:91,Testability,test,test,91,"## Description; BrianQC in #1893 only runs in c1 point group, so they'd like to have a sub test suite that can work in c1. This provides a label `noc1` for tests that _need_ symmetry (occasionally for convergence but mostly b/c keywords include DOCC or STATES_PER_IRREP). It was determined by forcing c1 by adding `mol->reset_point_group(""c1"");` here https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L235 . That line *is not* in this PR, but the BrianQC ppl may want to consider it when their engine is enabled. With that line in place, `ctest -LE noc1 -j<N>` runs cleanly. It can also be combined, so `ctest -L quick -LE noc1` and `ctest -R scf -LE noc1` also valid. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1958
https://github.com/psi4/psi4/pull/1958:156,Testability,test,tests,156,"## Description; BrianQC in #1893 only runs in c1 point group, so they'd like to have a sub test suite that can work in c1. This provides a label `noc1` for tests that _need_ symmetry (occasionally for convergence but mostly b/c keywords include DOCC or STATES_PER_IRREP). It was determined by forcing c1 by adding `mol->reset_point_group(""c1"");` here https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L235 . That line *is not* in this PR, but the BrianQC ppl may want to consider it when their engine is enabled. With that line in place, `ctest -LE noc1 -j<N>` runs cleanly. It can also be combined, so `ctest -L quick -LE noc1` and `ctest -R scf -LE noc1` also valid. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1958
https://github.com/psi4/psi4/pull/1958:706,Testability,Test,Tests,706,"## Description; BrianQC in #1893 only runs in c1 point group, so they'd like to have a sub test suite that can work in c1. This provides a label `noc1` for tests that _need_ symmetry (occasionally for convergence but mostly b/c keywords include DOCC or STATES_PER_IRREP). It was determined by forcing c1 by adding `mol->reset_point_group(""c1"");` here https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L235 . That line *is not* in this PR, but the BrianQC ppl may want to consider it when their engine is enabled. With that line in place, `ctest -LE noc1 -j<N>` runs cleanly. It can also be combined, so `ctest -L quick -LE noc1` and `ctest -R scf -LE noc1` also valid. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1958
https://github.com/psi4/psi4/pull/1958:781,Testability,test,tests,781,"## Description; BrianQC in #1893 only runs in c1 point group, so they'd like to have a sub test suite that can work in c1. This provides a label `noc1` for tests that _need_ symmetry (occasionally for convergence but mostly b/c keywords include DOCC or STATES_PER_IRREP). It was determined by forcing c1 by adding `mol->reset_point_group(""c1"");` here https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L235 . That line *is not* in this PR, but the BrianQC ppl may want to consider it when their engine is enabled. With that line in place, `ctest -LE noc1 -j<N>` runs cleanly. It can also be combined, so `ctest -L quick -LE noc1` and `ctest -R scf -LE noc1` also valid. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1958
https://github.com/psi4/psi4/pull/1958:872,Testability,test,tests,872,"## Description; BrianQC in #1893 only runs in c1 point group, so they'd like to have a sub test suite that can work in c1. This provides a label `noc1` for tests that _need_ symmetry (occasionally for convergence but mostly b/c keywords include DOCC or STATES_PER_IRREP). It was determined by forcing c1 by adding `mol->reset_point_group(""c1"");` here https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L235 . That line *is not* in this PR, but the BrianQC ppl may want to consider it when their engine is enabled. With that line in place, `ctest -LE noc1 -j<N>` runs cleanly. It can also be combined, so `ctest -L quick -LE noc1` and `ctest -R scf -LE noc1` also valid. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1958
https://github.com/psi4/psi4/issues/1959:60,Availability,error,error,60,"Hi,. I am trying to do a large CASCI (16e,16o) but I get an error which I don't understand. Note that the CAS(16e,14o) worked perfectly. Here is the error:; ```; PSIO_ERROR: unit = 53, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:149,Availability,error,error,149,"Hi,. I am trying to do a large CASCI (16e,16o) but I get an error which I don't understand. Note that the CAS(16e,14o) worked perfectly. Here is the error:; ```; PSIO_ERROR: unit = 53, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:214,Availability,error,error,214,"Hi,. I am trying to do a large CASCI (16e,16o) but I get an error which I don't understand. Note that the CAS(16e,14o) worked perfectly. Here is the error:; ```; PSIO_ERROR: unit = 53, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:919,Availability,Error,Error,919,"Hi,. I am trying to do a large CASCI (16e,16o) but I get an error which I don't understand. Note that the CAS(16e,14o) worked perfectly. Here is the error:; ```; PSIO_ERROR: unit = 53, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:931,Availability,Error,Error,931,"Hi,. I am trying to do a large CASCI (16e,16o) but I get an error which I don't understand. Note that the CAS(16e,14o) worked perfectly. Here is the error:; ```; PSIO_ERROR: unit = 53, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:938,Availability,Error,Error,938,"Hi,. I am trying to do a large CASCI (16e,16o) but I get an error which I don't understand. Note that the CAS(16e,14o) worked perfectly. Here is the error:; ```; PSIO_ERROR: unit = 53, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:1052,Availability,error,error,1052,"Hi,. I am trying to do a large CASCI (16e,16o) but I get an error which I don't understand. Note that the CAS(16e,14o) worked perfectly. Here is the error:; ```; PSIO_ERROR: unit = 53, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:2741,Availability,error,error,2741,"luser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the error ? Again, replacing active = 16 by active = 14 works just fine, so I first assumed that it was a memory issue but the error does not mention anything about memory. Note that I ask for 16gb memory on the cluster for this calculation.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:2864,Availability,error,error,2864,"luser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the error ? Again, replacing active = 16 by active = 14 works just fine, so I first assumed that it was a memory issue but the error does not mention anything about memory. Note that I ask for 16gb memory on the cluster for this calculation.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:555,Energy Efficiency,energy,energy,555,"Hi,. I am trying to do a large CASCI (16e,16o) but I get an error which I don't understand. Note that the CAS(16e,14o) worked perfectly. Here is the error:; ```; PSIO_ERROR: unit = 53, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:665,Energy Efficiency,energy,energy,665,"Hi,. I am trying to do a large CASCI (16e,16o) but I get an error which I don't understand. Note that the CAS(16e,14o) worked perfectly. Here is the error:; ```; PSIO_ERROR: unit = 53, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:691,Energy Efficiency,energy,energy,691,"Hi,. I am trying to do a large CASCI (16e,16o) but I get an error which I don't understand. Note that the CAS(16e,14o) worked perfectly. Here is the error:; ```; PSIO_ERROR: unit = 53, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:2109,Energy Efficiency,energy,energy,2109,"luser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the error ? Again, replacing active = 16 by active = 14 works just fine, so I first assumed that it was a memory issue but the error does not mention anything about memory. Note that I ask for 16gb memory on the cluster for this calculation.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:2166,Energy Efficiency,ENERGY,ENERGY,2166,"luser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the error ? Again, replacing active = 16 by active = 14 works just fine, so I first assumed that it was a memory issue but the error does not mention anything about memory. Note that I ask for 16gb memory on the cluster for this calculation.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:1726,Modifiability,variab,variables,1726,"args); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the erro",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:1884,Modifiability,variab,variables,1884,"ef_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the error ? Again, replacing active = 16 by active = 14 works just fine, so I first assumed that it was a memory issue but the error does not mention an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1959:2140,Modifiability,variab,variable,2140,"luser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the error ? Again, replacing active = 16 by active = 14 works just fine, so I first assumed that it was a memory issue but the error does not mention anything about memory. Note that I ask for 16gb memory on the cluster for this calculation.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1959
https://github.com/psi4/psi4/issues/1960:121,Availability,error,error,121,"On my HPC cluster compute nodes do not have access to a user's home directory. This makes dftd3 crash with the following error:. RuntimeError: [Errno 13] Permission denied: '/home/s/spoel/dftd3_d6f02c65'. I checked the source code dftd3.f and found; ```; call get_environment_variable(""HOME"", homedir); write (*,*) trim(homedir); write(dtmp,'(a,''/.dftd3par.'',a)')trim(homedir),trim(ftmp) ; inquire(file=dtmp,exist=ex); ```. Do I need to hack the fortran to make this run? I realize this is not strictly a Psi4 problem...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1960
https://github.com/psi4/psi4/issues/1960:44,Security,access,access,44,"On my HPC cluster compute nodes do not have access to a user's home directory. This makes dftd3 crash with the following error:. RuntimeError: [Errno 13] Permission denied: '/home/s/spoel/dftd3_d6f02c65'. I checked the source code dftd3.f and found; ```; call get_environment_variable(""HOME"", homedir); write (*,*) trim(homedir); write(dtmp,'(a,''/.dftd3par.'',a)')trim(homedir),trim(ftmp) ; inquire(file=dtmp,exist=ex); ```. Do I need to hack the fortran to make this run? I realize this is not strictly a Psi4 problem...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1960
https://github.com/psi4/psi4/pull/1961:122,Energy Efficiency,Charge,Charge,122,"## Authors; Andy Jiang, Zachary L. Glick (Sherrill Group, Georgia Institute of Technology). ## Description; Adds the MBIS Charge Partitioning Feature to Psi4, from the associated paper by Toon Verstraelen et al. (2016); (https://pubs.acs.org/doi/10.1021/acs.jctc.6b00456). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Calculation of MBIS Atomic Charges; - [x] Calculation of MBIS Atomic Multipoles. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1961
https://github.com/psi4/psi4/pull/1961:398,Energy Efficiency,Charge,Charges,398,"## Authors; Andy Jiang, Zachary L. Glick (Sherrill Group, Georgia Institute of Technology). ## Description; Adds the MBIS Charge Partitioning Feature to Psi4, from the associated paper by Toon Verstraelen et al. (2016); (https://pubs.acs.org/doi/10.1021/acs.jctc.6b00456). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Calculation of MBIS Atomic Charges; - [x] Calculation of MBIS Atomic Multipoles. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1961
https://github.com/psi4/psi4/pull/1961:472,Testability,Test,Tests,472,"## Authors; Andy Jiang, Zachary L. Glick (Sherrill Group, Georgia Institute of Technology). ## Description; Adds the MBIS Charge Partitioning Feature to Psi4, from the associated paper by Toon Verstraelen et al. (2016); (https://pubs.acs.org/doi/10.1021/acs.jctc.6b00456). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Calculation of MBIS Atomic Charges; - [x] Calculation of MBIS Atomic Multipoles. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1961
https://github.com/psi4/psi4/pull/1961:546,Testability,test,tests,546,"## Authors; Andy Jiang, Zachary L. Glick (Sherrill Group, Georgia Institute of Technology). ## Description; Adds the MBIS Charge Partitioning Feature to Psi4, from the associated paper by Toon Verstraelen et al. (2016); (https://pubs.acs.org/doi/10.1021/acs.jctc.6b00456). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Calculation of MBIS Atomic Charges; - [x] Calculation of MBIS Atomic Multipoles. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1961
https://github.com/psi4/psi4/pull/1961:637,Testability,test,tests,637,"## Authors; Andy Jiang, Zachary L. Glick (Sherrill Group, Georgia Institute of Technology). ## Description; Adds the MBIS Charge Partitioning Feature to Psi4, from the associated paper by Toon Verstraelen et al. (2016); (https://pubs.acs.org/doi/10.1021/acs.jctc.6b00456). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Calculation of MBIS Atomic Charges; - [x] Calculation of MBIS Atomic Multipoles. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1961
https://github.com/psi4/psi4/pull/1962:541,Availability,ping,ping,541,"## Description; When computing a gradient through the `cc` mega-module, the reference wavefunction's density would be overwritten with the correlated wavefunction's density. This was because the CCEnergyWavefunction's `Da_` and `Db_` were exactly the same objects as the reference wavefunction's. Of course changing the object associated with one variable name would change the object associated with the other variable name. They're the same object. This PR makes them different objects, to stop this aberrant behavior. Obligatory @lothian ping to confirm this shouldn't create other problems in the `cc` mega-module.; Obligatory @hokru ping because this should allow eliminating `recompute_scf_density` from #1884. Fixing up the DCT density is next. Developers, please tag as bugfix and 1.4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixed a bug where the `cc` mega-module would set the reference wavefunction's density. ## Checklist; - [x] `ctest -L ^cc -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1962
https://github.com/psi4/psi4/pull/1962:638,Availability,ping,ping,638,"## Description; When computing a gradient through the `cc` mega-module, the reference wavefunction's density would be overwritten with the correlated wavefunction's density. This was because the CCEnergyWavefunction's `Da_` and `Db_` were exactly the same objects as the reference wavefunction's. Of course changing the object associated with one variable name would change the object associated with the other variable name. They're the same object. This PR makes them different objects, to stop this aberrant behavior. Obligatory @lothian ping to confirm this shouldn't create other problems in the `cc` mega-module.; Obligatory @hokru ping because this should allow eliminating `recompute_scf_density` from #1884. Fixing up the DCT density is next. Developers, please tag as bugfix and 1.4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixed a bug where the `cc` mega-module would set the reference wavefunction's density. ## Checklist; - [x] `ctest -L ^cc -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1962
https://github.com/psi4/psi4/pull/1962:347,Modifiability,variab,variable,347,"## Description; When computing a gradient through the `cc` mega-module, the reference wavefunction's density would be overwritten with the correlated wavefunction's density. This was because the CCEnergyWavefunction's `Da_` and `Db_` were exactly the same objects as the reference wavefunction's. Of course changing the object associated with one variable name would change the object associated with the other variable name. They're the same object. This PR makes them different objects, to stop this aberrant behavior. Obligatory @lothian ping to confirm this shouldn't create other problems in the `cc` mega-module.; Obligatory @hokru ping because this should allow eliminating `recompute_scf_density` from #1884. Fixing up the DCT density is next. Developers, please tag as bugfix and 1.4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixed a bug where the `cc` mega-module would set the reference wavefunction's density. ## Checklist; - [x] `ctest -L ^cc -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1962
https://github.com/psi4/psi4/pull/1962:411,Modifiability,variab,variable,411,"## Description; When computing a gradient through the `cc` mega-module, the reference wavefunction's density would be overwritten with the correlated wavefunction's density. This was because the CCEnergyWavefunction's `Da_` and `Db_` were exactly the same objects as the reference wavefunction's. Of course changing the object associated with one variable name would change the object associated with the other variable name. They're the same object. This PR makes them different objects, to stop this aberrant behavior. Obligatory @lothian ping to confirm this shouldn't create other problems in the `cc` mega-module.; Obligatory @hokru ping because this should allow eliminating `recompute_scf_density` from #1884. Fixing up the DCT density is next. Developers, please tag as bugfix and 1.4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixed a bug where the `cc` mega-module would set the reference wavefunction's density. ## Checklist; - [x] `ctest -L ^cc -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1962
https://github.com/psi4/psi4/pull/1963:38,Availability,avail,available,38,"## Description; The DCT density, when available, is now on the wavefunction. If you are an orbital optimized method, the density matrices can be computed without solving response equations. This is done in the new `construct_density_oo_UHF` method and its RHF sibling. This allowed me to migrate some code out of `compute_oe_properties`, which was only ever implemented for UHF.; If you are not an orbital optimized method, the density matrices must be computed after solving response equations (if implemented in Psi). This is done in the `compute_ewdm_dc` method, which was already responsible for assembling the OPDM in this case. Obligatory @hokru ping, as this should clean up #1884. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] DCT densities (when available) are now on the wavefunction. ## Checklist; - [x] `ctest -L dct -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1963
https://github.com/psi4/psi4/pull/1963:652,Availability,ping,ping,652,"## Description; The DCT density, when available, is now on the wavefunction. If you are an orbital optimized method, the density matrices can be computed without solving response equations. This is done in the new `construct_density_oo_UHF` method and its RHF sibling. This allowed me to migrate some code out of `compute_oe_properties`, which was only ever implemented for UHF.; If you are not an orbital optimized method, the density matrices must be computed after solving response equations (if implemented in Psi). This is done in the `compute_ewdm_dc` method, which was already responsible for assembling the OPDM in this case. Obligatory @hokru ping, as this should clean up #1884. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] DCT densities (when available) are now on the wavefunction. ## Checklist; - [x] `ctest -L dct -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1963
https://github.com/psi4/psi4/pull/1963:807,Availability,avail,available,807,"## Description; The DCT density, when available, is now on the wavefunction. If you are an orbital optimized method, the density matrices can be computed without solving response equations. This is done in the new `construct_density_oo_UHF` method and its RHF sibling. This allowed me to migrate some code out of `compute_oe_properties`, which was only ever implemented for UHF.; If you are not an orbital optimized method, the density matrices must be computed after solving response equations (if implemented in Psi). This is done in the `compute_ewdm_dc` method, which was already responsible for assembling the OPDM in this case. Obligatory @hokru ping, as this should clean up #1884. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] DCT densities (when available) are now on the wavefunction. ## Checklist; - [x] `ctest -L dct -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1963
https://github.com/psi4/psi4/pull/1963:99,Performance,optimiz,optimized,99,"## Description; The DCT density, when available, is now on the wavefunction. If you are an orbital optimized method, the density matrices can be computed without solving response equations. This is done in the new `construct_density_oo_UHF` method and its RHF sibling. This allowed me to migrate some code out of `compute_oe_properties`, which was only ever implemented for UHF.; If you are not an orbital optimized method, the density matrices must be computed after solving response equations (if implemented in Psi). This is done in the `compute_ewdm_dc` method, which was already responsible for assembling the OPDM in this case. Obligatory @hokru ping, as this should clean up #1884. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] DCT densities (when available) are now on the wavefunction. ## Checklist; - [x] `ctest -L dct -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1963
https://github.com/psi4/psi4/pull/1963:406,Performance,optimiz,optimized,406,"## Description; The DCT density, when available, is now on the wavefunction. If you are an orbital optimized method, the density matrices can be computed without solving response equations. This is done in the new `construct_density_oo_UHF` method and its RHF sibling. This allowed me to migrate some code out of `compute_oe_properties`, which was only ever implemented for UHF.; If you are not an orbital optimized method, the density matrices must be computed after solving response equations (if implemented in Psi). This is done in the `compute_ewdm_dc` method, which was already responsible for assembling the OPDM in this case. Obligatory @hokru ping, as this should clean up #1884. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] DCT densities (when available) are now on the wavefunction. ## Checklist; - [x] `ctest -L dct -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1963
https://github.com/psi4/psi4/pull/1964:57,Security,access,accessible,57,"## Description; Yet another PR to get densities properly accessible on the wavefunction. This one sets the alpha and beta densities for the DF and CD methods in `dfocc` that support gradients - we should be able to close #1952. Because this is `dfocc`, I also got in some code cleanup as well. Some of the CD methods claim to have working one-electron properties, but not gradients, but there's no elaboration. To be cautious, I haven't set densities for those methods. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Exposes `dfocc` densities for methods with gradients. ## Checklist; - [x] `ctest -L ^dfo -j4`, `ctest -L ^dfm -j4`, and `ctest -L ^dfc -j4` all pass. I'm using that as a proxy for running all dfocc tests. Sadly, those aren't known. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1964
https://github.com/psi4/psi4/pull/1964:568,Security,Expose,Exposes,568,"## Description; Yet another PR to get densities properly accessible on the wavefunction. This one sets the alpha and beta densities for the DF and CD methods in `dfocc` that support gradients - we should be able to close #1952. Because this is `dfocc`, I also got in some code cleanup as well. Some of the CD methods claim to have working one-electron properties, but not gradients, but there's no elaboration. To be cautious, I haven't set densities for those methods. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Exposes `dfocc` densities for methods with gradients. ## Checklist; - [x] `ctest -L ^dfo -j4`, `ctest -L ^dfm -j4`, and `ctest -L ^dfc -j4` all pass. I'm using that as a proxy for running all dfocc tests. Sadly, those aren't known. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1964
https://github.com/psi4/psi4/pull/1964:766,Testability,test,tests,766,"## Description; Yet another PR to get densities properly accessible on the wavefunction. This one sets the alpha and beta densities for the DF and CD methods in `dfocc` that support gradients - we should be able to close #1952. Because this is `dfocc`, I also got in some code cleanup as well. Some of the CD methods claim to have working one-electron properties, but not gradients, but there's no elaboration. To be cautious, I haven't set densities for those methods. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Exposes `dfocc` densities for methods with gradients. ## Checklist; - [x] `ctest -L ^dfo -j4`, `ctest -L ^dfm -j4`, and `ctest -L ^dfc -j4` all pass. I'm using that as a proxy for running all dfocc tests. Sadly, those aren't known. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1964
https://github.com/psi4/psi4/issues/1965:16,Availability,error,error,16,"The user facing error message for PSIO could be improved. A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Starting of discussion in #1959 (comments copied over). > @JonathonMisiewicz commented 41 minutes ago; @hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions. > hokru commented 23 minutes ago; Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; PSIO_ERROR: 12 (error writing to file) should in most cases be a disk space issue. > @TiborGY commented 6 minutes ago; Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited. ramdisks or not is the same, I think. Disk is full and the PSI4 memory option has no influence.; But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1965
https://github.com/psi4/psi4/issues/1965:89,Availability,error,error,89,"The user facing error message for PSIO could be improved. A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Starting of discussion in #1959 (comments copied over). > @JonathonMisiewicz commented 41 minutes ago; @hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions. > hokru commented 23 minutes ago; Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; PSIO_ERROR: 12 (error writing to file) should in most cases be a disk space issue. > @TiborGY commented 6 minutes ago; Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited. ramdisks or not is the same, I think. Disk is full and the PSI4 memory option has no influence.; But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1965
https://github.com/psi4/psi4/issues/1965:496,Availability,error,error,496,"The user facing error message for PSIO could be improved. A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Starting of discussion in #1959 (comments copied over). > @JonathonMisiewicz commented 41 minutes ago; @hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions. > hokru commented 23 minutes ago; Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; PSIO_ERROR: 12 (error writing to file) should in most cases be a disk space issue. > @TiborGY commented 6 minutes ago; Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited. ramdisks or not is the same, I think. Disk is full and the PSI4 memory option has no influence.; But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1965
https://github.com/psi4/psi4/issues/1965:546,Availability,error,error,546,"The user facing error message for PSIO could be improved. A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Starting of discussion in #1959 (comments copied over). > @JonathonMisiewicz commented 41 minutes ago; @hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions. > hokru commented 23 minutes ago; Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; PSIO_ERROR: 12 (error writing to file) should in most cases be a disk space issue. > @TiborGY commented 6 minutes ago; Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited. ramdisks or not is the same, I think. Disk is full and the PSI4 memory option has no influence.; But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1965
https://github.com/psi4/psi4/issues/1965:903,Availability,error,error,903,"The user facing error message for PSIO could be improved. A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Starting of discussion in #1959 (comments copied over). > @JonathonMisiewicz commented 41 minutes ago; @hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions. > hokru commented 23 minutes ago; Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; PSIO_ERROR: 12 (error writing to file) should in most cases be a disk space issue. > @TiborGY commented 6 minutes ago; Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited. ramdisks or not is the same, I think. Disk is full and the PSI4 memory option has no influence.; But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1965
https://github.com/psi4/psi4/issues/1965:1438,Availability,error,errors,1438,"The user facing error message for PSIO could be improved. A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Starting of discussion in #1959 (comments copied over). > @JonathonMisiewicz commented 41 minutes ago; @hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions. > hokru commented 23 minutes ago; Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; PSIO_ERROR: 12 (error writing to file) should in most cases be a disk space issue. > @TiborGY commented 6 minutes ago; Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited. ramdisks or not is the same, I think. Disk is full and the PSI4 memory option has no influence.; But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1965
https://github.com/psi4/psi4/issues/1965:535,Deployability,update,update,535,"The user facing error message for PSIO could be improved. A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Starting of discussion in #1959 (comments copied over). > @JonathonMisiewicz commented 41 minutes ago; @hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions. > hokru commented 23 minutes ago; Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; PSIO_ERROR: 12 (error writing to file) should in most cases be a disk space issue. > @TiborGY commented 6 minutes ago; Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited. ramdisks or not is the same, I think. Disk is full and the PSI4 memory option has no influence.; But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1965
https://github.com/psi4/psi4/issues/1965:22,Integrability,message,message,22,"The user facing error message for PSIO could be improved. A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Starting of discussion in #1959 (comments copied over). > @JonathonMisiewicz commented 41 minutes ago; @hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions. > hokru commented 23 minutes ago; Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; PSIO_ERROR: 12 (error writing to file) should in most cases be a disk space issue. > @TiborGY commented 6 minutes ago; Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited. ramdisks or not is the same, I think. Disk is full and the PSI4 memory option has no influence.; But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1965
https://github.com/psi4/psi4/issues/1965:552,Integrability,message,message,552,"The user facing error message for PSIO could be improved. A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Starting of discussion in #1959 (comments copied over). > @JonathonMisiewicz commented 41 minutes ago; @hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions. > hokru commented 23 minutes ago; Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; PSIO_ERROR: 12 (error writing to file) should in most cases be a disk space issue. > @TiborGY commented 6 minutes ago; Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited. ramdisks or not is the same, I think. Disk is full and the PSI4 memory option has no influence.; But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1965
https://github.com/psi4/psi4/issues/1966:87,Testability,test,test,87,"( I have the feeling a similar issue was made a long while ago, but I cannot find it). test input:; ```; molecule UHF {; 0 3; O 0.000000 0.000000 0.000000; O 0.000000 0.000000 1.1; }. memory 1 GiB; #set basis pcseg-1; set basis sto-3g. set reference uhf; grad, wfn = gradient('ccsd', return_wfn=True,molecule=UHF); ```. This will segfault with current master and last piece of output is; ```. **************************; * *; * CCHBAR *; * *; **************************; ```. Perhaps the reason are unoccupied occ/virt fields:. ```; IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 3 0 3 0 0 0; B1g 0 0 0 0 0 0; B2g 1 0 0 1 0 0; B3g 1 0 0 1 0 0; Au 0 0 0 0 0 0; B1u 3 0 2 0 1 0; B2u 1 0 1 0 0 0; B3u 1 0 1 0 0 0; ```. Running without symmetry or a larger basis set works fine. edit: adjusted irrep table formatting",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1966
https://github.com/psi4/psi4/issues/1968:182,Deployability,install,installed,182,"Ghost atoms should only carry basis functions (and in case of DFT xc quadrature grid points) but not ECPs. Psi4 does not remove the ECP. Tested for Psi4 Version 1.4a2.dev839+e273d32 installed via anaconda. Example: HF/def2-SVP for He-Xe dimer at 1 Angstrom separation, Xe as ghost atom. Expected energy: -2.855863 Hartree; Psi4: -2.818142 Hartree. Expected energy is obtained when removing ECP information from basis set file. Input file used for calculation:; ```; import psi4. geo = """"""; 0 1; he 0.0 0.0 0.0; @xe 1.0 0.0 0.0; """""". method = ""hf/def2-svp""; mol = psi4.geometry(geo). psi4.set_options({; 'scf_type': 'direct'; }). e = psi4.energy(method, molecule=mol); ```; Output file is attached.; [he-xe_ghost_hf_def2-svp_sp.log](https://github.com/psi4/psi4/files/4978823/he-xe_ghost_hf_def2-svp_sp.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968
https://github.com/psi4/psi4/issues/1968:296,Energy Efficiency,energy,energy,296,"Ghost atoms should only carry basis functions (and in case of DFT xc quadrature grid points) but not ECPs. Psi4 does not remove the ECP. Tested for Psi4 Version 1.4a2.dev839+e273d32 installed via anaconda. Example: HF/def2-SVP for He-Xe dimer at 1 Angstrom separation, Xe as ghost atom. Expected energy: -2.855863 Hartree; Psi4: -2.818142 Hartree. Expected energy is obtained when removing ECP information from basis set file. Input file used for calculation:; ```; import psi4. geo = """"""; 0 1; he 0.0 0.0 0.0; @xe 1.0 0.0 0.0; """""". method = ""hf/def2-svp""; mol = psi4.geometry(geo). psi4.set_options({; 'scf_type': 'direct'; }). e = psi4.energy(method, molecule=mol); ```; Output file is attached.; [he-xe_ghost_hf_def2-svp_sp.log](https://github.com/psi4/psi4/files/4978823/he-xe_ghost_hf_def2-svp_sp.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968
https://github.com/psi4/psi4/issues/1968:357,Energy Efficiency,energy,energy,357,"Ghost atoms should only carry basis functions (and in case of DFT xc quadrature grid points) but not ECPs. Psi4 does not remove the ECP. Tested for Psi4 Version 1.4a2.dev839+e273d32 installed via anaconda. Example: HF/def2-SVP for He-Xe dimer at 1 Angstrom separation, Xe as ghost atom. Expected energy: -2.855863 Hartree; Psi4: -2.818142 Hartree. Expected energy is obtained when removing ECP information from basis set file. Input file used for calculation:; ```; import psi4. geo = """"""; 0 1; he 0.0 0.0 0.0; @xe 1.0 0.0 0.0; """""". method = ""hf/def2-svp""; mol = psi4.geometry(geo). psi4.set_options({; 'scf_type': 'direct'; }). e = psi4.energy(method, molecule=mol); ```; Output file is attached.; [he-xe_ghost_hf_def2-svp_sp.log](https://github.com/psi4/psi4/files/4978823/he-xe_ghost_hf_def2-svp_sp.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968
https://github.com/psi4/psi4/issues/1968:638,Energy Efficiency,energy,energy,638,"Ghost atoms should only carry basis functions (and in case of DFT xc quadrature grid points) but not ECPs. Psi4 does not remove the ECP. Tested for Psi4 Version 1.4a2.dev839+e273d32 installed via anaconda. Example: HF/def2-SVP for He-Xe dimer at 1 Angstrom separation, Xe as ghost atom. Expected energy: -2.855863 Hartree; Psi4: -2.818142 Hartree. Expected energy is obtained when removing ECP information from basis set file. Input file used for calculation:; ```; import psi4. geo = """"""; 0 1; he 0.0 0.0 0.0; @xe 1.0 0.0 0.0; """""". method = ""hf/def2-svp""; mol = psi4.geometry(geo). psi4.set_options({; 'scf_type': 'direct'; }). e = psi4.energy(method, molecule=mol); ```; Output file is attached.; [he-xe_ghost_hf_def2-svp_sp.log](https://github.com/psi4/psi4/files/4978823/he-xe_ghost_hf_def2-svp_sp.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968
https://github.com/psi4/psi4/issues/1968:137,Testability,Test,Tested,137,"Ghost atoms should only carry basis functions (and in case of DFT xc quadrature grid points) but not ECPs. Psi4 does not remove the ECP. Tested for Psi4 Version 1.4a2.dev839+e273d32 installed via anaconda. Example: HF/def2-SVP for He-Xe dimer at 1 Angstrom separation, Xe as ghost atom. Expected energy: -2.855863 Hartree; Psi4: -2.818142 Hartree. Expected energy is obtained when removing ECP information from basis set file. Input file used for calculation:; ```; import psi4. geo = """"""; 0 1; he 0.0 0.0 0.0; @xe 1.0 0.0 0.0; """""". method = ""hf/def2-svp""; mol = psi4.geometry(geo). psi4.set_options({; 'scf_type': 'direct'; }). e = psi4.energy(method, molecule=mol); ```; Output file is attached.; [he-xe_ghost_hf_def2-svp_sp.log](https://github.com/psi4/psi4/files/4978823/he-xe_ghost_hf_def2-svp_sp.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968
https://github.com/psi4/psi4/issues/1968:727,Testability,log,log,727,"Ghost atoms should only carry basis functions (and in case of DFT xc quadrature grid points) but not ECPs. Psi4 does not remove the ECP. Tested for Psi4 Version 1.4a2.dev839+e273d32 installed via anaconda. Example: HF/def2-SVP for He-Xe dimer at 1 Angstrom separation, Xe as ghost atom. Expected energy: -2.855863 Hartree; Psi4: -2.818142 Hartree. Expected energy is obtained when removing ECP information from basis set file. Input file used for calculation:; ```; import psi4. geo = """"""; 0 1; he 0.0 0.0 0.0; @xe 1.0 0.0 0.0; """""". method = ""hf/def2-svp""; mol = psi4.geometry(geo). psi4.set_options({; 'scf_type': 'direct'; }). e = psi4.energy(method, molecule=mol); ```; Output file is attached.; [he-xe_ghost_hf_def2-svp_sp.log](https://github.com/psi4/psi4/files/4978823/he-xe_ghost_hf_def2-svp_sp.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968
https://github.com/psi4/psi4/issues/1968:802,Testability,log,log,802,"Ghost atoms should only carry basis functions (and in case of DFT xc quadrature grid points) but not ECPs. Psi4 does not remove the ECP. Tested for Psi4 Version 1.4a2.dev839+e273d32 installed via anaconda. Example: HF/def2-SVP for He-Xe dimer at 1 Angstrom separation, Xe as ghost atom. Expected energy: -2.855863 Hartree; Psi4: -2.818142 Hartree. Expected energy is obtained when removing ECP information from basis set file. Input file used for calculation:; ```; import psi4. geo = """"""; 0 1; he 0.0 0.0 0.0; @xe 1.0 0.0 0.0; """""". method = ""hf/def2-svp""; mol = psi4.geometry(geo). psi4.set_options({; 'scf_type': 'direct'; }). e = psi4.energy(method, molecule=mol); ```; Output file is attached.; [he-xe_ghost_hf_def2-svp_sp.log](https://github.com/psi4/psi4/files/4978823/he-xe_ghost_hf_def2-svp_sp.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1968
https://github.com/psi4/psi4/pull/1969:198,Testability,Test,Tests,198,## Description; This PR is a follow up of PR #1948 and resolves issue #1830.; It covers the corner case where zero spin block occurs in USAPT0 mp2_term due to freezing the core. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1969
https://github.com/psi4/psi4/pull/1969:272,Testability,test,tests,272,## Description; This PR is a follow up of PR #1948 and resolves issue #1830.; It covers the corner case where zero spin block occurs in USAPT0 mp2_term due to freezing the core. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1969
https://github.com/psi4/psi4/pull/1969:363,Testability,test,tests,363,## Description; This PR is a follow up of PR #1948 and resolves issue #1830.; It covers the corner case where zero spin block occurs in USAPT0 mp2_term due to freezing the core. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1969
https://github.com/psi4/psi4/pull/1970:1364,Availability,Ping,Pings,1364," Psi, both the `Wavefunction` class and the `MintsHelper` class have their own copy of `basissets_`, a map from basis name to the actual `BasisSet`. There are `get_basisset`, `set_basisset`, and `basisset_exists` methods to manipulate `basissets_`, which are identical between the two classes. So `basissets_` and associated methods are functionally identical on the two classes. The problem is that every `Wavefunction` object is already guaranteed to have a `MintsHelper` object, there is no reason for the `Wavefunction` object to ever have a different `basissets_` from its `MintsHelper` (because `Wavefunction`’s only use for `basissets_` is aforementioned methods), but there is no mechanism to synchronize the `basissets_` variables of a `Wavefunction` and its `MintsHelper`. So we can have two sources disagreeing about the same information. This PR solves the problem by moving the responsibility for managing `basissets_` onto `MintsHelper`. The `Wavefunction` methods now just call the relevant `MintsHelper` methods. ~~I’m in favor of deprecating the offending `Wavefunction` methods, but I’ll open this to core developer discussion before adding that to the PR because I expect changing `Wavefunction` API will be controversial.~~. I’ve also marked some functions as override to silence annoying compiler warnings. Obligatory Pings: @jturney for `libmints` changes, @loriab for API changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Silences compiler warnings; - [x] Eliminates `wavefunction.basissets_` so that `wavefunction.mintshelper().basissets_` is the source of truth. ## Questions; ~~Do we want to deprecate `wavefunction.basissets()`, `wavefunction.get_basisset()`, `wavefunction.set_basisset()`, and `wavefunction.basisset_exists()` in favor of `wavefunction.mintshelper().method_name_here()`?~~. ## Checklist; - [x] Quick tests, dkh tests, and x2c tests all pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1970
https://github.com/psi4/psi4/pull/1970:726,Integrability,synchroniz,synchronize,726,"## Description; In master Psi, both the `Wavefunction` class and the `MintsHelper` class have their own copy of `basissets_`, a map from basis name to the actual `BasisSet`. There are `get_basisset`, `set_basisset`, and `basisset_exists` methods to manipulate `basissets_`, which are identical between the two classes. So `basissets_` and associated methods are functionally identical on the two classes. The problem is that every `Wavefunction` object is already guaranteed to have a `MintsHelper` object, there is no reason for the `Wavefunction` object to ever have a different `basissets_` from its `MintsHelper` (because `Wavefunction`’s only use for `basissets_` is aforementioned methods), but there is no mechanism to synchronize the `basissets_` variables of a `Wavefunction` and its `MintsHelper`. So we can have two sources disagreeing about the same information. This PR solves the problem by moving the responsibility for managing `basissets_` onto `MintsHelper`. The `Wavefunction` methods now just call the relevant `MintsHelper` methods. ~~I’m in favor of deprecating the offending `Wavefunction` methods, but I’ll open this to core developer discussion before adding that to the PR because I expect changing `Wavefunction` API will be controversial.~~. I’ve also marked some functions as override to silence annoying compiler warnings. Obligatory Pings: @jturney for `libmints` changes, @loriab for API changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Silences compiler warnings; - [x] Eliminates `wavefunction.basissets_` so that `wavefunction.mintshelper().basissets_` is the source of truth. ## Questions; ~~Do we want to deprecate `wavefunction.basissets()`, `wavefunction.get_basisset()`, `wavefunction.set_basisset()`, and `wavefunction.basisset_exists()` in favor of `wavefunction.mintshelper().method_name_here()`?~~. ## Checklist; - [x] Quick tests, dkh tests, and x2c tests all pass. ## Status; - [x] Ready for revie",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1970
https://github.com/psi4/psi4/pull/1970:755,Modifiability,variab,variables,755,"## Description; In master Psi, both the `Wavefunction` class and the `MintsHelper` class have their own copy of `basissets_`, a map from basis name to the actual `BasisSet`. There are `get_basisset`, `set_basisset`, and `basisset_exists` methods to manipulate `basissets_`, which are identical between the two classes. So `basissets_` and associated methods are functionally identical on the two classes. The problem is that every `Wavefunction` object is already guaranteed to have a `MintsHelper` object, there is no reason for the `Wavefunction` object to ever have a different `basissets_` from its `MintsHelper` (because `Wavefunction`’s only use for `basissets_` is aforementioned methods), but there is no mechanism to synchronize the `basissets_` variables of a `Wavefunction` and its `MintsHelper`. So we can have two sources disagreeing about the same information. This PR solves the problem by moving the responsibility for managing `basissets_` onto `MintsHelper`. The `Wavefunction` methods now just call the relevant `MintsHelper` methods. ~~I’m in favor of deprecating the offending `Wavefunction` methods, but I’ll open this to core developer discussion before adding that to the PR because I expect changing `Wavefunction` API will be controversial.~~. I’ve also marked some functions as override to silence annoying compiler warnings. Obligatory Pings: @jturney for `libmints` changes, @loriab for API changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Silences compiler warnings; - [x] Eliminates `wavefunction.basissets_` so that `wavefunction.mintshelper().basissets_` is the source of truth. ## Questions; ~~Do we want to deprecate `wavefunction.basissets()`, `wavefunction.get_basisset()`, `wavefunction.set_basisset()`, and `wavefunction.basisset_exists()` in favor of `wavefunction.mintshelper().method_name_here()`?~~. ## Checklist; - [x] Quick tests, dkh tests, and x2c tests all pass. ## Status; - [x] Ready for revie",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1970
https://github.com/psi4/psi4/pull/1970:1927,Testability,test,tests,1927," Psi, both the `Wavefunction` class and the `MintsHelper` class have their own copy of `basissets_`, a map from basis name to the actual `BasisSet`. There are `get_basisset`, `set_basisset`, and `basisset_exists` methods to manipulate `basissets_`, which are identical between the two classes. So `basissets_` and associated methods are functionally identical on the two classes. The problem is that every `Wavefunction` object is already guaranteed to have a `MintsHelper` object, there is no reason for the `Wavefunction` object to ever have a different `basissets_` from its `MintsHelper` (because `Wavefunction`’s only use for `basissets_` is aforementioned methods), but there is no mechanism to synchronize the `basissets_` variables of a `Wavefunction` and its `MintsHelper`. So we can have two sources disagreeing about the same information. This PR solves the problem by moving the responsibility for managing `basissets_` onto `MintsHelper`. The `Wavefunction` methods now just call the relevant `MintsHelper` methods. ~~I’m in favor of deprecating the offending `Wavefunction` methods, but I’ll open this to core developer discussion before adding that to the PR because I expect changing `Wavefunction` API will be controversial.~~. I’ve also marked some functions as override to silence annoying compiler warnings. Obligatory Pings: @jturney for `libmints` changes, @loriab for API changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Silences compiler warnings; - [x] Eliminates `wavefunction.basissets_` so that `wavefunction.mintshelper().basissets_` is the source of truth. ## Questions; ~~Do we want to deprecate `wavefunction.basissets()`, `wavefunction.get_basisset()`, `wavefunction.set_basisset()`, and `wavefunction.basisset_exists()` in favor of `wavefunction.mintshelper().method_name_here()`?~~. ## Checklist; - [x] Quick tests, dkh tests, and x2c tests all pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1970
https://github.com/psi4/psi4/pull/1970:1938,Testability,test,tests,1938," Psi, both the `Wavefunction` class and the `MintsHelper` class have their own copy of `basissets_`, a map from basis name to the actual `BasisSet`. There are `get_basisset`, `set_basisset`, and `basisset_exists` methods to manipulate `basissets_`, which are identical between the two classes. So `basissets_` and associated methods are functionally identical on the two classes. The problem is that every `Wavefunction` object is already guaranteed to have a `MintsHelper` object, there is no reason for the `Wavefunction` object to ever have a different `basissets_` from its `MintsHelper` (because `Wavefunction`’s only use for `basissets_` is aforementioned methods), but there is no mechanism to synchronize the `basissets_` variables of a `Wavefunction` and its `MintsHelper`. So we can have two sources disagreeing about the same information. This PR solves the problem by moving the responsibility for managing `basissets_` onto `MintsHelper`. The `Wavefunction` methods now just call the relevant `MintsHelper` methods. ~~I’m in favor of deprecating the offending `Wavefunction` methods, but I’ll open this to core developer discussion before adding that to the PR because I expect changing `Wavefunction` API will be controversial.~~. I’ve also marked some functions as override to silence annoying compiler warnings. Obligatory Pings: @jturney for `libmints` changes, @loriab for API changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Silences compiler warnings; - [x] Eliminates `wavefunction.basissets_` so that `wavefunction.mintshelper().basissets_` is the source of truth. ## Questions; ~~Do we want to deprecate `wavefunction.basissets()`, `wavefunction.get_basisset()`, `wavefunction.set_basisset()`, and `wavefunction.basisset_exists()` in favor of `wavefunction.mintshelper().method_name_here()`?~~. ## Checklist; - [x] Quick tests, dkh tests, and x2c tests all pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1970
https://github.com/psi4/psi4/pull/1970:1953,Testability,test,tests,1953," Psi, both the `Wavefunction` class and the `MintsHelper` class have their own copy of `basissets_`, a map from basis name to the actual `BasisSet`. There are `get_basisset`, `set_basisset`, and `basisset_exists` methods to manipulate `basissets_`, which are identical between the two classes. So `basissets_` and associated methods are functionally identical on the two classes. The problem is that every `Wavefunction` object is already guaranteed to have a `MintsHelper` object, there is no reason for the `Wavefunction` object to ever have a different `basissets_` from its `MintsHelper` (because `Wavefunction`’s only use for `basissets_` is aforementioned methods), but there is no mechanism to synchronize the `basissets_` variables of a `Wavefunction` and its `MintsHelper`. So we can have two sources disagreeing about the same information. This PR solves the problem by moving the responsibility for managing `basissets_` onto `MintsHelper`. The `Wavefunction` methods now just call the relevant `MintsHelper` methods. ~~I’m in favor of deprecating the offending `Wavefunction` methods, but I’ll open this to core developer discussion before adding that to the PR because I expect changing `Wavefunction` API will be controversial.~~. I’ve also marked some functions as override to silence annoying compiler warnings. Obligatory Pings: @jturney for `libmints` changes, @loriab for API changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Silences compiler warnings; - [x] Eliminates `wavefunction.basissets_` so that `wavefunction.mintshelper().basissets_` is the source of truth. ## Questions; ~~Do we want to deprecate `wavefunction.basissets()`, `wavefunction.get_basisset()`, `wavefunction.set_basisset()`, and `wavefunction.basisset_exists()` in favor of `wavefunction.mintshelper().method_name_here()`?~~. ## Checklist; - [x] Quick tests, dkh tests, and x2c tests all pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1970
https://github.com/psi4/psi4/pull/1971:47,Testability,test,testing,47,"## Description. ## Todos; - [x] standard suite testing for HF E & G, MP2.5 E & G, MP3 E & G, LCCD G; - [x] adjustments to fnocc, dfocc, occ as needed. (AED has signed off on the fnocc printing changes -- printing has been wrong.); - [x] detci_opdm test is temporarily excused until qcel 0.16 comes out that can forgive phase changes. want to get this PR in for conda builds. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1971
https://github.com/psi4/psi4/pull/1971:248,Testability,test,test,248,"## Description. ## Todos; - [x] standard suite testing for HF E & G, MP2.5 E & G, MP3 E & G, LCCD G; - [x] adjustments to fnocc, dfocc, occ as needed. (AED has signed off on the fnocc printing changes -- printing has been wrong.); - [x] detci_opdm test is temporarily excused until qcel 0.16 comes out that can forgive phase changes. want to get this PR in for conda builds. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1971
https://github.com/psi4/psi4/pull/1971:395,Testability,Test,Tests,395,"## Description. ## Todos; - [x] standard suite testing for HF E & G, MP2.5 E & G, MP3 E & G, LCCD G; - [x] adjustments to fnocc, dfocc, occ as needed. (AED has signed off on the fnocc printing changes -- printing has been wrong.); - [x] detci_opdm test is temporarily excused until qcel 0.16 comes out that can forgive phase changes. want to get this PR in for conda builds. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1971
https://github.com/psi4/psi4/pull/1971:469,Testability,test,tests,469,"## Description. ## Todos; - [x] standard suite testing for HF E & G, MP2.5 E & G, MP3 E & G, LCCD G; - [x] adjustments to fnocc, dfocc, occ as needed. (AED has signed off on the fnocc printing changes -- printing has been wrong.); - [x] detci_opdm test is temporarily excused until qcel 0.16 comes out that can forgive phase changes. want to get this PR in for conda builds. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1971
https://github.com/psi4/psi4/pull/1971:560,Testability,test,tests,560,"## Description. ## Todos; - [x] standard suite testing for HF E & G, MP2.5 E & G, MP3 E & G, LCCD G; - [x] adjustments to fnocc, dfocc, occ as needed. (AED has signed off on the fnocc printing changes -- printing has been wrong.); - [x] detci_opdm test is temporarily excused until qcel 0.16 comes out that can forgive phase changes. want to get this PR in for conda builds. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1971
https://github.com/psi4/psi4/issues/1973:329,Energy Efficiency,charge,charge,329,"Example: [molden_cartesian.zip](https://github.com/psi4/psi4/files/4988043/molden_cartesian.zip). The ZIP file contains a trivial HF/6-31G* calculation on water with PSI4 and Gaussian. To allow for a one-on-one comparison, symmetry, reorientation etc. are disabled. The molden file written out by PSI4 results in the wrong total charge when it is loaded into Molden, which shows there is a problem:. ```; Mulliken Charges; ================; ; O -0.8774; H 0.4308; H 0.4316; ; Sum of Mulliken Charges: -0.0150; ```. Repeating the calculation in Gaussian and loading the log file into Molden gives:. ```; Mulliken Charges; ================; ; O -0.8652; H 0.4323; H 0.4329; ; Sum of Mulliken Charges: -0.0000; ```. I've written out the orbitals from the Gaussian log back into a Molden file with Molden, to allow for a one-on-one comparison of the orbital coefficients. This revealed that coefficients 13, 14 and 15 of each orbital in the Molden file written by PSI4 are a factor **sqrt(3)** too large compared to what they should be. These are coefficients for the `xy`, `xz` and `yz` basis functions in a d shell. Other d functions are fine. I'll check for g and f functions as well...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973
https://github.com/psi4/psi4/issues/1973:414,Energy Efficiency,Charge,Charges,414,"Example: [molden_cartesian.zip](https://github.com/psi4/psi4/files/4988043/molden_cartesian.zip). The ZIP file contains a trivial HF/6-31G* calculation on water with PSI4 and Gaussian. To allow for a one-on-one comparison, symmetry, reorientation etc. are disabled. The molden file written out by PSI4 results in the wrong total charge when it is loaded into Molden, which shows there is a problem:. ```; Mulliken Charges; ================; ; O -0.8774; H 0.4308; H 0.4316; ; Sum of Mulliken Charges: -0.0150; ```. Repeating the calculation in Gaussian and loading the log file into Molden gives:. ```; Mulliken Charges; ================; ; O -0.8652; H 0.4323; H 0.4329; ; Sum of Mulliken Charges: -0.0000; ```. I've written out the orbitals from the Gaussian log back into a Molden file with Molden, to allow for a one-on-one comparison of the orbital coefficients. This revealed that coefficients 13, 14 and 15 of each orbital in the Molden file written by PSI4 are a factor **sqrt(3)** too large compared to what they should be. These are coefficients for the `xy`, `xz` and `yz` basis functions in a d shell. Other d functions are fine. I'll check for g and f functions as well...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973
https://github.com/psi4/psi4/issues/1973:492,Energy Efficiency,Charge,Charges,492,"Example: [molden_cartesian.zip](https://github.com/psi4/psi4/files/4988043/molden_cartesian.zip). The ZIP file contains a trivial HF/6-31G* calculation on water with PSI4 and Gaussian. To allow for a one-on-one comparison, symmetry, reorientation etc. are disabled. The molden file written out by PSI4 results in the wrong total charge when it is loaded into Molden, which shows there is a problem:. ```; Mulliken Charges; ================; ; O -0.8774; H 0.4308; H 0.4316; ; Sum of Mulliken Charges: -0.0150; ```. Repeating the calculation in Gaussian and loading the log file into Molden gives:. ```; Mulliken Charges; ================; ; O -0.8652; H 0.4323; H 0.4329; ; Sum of Mulliken Charges: -0.0000; ```. I've written out the orbitals from the Gaussian log back into a Molden file with Molden, to allow for a one-on-one comparison of the orbital coefficients. This revealed that coefficients 13, 14 and 15 of each orbital in the Molden file written by PSI4 are a factor **sqrt(3)** too large compared to what they should be. These are coefficients for the `xy`, `xz` and `yz` basis functions in a d shell. Other d functions are fine. I'll check for g and f functions as well...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973
https://github.com/psi4/psi4/issues/1973:612,Energy Efficiency,Charge,Charges,612,"Example: [molden_cartesian.zip](https://github.com/psi4/psi4/files/4988043/molden_cartesian.zip). The ZIP file contains a trivial HF/6-31G* calculation on water with PSI4 and Gaussian. To allow for a one-on-one comparison, symmetry, reorientation etc. are disabled. The molden file written out by PSI4 results in the wrong total charge when it is loaded into Molden, which shows there is a problem:. ```; Mulliken Charges; ================; ; O -0.8774; H 0.4308; H 0.4316; ; Sum of Mulliken Charges: -0.0150; ```. Repeating the calculation in Gaussian and loading the log file into Molden gives:. ```; Mulliken Charges; ================; ; O -0.8652; H 0.4323; H 0.4329; ; Sum of Mulliken Charges: -0.0000; ```. I've written out the orbitals from the Gaussian log back into a Molden file with Molden, to allow for a one-on-one comparison of the orbital coefficients. This revealed that coefficients 13, 14 and 15 of each orbital in the Molden file written by PSI4 are a factor **sqrt(3)** too large compared to what they should be. These are coefficients for the `xy`, `xz` and `yz` basis functions in a d shell. Other d functions are fine. I'll check for g and f functions as well...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973
https://github.com/psi4/psi4/issues/1973:690,Energy Efficiency,Charge,Charges,690,"Example: [molden_cartesian.zip](https://github.com/psi4/psi4/files/4988043/molden_cartesian.zip). The ZIP file contains a trivial HF/6-31G* calculation on water with PSI4 and Gaussian. To allow for a one-on-one comparison, symmetry, reorientation etc. are disabled. The molden file written out by PSI4 results in the wrong total charge when it is loaded into Molden, which shows there is a problem:. ```; Mulliken Charges; ================; ; O -0.8774; H 0.4308; H 0.4316; ; Sum of Mulliken Charges: -0.0150; ```. Repeating the calculation in Gaussian and loading the log file into Molden gives:. ```; Mulliken Charges; ================; ; O -0.8652; H 0.4323; H 0.4329; ; Sum of Mulliken Charges: -0.0000; ```. I've written out the orbitals from the Gaussian log back into a Molden file with Molden, to allow for a one-on-one comparison of the orbital coefficients. This revealed that coefficients 13, 14 and 15 of each orbital in the Molden file written by PSI4 are a factor **sqrt(3)** too large compared to what they should be. These are coefficients for the `xy`, `xz` and `yz` basis functions in a d shell. Other d functions are fine. I'll check for g and f functions as well...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973
https://github.com/psi4/psi4/issues/1973:347,Performance,load,loaded,347,"Example: [molden_cartesian.zip](https://github.com/psi4/psi4/files/4988043/molden_cartesian.zip). The ZIP file contains a trivial HF/6-31G* calculation on water with PSI4 and Gaussian. To allow for a one-on-one comparison, symmetry, reorientation etc. are disabled. The molden file written out by PSI4 results in the wrong total charge when it is loaded into Molden, which shows there is a problem:. ```; Mulliken Charges; ================; ; O -0.8774; H 0.4308; H 0.4316; ; Sum of Mulliken Charges: -0.0150; ```. Repeating the calculation in Gaussian and loading the log file into Molden gives:. ```; Mulliken Charges; ================; ; O -0.8652; H 0.4323; H 0.4329; ; Sum of Mulliken Charges: -0.0000; ```. I've written out the orbitals from the Gaussian log back into a Molden file with Molden, to allow for a one-on-one comparison of the orbital coefficients. This revealed that coefficients 13, 14 and 15 of each orbital in the Molden file written by PSI4 are a factor **sqrt(3)** too large compared to what they should be. These are coefficients for the `xy`, `xz` and `yz` basis functions in a d shell. Other d functions are fine. I'll check for g and f functions as well...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973
https://github.com/psi4/psi4/issues/1973:557,Performance,load,loading,557,"Example: [molden_cartesian.zip](https://github.com/psi4/psi4/files/4988043/molden_cartesian.zip). The ZIP file contains a trivial HF/6-31G* calculation on water with PSI4 and Gaussian. To allow for a one-on-one comparison, symmetry, reorientation etc. are disabled. The molden file written out by PSI4 results in the wrong total charge when it is loaded into Molden, which shows there is a problem:. ```; Mulliken Charges; ================; ; O -0.8774; H 0.4308; H 0.4316; ; Sum of Mulliken Charges: -0.0150; ```. Repeating the calculation in Gaussian and loading the log file into Molden gives:. ```; Mulliken Charges; ================; ; O -0.8652; H 0.4323; H 0.4329; ; Sum of Mulliken Charges: -0.0000; ```. I've written out the orbitals from the Gaussian log back into a Molden file with Molden, to allow for a one-on-one comparison of the orbital coefficients. This revealed that coefficients 13, 14 and 15 of each orbital in the Molden file written by PSI4 are a factor **sqrt(3)** too large compared to what they should be. These are coefficients for the `xy`, `xz` and `yz` basis functions in a d shell. Other d functions are fine. I'll check for g and f functions as well...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973
https://github.com/psi4/psi4/issues/1973:569,Testability,log,log,569,"Example: [molden_cartesian.zip](https://github.com/psi4/psi4/files/4988043/molden_cartesian.zip). The ZIP file contains a trivial HF/6-31G* calculation on water with PSI4 and Gaussian. To allow for a one-on-one comparison, symmetry, reorientation etc. are disabled. The molden file written out by PSI4 results in the wrong total charge when it is loaded into Molden, which shows there is a problem:. ```; Mulliken Charges; ================; ; O -0.8774; H 0.4308; H 0.4316; ; Sum of Mulliken Charges: -0.0150; ```. Repeating the calculation in Gaussian and loading the log file into Molden gives:. ```; Mulliken Charges; ================; ; O -0.8652; H 0.4323; H 0.4329; ; Sum of Mulliken Charges: -0.0000; ```. I've written out the orbitals from the Gaussian log back into a Molden file with Molden, to allow for a one-on-one comparison of the orbital coefficients. This revealed that coefficients 13, 14 and 15 of each orbital in the Molden file written by PSI4 are a factor **sqrt(3)** too large compared to what they should be. These are coefficients for the `xy`, `xz` and `yz` basis functions in a d shell. Other d functions are fine. I'll check for g and f functions as well...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973
https://github.com/psi4/psi4/issues/1973:761,Testability,log,log,761,"Example: [molden_cartesian.zip](https://github.com/psi4/psi4/files/4988043/molden_cartesian.zip). The ZIP file contains a trivial HF/6-31G* calculation on water with PSI4 and Gaussian. To allow for a one-on-one comparison, symmetry, reorientation etc. are disabled. The molden file written out by PSI4 results in the wrong total charge when it is loaded into Molden, which shows there is a problem:. ```; Mulliken Charges; ================; ; O -0.8774; H 0.4308; H 0.4316; ; Sum of Mulliken Charges: -0.0150; ```. Repeating the calculation in Gaussian and loading the log file into Molden gives:. ```; Mulliken Charges; ================; ; O -0.8652; H 0.4323; H 0.4329; ; Sum of Mulliken Charges: -0.0000; ```. I've written out the orbitals from the Gaussian log back into a Molden file with Molden, to allow for a one-on-one comparison of the orbital coefficients. This revealed that coefficients 13, 14 and 15 of each orbital in the Molden file written by PSI4 are a factor **sqrt(3)** too large compared to what they should be. These are coefficients for the `xy`, `xz` and `yz` basis functions in a d shell. Other d functions are fine. I'll check for g and f functions as well...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1973
https://github.com/psi4/psi4/pull/1974:165,Integrability,contract,contraction,165,"## Description; Previously, the `dfocc`, `dfmp2` and `scfgrad` modules all had nearly identical code to compute the **metric term** of density fitted gradients, the contraction against the metric integral derivatives. `dfmp2` even did this _twice_ for a total of 4 times near identical logic appears. (It was 5 before #1953.) This PR consolidates those into a single `MintsHelper` method. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Various classes and functions now take in a `MintsHelper` rather than basis sets directly; - [x] Metric integral derivative contractions are consolidated into `MintsHelper`. ## Checklist; - [x] Timing tests show that with these changes, there's a slowdown of <0.1s, and scaling is effectively constant compared to the scaling of the much more expensive SCF iterations and the `Amn_x` term. I can live with this.; - [x] Quick tests and gradient tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1974
https://github.com/psi4/psi4/pull/1974:611,Integrability,contract,contractions,611,"## Description; Previously, the `dfocc`, `dfmp2` and `scfgrad` modules all had nearly identical code to compute the **metric term** of density fitted gradients, the contraction against the metric integral derivatives. `dfmp2` even did this _twice_ for a total of 4 times near identical logic appears. (It was 5 before #1953.) This PR consolidates those into a single `MintsHelper` method. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Various classes and functions now take in a `MintsHelper` rather than basis sets directly; - [x] Metric integral derivative contractions are consolidated into `MintsHelper`. ## Checklist; - [x] Timing tests show that with these changes, there's a slowdown of <0.1s, and scaling is effectively constant compared to the scaling of the much more expensive SCF iterations and the `Amn_x` term. I can live with this.; - [x] Quick tests and gradient tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1974
https://github.com/psi4/psi4/pull/1974:286,Testability,log,logic,286,"## Description; Previously, the `dfocc`, `dfmp2` and `scfgrad` modules all had nearly identical code to compute the **metric term** of density fitted gradients, the contraction against the metric integral derivatives. `dfmp2` even did this _twice_ for a total of 4 times near identical logic appears. (It was 5 before #1953.) This PR consolidates those into a single `MintsHelper` method. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Various classes and functions now take in a `MintsHelper` rather than basis sets directly; - [x] Metric integral derivative contractions are consolidated into `MintsHelper`. ## Checklist; - [x] Timing tests show that with these changes, there's a slowdown of <0.1s, and scaling is effectively constant compared to the scaling of the much more expensive SCF iterations and the `Amn_x` term. I can live with this.; - [x] Quick tests and gradient tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1974
https://github.com/psi4/psi4/pull/1974:688,Testability,test,tests,688,"## Description; Previously, the `dfocc`, `dfmp2` and `scfgrad` modules all had nearly identical code to compute the **metric term** of density fitted gradients, the contraction against the metric integral derivatives. `dfmp2` even did this _twice_ for a total of 4 times near identical logic appears. (It was 5 before #1953.) This PR consolidates those into a single `MintsHelper` method. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Various classes and functions now take in a `MintsHelper` rather than basis sets directly; - [x] Metric integral derivative contractions are consolidated into `MintsHelper`. ## Checklist; - [x] Timing tests show that with these changes, there's a slowdown of <0.1s, and scaling is effectively constant compared to the scaling of the much more expensive SCF iterations and the `Amn_x` term. I can live with this.; - [x] Quick tests and gradient tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1974
https://github.com/psi4/psi4/pull/1974:912,Testability,test,tests,912,"## Description; Previously, the `dfocc`, `dfmp2` and `scfgrad` modules all had nearly identical code to compute the **metric term** of density fitted gradients, the contraction against the metric integral derivatives. `dfmp2` even did this _twice_ for a total of 4 times near identical logic appears. (It was 5 before #1953.) This PR consolidates those into a single `MintsHelper` method. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Various classes and functions now take in a `MintsHelper` rather than basis sets directly; - [x] Metric integral derivative contractions are consolidated into `MintsHelper`. ## Checklist; - [x] Timing tests show that with these changes, there's a slowdown of <0.1s, and scaling is effectively constant compared to the scaling of the much more expensive SCF iterations and the `Amn_x` term. I can live with this.; - [x] Quick tests and gradient tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1974
https://github.com/psi4/psi4/pull/1974:931,Testability,test,tests,931,"## Description; Previously, the `dfocc`, `dfmp2` and `scfgrad` modules all had nearly identical code to compute the **metric term** of density fitted gradients, the contraction against the metric integral derivatives. `dfmp2` even did this _twice_ for a total of 4 times near identical logic appears. (It was 5 before #1953.) This PR consolidates those into a single `MintsHelper` method. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Various classes and functions now take in a `MintsHelper` rather than basis sets directly; - [x] Metric integral derivative contractions are consolidated into `MintsHelper`. ## Checklist; - [x] Timing tests show that with these changes, there's a slowdown of <0.1s, and scaling is effectively constant compared to the scaling of the much more expensive SCF iterations and the `Amn_x` term. I can live with this.; - [x] Quick tests and gradient tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1974
https://github.com/psi4/psi4/issues/1975:930,Energy Efficiency,energy,energy,930,"**Expected behavior**: for metastable helium (spin triplet), UHF and ROHF references should yield the same results, the same is true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1013,Energy Efficiency,ENERGY,ENERGY,1013,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1056,Energy Efficiency,ENERGY,ENERGY,1056,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1103,Energy Efficiency,ENERGY,ENERGY,1103,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1160,Energy Efficiency,ENERGY,ENERGY,1160,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1207,Energy Efficiency,ENERGY,ENERGY,1207,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1264,Energy Efficiency,ENERGY,ENERGY,1264,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1361,Energy Efficiency,energy,energy,1361,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1458,Energy Efficiency,ENERGY,ENERGY,1458,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1539,Energy Efficiency,ENERGY,ENERGY,1539,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1624,Energy Efficiency,ENERGY,ENERGY,1624,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1722,Energy Efficiency,ENERGY,ENERGY,1722,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1815,Energy Efficiency,ENERGY,ENERGY,1815,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1912,Energy Efficiency,ENERGY,ENERGY,1912,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:3033,Energy Efficiency,Energy,Energy,3033,0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:3096,Energy Efficiency,Energy,Energy,3096,"ed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was a typo in SAPT0(ROHF) E20exch-ind comparision, current inp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:3138,Energy Efficiency,Energy,Energy,3138,"ed: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was a typo in SAPT0(ROHF) E20exch-ind comparision, current input is correct to reproduce it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:3181,Energy Efficiency,Energy,Energy,3181,"ed: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was a typo in SAPT0(ROHF) E20exch-ind comparision, current input is correct to reproduce it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:3216,Energy Efficiency,Energy,Energy,3216,"ed: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was a typo in SAPT0(ROHF) E20exch-ind comparision, current input is correct to reproduce it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:3800,Energy Efficiency,Energy,Energy,3800,"ed: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was a typo in SAPT0(ROHF) E20exch-ind comparision, current input is correct to reproduce it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:3863,Energy Efficiency,Energy,Energy,3863,"ed: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was a typo in SAPT0(ROHF) E20exch-ind comparision, current input is correct to reproduce it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:3905,Energy Efficiency,Energy,Energy,3905,"ed: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was a typo in SAPT0(ROHF) E20exch-ind comparision, current input is correct to reproduce it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:3948,Energy Efficiency,Energy,Energy,3948,"ed: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was a typo in SAPT0(ROHF) E20exch-ind comparision, current input is correct to reproduce it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:3983,Energy Efficiency,Energy,Energy,3983,"ed: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was a typo in SAPT0(ROHF) E20exch-ind comparision, current input is correct to reproduce it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:993,Modifiability,variab,variable,993,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1036,Modifiability,variab,variable,1036,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1080,Modifiability,variab,variable,1080,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1132,Modifiability,variab,variable,1132,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1185,Modifiability,variab,variable,1185,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1237,Modifiability,variab,variable,1237,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1438,Modifiability,variab,variable,1438,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1519,Modifiability,variab,variable,1519,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1601,Modifiability,variab,variable,1601,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1694,Modifiability,variab,variable,1694,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1793,Modifiability,variab,variable,1793,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/issues/1975:1885,Modifiability,variab,variable,1885,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1975
https://github.com/psi4/psi4/pull/1977:63,Energy Efficiency,charge,charges,63,"## Description; The PCMsolver interface takes as input nuclear charges (`mol.Z(i)`) to identify the elements, but did not account for ghost atoms.; Change asks now for the atomic number and thus also avoids`mol.fZ(i)=0`. **This forms the cavity also around the ghost atoms**, which I think is the expected behaviour. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1656 . ## Checklist; - [x ] `ctest -R pcm` passes; - [x] The `charges` array no longer contains zeros for ghost atoms (manual inspection). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1977
https://github.com/psi4/psi4/pull/1977:484,Energy Efficiency,charge,charges,484,"## Description; The PCMsolver interface takes as input nuclear charges (`mol.Z(i)`) to identify the elements, but did not account for ghost atoms.; Change asks now for the atomic number and thus also avoids`mol.fZ(i)=0`. **This forms the cavity also around the ghost atoms**, which I think is the expected behaviour. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1656 . ## Checklist; - [x ] `ctest -R pcm` passes; - [x] The `charges` array no longer contains zeros for ghost atoms (manual inspection). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1977
https://github.com/psi4/psi4/pull/1977:30,Integrability,interface,interface,30,"## Description; The PCMsolver interface takes as input nuclear charges (`mol.Z(i)`) to identify the elements, but did not account for ghost atoms.; Change asks now for the atomic number and thus also avoids`mol.fZ(i)=0`. **This forms the cavity also around the ghost atoms**, which I think is the expected behaviour. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1656 . ## Checklist; - [x ] `ctest -R pcm` passes; - [x] The `charges` array no longer contains zeros for ghost atoms (manual inspection). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1977
https://github.com/psi4/psi4/pull/1977:200,Safety,avoid,avoids,200,"## Description; The PCMsolver interface takes as input nuclear charges (`mol.Z(i)`) to identify the elements, but did not account for ghost atoms.; Change asks now for the atomic number and thus also avoids`mol.fZ(i)=0`. **This forms the cavity also around the ghost atoms**, which I think is the expected behaviour. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1656 . ## Checklist; - [x ] `ctest -R pcm` passes; - [x] The `charges` array no longer contains zeros for ghost atoms (manual inspection). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1977
https://github.com/psi4/psi4/issues/1978:284,Availability,Error,Error,284,"Running e.g. `pcmsolver` calculations with symmetry will lead to a crash:; ```; File ""/Users/kruse/qc/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 300, in scf_iterate; upcm, Vpcm = self.get_PCM().compute_PCM_terms(Dt, calc_type). RuntimeError:; Fatal Error: Matrix::gemm error: Number of irreps do not equal.; Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1349; The most recent 3 function calls were:; ```. The PCM message suggests c1 symmetry is enforced:; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1520-L1522; but the `use_c1` option is for making post-SCF c1 wavefunction and not for the SCF itself.; Similar issue with the `cppe` addon for polarizable embedding. Either a graceful exist or actually making a c1 wfn object is desirable.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1978
https://github.com/psi4/psi4/issues/1978:304,Availability,error,error,304,"Running e.g. `pcmsolver` calculations with symmetry will lead to a crash:; ```; File ""/Users/kruse/qc/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 300, in scf_iterate; upcm, Vpcm = self.get_PCM().compute_PCM_terms(Dt, calc_type). RuntimeError:; Fatal Error: Matrix::gemm error: Number of irreps do not equal.; Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1349; The most recent 3 function calls were:; ```. The PCM message suggests c1 symmetry is enforced:; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1520-L1522; but the `use_c1` option is for making post-SCF c1 wavefunction and not for the SCF itself.; Similar issue with the `cppe` addon for polarizable embedding. Either a graceful exist or actually making a c1 wfn object is desirable.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1978
https://github.com/psi4/psi4/issues/1978:343,Availability,Error,Error,343,"Running e.g. `pcmsolver` calculations with symmetry will lead to a crash:; ```; File ""/Users/kruse/qc/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 300, in scf_iterate; upcm, Vpcm = self.get_PCM().compute_PCM_terms(Dt, calc_type). RuntimeError:; Fatal Error: Matrix::gemm error: Number of irreps do not equal.; Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1349; The most recent 3 function calls were:; ```. The PCM message suggests c1 symmetry is enforced:; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1520-L1522; but the `use_c1` option is for making post-SCF c1 wavefunction and not for the SCF itself.; Similar issue with the `cppe` addon for polarizable embedding. Either a graceful exist or actually making a c1 wfn object is desirable.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1978
https://github.com/psi4/psi4/issues/1978:489,Integrability,message,message,489,"Running e.g. `pcmsolver` calculations with symmetry will lead to a crash:; ```; File ""/Users/kruse/qc/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 300, in scf_iterate; upcm, Vpcm = self.get_PCM().compute_PCM_terms(Dt, calc_type). RuntimeError:; Fatal Error: Matrix::gemm error: Number of irreps do not equal.; Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1349; The most recent 3 function calls were:; ```. The PCM message suggests c1 symmetry is enforced:; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1520-L1522; but the `use_c1` option is for making post-SCF c1 wavefunction and not for the SCF itself.; Similar issue with the `cppe` addon for polarizable embedding. Either a graceful exist or actually making a c1 wfn object is desirable.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1978
https://github.com/psi4/psi4/issues/1979:87,Availability,error,error,87,"I attempted to install Psi4 using Conda that used python3.8 and received the following error:. ```; UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']. Your python: python=3.8; ```. Install command: `conda install -c psi4 psi4`; Conda version: `4.8.3`; Python version: `3.8.3`; Linux: `Debian Buster`. Is there anything holding back psi4 from being used with python3.8? Does there even need to be an upper limit on the python version one can use?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979
https://github.com/psi4/psi4/issues/1979:15,Deployability,install,install,15,"I attempted to install Psi4 using Conda that used python3.8 and received the following error:. ```; UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']. Your python: python=3.8; ```. Install command: `conda install -c psi4 psi4`; Conda version: `4.8.3`; Python version: `3.8.3`; Linux: `Debian Buster`. Is there anything holding back psi4 from being used with python3.8? Does there even need to be an upper limit on the python version one can use?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979
https://github.com/psi4/psi4/issues/1979:205,Deployability,install,installation,205,"I attempted to install Psi4 using Conda that used python3.8 and received the following error:. ```; UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']. Your python: python=3.8; ```. Install command: `conda install -c psi4 psi4`; Conda version: `4.8.3`; Python version: `3.8.3`; Linux: `Debian Buster`. Is there anything holding back psi4 from being used with python3.8? Does there even need to be an upper limit on the python version one can use?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979
https://github.com/psi4/psi4/issues/1979:394,Deployability,Install,Install,394,"I attempted to install Psi4 using Conda that used python3.8 and received the following error:. ```; UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']. Your python: python=3.8; ```. Install command: `conda install -c psi4 psi4`; Conda version: `4.8.3`; Python version: `3.8.3`; Linux: `Debian Buster`. Is there anything holding back psi4 from being used with python3.8? Does there even need to be an upper limit on the python version one can use?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979
https://github.com/psi4/psi4/issues/1979:418,Deployability,install,install,418,"I attempted to install Psi4 using Conda that used python3.8 and received the following error:. ```; UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']. Your python: python=3.8; ```. Install command: `conda install -c psi4 psi4`; Conda version: `4.8.3`; Python version: `3.8.3`; Linux: `Debian Buster`. Is there anything holding back psi4 from being used with python3.8? Does there even need to be an upper limit on the python version one can use?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1979
https://github.com/psi4/psi4/pull/1980:786,Availability,ping,ping,786,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:1299,Deployability,release,release,1299,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:587,Energy Efficiency,energy,energy,587,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:622,Energy Efficiency,energy,energy,622,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:660,Energy Efficiency,reduce,reduced,660,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:672,Energy Efficiency,energy,energy,672,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:836,Energy Efficiency,energy,energy,836,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:874,Energy Efficiency,energy,energy,874,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:129,Performance,optimiz,optimized,129,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:501,Testability,test,test,501,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:652,Testability,test,test,652,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:679,Testability,test,test,679,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:1379,Testability,Test,Tests,1379,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:1453,Testability,test,tests,1453,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/pull/1980:1544,Testability,test,tests,1544,"## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] conventional only (not orbital optimized) MP2.5 and MP3 are now density-fit by default, fixes #1801 ; - [x] note that this bifurcates the role of `mp_type`, with the above cases imposed in proc.py, leaving the keyword unchanged for others -- omp2.5, omp3, mp4, adc2; - [x] in occ, LCCD and OLCCD energies were often failing (to match to 1.e-6) with default convcrit. though there's a `abs(DE) < e_conv` test for iterations, the actual progressing of DE through the iterations has a lot of energy increases, so often a small energy increase satisfies the test. I reduced the energy test by an order of magnitude to allow a little more settling of iterations. obligatory @JonathonMisiewicz ping, who may be rightly appalled. it does fix up energy and 5-point findif gradient by energy convergence across the std suite.; - [x] in dfocc, most DF analytic gradients from MP2 to CCSD were failing with default convcrit w/o tightening pcg_convergence by an order of magnitude. so, I tied pcg_convergence to e_convergence if not specified. again, Jonathon's input welcome.; - [x] I maybe should write a warning to output if these methods run w/o mp_type specified so the change isn't wholly unmarked (besides release notes and docs); - [x] bump qcel and qcng to v0.16. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1980
https://github.com/psi4/psi4/issues/1981:224,Availability,fault,fault,224,"The input; ```; molecule {; 0 5; Ar; }. set basis sto-3g; set reference rohf; energy('scf'); ```; gives a segfault in both Psi4 1.3.2 as well as the current master.; ```; Program terminated with signal SIGSEGV, Segmentation fault.; #0 0x00007fce90309923 in psi::scf::HF::find_occupation (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:463; 463	 for (int i = 0; i < nalpha_; ++i) nalphapi_[pairs_a[i].second]++;; (gdb) bt; #0 0x00007fce90309923 in psi::scf::HF::find_occupation (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:463; #1 0x00007fce903340b2 in psi::scf::ROHF::form_initial_C (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/rohf.cc:465; #2 0x00007fce9031193d in psi::scf::HF::guess (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:1157; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1981
https://github.com/psi4/psi4/issues/1981:78,Energy Efficiency,energy,energy,78,"The input; ```; molecule {; 0 5; Ar; }. set basis sto-3g; set reference rohf; energy('scf'); ```; gives a segfault in both Psi4 1.3.2 as well as the current master.; ```; Program terminated with signal SIGSEGV, Segmentation fault.; #0 0x00007fce90309923 in psi::scf::HF::find_occupation (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:463; 463	 for (int i = 0; i < nalpha_; ++i) nalphapi_[pairs_a[i].second]++;; (gdb) bt; #0 0x00007fce90309923 in psi::scf::HF::find_occupation (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:463; #1 0x00007fce903340b2 in psi::scf::ROHF::form_initial_C (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/rohf.cc:465; #2 0x00007fce9031193d in psi::scf::HF::guess (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:1157; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1981
https://github.com/psi4/psi4/issues/1983:111,Integrability,message,messages,111,"When I run psi4 on a remote computer with `psi4 & disown` and exit before the job is complete, it crashes with messages like the following. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1360, in optimize print('Optimizer: Optimization complete!'); ```. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1727, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1466, in hessian; return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver_cbs.py"", line 1955, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs)File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; _process_displacement(; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 167, in _process_displacement; sys.stdout.flush(); ```. It seems to work if I add a redirect of the output to /dev/null, `psi4 > /dev/null & disown`, but I was wondering if there would be a way to fix this inside of psi4 (might require the removal of all print statements). It took me way too long to figure out this problem, so if nothing else, I hope that posting this issue will help others with this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1983
https://github.com/psi4/psi4/issues/1983:400,Performance,optimiz,optimize,400,"When I run psi4 on a remote computer with `psi4 & disown` and exit before the job is complete, it crashes with messages like the following. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1360, in optimize print('Optimizer: Optimization complete!'); ```. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1727, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1466, in hessian; return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver_cbs.py"", line 1955, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs)File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; _process_displacement(; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 167, in _process_displacement; sys.stdout.flush(); ```. It seems to work if I add a redirect of the output to /dev/null, `psi4 > /dev/null & disown`, but I was wondering if there would be a way to fix this inside of psi4 (might require the removal of all print statements). It took me way too long to figure out this problem, so if nothing else, I hope that posting this issue will help others with this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1983
https://github.com/psi4/psi4/issues/1983:416,Performance,Optimiz,Optimizer,416,"When I run psi4 on a remote computer with `psi4 & disown` and exit before the job is complete, it crashes with messages like the following. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1360, in optimize print('Optimizer: Optimization complete!'); ```. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1727, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1466, in hessian; return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver_cbs.py"", line 1955, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs)File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; _process_displacement(; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 167, in _process_displacement; sys.stdout.flush(); ```. It seems to work if I add a redirect of the output to /dev/null, `psi4 > /dev/null & disown`, but I was wondering if there would be a way to fix this inside of psi4 (might require the removal of all print statements). It took me way too long to figure out this problem, so if nothing else, I hope that posting this issue will help others with this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1983
https://github.com/psi4/psi4/issues/1983:427,Performance,Optimiz,Optimization,427,"When I run psi4 on a remote computer with `psi4 & disown` and exit before the job is complete, it crashes with messages like the following. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1360, in optimize print('Optimizer: Optimization complete!'); ```. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1727, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1466, in hessian; return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver_cbs.py"", line 1955, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs)File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; _process_displacement(; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 167, in _process_displacement; sys.stdout.flush(); ```. It seems to work if I add a redirect of the output to /dev/null, `psi4 > /dev/null & disown`, but I was wondering if there would be a way to fix this inside of psi4 (might require the removal of all print statements). It took me way too long to figure out this problem, so if nothing else, I hope that posting this issue will help others with this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1983
https://github.com/psi4/psi4/issues/1984:412,Availability,fault,fault,412,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1984
https://github.com/psi4/psi4/issues/1984:1040,Availability,Error,Error,1040,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1984
https://github.com/psi4/psi4/issues/1984:1149,Availability,Error,Error,1149,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1984
https://github.com/psi4/psi4/issues/1984:1377,Availability,fault,fault,1377,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1984
https://github.com/psi4/psi4/issues/1984:53,Deployability,install,installed,53,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1984
https://github.com/psi4/psi4/issues/1984:88,Deployability,install,install,88,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1984
https://github.com/psi4/psi4/issues/1984:1747,Deployability,update,update,1747,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1984
https://github.com/psi4/psi4/issues/1984:367,Energy Efficiency,energy,energy,367,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1984
https://github.com/psi4/psi4/issues/1984:158,Testability,test,test,158,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1984
https://github.com/psi4/psi4/issues/1984:471,Testability,test,test,471,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1984
https://github.com/psi4/psi4/issues/1984:479,Testability,test,test,479,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1984
https://github.com/psi4/psi4/issues/1985:621,Energy Efficiency,schedul,scheduler,621,"I see memory usage significantly above `psi4.set_memory()` limit. I do see the note in the documentation that memory usage might be _slightly_ higher, but if I even request within 20% of a node's total memory (requesting 300 out of ~376 GB), I risk crashing the entire node. Even now, running with `psi4.set_memory(""200 GB"")`, I see persistent VIRT usage of 259 GB and RES 256 GB. I know that determining the _actual_ amount of [memory consumed by a process is tricky](https://stackoverflow.com/questions/131303/how-to-measure-actual-memory-usage-of-an-application-or-process), but this is important to me to prevent the scheduler from killing my jobs. After some troubleshooting, I am requesting 300 GB from the scheduler, but 200 GB from psi4, and end up with ~260 GB used. Is this expected? . Relatedly, but separate, is there a way to estimate what the scratch file size may be? I was planning to use node-local storage until I found out my scratch files are 1.5+ TB. Any rule of thumb way of estimating this ahead of time (number of atoms × level of theory × some magic thing?)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1985
https://github.com/psi4/psi4/issues/1985:713,Energy Efficiency,schedul,scheduler,713,"I see memory usage significantly above `psi4.set_memory()` limit. I do see the note in the documentation that memory usage might be _slightly_ higher, but if I even request within 20% of a node's total memory (requesting 300 out of ~376 GB), I risk crashing the entire node. Even now, running with `psi4.set_memory(""200 GB"")`, I see persistent VIRT usage of 259 GB and RES 256 GB. I know that determining the _actual_ amount of [memory consumed by a process is tricky](https://stackoverflow.com/questions/131303/how-to-measure-actual-memory-usage-of-an-application-or-process), but this is important to me to prevent the scheduler from killing my jobs. After some troubleshooting, I am requesting 300 GB from the scheduler, but 200 GB from psi4, and end up with ~260 GB used. Is this expected? . Relatedly, but separate, is there a way to estimate what the scratch file size may be? I was planning to use node-local storage until I found out my scratch files are 1.5+ TB. Any rule of thumb way of estimating this ahead of time (number of atoms × level of theory × some magic thing?)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1985
https://github.com/psi4/psi4/issues/1985:244,Safety,risk,risk,244,"I see memory usage significantly above `psi4.set_memory()` limit. I do see the note in the documentation that memory usage might be _slightly_ higher, but if I even request within 20% of a node's total memory (requesting 300 out of ~376 GB), I risk crashing the entire node. Even now, running with `psi4.set_memory(""200 GB"")`, I see persistent VIRT usage of 259 GB and RES 256 GB. I know that determining the _actual_ amount of [memory consumed by a process is tricky](https://stackoverflow.com/questions/131303/how-to-measure-actual-memory-usage-of-an-application-or-process), but this is important to me to prevent the scheduler from killing my jobs. After some troubleshooting, I am requesting 300 GB from the scheduler, but 200 GB from psi4, and end up with ~260 GB used. Is this expected? . Relatedly, but separate, is there a way to estimate what the scratch file size may be? I was planning to use node-local storage until I found out my scratch files are 1.5+ TB. Any rule of thumb way of estimating this ahead of time (number of atoms × level of theory × some magic thing?)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1985
https://github.com/psi4/psi4/issues/1986:133,Availability,error,error,133,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1986
https://github.com/psi4/psi4/issues/1986:286,Energy Efficiency,energy,energy,286,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1986
https://github.com/psi4/psi4/issues/1986:69,Integrability,interface,interface,69,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1986
https://github.com/psi4/psi4/issues/1986:345,Integrability,protocol,protocols,345,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1986
https://github.com/psi4/psi4/issues/1986:744,Modifiability,Extend,Extending,744,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1986
https://github.com/psi4/psi4/issues/1986:257,Security,hash,hash,257,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1986
https://github.com/psi4/psi4/issues/1987:173,Availability,error,error,173,"When requesting the wavefunction as part of the result via the protocol in QCEngine only the `orbitals_and_eigenvalues` option works successfully. I think this is due to an error in the returned dictionary here https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/schema_wrapper.py#L324.I think this line should say `""density_a"": ""scf_density_a"",`. QCEngine error:; ```; QCEngine Unknown Error: Traceback (most recent call last):; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib//python3.7/site-packages/psi4/driver/schema_wrapper.py"", line 400, in run_qcschema; ret = qcel.models.Result(**ret_data, stdout=_read_output(outfile)); File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 520, in __init__; super().__init__(*args, **kwargs); File ""pydantic/main.py"", line 344, in pydantic.main.BaseModel.__init__; File ""pydantic/main.py"", line 900, in pydantic.main.validate_model; File ""pydantic/fields.py"", line 556, in pydantic.fields.ModelField.validate; File ""pydantic/fields.py"", line 732, in pydantic.fields.ModelField._apply_validators; File ""pydantic/class_validators.py"", line 280, in pydantic.class_validators._generic_validator_cls.lambda4; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 463, in _wavefunction_protocol; ret_wfn[key] = wfn[key]; KeyError: 'scf_density_ba'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1987
https://github.com/psi4/psi4/issues/1987:392,Availability,error,error,392,"When requesting the wavefunction as part of the result via the protocol in QCEngine only the `orbitals_and_eigenvalues` option works successfully. I think this is due to an error in the returned dictionary here https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/schema_wrapper.py#L324.I think this line should say `""density_a"": ""scf_density_a"",`. QCEngine error:; ```; QCEngine Unknown Error: Traceback (most recent call last):; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib//python3.7/site-packages/psi4/driver/schema_wrapper.py"", line 400, in run_qcschema; ret = qcel.models.Result(**ret_data, stdout=_read_output(outfile)); File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 520, in __init__; super().__init__(*args, **kwargs); File ""pydantic/main.py"", line 344, in pydantic.main.BaseModel.__init__; File ""pydantic/main.py"", line 900, in pydantic.main.validate_model; File ""pydantic/fields.py"", line 556, in pydantic.fields.ModelField.validate; File ""pydantic/fields.py"", line 732, in pydantic.fields.ModelField._apply_validators; File ""pydantic/class_validators.py"", line 280, in pydantic.class_validators._generic_validator_cls.lambda4; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 463, in _wavefunction_protocol; ret_wfn[key] = wfn[key]; KeyError: 'scf_density_ba'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1987
https://github.com/psi4/psi4/issues/1987:422,Availability,Error,Error,422,"When requesting the wavefunction as part of the result via the protocol in QCEngine only the `orbitals_and_eigenvalues` option works successfully. I think this is due to an error in the returned dictionary here https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/schema_wrapper.py#L324.I think this line should say `""density_a"": ""scf_density_a"",`. QCEngine error:; ```; QCEngine Unknown Error: Traceback (most recent call last):; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib//python3.7/site-packages/psi4/driver/schema_wrapper.py"", line 400, in run_qcschema; ret = qcel.models.Result(**ret_data, stdout=_read_output(outfile)); File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 520, in __init__; super().__init__(*args, **kwargs); File ""pydantic/main.py"", line 344, in pydantic.main.BaseModel.__init__; File ""pydantic/main.py"", line 900, in pydantic.main.validate_model; File ""pydantic/fields.py"", line 556, in pydantic.fields.ModelField.validate; File ""pydantic/fields.py"", line 732, in pydantic.fields.ModelField._apply_validators; File ""pydantic/class_validators.py"", line 280, in pydantic.class_validators._generic_validator_cls.lambda4; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 463, in _wavefunction_protocol; ret_wfn[key] = wfn[key]; KeyError: 'scf_density_ba'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1987
https://github.com/psi4/psi4/issues/1987:63,Integrability,protocol,protocol,63,"When requesting the wavefunction as part of the result via the protocol in QCEngine only the `orbitals_and_eigenvalues` option works successfully. I think this is due to an error in the returned dictionary here https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/schema_wrapper.py#L324.I think this line should say `""density_a"": ""scf_density_a"",`. QCEngine error:; ```; QCEngine Unknown Error: Traceback (most recent call last):; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib//python3.7/site-packages/psi4/driver/schema_wrapper.py"", line 400, in run_qcschema; ret = qcel.models.Result(**ret_data, stdout=_read_output(outfile)); File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 520, in __init__; super().__init__(*args, **kwargs); File ""pydantic/main.py"", line 344, in pydantic.main.BaseModel.__init__; File ""pydantic/main.py"", line 900, in pydantic.main.validate_model; File ""pydantic/fields.py"", line 556, in pydantic.fields.ModelField.validate; File ""pydantic/fields.py"", line 732, in pydantic.fields.ModelField._apply_validators; File ""pydantic/class_validators.py"", line 280, in pydantic.class_validators._generic_validator_cls.lambda4; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 463, in _wavefunction_protocol; ret_wfn[key] = wfn[key]; KeyError: 'scf_density_ba'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1987
https://github.com/psi4/psi4/issues/1987:1050,Security,validat,validate,1050,"When requesting the wavefunction as part of the result via the protocol in QCEngine only the `orbitals_and_eigenvalues` option works successfully. I think this is due to an error in the returned dictionary here https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/schema_wrapper.py#L324.I think this line should say `""density_a"": ""scf_density_a"",`. QCEngine error:; ```; QCEngine Unknown Error: Traceback (most recent call last):; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib//python3.7/site-packages/psi4/driver/schema_wrapper.py"", line 400, in run_qcschema; ret = qcel.models.Result(**ret_data, stdout=_read_output(outfile)); File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 520, in __init__; super().__init__(*args, **kwargs); File ""pydantic/main.py"", line 344, in pydantic.main.BaseModel.__init__; File ""pydantic/main.py"", line 900, in pydantic.main.validate_model; File ""pydantic/fields.py"", line 556, in pydantic.fields.ModelField.validate; File ""pydantic/fields.py"", line 732, in pydantic.fields.ModelField._apply_validators; File ""pydantic/class_validators.py"", line 280, in pydantic.class_validators._generic_validator_cls.lambda4; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 463, in _wavefunction_protocol; ret_wfn[key] = wfn[key]; KeyError: 'scf_density_ba'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1987
https://github.com/psi4/psi4/pull/1988:750,Availability,ping,ping,750,"## Description; The most important part of this PR is the changes to `occ/mograd.cc`. The previous formula for the RMS MO gradient was incorrect, causing it to be too large by a factor of `sqrt(occ*vir)`. Even for systems in the test suite, this can be as large as a factor of 10. **As a result, under this PR, orbital-optimized `occ` computations will take more iterations; it was not actually achieving the accuracy it claimed previously.** We may loosen the default convergence criteria as a result of this, but exploring that is deferred to the standard suite pass in #1980. Also included in this PR is commenting and removing some unused (not even compiled!) `dfocc` code found while investigating issues tangential to #1980. Obligatory @loriab ping for #1980. Obligatory @ssh2 ping for OMP convergence changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the RMS orbital residual calculation in `occ`; - [x] Remove 1100+ lines of dead code from `dfocc`. ## Checklist; - [x] `ctest -R ""^omp|^olccd""` and `pytest -k test_olccd` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1988
https://github.com/psi4/psi4/pull/1988:783,Availability,ping,ping,783,"## Description; The most important part of this PR is the changes to `occ/mograd.cc`. The previous formula for the RMS MO gradient was incorrect, causing it to be too large by a factor of `sqrt(occ*vir)`. Even for systems in the test suite, this can be as large as a factor of 10. **As a result, under this PR, orbital-optimized `occ` computations will take more iterations; it was not actually achieving the accuracy it claimed previously.** We may loosen the default convergence criteria as a result of this, but exploring that is deferred to the standard suite pass in #1980. Also included in this PR is commenting and removing some unused (not even compiled!) `dfocc` code found while investigating issues tangential to #1980. Obligatory @loriab ping for #1980. Obligatory @ssh2 ping for OMP convergence changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the RMS orbital residual calculation in `occ`; - [x] Remove 1100+ lines of dead code from `dfocc`. ## Checklist; - [x] `ctest -R ""^omp|^olccd""` and `pytest -k test_olccd` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1988
https://github.com/psi4/psi4/pull/1988:319,Performance,optimiz,optimized,319,"## Description; The most important part of this PR is the changes to `occ/mograd.cc`. The previous formula for the RMS MO gradient was incorrect, causing it to be too large by a factor of `sqrt(occ*vir)`. Even for systems in the test suite, this can be as large as a factor of 10. **As a result, under this PR, orbital-optimized `occ` computations will take more iterations; it was not actually achieving the accuracy it claimed previously.** We may loosen the default convergence criteria as a result of this, but exploring that is deferred to the standard suite pass in #1980. Also included in this PR is commenting and removing some unused (not even compiled!) `dfocc` code found while investigating issues tangential to #1980. Obligatory @loriab ping for #1980. Obligatory @ssh2 ping for OMP convergence changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the RMS orbital residual calculation in `occ`; - [x] Remove 1100+ lines of dead code from `dfocc`. ## Checklist; - [x] `ctest -R ""^omp|^olccd""` and `pytest -k test_olccd` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1988
https://github.com/psi4/psi4/pull/1988:229,Testability,test,test,229,"## Description; The most important part of this PR is the changes to `occ/mograd.cc`. The previous formula for the RMS MO gradient was incorrect, causing it to be too large by a factor of `sqrt(occ*vir)`. Even for systems in the test suite, this can be as large as a factor of 10. **As a result, under this PR, orbital-optimized `occ` computations will take more iterations; it was not actually achieving the accuracy it claimed previously.** We may loosen the default convergence criteria as a result of this, but exploring that is deferred to the standard suite pass in #1980. Also included in this PR is commenting and removing some unused (not even compiled!) `dfocc` code found while investigating issues tangential to #1980. Obligatory @loriab ping for #1980. Obligatory @ssh2 ping for OMP convergence changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the RMS orbital residual calculation in `occ`; - [x] Remove 1100+ lines of dead code from `dfocc`. ## Checklist; - [x] `ctest -R ""^omp|^olccd""` and `pytest -k test_olccd` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1988
https://github.com/psi4/psi4/issues/1989:78,Energy Efficiency,energy,energy,78,"Run:; ```; molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. wfn = energy('scf/cc-pvdz', return_wfn=True)[1]; print(wfn.Fa_subset(""MO"").nph); ```. The result MO basis Fock matrix is not diagonal, as expected. The correct way to transform the SO basis Fock matrix into the MO basis matrix is contraction against the C coefficient matrices. This is not what the `Fa_subset` function does. It instead goes through [a series of matrix mulitplications involving the overlap matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.cc#L1047-L1050). This is the correct transformation rule for the density matrix. Not-so-coincidentally, `Da_subset` goes through exactly the same function, where this behavior is correct. If you try to use the same logic for both helpers, you're going to get one of them wrong, guaranteed. While the mechanism of the bug is clear to me, I'm not sure what the best fix should be. Perhaps we should intercept ""MO"" as a special case in `Fa_subset` so it never sees the `matrix_subset_helper`? Under the hood, the code would return `Fa_->transform(Ca_)`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1989
https://github.com/psi4/psi4/issues/1989:302,Integrability,contract,contraction,302,"Run:; ```; molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. wfn = energy('scf/cc-pvdz', return_wfn=True)[1]; print(wfn.Fa_subset(""MO"").nph); ```. The result MO basis Fock matrix is not diagonal, as expected. The correct way to transform the SO basis Fock matrix into the MO basis matrix is contraction against the C coefficient matrices. This is not what the `Fa_subset` function does. It instead goes through [a series of matrix mulitplications involving the overlap matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.cc#L1047-L1050). This is the correct transformation rule for the density matrix. Not-so-coincidentally, `Da_subset` goes through exactly the same function, where this behavior is correct. If you try to use the same logic for both helpers, you're going to get one of them wrong, guaranteed. While the mechanism of the bug is clear to me, I'm not sure what the best fix should be. Perhaps we should intercept ""MO"" as a special case in `Fa_subset` so it never sees the `matrix_subset_helper`? Under the hood, the code would return `Fa_->transform(Ca_)`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1989
https://github.com/psi4/psi4/issues/1989:780,Testability,log,logic,780,"Run:; ```; molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. wfn = energy('scf/cc-pvdz', return_wfn=True)[1]; print(wfn.Fa_subset(""MO"").nph); ```. The result MO basis Fock matrix is not diagonal, as expected. The correct way to transform the SO basis Fock matrix into the MO basis matrix is contraction against the C coefficient matrices. This is not what the `Fa_subset` function does. It instead goes through [a series of matrix mulitplications involving the overlap matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.cc#L1047-L1050). This is the correct transformation rule for the density matrix. Not-so-coincidentally, `Da_subset` goes through exactly the same function, where this behavior is correct. If you try to use the same logic for both helpers, you're going to get one of them wrong, guaranteed. While the mechanism of the bug is clear to me, I'm not sure what the best fix should be. Perhaps we should intercept ""MO"" as a special case in `Fa_subset` so it never sees the `matrix_subset_helper`? Under the hood, the code would return `Fa_->transform(Ca_)`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1989
https://github.com/psi4/psi4/issues/1989:889,Usability,clear,clear,889,"Run:; ```; molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. wfn = energy('scf/cc-pvdz', return_wfn=True)[1]; print(wfn.Fa_subset(""MO"").nph); ```. The result MO basis Fock matrix is not diagonal, as expected. The correct way to transform the SO basis Fock matrix into the MO basis matrix is contraction against the C coefficient matrices. This is not what the `Fa_subset` function does. It instead goes through [a series of matrix mulitplications involving the overlap matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.cc#L1047-L1050). This is the correct transformation rule for the density matrix. Not-so-coincidentally, `Da_subset` goes through exactly the same function, where this behavior is correct. If you try to use the same logic for both helpers, you're going to get one of them wrong, guaranteed. While the mechanism of the bug is clear to me, I'm not sure what the best fix should be. Perhaps we should intercept ""MO"" as a special case in `Fa_subset` so it never sees the `matrix_subset_helper`? Under the hood, the code would return `Fa_->transform(Ca_)`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1989
https://github.com/psi4/psi4/pull/1990:354,Deployability,release,released,354,"## Description; The PK(reordered, disk) algorithm was using twice as much memory as it should.; This is due to not deleting integral and disk-space buffers correctly:; * During the pre-iterations the `batch size` buffer that prepares the disk space (""pre-striping"", within `zero_disk`) and used during the SCF for processing the integrals on disk is not released. ; * The `buffer size` buffer that is used to calculate the integrals is not released after the computation is done. Both buffers are actually the same size and effectively lead to a doubling of the memory demand. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] memory leaks in PK(reordered, disk) algorithm addressed; - [x] Likely solution to #1985 . ## Questions; - [ ] Is there a better solution to `AIO->synchronize()` in-between the `zero_disk` operations?; - [ ] Will there be an issue with: https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L886 now that `buffer()` returns a reference?. ## Checklist; - [x] ctest -L quick/dft pass; - [x] memory usage on `top` eyeballed like a hawk. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1990
https://github.com/psi4/psi4/pull/1990:440,Deployability,release,released,440,"## Description; The PK(reordered, disk) algorithm was using twice as much memory as it should.; This is due to not deleting integral and disk-space buffers correctly:; * During the pre-iterations the `batch size` buffer that prepares the disk space (""pre-striping"", within `zero_disk`) and used during the SCF for processing the integrals on disk is not released. ; * The `buffer size` buffer that is used to calculate the integrals is not released after the computation is done. Both buffers are actually the same size and effectively lead to a doubling of the memory demand. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] memory leaks in PK(reordered, disk) algorithm addressed; - [x] Likely solution to #1985 . ## Questions; - [ ] Is there a better solution to `AIO->synchronize()` in-between the `zero_disk` operations?; - [ ] Will there be an issue with: https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L886 now that `buffer()` returns a reference?. ## Checklist; - [x] ctest -L quick/dft pass; - [x] memory usage on `top` eyeballed like a hawk. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1990
https://github.com/psi4/psi4/pull/1990:821,Integrability,synchroniz,synchronize,821,"## Description; The PK(reordered, disk) algorithm was using twice as much memory as it should.; This is due to not deleting integral and disk-space buffers correctly:; * During the pre-iterations the `batch size` buffer that prepares the disk space (""pre-striping"", within `zero_disk`) and used during the SCF for processing the integrals on disk is not released. ; * The `buffer size` buffer that is used to calculate the integrals is not released after the computation is done. Both buffers are actually the same size and effectively lead to a doubling of the memory demand. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] memory leaks in PK(reordered, disk) algorithm addressed; - [x] Likely solution to #1985 . ## Questions; - [ ] Is there a better solution to `AIO->synchronize()` in-between the `zero_disk` operations?; - [ ] Will there be an issue with: https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L886 now that `buffer()` returns a reference?. ## Checklist; - [x] ctest -L quick/dft pass; - [x] memory usage on `top` eyeballed like a hawk. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1990
https://github.com/psi4/psi4/pull/1991:670,Testability,test,tests,670,## Description; This PR does some miscellaneous cleanup of the OEI part of `libtrans` and will probably lead to another series of smaller PRs involving `libtrans`. The focus of this PR is to take away from `libtrans` responsibility for creating unused or barely used one-electron objects. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove unused OEI functions from `libtrans`; - [x] Remove creation of Fock matrices from being the responsibility of `libtrans`; - [x] Add a readme file explaining why `libtrans` is bothering with a frozen core operator. ## Checklist; - [x] `pytest test_standard_suite.py` and all C-tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1991
https://github.com/psi4/psi4/pull/1993:65,Energy Efficiency,energy,energy,65,"## Description; Fixes calculation of nuclear-nuclear interaction energy if a QM/MM point charge and a Ghost atom are at the same position as in the example below. Since a Ghost atom has no nuclear charge, it should not contribute. At any other position apart from the nuclear centers, it would not contribute. But since at this position, the distance between the Ghost and the atom is zero such that the current code wrongly produces a NaN energy. Setups like this are relevant for [alchemical calculations](https://dx.doi.org/10.1103/PhysRevResearch.2.023220) where fractional nuclear charges are required. ```; molecule mol {; @N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; -7 1; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(7.05, 0., 0., 1.); psi4.set_global_option_python('EXTERN', Chrgfield.extern). set basis 6-31G; set reference rhf; e, wfn = energy('pbe', return_wfn=True); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run on local machine](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1993
https://github.com/psi4/psi4/pull/1993:89,Energy Efficiency,charge,charge,89,"## Description; Fixes calculation of nuclear-nuclear interaction energy if a QM/MM point charge and a Ghost atom are at the same position as in the example below. Since a Ghost atom has no nuclear charge, it should not contribute. At any other position apart from the nuclear centers, it would not contribute. But since at this position, the distance between the Ghost and the atom is zero such that the current code wrongly produces a NaN energy. Setups like this are relevant for [alchemical calculations](https://dx.doi.org/10.1103/PhysRevResearch.2.023220) where fractional nuclear charges are required. ```; molecule mol {; @N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; -7 1; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(7.05, 0., 0., 1.); psi4.set_global_option_python('EXTERN', Chrgfield.extern). set basis 6-31G; set reference rhf; e, wfn = energy('pbe', return_wfn=True); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run on local machine](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1993
https://github.com/psi4/psi4/pull/1993:197,Energy Efficiency,charge,charge,197,"## Description; Fixes calculation of nuclear-nuclear interaction energy if a QM/MM point charge and a Ghost atom are at the same position as in the example below. Since a Ghost atom has no nuclear charge, it should not contribute. At any other position apart from the nuclear centers, it would not contribute. But since at this position, the distance between the Ghost and the atom is zero such that the current code wrongly produces a NaN energy. Setups like this are relevant for [alchemical calculations](https://dx.doi.org/10.1103/PhysRevResearch.2.023220) where fractional nuclear charges are required. ```; molecule mol {; @N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; -7 1; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(7.05, 0., 0., 1.); psi4.set_global_option_python('EXTERN', Chrgfield.extern). set basis 6-31G; set reference rhf; e, wfn = energy('pbe', return_wfn=True); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run on local machine](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1993
https://github.com/psi4/psi4/pull/1993:440,Energy Efficiency,energy,energy,440,"## Description; Fixes calculation of nuclear-nuclear interaction energy if a QM/MM point charge and a Ghost atom are at the same position as in the example below. Since a Ghost atom has no nuclear charge, it should not contribute. At any other position apart from the nuclear centers, it would not contribute. But since at this position, the distance between the Ghost and the atom is zero such that the current code wrongly produces a NaN energy. Setups like this are relevant for [alchemical calculations](https://dx.doi.org/10.1103/PhysRevResearch.2.023220) where fractional nuclear charges are required. ```; molecule mol {; @N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; -7 1; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(7.05, 0., 0., 1.); psi4.set_global_option_python('EXTERN', Chrgfield.extern). set basis 6-31G; set reference rhf; e, wfn = energy('pbe', return_wfn=True); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run on local machine](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1993
https://github.com/psi4/psi4/pull/1993:586,Energy Efficiency,charge,charges,586,"## Description; Fixes calculation of nuclear-nuclear interaction energy if a QM/MM point charge and a Ghost atom are at the same position as in the example below. Since a Ghost atom has no nuclear charge, it should not contribute. At any other position apart from the nuclear centers, it would not contribute. But since at this position, the distance between the Ghost and the atom is zero such that the current code wrongly produces a NaN energy. Setups like this are relevant for [alchemical calculations](https://dx.doi.org/10.1103/PhysRevResearch.2.023220) where fractional nuclear charges are required. ```; molecule mol {; @N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; -7 1; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(7.05, 0., 0., 1.); psi4.set_global_option_python('EXTERN', Chrgfield.extern). set basis 6-31G; set reference rhf; e, wfn = energy('pbe', return_wfn=True); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run on local machine](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1993
https://github.com/psi4/psi4/pull/1993:867,Energy Efficiency,energy,energy,867,"## Description; Fixes calculation of nuclear-nuclear interaction energy if a QM/MM point charge and a Ghost atom are at the same position as in the example below. Since a Ghost atom has no nuclear charge, it should not contribute. At any other position apart from the nuclear centers, it would not contribute. But since at this position, the distance between the Ghost and the atom is zero such that the current code wrongly produces a NaN energy. Setups like this are relevant for [alchemical calculations](https://dx.doi.org/10.1103/PhysRevResearch.2.023220) where fractional nuclear charges are required. ```; molecule mol {; @N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; -7 1; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(7.05, 0., 0., 1.); psi4.set_global_option_python('EXTERN', Chrgfield.extern). set basis 6-31G; set reference rhf; e, wfn = energy('pbe', return_wfn=True); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run on local machine](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1993
https://github.com/psi4/psi4/pull/1993:1063,Testability,test,tests,1063,"## Description; Fixes calculation of nuclear-nuclear interaction energy if a QM/MM point charge and a Ghost atom are at the same position as in the example below. Since a Ghost atom has no nuclear charge, it should not contribute. At any other position apart from the nuclear centers, it would not contribute. But since at this position, the distance between the Ghost and the atom is zero such that the current code wrongly produces a NaN energy. Setups like this are relevant for [alchemical calculations](https://dx.doi.org/10.1103/PhysRevResearch.2.023220) where fractional nuclear charges are required. ```; molecule mol {; @N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; -7 1; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(7.05, 0., 0., 1.); psi4.set_global_option_python('EXTERN', Chrgfield.extern). set basis 6-31G; set reference rhf; e, wfn = energy('pbe', return_wfn=True); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run on local machine](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1993
https://github.com/psi4/psi4/pull/1993:1171,Testability,test,tests,1171,"## Description; Fixes calculation of nuclear-nuclear interaction energy if a QM/MM point charge and a Ghost atom are at the same position as in the example below. Since a Ghost atom has no nuclear charge, it should not contribute. At any other position apart from the nuclear centers, it would not contribute. But since at this position, the distance between the Ghost and the atom is zero such that the current code wrongly produces a NaN energy. Setups like this are relevant for [alchemical calculations](https://dx.doi.org/10.1103/PhysRevResearch.2.023220) where fractional nuclear charges are required. ```; molecule mol {; @N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; -7 1; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(7.05, 0., 0., 1.); psi4.set_global_option_python('EXTERN', Chrgfield.extern). set basis 6-31G; set reference rhf; e, wfn = energy('pbe', return_wfn=True); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run on local machine](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1993
https://github.com/psi4/psi4/pull/1994:165,Safety,sanity check,sanity checks,165,"## Description; Improvements to basis set handling, including; - elimination of duplicate code and introducing array size checks via use of std::string in gshell; - sanity checks for angular momentum parsing, eliminating segfaults; - support for explicit definition of angular momentum in the basis set input (fixes #628). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated duplicate code and introduced array size checks via std::string in gshell.; - [x] Introduced angular momentum checks in the basis set parser.; - [x] Added support for L=n format into the basis set parser. ## Questions; - [x] The basis set parser is doing regexp validation for the shell entry. Thanks to @PhillCli for supplying a working regexp. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1994
https://github.com/psi4/psi4/pull/1994:694,Security,validat,validation,694,"## Description; Improvements to basis set handling, including; - elimination of duplicate code and introducing array size checks via use of std::string in gshell; - sanity checks for angular momentum parsing, eliminating segfaults; - support for explicit definition of angular momentum in the basis set input (fixes #628). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated duplicate code and introduced array size checks via std::string in gshell.; - [x] Introduced angular momentum checks in the basis set parser.; - [x] Added support for L=n format into the basis set parser. ## Questions; - [x] The basis set parser is doing regexp validation for the shell entry. Thanks to @PhillCli for supplying a working regexp. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1994
https://github.com/psi4/psi4/pull/1994:798,Testability,Test,Tests,798,"## Description; Improvements to basis set handling, including; - elimination of duplicate code and introducing array size checks via use of std::string in gshell; - sanity checks for angular momentum parsing, eliminating segfaults; - support for explicit definition of angular momentum in the basis set input (fixes #628). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated duplicate code and introduced array size checks via std::string in gshell.; - [x] Introduced angular momentum checks in the basis set parser.; - [x] Added support for L=n format into the basis set parser. ## Questions; - [x] The basis set parser is doing regexp validation for the shell entry. Thanks to @PhillCli for supplying a working regexp. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1994
https://github.com/psi4/psi4/pull/1994:872,Testability,test,tests,872,"## Description; Improvements to basis set handling, including; - elimination of duplicate code and introducing array size checks via use of std::string in gshell; - sanity checks for angular momentum parsing, eliminating segfaults; - support for explicit definition of angular momentum in the basis set input (fixes #628). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated duplicate code and introduced array size checks via std::string in gshell.; - [x] Introduced angular momentum checks in the basis set parser.; - [x] Added support for L=n format into the basis set parser. ## Questions; - [x] The basis set parser is doing regexp validation for the shell entry. Thanks to @PhillCli for supplying a working regexp. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1994
https://github.com/psi4/psi4/pull/1994:963,Testability,test,tests,963,"## Description; Improvements to basis set handling, including; - elimination of duplicate code and introducing array size checks via use of std::string in gshell; - sanity checks for angular momentum parsing, eliminating segfaults; - support for explicit definition of angular momentum in the basis set input (fixes #628). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated duplicate code and introduced array size checks via std::string in gshell.; - [x] Introduced angular momentum checks in the basis set parser.; - [x] Added support for L=n format into the basis set parser. ## Questions; - [x] The basis set parser is doing regexp validation for the shell entry. Thanks to @PhillCli for supplying a working regexp. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1994
https://github.com/psi4/psi4/issues/1995:629,Availability,error,error,629,"Hi,. I've been trying to calculate the energies of monoatomic compounds. All of the atoms ran successfully, except for hydrogen with multiplicity 2. My in-file:; ```; molecule mol_atomic_hydrogen_doublet {; 0 2; H 0.000000000 0.000000000 0.000000000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVQZ; dft_spherical_points 434; dft_radial_points 85; reference uhf; }. set_memory(100000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); ```. The error I got (including previous lines):; ```; *** tstart() called on host; *** at Fri Aug 21 16:21:36 2020. => Loading Basis Set <=. Name: (AUG-CC-PVQZ AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; UMP2 Wavefunction, 28 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 80; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 0 1 1 45 45 0; BETA 0 0 0 46 46 0; --------------------------------------------------------. Traceback (most recent call last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/dri",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1995
https://github.com/psi4/psi4/issues/1995:2483,Availability,Error,Error,2483," last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); core.set_global_option(""DFT_RADIAL_POINTS"", 85); core.set_global_option(""REFERENCE"", ""uhf""); set_memory(100000000000); try:; --> optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); core.set_global_option(""GUESS"", ""read""); optimize('pwpb95-d3bj'). Psi4 stopped on: Friday, 21 August 2020 04:21PM; Psi4 wall time for execution: 0:00:04.47. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. As I am fairly new to quantum chemistry, I do not really know how to interpret this err",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1995
https://github.com/psi4/psi4/issues/1995:2538,Availability,Error,Error,2538,"conda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); core.set_global_option(""DFT_RADIAL_POINTS"", 85); core.set_global_option(""REFERENCE"", ""uhf""); set_memory(100000000000); try:; --> optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); core.set_global_option(""GUESS"", ""read""); optimize('pwpb95-d3bj'). Psi4 stopped on: Friday, 21 August 2020 04:21PM; Psi4 wall time for execution: 0:00:04.47. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. As I am fairly new to quantum chemistry, I do not really know how to interpret this error. Any pointers are appreciated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1995
https://github.com/psi4/psi4/issues/1995:3321,Availability,error,error,3321,"conda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); core.set_global_option(""DFT_RADIAL_POINTS"", 85); core.set_global_option(""REFERENCE"", ""uhf""); set_memory(100000000000); try:; --> optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); core.set_global_option(""GUESS"", ""read""); optimize('pwpb95-d3bj'). Psi4 stopped on: Friday, 21 August 2020 04:21PM; Psi4 wall time for execution: 0:00:04.47. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. As I am fairly new to quantum chemistry, I do not really know how to interpret this error. Any pointers are appreciated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1995
https://github.com/psi4/psi4/issues/1995:3496,Availability,error,error,3496,"conda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); core.set_global_option(""DFT_RADIAL_POINTS"", 85); core.set_global_option(""REFERENCE"", ""uhf""); set_memory(100000000000); try:; --> optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); core.set_global_option(""GUESS"", ""read""); optimize('pwpb95-d3bj'). Psi4 stopped on: Friday, 21 August 2020 04:21PM; Psi4 wall time for execution: 0:00:04.47. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. As I am fairly new to quantum chemistry, I do not really know how to interpret this error. Any pointers are appreciated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1995
https://github.com/psi4/psi4/issues/1995:2230,Energy Efficiency,energy,energy,2230,"-------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 0 1 1 45 45 0; BETA 0 0 0 46 46 0; --------------------------------------------------------. Traceback (most recent call last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); core.set_global_option(""DFT_RADIAL_POINTS"", 85); core.set_global_option(""REFERENCE"", ""uhf""); set_memory(100000000000); try:; --> optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); core.set_global_option(""GUESS"", ""read""); optimize('pwpb95-d3bj'). Psi4 stopped on: Friday, 21 August 2020 04:21PM; Psi4 wall time for execution: 0:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1995
https://github.com/psi4/psi4/issues/1995:2256,Energy Efficiency,energy,energy,2256,"-------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 0 1 1 45 45 0; BETA 0 0 0 46 46 0; --------------------------------------------------------. Traceback (most recent call last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); core.set_global_option(""DFT_RADIAL_POINTS"", 85); core.set_global_option(""REFERENCE"", ""uhf""); set_memory(100000000000); try:; --> optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); core.set_global_option(""GUESS"", ""read""); optimize('pwpb95-d3bj'). Psi4 stopped on: Friday, 21 August 2020 04:21PM; Psi4 wall time for execution: 0:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1995
https://github.com/psi4/psi4/issues/1995:415,Performance,optimiz,optimize,415,"Hi,. I've been trying to calculate the energies of monoatomic compounds. All of the atoms ran successfully, except for hydrogen with multiplicity 2. My in-file:; ```; molecule mol_atomic_hydrogen_doublet {; 0 2; H 0.000000000 0.000000000 0.000000000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVQZ; dft_spherical_points 434; dft_radial_points 85; reference uhf; }. set_memory(100000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); ```. The error I got (including previous lines):; ```; *** tstart() called on host; *** at Fri Aug 21 16:21:36 2020. => Loading Basis Set <=. Name: (AUG-CC-PVQZ AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; UMP2 Wavefunction, 28 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 80; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 0 1 1 45 45 0; BETA 0 0 0 46 46 0; --------------------------------------------------------. Traceback (most recent call last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/dri",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1995
https://github.com/psi4/psi4/issues/1995:595,Performance,optimiz,optimize,595,"Hi,. I've been trying to calculate the energies of monoatomic compounds. All of the atoms ran successfully, except for hydrogen with multiplicity 2. My in-file:; ```; molecule mol_atomic_hydrogen_doublet {; 0 2; H 0.000000000 0.000000000 0.000000000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVQZ; dft_spherical_points 434; dft_radial_points 85; reference uhf; }. set_memory(100000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); ```. The error I got (including previous lines):; ```; *** tstart() called on host; *** at Fri Aug 21 16:21:36 2020. => Loading Basis Set <=. Name: (AUG-CC-PVQZ AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; UMP2 Wavefunction, 28 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 80; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 0 1 1 45 45 0; BETA 0 0 0 46 46 0; --------------------------------------------------------. Traceback (most recent call last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/dri",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1995
https://github.com/psi4/psi4/issues/1995:740,Performance,Load,Loading,740,"Hi,. I've been trying to calculate the energies of monoatomic compounds. All of the atoms ran successfully, except for hydrogen with multiplicity 2. My in-file:; ```; molecule mol_atomic_hydrogen_doublet {; 0 2; H 0.000000000 0.000000000 0.000000000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVQZ; dft_spherical_points 434; dft_radial_points 85; reference uhf; }. set_memory(100000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); ```. The error I got (including previous lines):; ```; *** tstart() called on host; *** at Fri Aug 21 16:21:36 2020. => Loading Basis Set <=. Name: (AUG-CC-PVQZ AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; UMP2 Wavefunction, 28 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 80; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 0 1 1 45 45 0; BETA 0 0 0 46 46 0; --------------------------------------------------------. Traceback (most recent call last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/dri",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1995
https://github.com/psi4/psi4/issues/1995:1724,Performance,optimiz,optimize,1724,"UX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; UMP2 Wavefunction, 28 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 80; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 0 1 1 45 45 0; BETA 0 0 0 46 46 0; --------------------------------------------------------. Traceback (most recent call last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1995
https://github.com/psi4/psi4/issues/1995:2976,Performance,optimiz,optimize,2976,"conda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); core.set_global_option(""DFT_RADIAL_POINTS"", 85); core.set_global_option(""REFERENCE"", ""uhf""); set_memory(100000000000); try:; --> optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); core.set_global_option(""GUESS"", ""read""); optimize('pwpb95-d3bj'). Psi4 stopped on: Friday, 21 August 2020 04:21PM; Psi4 wall time for execution: 0:00:04.47. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. As I am fairly new to quantum chemistry, I do not really know how to interpret this error. Any pointers are appreciated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1995
https://github.com/psi4/psi4/issues/1995:3181,Performance,optimiz,optimize,3181,"conda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); core.set_global_option(""DFT_RADIAL_POINTS"", 85); core.set_global_option(""REFERENCE"", ""uhf""); set_memory(100000000000); try:; --> optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); core.set_global_option(""GUESS"", ""read""); optimize('pwpb95-d3bj'). Psi4 stopped on: Friday, 21 August 2020 04:21PM; Psi4 wall time for execution: 0:00:04.47. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. As I am fairly new to quantum chemistry, I do not really know how to interpret this error. Any pointers are appreciated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1995
https://github.com/psi4/psi4/issues/1996:1027,Energy Efficiency,energy,energy,1027," the third column, the parser fails. This is because `psi4/driver/qcdb/libmintsbasissetparser.py` limits the number of replacements of ""D"" with ""e"" to two per line. Is there a particular reason for this limit? Otherwise I'm happy to submit a PR fixing this. Fails:; ```; molecule mol {; N 0.0 0.0 0.0; N 0.0 0.0 1.0; 0 1; }. basis {; assign genbas; [genbas]; cartesian. ****; N 0; S 6 1.00; 0.4173511460D+04 0.1834772160D-02; 0.6274579110D+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Use",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:1357,Energy Efficiency,energy,energy,1357,"ails:; ```; molecule mol {; N 0.0 0.0 0.0; N 0.0 0.0 1.0; 0 1; }. basis {; assign genbas; [genbas]; cartesian. ****; N 0; S 6 1.00; 0.4173511460D+04 0.1834772160D-02; 0.6274579110D+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:1383,Energy Efficiency,energy,energy,1383,"ails:; ```; molecule mol {; N 0.0 0.0 0.0; N 0.0 0.0 1.0; 0 1; }. basis {; assign genbas; [genbas]; cartesian. ****; N 0; S 6 1.00; 0.4173511460D+04 0.1834772160D-02; 0.6274579110D+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:2997,Energy Efficiency,energy,energy,2997,"; File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSA2D5A0E2'] = basisspec_psi4_yo__anonymousa2d5a0e2; core.set_global_option(""BASIS"", ""anonymousa2d5a0e2""); --> e, wfn = energy('scf', return_wfn=True). !--------------------------------------------------------!; ! !; ! could not convert string to float: '0.6757974388D-01' !; ! !; !--------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:1069,Integrability,message,message,1069," the third column, the parser fails. This is because `psi4/driver/qcdb/libmintsbasissetparser.py` limits the number of replacements of ""D"" with ""e"" to two per line. Is there a particular reason for this limit? Otherwise I'm happy to submit a PR fixing this. Fails:; ```; molecule mol {; N 0.0 0.0 0.0; N 0.0 0.0 1.0; 0 1; }. basis {; assign genbas; [genbas]; cartesian. ****; N 0; S 6 1.00; 0.4173511460D+04 0.1834772160D-02; 0.6274579110D+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Use",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:2620,Integrability,contract,contraction,2620,"; File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSA2D5A0E2'] = basisspec_psi4_yo__anonymousa2d5a0e2; core.set_global_option(""BASIS"", ""anonymousa2d5a0e2""); --> e, wfn = energy('scf', return_wfn=True). !--------------------------------------------------------!; ! !; ! could not convert string to float: '0.6757974388D-01' !; ! !; !--------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:1139,Usability,guid,guido,1139," the third column, the parser fails. This is because `psi4/driver/qcdb/libmintsbasissetparser.py` limits the number of replacements of ""D"" with ""e"" to two per line. Is there a particular reason for this limit? Otherwise I'm happy to submit a PR fixing this. Fails:; ```; molecule mol {; N 0.0 0.0 0.0; N 0.0 0.0 1.0; 0 1; }. basis {; assign genbas; [genbas]; cartesian. ****; N 0; S 6 1.00; 0.4173511460D+04 0.1834772160D-02; 0.6274579110D+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Use",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:1281,Usability,guid,guido,1281," the third column, the parser fails. This is because `psi4/driver/qcdb/libmintsbasissetparser.py` limits the number of replacements of ""D"" with ""e"" to two per line. Is there a particular reason for this limit? Otherwise I'm happy to submit a PR fixing this. Fails:; ```; molecule mol {; N 0.0 0.0 0.0; N 0.0 0.0 1.0; 0 1; }. basis {; assign genbas; [genbas]; cartesian. ****; N 0; S 6 1.00; 0.4173511460D+04 0.1834772160D-02; 0.6274579110D+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Use",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:1463,Usability,guid,guido,1463,"ails:; ```; molecule mol {; N 0.0 0.0 0.0; N 0.0 0.0 1.0; 0 1; }. basis {; assign genbas; [genbas]; cartesian. ****; N 0; S 6 1.00; 0.4173511460D+04 0.1834772160D-02; 0.6274579110D+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:1632,Usability,guid,guido,1632,"+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in par",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:1833,Usability,guid,guido,1833,"16279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:2021,Usability,guid,guido,2021,"('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSA2D5A0E2'] = basisspec_psi4_yo__anonymousa2d5a0e2; core.set_global_option(""BASIS"", ""anonymousa2d5a0e2""); --> e, wfn = energy('scf', return_wfn=True). !---",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:2180,Usability,guid,guido,2180,"/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSA2D5A0E2'] = basisspec_psi4_yo__anonymousa2d5a0e2; core.set_global_option(""BASIS"", ""anonymousa2d5a0e2""); --> e, wfn = energy('scf', return_wfn=True). !--------------------------------------------------------!; ! !; ! could not convert string to float: '0.6757974388D-01' !; ! !; !---------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:2321,Usability,guid,guido,2321,"; File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSA2D5A0E2'] = basisspec_psi4_yo__anonymousa2d5a0e2; core.set_global_option(""BASIS"", ""anonymousa2d5a0e2""); --> e, wfn = energy('scf', return_wfn=True). !--------------------------------------------------------!; ! !; ! could not convert string to float: '0.6757974388D-01' !; ! !; !--------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1996:2516,Usability,guid,guido,2516,"; File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSA2D5A0E2'] = basisspec_psi4_yo__anonymousa2d5a0e2; core.set_global_option(""BASIS"", ""anonymousa2d5a0e2""); --> e, wfn = energy('scf', return_wfn=True). !--------------------------------------------------------!; ! !; ! could not convert string to float: '0.6757974388D-01' !; ! !; !--------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1996
https://github.com/psi4/psi4/issues/1998:54,Availability,error,error-ao-mux-has-an-unrecognized-shape,54,"From forum: http://forum.psicode.org/t/polarizability-error-ao-mux-has-an-unrecognized-shape/1916/3. The error is `ERROR: ""AO Mux"" has an unrecognized shape. Must be either (36, 36) or (5, 31)`; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/response/scf_response.py#L176; The `vector` here, has still the original size. DIdn't trace it any further. Made up example for testing:; ```; molecule mol {; 0 1; O 0.44260 -0.88720 -0.29490; H 0.73940 -0.26640 -0.96690; H 0.79240 -0.54630 0.53350; }. basis {; assign verydiff; [verydiff]; spherical; ****; H 0; S 4 1.00; 1.301000D+01 1.968500D-02; 1.962000D+00 1.379770D-01; 4.446000D-01 4.781480D-01; 1.220000D-01 5.012400D-01; S 1 1.00; 1.220000D-01 1.000000D+00; S 1 1.00; 0.0297400 1.0000000; P 1 1.00; 7.270000D-01 1.0000000; P 1 1.00; 0.1410000 1.0000000; ****; O 0; S 9 1.00; 1.172000D+04 7.100000D-04; 1.759000D+03 5.470000D-03; 4.008000D+02 2.783700D-02; 1.137000D+02 1.048000D-01; 3.703000D+01 2.830620D-01; 1.327000D+01 4.487190D-01; 5.025000D+00 2.709520D-01; 1.013000D+00 1.545800D-02; 3.023000D-01 -2.585000D-03; S 9 1.00; 1.172000D+04 -1.600000D-04; 1.759000D+03 -1.263000D-03; 4.008000D+02 -6.267000D-03; 1.137000D+02 -2.571600D-02; 3.703000D+01 -7.092400D-02; 1.327000D+01 -1.654110D-01; 5.025000D+00 -1.169550D-01; 1.013000D+00 5.573680D-01; 3.023000D-01 5.727590D-01; S 1 1.00; 3.023000D-01 1.000000D+00; S 1 1.00; 0.0189600 1.0000000; P 4 1.00; 1.770000D+01 4.301800D-02; 3.854000D+00 2.289130D-01; 1.046000D+00 5.087280D-01; 2.753000D-01 4.605310D-01; P 1 1.00; 2.753000D-01 1.000000D+00; P 1 1.00; 0.0185600 1.0000000; D 1 1.00; 0.1000 1.0000000; D 1 1.00; 0.1000 1.0000000; ****; }; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1998
https://github.com/psi4/psi4/issues/1998:105,Availability,error,error,105,"From forum: http://forum.psicode.org/t/polarizability-error-ao-mux-has-an-unrecognized-shape/1916/3. The error is `ERROR: ""AO Mux"" has an unrecognized shape. Must be either (36, 36) or (5, 31)`; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/response/scf_response.py#L176; The `vector` here, has still the original size. DIdn't trace it any further. Made up example for testing:; ```; molecule mol {; 0 1; O 0.44260 -0.88720 -0.29490; H 0.73940 -0.26640 -0.96690; H 0.79240 -0.54630 0.53350; }. basis {; assign verydiff; [verydiff]; spherical; ****; H 0; S 4 1.00; 1.301000D+01 1.968500D-02; 1.962000D+00 1.379770D-01; 4.446000D-01 4.781480D-01; 1.220000D-01 5.012400D-01; S 1 1.00; 1.220000D-01 1.000000D+00; S 1 1.00; 0.0297400 1.0000000; P 1 1.00; 7.270000D-01 1.0000000; P 1 1.00; 0.1410000 1.0000000; ****; O 0; S 9 1.00; 1.172000D+04 7.100000D-04; 1.759000D+03 5.470000D-03; 4.008000D+02 2.783700D-02; 1.137000D+02 1.048000D-01; 3.703000D+01 2.830620D-01; 1.327000D+01 4.487190D-01; 5.025000D+00 2.709520D-01; 1.013000D+00 1.545800D-02; 3.023000D-01 -2.585000D-03; S 9 1.00; 1.172000D+04 -1.600000D-04; 1.759000D+03 -1.263000D-03; 4.008000D+02 -6.267000D-03; 1.137000D+02 -2.571600D-02; 3.703000D+01 -7.092400D-02; 1.327000D+01 -1.654110D-01; 5.025000D+00 -1.169550D-01; 1.013000D+00 5.573680D-01; 3.023000D-01 5.727590D-01; S 1 1.00; 3.023000D-01 1.000000D+00; S 1 1.00; 0.0189600 1.0000000; P 4 1.00; 1.770000D+01 4.301800D-02; 3.854000D+00 2.289130D-01; 1.046000D+00 5.087280D-01; 2.753000D-01 4.605310D-01; P 1 1.00; 2.753000D-01 1.000000D+00; P 1 1.00; 0.0185600 1.0000000; D 1 1.00; 0.1000 1.0000000; D 1 1.00; 0.1000 1.0000000; ****; }; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1998
https://github.com/psi4/psi4/issues/1998:115,Availability,ERROR,ERROR,115,"From forum: http://forum.psicode.org/t/polarizability-error-ao-mux-has-an-unrecognized-shape/1916/3. The error is `ERROR: ""AO Mux"" has an unrecognized shape. Must be either (36, 36) or (5, 31)`; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/response/scf_response.py#L176; The `vector` here, has still the original size. DIdn't trace it any further. Made up example for testing:; ```; molecule mol {; 0 1; O 0.44260 -0.88720 -0.29490; H 0.73940 -0.26640 -0.96690; H 0.79240 -0.54630 0.53350; }. basis {; assign verydiff; [verydiff]; spherical; ****; H 0; S 4 1.00; 1.301000D+01 1.968500D-02; 1.962000D+00 1.379770D-01; 4.446000D-01 4.781480D-01; 1.220000D-01 5.012400D-01; S 1 1.00; 1.220000D-01 1.000000D+00; S 1 1.00; 0.0297400 1.0000000; P 1 1.00; 7.270000D-01 1.0000000; P 1 1.00; 0.1410000 1.0000000; ****; O 0; S 9 1.00; 1.172000D+04 7.100000D-04; 1.759000D+03 5.470000D-03; 4.008000D+02 2.783700D-02; 1.137000D+02 1.048000D-01; 3.703000D+01 2.830620D-01; 1.327000D+01 4.487190D-01; 5.025000D+00 2.709520D-01; 1.013000D+00 1.545800D-02; 3.023000D-01 -2.585000D-03; S 9 1.00; 1.172000D+04 -1.600000D-04; 1.759000D+03 -1.263000D-03; 4.008000D+02 -6.267000D-03; 1.137000D+02 -2.571600D-02; 3.703000D+01 -7.092400D-02; 1.327000D+01 -1.654110D-01; 5.025000D+00 -1.169550D-01; 1.013000D+00 5.573680D-01; 3.023000D-01 5.727590D-01; S 1 1.00; 3.023000D-01 1.000000D+00; S 1 1.00; 0.0189600 1.0000000; P 4 1.00; 1.770000D+01 4.301800D-02; 3.854000D+00 2.289130D-01; 1.046000D+00 5.087280D-01; 2.753000D-01 4.605310D-01; P 1 1.00; 2.753000D-01 1.000000D+00; P 1 1.00; 0.0185600 1.0000000; D 1 1.00; 0.1000 1.0000000; D 1 1.00; 0.1000 1.0000000; ****; }; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1998
https://github.com/psi4/psi4/issues/1998:388,Testability,test,testing,388,"From forum: http://forum.psicode.org/t/polarizability-error-ao-mux-has-an-unrecognized-shape/1916/3. The error is `ERROR: ""AO Mux"" has an unrecognized shape. Must be either (36, 36) or (5, 31)`; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/response/scf_response.py#L176; The `vector` here, has still the original size. DIdn't trace it any further. Made up example for testing:; ```; molecule mol {; 0 1; O 0.44260 -0.88720 -0.29490; H 0.73940 -0.26640 -0.96690; H 0.79240 -0.54630 0.53350; }. basis {; assign verydiff; [verydiff]; spherical; ****; H 0; S 4 1.00; 1.301000D+01 1.968500D-02; 1.962000D+00 1.379770D-01; 4.446000D-01 4.781480D-01; 1.220000D-01 5.012400D-01; S 1 1.00; 1.220000D-01 1.000000D+00; S 1 1.00; 0.0297400 1.0000000; P 1 1.00; 7.270000D-01 1.0000000; P 1 1.00; 0.1410000 1.0000000; ****; O 0; S 9 1.00; 1.172000D+04 7.100000D-04; 1.759000D+03 5.470000D-03; 4.008000D+02 2.783700D-02; 1.137000D+02 1.048000D-01; 3.703000D+01 2.830620D-01; 1.327000D+01 4.487190D-01; 5.025000D+00 2.709520D-01; 1.013000D+00 1.545800D-02; 3.023000D-01 -2.585000D-03; S 9 1.00; 1.172000D+04 -1.600000D-04; 1.759000D+03 -1.263000D-03; 4.008000D+02 -6.267000D-03; 1.137000D+02 -2.571600D-02; 3.703000D+01 -7.092400D-02; 1.327000D+01 -1.654110D-01; 5.025000D+00 -1.169550D-01; 1.013000D+00 5.573680D-01; 3.023000D-01 5.727590D-01; S 1 1.00; 3.023000D-01 1.000000D+00; S 1 1.00; 0.0189600 1.0000000; P 4 1.00; 1.770000D+01 4.301800D-02; 3.854000D+00 2.289130D-01; 1.046000D+00 5.087280D-01; 2.753000D-01 4.605310D-01; P 1 1.00; 2.753000D-01 1.000000D+00; P 1 1.00; 0.0185600 1.0000000; D 1 1.00; 0.1000 1.0000000; D 1 1.00; 0.1000 1.0000000; ****; }; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1998
https://github.com/psi4/psi4/pull/1999:242,Testability,Test,Tests,242,## Description; The size check in the scf response code was wrong. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1999
https://github.com/psi4/psi4/pull/1999:316,Testability,test,tests,316,## Description; The size check in the scf response code was wrong. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1999
https://github.com/psi4/psi4/pull/1999:407,Testability,test,tests,407,## Description; The size check in the scf response code was wrong. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1999
https://github.com/psi4/psi4/pull/2000:189,Availability,error,error,189,"## Description; Fixes the ""decimal point of death for Zn"" BS radius that leads to likely wrong DFT results (and bad SCF convergence).; Relevant for MBIS PR ( #1961) test systems, where the error became apparent. ZnO molecule with PBE0/def2-SVP and 434 spherical grid points:; | radial points | old N(electrons) | old E | new N(electrons) | new E |; |---------|--------------------|---------------------|--------------------|---------------------|; | 75 | 42.38542254742733 | -1867.6992099879865 | 37.999997369772665 | -1853.8406995133948 |; | 99 | 35.70883041483774 | -1843.0139920380993 | 37.99999898528541 | -1853.8406965374315 |; | 200 | 37.996233783694734 | -1853.8819221398608 | 37.99999900043764 | -1853.8406976562953 |. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes Zn radius (2551 -> 2.551) !!. ## Checklist; - [x] manual Zn tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2000
https://github.com/psi4/psi4/pull/2000:165,Testability,test,test,165,"## Description; Fixes the ""decimal point of death for Zn"" BS radius that leads to likely wrong DFT results (and bad SCF convergence).; Relevant for MBIS PR ( #1961) test systems, where the error became apparent. ZnO molecule with PBE0/def2-SVP and 434 spherical grid points:; | radial points | old N(electrons) | old E | new N(electrons) | new E |; |---------|--------------------|---------------------|--------------------|---------------------|; | 75 | 42.38542254742733 | -1867.6992099879865 | 37.999997369772665 | -1853.8406995133948 |; | 99 | 35.70883041483774 | -1843.0139920380993 | 37.99999898528541 | -1853.8406965374315 |; | 200 | 37.996233783694734 | -1853.8819221398608 | 37.99999900043764 | -1853.8406976562953 |. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes Zn radius (2551 -> 2.551) !!. ## Checklist; - [x] manual Zn tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2000
https://github.com/psi4/psi4/pull/2000:891,Testability,test,tests,891,"## Description; Fixes the ""decimal point of death for Zn"" BS radius that leads to likely wrong DFT results (and bad SCF convergence).; Relevant for MBIS PR ( #1961) test systems, where the error became apparent. ZnO molecule with PBE0/def2-SVP and 434 spherical grid points:; | radial points | old N(electrons) | old E | new N(electrons) | new E |; |---------|--------------------|---------------------|--------------------|---------------------|; | 75 | 42.38542254742733 | -1867.6992099879865 | 37.999997369772665 | -1853.8406995133948 |; | 99 | 35.70883041483774 | -1843.0139920380993 | 37.99999898528541 | -1853.8406965374315 |; | 200 | 37.996233783694734 | -1853.8819221398608 | 37.99999900043764 | -1853.8406976562953 |. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes Zn radius (2551 -> 2.551) !!. ## Checklist; - [x] manual Zn tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2000
https://github.com/psi4/psi4/pull/2001:43,Deployability,integrat,integrated,43,"## Description; The number of electrons as integrated on the DFT quadrature is printed as ""Post-Iterations"" quantity. Current formatting:; ```; Energy and wave function converged. ==> Post-Iterations <==. electrons on quadrature grid:; NTotal = 2.0000000000 ; deviation = -7.638e-14. Orbital Energies [Eh]; ---------------------. --; electrons on quadrature grid:; Nalpha = 5.9997499893 ; deviation = -2.500e-04; Nbeta = 4.9997504300 ; deviation = -2.496e-04; NTotal = 10.9995004192 ; deviation = -4.996e-04. @Spin Contamination Metric: 2.559910084E-05; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] NTotal/Nalpha/Nbeta electrons are printed as obtained from the grid as a health check; - [x] adds `psivars`: `GRID ELECTRONS TOTAL/ALPHA/BETA`. ## Questions; - [ ] Open to suggestions and opinions for naming and formatting. Especially regarding printing of decimals. ## Checklist; - [x] psivars doc string; - [ ] Tests?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2001
https://github.com/psi4/psi4/pull/2001:144,Energy Efficiency,Energy,Energy,144,"## Description; The number of electrons as integrated on the DFT quadrature is printed as ""Post-Iterations"" quantity. Current formatting:; ```; Energy and wave function converged. ==> Post-Iterations <==. electrons on quadrature grid:; NTotal = 2.0000000000 ; deviation = -7.638e-14. Orbital Energies [Eh]; ---------------------. --; electrons on quadrature grid:; Nalpha = 5.9997499893 ; deviation = -2.500e-04; Nbeta = 4.9997504300 ; deviation = -2.496e-04; NTotal = 10.9995004192 ; deviation = -4.996e-04. @Spin Contamination Metric: 2.559910084E-05; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] NTotal/Nalpha/Nbeta electrons are printed as obtained from the grid as a health check; - [x] adds `psivars`: `GRID ELECTRONS TOTAL/ALPHA/BETA`. ## Questions; - [ ] Open to suggestions and opinions for naming and formatting. Especially regarding printing of decimals. ## Checklist; - [x] psivars doc string; - [ ] Tests?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2001
https://github.com/psi4/psi4/pull/2001:43,Integrability,integrat,integrated,43,"## Description; The number of electrons as integrated on the DFT quadrature is printed as ""Post-Iterations"" quantity. Current formatting:; ```; Energy and wave function converged. ==> Post-Iterations <==. electrons on quadrature grid:; NTotal = 2.0000000000 ; deviation = -7.638e-14. Orbital Energies [Eh]; ---------------------. --; electrons on quadrature grid:; Nalpha = 5.9997499893 ; deviation = -2.500e-04; Nbeta = 4.9997504300 ; deviation = -2.496e-04; NTotal = 10.9995004192 ; deviation = -4.996e-04. @Spin Contamination Metric: 2.559910084E-05; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] NTotal/Nalpha/Nbeta electrons are printed as obtained from the grid as a health check; - [x] adds `psivars`: `GRID ELECTRONS TOTAL/ALPHA/BETA`. ## Questions; - [ ] Open to suggestions and opinions for naming and formatting. Especially regarding printing of decimals. ## Checklist; - [x] psivars doc string; - [ ] Tests?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2001
https://github.com/psi4/psi4/pull/2001:970,Testability,Test,Tests,970,"## Description; The number of electrons as integrated on the DFT quadrature is printed as ""Post-Iterations"" quantity. Current formatting:; ```; Energy and wave function converged. ==> Post-Iterations <==. electrons on quadrature grid:; NTotal = 2.0000000000 ; deviation = -7.638e-14. Orbital Energies [Eh]; ---------------------. --; electrons on quadrature grid:; Nalpha = 5.9997499893 ; deviation = -2.500e-04; Nbeta = 4.9997504300 ; deviation = -2.496e-04; NTotal = 10.9995004192 ; deviation = -4.996e-04. @Spin Contamination Metric: 2.559910084E-05; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] NTotal/Nalpha/Nbeta electrons are printed as obtained from the grid as a health check; - [x] adds `psivars`: `GRID ELECTRONS TOTAL/ALPHA/BETA`. ## Questions; - [ ] Open to suggestions and opinions for naming and formatting. Especially regarding printing of decimals. ## Checklist; - [x] psivars doc string; - [ ] Tests?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2001
https://github.com/psi4/psi4/pull/2002:154,Testability,Test,Tests,154,## Description; Fixes inconsistent basis set parsing as decribed in https://github.com/psi4/psi4/issues/1996. ## Todos. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2002
https://github.com/psi4/psi4/pull/2002:228,Testability,test,tests,228,## Description; Fixes inconsistent basis set parsing as decribed in https://github.com/psi4/psi4/issues/1996. ## Todos. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2002
https://github.com/psi4/psi4/pull/2002:319,Testability,test,tests,319,## Description; Fixes inconsistent basis set parsing as decribed in https://github.com/psi4/psi4/issues/1996. ## Todos. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2002
https://github.com/psi4/psi4/pull/2003:565,Performance,perform,performance,565,"## Description; misc. ## Todos; - [x] addressed discrepancy in high ang mom conventions in basis sets. `L=7` and so forth is favored, but HIJ and HIK both accepted. internal basis set library transformed: 'L=7' <- 'K' . see https://github.com/MolSSI-BSE/basis_set_exchange/issues/121, see https://github.com/psi4/psi4/issues/628, closes https://github.com/psi4/psi4/issues/1992 @susilehtola @bennybp ; - [x] consolidated the weird-basis tests (skip AM) into pytest; - [x] @CDSherrill and @edeprince3 confirmed that one should use the low mem algorithm in fnocc for performance, so changed the default; - [x] lets one run pcmsolver through schema by replacing pcm_helper closes https://github.com/psi4/psi4/issues/1986 . works, but hit problem where you can't start pcmsolver the py module afresh, so it complains about units already set. @robertodr contacted; - [x] libiomp5 (Intel) and libomp (LLVM) are interchangeable. relaxed a test on conda packages for mac to accommodate. ## Questions; - [ ] anyone else having problems with mbis3 quadrupole?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2003
https://github.com/psi4/psi4/pull/2003:437,Testability,test,tests,437,"## Description; misc. ## Todos; - [x] addressed discrepancy in high ang mom conventions in basis sets. `L=7` and so forth is favored, but HIJ and HIK both accepted. internal basis set library transformed: 'L=7' <- 'K' . see https://github.com/MolSSI-BSE/basis_set_exchange/issues/121, see https://github.com/psi4/psi4/issues/628, closes https://github.com/psi4/psi4/issues/1992 @susilehtola @bennybp ; - [x] consolidated the weird-basis tests (skip AM) into pytest; - [x] @CDSherrill and @edeprince3 confirmed that one should use the low mem algorithm in fnocc for performance, so changed the default; - [x] lets one run pcmsolver through schema by replacing pcm_helper closes https://github.com/psi4/psi4/issues/1986 . works, but hit problem where you can't start pcmsolver the py module afresh, so it complains about units already set. @robertodr contacted; - [x] libiomp5 (Intel) and libomp (LLVM) are interchangeable. relaxed a test on conda packages for mac to accommodate. ## Questions; - [ ] anyone else having problems with mbis3 quadrupole?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2003
https://github.com/psi4/psi4/pull/2003:932,Testability,test,test,932,"## Description; misc. ## Todos; - [x] addressed discrepancy in high ang mom conventions in basis sets. `L=7` and so forth is favored, but HIJ and HIK both accepted. internal basis set library transformed: 'L=7' <- 'K' . see https://github.com/MolSSI-BSE/basis_set_exchange/issues/121, see https://github.com/psi4/psi4/issues/628, closes https://github.com/psi4/psi4/issues/1992 @susilehtola @bennybp ; - [x] consolidated the weird-basis tests (skip AM) into pytest; - [x] @CDSherrill and @edeprince3 confirmed that one should use the low mem algorithm in fnocc for performance, so changed the default; - [x] lets one run pcmsolver through schema by replacing pcm_helper closes https://github.com/psi4/psi4/issues/1986 . works, but hit problem where you can't start pcmsolver the py module afresh, so it complains about units already set. @robertodr contacted; - [x] libiomp5 (Intel) and libomp (LLVM) are interchangeable. relaxed a test on conda packages for mac to accommodate. ## Questions; - [ ] anyone else having problems with mbis3 quadrupole?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2003
https://github.com/psi4/psi4/pull/2003:1071,Testability,Test,Tests,1071,"## Description; misc. ## Todos; - [x] addressed discrepancy in high ang mom conventions in basis sets. `L=7` and so forth is favored, but HIJ and HIK both accepted. internal basis set library transformed: 'L=7' <- 'K' . see https://github.com/MolSSI-BSE/basis_set_exchange/issues/121, see https://github.com/psi4/psi4/issues/628, closes https://github.com/psi4/psi4/issues/1992 @susilehtola @bennybp ; - [x] consolidated the weird-basis tests (skip AM) into pytest; - [x] @CDSherrill and @edeprince3 confirmed that one should use the low mem algorithm in fnocc for performance, so changed the default; - [x] lets one run pcmsolver through schema by replacing pcm_helper closes https://github.com/psi4/psi4/issues/1986 . works, but hit problem where you can't start pcmsolver the py module afresh, so it complains about units already set. @robertodr contacted; - [x] libiomp5 (Intel) and libomp (LLVM) are interchangeable. relaxed a test on conda packages for mac to accommodate. ## Questions; - [ ] anyone else having problems with mbis3 quadrupole?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2003
https://github.com/psi4/psi4/pull/2003:1145,Testability,test,tests,1145,"## Description; misc. ## Todos; - [x] addressed discrepancy in high ang mom conventions in basis sets. `L=7` and so forth is favored, but HIJ and HIK both accepted. internal basis set library transformed: 'L=7' <- 'K' . see https://github.com/MolSSI-BSE/basis_set_exchange/issues/121, see https://github.com/psi4/psi4/issues/628, closes https://github.com/psi4/psi4/issues/1992 @susilehtola @bennybp ; - [x] consolidated the weird-basis tests (skip AM) into pytest; - [x] @CDSherrill and @edeprince3 confirmed that one should use the low mem algorithm in fnocc for performance, so changed the default; - [x] lets one run pcmsolver through schema by replacing pcm_helper closes https://github.com/psi4/psi4/issues/1986 . works, but hit problem where you can't start pcmsolver the py module afresh, so it complains about units already set. @robertodr contacted; - [x] libiomp5 (Intel) and libomp (LLVM) are interchangeable. relaxed a test on conda packages for mac to accommodate. ## Questions; - [ ] anyone else having problems with mbis3 quadrupole?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2003
https://github.com/psi4/psi4/pull/2003:1236,Testability,test,tests,1236,"## Description; misc. ## Todos; - [x] addressed discrepancy in high ang mom conventions in basis sets. `L=7` and so forth is favored, but HIJ and HIK both accepted. internal basis set library transformed: 'L=7' <- 'K' . see https://github.com/MolSSI-BSE/basis_set_exchange/issues/121, see https://github.com/psi4/psi4/issues/628, closes https://github.com/psi4/psi4/issues/1992 @susilehtola @bennybp ; - [x] consolidated the weird-basis tests (skip AM) into pytest; - [x] @CDSherrill and @edeprince3 confirmed that one should use the low mem algorithm in fnocc for performance, so changed the default; - [x] lets one run pcmsolver through schema by replacing pcm_helper closes https://github.com/psi4/psi4/issues/1986 . works, but hit problem where you can't start pcmsolver the py module afresh, so it complains about units already set. @robertodr contacted; - [x] libiomp5 (Intel) and libomp (LLVM) are interchangeable. relaxed a test on conda packages for mac to accommodate. ## Questions; - [ ] anyone else having problems with mbis3 quadrupole?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2003
https://github.com/psi4/psi4/issues/2004:185,Availability,error,error,185,"The following snippet of code fails because of the extra space at the end of `'SCF_TYPE '`. ```python; import psi4; psi4.set_options({'SCF_TYPE ' : 'DIRECT'}); ```. This is an innocent error that should be fixed by psi4, or reported back to the user with a readable error message. Simply stripping the option label of left and right spaces would prevent this issue (with no potential side effects). If the option is not found, then psi4 should throw an exception saying something like ""Option `'...'` is not valid."". This is the error message:; ```; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-4-c64c7a4449ad> in <module>; 1 import psi4; 2 ; ----> 3 psi4.set_options({'SCF_TYPE ' : 'DIRECT'}). /usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py in set_options(options_dict, verbose); 444 for k, v, in options_dict.items():; 445 mobj = optionre.match(k); --> 446 module = mobj.group('module').upper()[:-2] if mobj.group('module') else None; 447 option = mobj.group('option').upper(); 448 . AttributeError: 'NoneType' object has no attribute 'group'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2004
https://github.com/psi4/psi4/issues/2004:266,Availability,error,error,266,"The following snippet of code fails because of the extra space at the end of `'SCF_TYPE '`. ```python; import psi4; psi4.set_options({'SCF_TYPE ' : 'DIRECT'}); ```. This is an innocent error that should be fixed by psi4, or reported back to the user with a readable error message. Simply stripping the option label of left and right spaces would prevent this issue (with no potential side effects). If the option is not found, then psi4 should throw an exception saying something like ""Option `'...'` is not valid."". This is the error message:; ```; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-4-c64c7a4449ad> in <module>; 1 import psi4; 2 ; ----> 3 psi4.set_options({'SCF_TYPE ' : 'DIRECT'}). /usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py in set_options(options_dict, verbose); 444 for k, v, in options_dict.items():; 445 mobj = optionre.match(k); --> 446 module = mobj.group('module').upper()[:-2] if mobj.group('module') else None; 447 option = mobj.group('option').upper(); 448 . AttributeError: 'NoneType' object has no attribute 'group'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2004
https://github.com/psi4/psi4/issues/2004:529,Availability,error,error,529,"The following snippet of code fails because of the extra space at the end of `'SCF_TYPE '`. ```python; import psi4; psi4.set_options({'SCF_TYPE ' : 'DIRECT'}); ```. This is an innocent error that should be fixed by psi4, or reported back to the user with a readable error message. Simply stripping the option label of left and right spaces would prevent this issue (with no potential side effects). If the option is not found, then psi4 should throw an exception saying something like ""Option `'...'` is not valid."". This is the error message:; ```; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-4-c64c7a4449ad> in <module>; 1 import psi4; 2 ; ----> 3 psi4.set_options({'SCF_TYPE ' : 'DIRECT'}). /usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py in set_options(options_dict, verbose); 444 for k, v, in options_dict.items():; 445 mobj = optionre.match(k); --> 446 module = mobj.group('module').upper()[:-2] if mobj.group('module') else None; 447 option = mobj.group('option').upper(); 448 . AttributeError: 'NoneType' object has no attribute 'group'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2004
https://github.com/psi4/psi4/issues/2004:272,Integrability,message,message,272,"The following snippet of code fails because of the extra space at the end of `'SCF_TYPE '`. ```python; import psi4; psi4.set_options({'SCF_TYPE ' : 'DIRECT'}); ```. This is an innocent error that should be fixed by psi4, or reported back to the user with a readable error message. Simply stripping the option label of left and right spaces would prevent this issue (with no potential side effects). If the option is not found, then psi4 should throw an exception saying something like ""Option `'...'` is not valid."". This is the error message:; ```; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-4-c64c7a4449ad> in <module>; 1 import psi4; 2 ; ----> 3 psi4.set_options({'SCF_TYPE ' : 'DIRECT'}). /usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py in set_options(options_dict, verbose); 444 for k, v, in options_dict.items():; 445 mobj = optionre.match(k); --> 446 module = mobj.group('module').upper()[:-2] if mobj.group('module') else None; 447 option = mobj.group('option').upper(); 448 . AttributeError: 'NoneType' object has no attribute 'group'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2004
https://github.com/psi4/psi4/issues/2004:535,Integrability,message,message,535,"The following snippet of code fails because of the extra space at the end of `'SCF_TYPE '`. ```python; import psi4; psi4.set_options({'SCF_TYPE ' : 'DIRECT'}); ```. This is an innocent error that should be fixed by psi4, or reported back to the user with a readable error message. Simply stripping the option label of left and right spaces would prevent this issue (with no potential side effects). If the option is not found, then psi4 should throw an exception saying something like ""Option `'...'` is not valid."". This is the error message:; ```; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-4-c64c7a4449ad> in <module>; 1 import psi4; 2 ; ----> 3 psi4.set_options({'SCF_TYPE ' : 'DIRECT'}). /usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py in set_options(options_dict, verbose); 444 for k, v, in options_dict.items():; 445 mobj = optionre.match(k); --> 446 module = mobj.group('module').upper()[:-2] if mobj.group('module') else None; 447 option = mobj.group('option').upper(); 448 . AttributeError: 'NoneType' object has no attribute 'group'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2004
https://github.com/psi4/psi4/issues/2004:281,Usability,Simpl,Simply,281,"The following snippet of code fails because of the extra space at the end of `'SCF_TYPE '`. ```python; import psi4; psi4.set_options({'SCF_TYPE ' : 'DIRECT'}); ```. This is an innocent error that should be fixed by psi4, or reported back to the user with a readable error message. Simply stripping the option label of left and right spaces would prevent this issue (with no potential side effects). If the option is not found, then psi4 should throw an exception saying something like ""Option `'...'` is not valid."". This is the error message:; ```; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-4-c64c7a4449ad> in <module>; 1 import psi4; 2 ; ----> 3 psi4.set_options({'SCF_TYPE ' : 'DIRECT'}). /usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py in set_options(options_dict, verbose); 444 for k, v, in options_dict.items():; 445 mobj = optionre.match(k); --> 446 module = mobj.group('module').upper()[:-2] if mobj.group('module') else None; 447 option = mobj.group('option').upper(); 448 . AttributeError: 'NoneType' object has no attribute 'group'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2004
https://github.com/psi4/psi4/pull/2005:114,Availability,reliab,reliable,114,## Description; misc. ## Todos; - [x] one more change to get psi4-dev package working on mac; - [x] make mbis-3 a reliable test. credit to @zachglick for the diagnosis and fix. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2005
https://github.com/psi4/psi4/pull/2005:123,Testability,test,test,123,## Description; misc. ## Todos; - [x] one more change to get psi4-dev package working on mac; - [x] make mbis-3 a reliable test. credit to @zachglick for the diagnosis and fix. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2005
https://github.com/psi4/psi4/pull/2005:197,Testability,Test,Tests,197,## Description; misc. ## Todos; - [x] one more change to get psi4-dev package working on mac; - [x] make mbis-3 a reliable test. credit to @zachglick for the diagnosis and fix. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2005
https://github.com/psi4/psi4/pull/2005:271,Testability,test,tests,271,## Description; misc. ## Todos; - [x] one more change to get psi4-dev package working on mac; - [x] make mbis-3 a reliable test. credit to @zachglick for the diagnosis and fix. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2005
https://github.com/psi4/psi4/pull/2005:362,Testability,test,tests,362,## Description; misc. ## Todos; - [x] one more change to get psi4-dev package working on mac; - [x] make mbis-3 a reliable test. credit to @zachglick for the diagnosis and fix. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2005
https://github.com/psi4/psi4/pull/2006:517,Deployability,update,update,517,"## Description; Adds external potentials (PCM, PE) to the CP-SCF solver. Design and majority of the work done by @maxscheurer. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] static polarizabilties with PCM + PE (no UHF in response_solver); - [x] TD-SCF excitation energies with PCM + PE (RHF/UHF); - [x] python callback function to easily add external potentials at the python level; - [x] `print 2` shows which ext. pot. is added. ## Checklist; - [x] docs update; - [x] new test: RHF static dipole polarizabilities with PCM + PE; - [x] new test: RHF TD-SCF excitation energies with PCM + PE; - [x] new test: UHF TD-SCF excitation energies with PCM + PE (regression-only); - [x] `ctest -L pcm/cppe/quick` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2006
https://github.com/psi4/psi4/pull/2006:535,Testability,test,test,535,"## Description; Adds external potentials (PCM, PE) to the CP-SCF solver. Design and majority of the work done by @maxscheurer. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] static polarizabilties with PCM + PE (no UHF in response_solver); - [x] TD-SCF excitation energies with PCM + PE (RHF/UHF); - [x] python callback function to easily add external potentials at the python level; - [x] `print 2` shows which ext. pot. is added. ## Checklist; - [x] docs update; - [x] new test: RHF static dipole polarizabilities with PCM + PE; - [x] new test: RHF TD-SCF excitation energies with PCM + PE; - [x] new test: UHF TD-SCF excitation energies with PCM + PE (regression-only); - [x] `ctest -L pcm/cppe/quick` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2006
https://github.com/psi4/psi4/pull/2006:601,Testability,test,test,601,"## Description; Adds external potentials (PCM, PE) to the CP-SCF solver. Design and majority of the work done by @maxscheurer. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] static polarizabilties with PCM + PE (no UHF in response_solver); - [x] TD-SCF excitation energies with PCM + PE (RHF/UHF); - [x] python callback function to easily add external potentials at the python level; - [x] `print 2` shows which ext. pot. is added. ## Checklist; - [x] docs update; - [x] new test: RHF static dipole polarizabilities with PCM + PE; - [x] new test: RHF TD-SCF excitation energies with PCM + PE; - [x] new test: UHF TD-SCF excitation energies with PCM + PE (regression-only); - [x] `ctest -L pcm/cppe/quick` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2006
https://github.com/psi4/psi4/pull/2006:663,Testability,test,test,663,"## Description; Adds external potentials (PCM, PE) to the CP-SCF solver. Design and majority of the work done by @maxscheurer. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] static polarizabilties with PCM + PE (no UHF in response_solver); - [x] TD-SCF excitation energies with PCM + PE (RHF/UHF); - [x] python callback function to easily add external potentials at the python level; - [x] `print 2` shows which ext. pot. is added. ## Checklist; - [x] docs update; - [x] new test: RHF static dipole polarizabilities with PCM + PE; - [x] new test: RHF TD-SCF excitation energies with PCM + PE; - [x] new test: UHF TD-SCF excitation energies with PCM + PE (regression-only); - [x] `ctest -L pcm/cppe/quick` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2006
https://github.com/psi4/psi4/issues/2007:228,Integrability,Rout,Routines,228,"Currently the integrals required in polarizable embedding models (PE and EFP) don't exploit any parallelization.; This should be fixed (by me) once Libint2 is in, because for larger systems, the computations become really slow. Routines:; - `electric_field_value`; - `induction_operator`; - `ao_multipole_potential`. The last routine should also be tweaked to be called only once with all site positions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2007
https://github.com/psi4/psi4/issues/2007:326,Integrability,rout,routine,326,"Currently the integrals required in polarizable embedding models (PE and EFP) don't exploit any parallelization.; This should be fixed (by me) once Libint2 is in, because for larger systems, the computations become really slow. Routines:; - `electric_field_value`; - `induction_operator`; - `ao_multipole_potential`. The last routine should also be tweaked to be called only once with all site positions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2007
https://github.com/psi4/psi4/issues/2008:921,Energy Efficiency,energy,energy,921,"Dear developers,. I am currently running SA-CASSCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.2911",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2008
https://github.com/psi4/psi4/issues/2008:1000,Energy Efficiency,ENERGY,ENERGY,1000,"ear developers,. I am currently running SA-CASSCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.29114",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2008
https://github.com/psi4/psi4/issues/2008:1055,Energy Efficiency,ENERGY,ENERGY,1055,"SCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2008
https://github.com/psi4/psi4/issues/2008:1320,Energy Efficiency,energy,energy,1320,"t. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; ******************************************************",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2008
https://github.com/psi4/psi4/issues/2008:1816,Energy Efficiency,energy,energy,1816,"iter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; *******************************************************************; *******************************************************************. As you can see, there is typically the same kind of sign for some determinants sharing a similar coefficient. For example, for the groundstate we have : 0.691216 ( 0, 1) 7AX 8AA 9AB and 0.691216 ( 1, 0) 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these determinants should present opposite signs. To check this, I used a personal code to build up from scratch the frozen core Hamiltonian ass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2008
https://github.com/psi4/psi4/issues/2008:3371,Energy Efficiency,energy,energy,3371,"X 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; *******************************************************************; *******************************************************************. As you can see, there is typically the same kind of sign for some determinants sharing a similar coefficient. For example, for the groundstate we have : 0.691216 ( 0, 1) 7AX 8AA 9AB and 0.691216 ( 1, 0) 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these determinants should present opposite signs. To check this, I used a personal code to build up from scratch the frozen core Hamiltonian associated to the (4,3) active space. I used for this the resulting Optimized MO coeff matrix obtained from SA-CASSCF Psi4. Diagonalizing this Hamiltonian gives the following two lowest states expressed in the active space : ; | Psi_0 > = 0.149|011011⟩ - 0.149|100111⟩ - 0.691|110110⟩ + 0.691|111001⟩; | Psi_1 > = 0.207|001111⟩ - 0.291|011110⟩ + 0.291|101101⟩ + 0.015|110011⟩ - 0.887|111100⟩; (NB : the HF determinant is |111100⟩ ). With this diagonalization, we clearly find same coefficients but with opposite signs. As a double check, I also computed the energy of these states and obtained : ; E_0 = -93.93144865003578 Ha; E_1 = -93.90255033754423 Ha. Which exactly coincides with the energy obtained in the Psi4 OUTPUT. Do you have a clue why such a pb arises in the Psi4 output ?. Thanks a lot for you answer",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2008
https://github.com/psi4/psi4/issues/2008:3502,Energy Efficiency,energy,energy,3502,"X 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; *******************************************************************; *******************************************************************. As you can see, there is typically the same kind of sign for some determinants sharing a similar coefficient. For example, for the groundstate we have : 0.691216 ( 0, 1) 7AX 8AA 9AB and 0.691216 ( 1, 0) 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these determinants should present opposite signs. To check this, I used a personal code to build up from scratch the frozen core Hamiltonian associated to the (4,3) active space. I used for this the resulting Optimized MO coeff matrix obtained from SA-CASSCF Psi4. Diagonalizing this Hamiltonian gives the following two lowest states expressed in the active space : ; | Psi_0 > = 0.149|011011⟩ - 0.149|100111⟩ - 0.691|110110⟩ + 0.691|111001⟩; | Psi_1 > = 0.207|001111⟩ - 0.291|011110⟩ + 0.291|101101⟩ + 0.015|110011⟩ - 0.887|111100⟩; (NB : the HF determinant is |111100⟩ ). With this diagonalization, we clearly find same coefficients but with opposite signs. As a double check, I also computed the energy of these states and obtained : ; E_0 = -93.93144865003578 Ha; E_1 = -93.90255033754423 Ha. Which exactly coincides with the energy obtained in the Psi4 OUTPUT. Do you have a clue why such a pb arises in the Psi4 output ?. Thanks a lot for you answer",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2008
https://github.com/psi4/psi4/issues/2008:420,Modifiability,variab,variables,420,"Dear developers,. I am currently running SA-CASSCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.2911",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2008
https://github.com/psi4/psi4/issues/2008:571,Modifiability,variab,variables,571,"Dear developers,. I am currently running SA-CASSCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.2911",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2008
https://github.com/psi4/psi4/issues/2008:974,Modifiability,variab,variable,974,"ear developers,. I am currently running SA-CASSCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.29114",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2008
https://github.com/psi4/psi4/issues/2008:1029,Modifiability,variab,variable,1029,"SCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2008
https://github.com/psi4/psi4/issues/2008:2881,Performance,Optimiz,Optimized,2881,"X 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; *******************************************************************; *******************************************************************. As you can see, there is typically the same kind of sign for some determinants sharing a similar coefficient. For example, for the groundstate we have : 0.691216 ( 0, 1) 7AX 8AA 9AB and 0.691216 ( 1, 0) 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these determinants should present opposite signs. To check this, I used a personal code to build up from scratch the frozen core Hamiltonian associated to the (4,3) active space. I used for this the resulting Optimized MO coeff matrix obtained from SA-CASSCF Psi4. Diagonalizing this Hamiltonian gives the following two lowest states expressed in the active space : ; | Psi_0 > = 0.149|011011⟩ - 0.149|100111⟩ - 0.691|110110⟩ + 0.691|111001⟩; | Psi_1 > = 0.207|001111⟩ - 0.291|011110⟩ + 0.291|101101⟩ + 0.015|110011⟩ - 0.887|111100⟩; (NB : the HF determinant is |111100⟩ ). With this diagonalization, we clearly find same coefficients but with opposite signs. As a double check, I also computed the energy of these states and obtained : ; E_0 = -93.93144865003578 Ha; E_1 = -93.90255033754423 Ha. Which exactly coincides with the energy obtained in the Psi4 OUTPUT. Do you have a clue why such a pb arises in the Psi4 output ?. Thanks a lot for you answer",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2008
https://github.com/psi4/psi4/issues/2008:3276,Usability,clear,clearly,3276,"X 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; *******************************************************************; *******************************************************************. As you can see, there is typically the same kind of sign for some determinants sharing a similar coefficient. For example, for the groundstate we have : 0.691216 ( 0, 1) 7AX 8AA 9AB and 0.691216 ( 1, 0) 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these determinants should present opposite signs. To check this, I used a personal code to build up from scratch the frozen core Hamiltonian associated to the (4,3) active space. I used for this the resulting Optimized MO coeff matrix obtained from SA-CASSCF Psi4. Diagonalizing this Hamiltonian gives the following two lowest states expressed in the active space : ; | Psi_0 > = 0.149|011011⟩ - 0.149|100111⟩ - 0.691|110110⟩ + 0.691|111001⟩; | Psi_1 > = 0.207|001111⟩ - 0.291|011110⟩ + 0.291|101101⟩ + 0.015|110011⟩ - 0.887|111100⟩; (NB : the HF determinant is |111100⟩ ). With this diagonalization, we clearly find same coefficients but with opposite signs. As a double check, I also computed the energy of these states and obtained : ; E_0 = -93.93144865003578 Ha; E_1 = -93.90255033754423 Ha. Which exactly coincides with the energy obtained in the Psi4 OUTPUT. Do you have a clue why such a pb arises in the Psi4 output ?. Thanks a lot for you answer",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2008
https://github.com/psi4/psi4/issues/2009:981,Availability,error,error,981,"This might be rather an issue for https://github.com/piecuch-group/cct3 but will affect psi4 users nonetheless. The following is a minimal input:; ```; import cct3. set {; basis cc-pVDZ; ints_tolerance 1e-11; }. molecule eins {; units bohr; symmetry c1; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. molecule zwei {; units bohr; symmetry c1; h -2.514213562373 -1.000000000000 0.000000000000; h -2.514213562373 1.000000000000 0.000000000000; h 2.514213562373 -1.000000000000 0.000000000000; h 2.514213562373 1.000000000000 0.000000000000; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. energy(""cr-cc(2,3)"",molecule=eins); clean(); energy(""cr-cc(2,3)"",momlecule=zwei); ```. The error is:; ```; (base) kruse@sphinx1 /scratch/kruse/CCT3 $ psi4.git -v -s . -n 16 input.dat; forrtl: severe (104): incorrect RECL= specifier value for connected file, unit 250, file /scratch/kruse/CCT3/PA; Image PC Routine Line Source; libifcoremt.so.5 00002AD86592CE75 for__io_return Unknown Unknown; libifcoremt.so.5 00002AD8659522E0 for_open Unknown Unknown; cct3.so 00002AD865620EDF integrals_mp_load Unknown Unknown; cct3.so 00002AD86562C3EB solver_mp_solve_c Unknown Unknown; cct3.so 00002AD8655F75A6 driver_mp_run_cc_ Unknown Unknown; cct3.so 00002AD86563683E cc_ Unknown Unknown; cct3.so 00002AD85AD0AAE1 cct3 Unknown Unknown; ```. The `PA` file is opened for _writing_ with a record length `recl` using orbital dimensions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2009
https://github.com/psi4/psi4/issues/2009:890,Energy Efficiency,energy,energy,890,"This might be rather an issue for https://github.com/piecuch-group/cct3 but will affect psi4 users nonetheless. The following is a minimal input:; ```; import cct3. set {; basis cc-pVDZ; ints_tolerance 1e-11; }. molecule eins {; units bohr; symmetry c1; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. molecule zwei {; units bohr; symmetry c1; h -2.514213562373 -1.000000000000 0.000000000000; h -2.514213562373 1.000000000000 0.000000000000; h 2.514213562373 -1.000000000000 0.000000000000; h 2.514213562373 1.000000000000 0.000000000000; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. energy(""cr-cc(2,3)"",molecule=eins); clean(); energy(""cr-cc(2,3)"",momlecule=zwei); ```. The error is:; ```; (base) kruse@sphinx1 /scratch/kruse/CCT3 $ psi4.git -v -s . -n 16 input.dat; forrtl: severe (104): incorrect RECL= specifier value for connected file, unit 250, file /scratch/kruse/CCT3/PA; Image PC Routine Line Source; libifcoremt.so.5 00002AD86592CE75 for__io_return Unknown Unknown; libifcoremt.so.5 00002AD8659522E0 for_open Unknown Unknown; cct3.so 00002AD865620EDF integrals_mp_load Unknown Unknown; cct3.so 00002AD86562C3EB solver_mp_solve_c Unknown Unknown; cct3.so 00002AD8655F75A6 driver_mp_run_cc_ Unknown Unknown; cct3.so 00002AD86563683E cc_ Unknown Unknown; cct3.so 00002AD85AD0AAE1 cct3 Unknown Unknown; ```. The `PA` file is opened for _writing_ with a record length `recl` using orbital dimensions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2009
https://github.com/psi4/psi4/issues/2009:935,Energy Efficiency,energy,energy,935,"This might be rather an issue for https://github.com/piecuch-group/cct3 but will affect psi4 users nonetheless. The following is a minimal input:; ```; import cct3. set {; basis cc-pVDZ; ints_tolerance 1e-11; }. molecule eins {; units bohr; symmetry c1; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. molecule zwei {; units bohr; symmetry c1; h -2.514213562373 -1.000000000000 0.000000000000; h -2.514213562373 1.000000000000 0.000000000000; h 2.514213562373 -1.000000000000 0.000000000000; h 2.514213562373 1.000000000000 0.000000000000; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. energy(""cr-cc(2,3)"",molecule=eins); clean(); energy(""cr-cc(2,3)"",momlecule=zwei); ```. The error is:; ```; (base) kruse@sphinx1 /scratch/kruse/CCT3 $ psi4.git -v -s . -n 16 input.dat; forrtl: severe (104): incorrect RECL= specifier value for connected file, unit 250, file /scratch/kruse/CCT3/PA; Image PC Routine Line Source; libifcoremt.so.5 00002AD86592CE75 for__io_return Unknown Unknown; libifcoremt.so.5 00002AD8659522E0 for_open Unknown Unknown; cct3.so 00002AD865620EDF integrals_mp_load Unknown Unknown; cct3.so 00002AD86562C3EB solver_mp_solve_c Unknown Unknown; cct3.so 00002AD8655F75A6 driver_mp_run_cc_ Unknown Unknown; cct3.so 00002AD86563683E cc_ Unknown Unknown; cct3.so 00002AD85AD0AAE1 cct3 Unknown Unknown; ```. The `PA` file is opened for _writing_ with a record length `recl` using orbital dimensions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2009
https://github.com/psi4/psi4/issues/2009:1196,Integrability,Rout,Routine,1196,"This might be rather an issue for https://github.com/piecuch-group/cct3 but will affect psi4 users nonetheless. The following is a minimal input:; ```; import cct3. set {; basis cc-pVDZ; ints_tolerance 1e-11; }. molecule eins {; units bohr; symmetry c1; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. molecule zwei {; units bohr; symmetry c1; h -2.514213562373 -1.000000000000 0.000000000000; h -2.514213562373 1.000000000000 0.000000000000; h 2.514213562373 -1.000000000000 0.000000000000; h 2.514213562373 1.000000000000 0.000000000000; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. energy(""cr-cc(2,3)"",molecule=eins); clean(); energy(""cr-cc(2,3)"",momlecule=zwei); ```. The error is:; ```; (base) kruse@sphinx1 /scratch/kruse/CCT3 $ psi4.git -v -s . -n 16 input.dat; forrtl: severe (104): incorrect RECL= specifier value for connected file, unit 250, file /scratch/kruse/CCT3/PA; Image PC Routine Line Source; libifcoremt.so.5 00002AD86592CE75 for__io_return Unknown Unknown; libifcoremt.so.5 00002AD8659522E0 for_open Unknown Unknown; cct3.so 00002AD865620EDF integrals_mp_load Unknown Unknown; cct3.so 00002AD86562C3EB solver_mp_solve_c Unknown Unknown; cct3.so 00002AD8655F75A6 driver_mp_run_cc_ Unknown Unknown; cct3.so 00002AD86563683E cc_ Unknown Unknown; cct3.so 00002AD85AD0AAE1 cct3 Unknown Unknown; ```. The `PA` file is opened for _writing_ with a record length `recl` using orbital dimensions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2009
https://github.com/psi4/psi4/issues/2010:546,Availability,fault,fault,546,"Running the input; ```; molecule {; -3 1; Mn -5.33522 1.82890 0.00000; C -6.70409 1.81768 0.00000; N -7.86182 1.80819 0.00000; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:595,Availability,fault,fault,595,"Running the input; ```; molecule {; -3 1; Mn -5.33522 1.82890 0.00000; C -6.70409 1.81768 0.00000; N -7.86182 1.80819 0.00000; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:16135,Availability,error,error,16135,"losure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawText",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:17184,Availability,error,error,17184,"': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1125; #50 0x00007faabd6e0783 in run_mod (mod=<optimized out>, filename=<optimized out>, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:18387,Availability,error,error,18387,"ion': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1125; #50 0x00007faabd6e0783 in run_mod (mod=<optimized out>, filename=<optimized out>, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawText",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:19436,Availability,error,error,19436,"': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7fa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:20681,Availability,error,error,20681,"0>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawText",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:21730,Availability,error,error,21730,"': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=0x7ffdc830ce40); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1034; #52 0x00007faabd6c3bf6 in builtin_exec_impl (module=<optimized out>, ; ```; Looks like the problem occurs within OpenBLAS, but it might be a good idea to double-check the Psi4 code at; ```; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; ```; i.e.; https://github.com/psi4/psi4/blob/f9ccef7676ce0549f5d18b82d9e13ae83c99532e/psi4/src/psi4/scfgrad/jk_grad.cc#L461. since raw calls to BLAS routines are easy to mess up... maybe ther",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:7320,Deployability,install,install,7320,"uilt-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<opti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:9517,Deployability,install,install,9517,"gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dertype=1, optstash=<OptionsState(data={('E_CONVERGENCE', 'SCF'): <OptionState(option='E_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, valu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:11925,Deployability,install,install,11925,", qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKIN",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:15422,Deployability,install,install,15422,"/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(tru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:15594,Deployability,install,install,15594,"ed out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab0338",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:16471,Deployability,install,install,16471,"', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/py",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:16643,Deployability,install,install,16643,"'__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1125; #50 0x00007faabd6e0783 in run_mod (mod=<optimized out>, filename=<optimized out>, ; globals={'__name__': '__main__', ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:17674,Deployability,install,install,17674,", '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1125; #50 0x00007faabd6e0783 in run_mod (mod=<optimized out>, filename=<optimized out>, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true':",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:17846,Deployability,install,install,17846,"e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1125; #50 0x00007faabd6e0783 in run_mod (mod=<optimized out>, filename=<optimized out>, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab0338",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:18723,Deployability,install,install,18723,"', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:18895,Deployability,install,install,18895,"'__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, star",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:19968,Deployability,install,install,19968,"360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:20140,Deployability,install,install,20140,"a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab0338",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:21017,Deployability,install,install,21017,"', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=0x7ffdc830ce40",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:21189,Deployability,install,install,21189,"'__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=0x7ffdc830ce40); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1034; #52 0x00007faabd6c3bf6 in builtin_exec_impl (module=<optimized out>, ; ```; Looks like the pro",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:3348,Integrability,wrap,wrapper,3348,"0, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x00007faaae20f796 in pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) && (f=<optimized out>, f=<optimized out>, this=0x7ffdc830c010) at /usr/include/c++/10/ext/atomicity.h:100; #17 pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Matrix>, pybind11::detail::void_type, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)) && (f=<optimized out>, this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:22511,Integrability,rout,routines,22511,"hars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=0x7ffdc830ce40); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1034; #52 0x00007faabd6c3bf6 in builtin_exec_impl (module=<optimized out>, ; ```; Looks like the problem occurs within OpenBLAS, but it might be a good idea to double-check the Psi4 code at; ```; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; ```; i.e.; https://github.com/psi4/psi4/blob/f9ccef7676ce0549f5d18b82d9e13ae83c99532e/psi4/src/psi4/scfgrad/jk_grad.cc#L461. since raw calls to BLAS routines are easy to mess up... maybe there'd be a way to code these up with the built-in wrappers that always use the correct size arguments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:22601,Integrability,wrap,wrappers,22601,"hars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=0x7ffdc830ce40); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1034; #52 0x00007faabd6c3bf6 in builtin_exec_impl (module=<optimized out>, ; ```; Looks like the problem occurs within OpenBLAS, but it might be a good idea to double-check the Psi4 code at; ```; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; ```; i.e.; https://github.com/psi4/psi4/blob/f9ccef7676ce0549f5d18b82d9e13ae83c99532e/psi4/src/psi4/scfgrad/jk_grad.cc#L461. since raw calls to BLAS routines are easy to mess up... maybe there'd be a way to code these up with the built-in wrappers that always use the correct size arguments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:486,Performance,optimiz,optimize,486,"Running the input; ```; molecule {; -3 1; Mn -5.33522 1.82890 0.00000; C -6.70409 1.81768 0.00000; N -7.86182 1.80819 0.00000; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:679,Performance,optimiz,optimized,679,"Running the input; ```; molecule {; -3 1; Mn -5.33522 1.82890 0.00000; C -6.70409 1.81768 0.00000; N -7.86182 1.80819 0.00000; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:827,Performance,optimiz,optimized,827,"Running the input; ```; molecule {; -3 1; Mn -5.33522 1.82890 0.00000; C -6.70409 1.81768 0.00000; N -7.86182 1.80819 0.00000; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:961,Performance,optimiz,optimized,961,"Running the input; ```; molecule {; -3 1; Mn -5.33522 1.82890 0.00000; C -6.70409 1.81768 0.00000; N -7.86182 1.80819 0.00000; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1024,Performance,optimiz,optimized,1024,"Running the input; ```; molecule {; -3 1; Mn -5.33522 1.82890 0.00000; C -6.70409 1.81768 0.00000; N -7.86182 1.80819 0.00000; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1123,Performance,optimiz,optimized,1123,"00; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1139,Performance,queue,queue,1139,"00; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1508,Performance,queue,queue,1508,"`; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1514,Performance,queue,queue,1514,"`; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1612,Performance,optimiz,optimized,1612,"__P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1637,Performance,optimiz,optimized,1637,"__P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1662,Performance,optimiz,optimized,1662,"__P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1710,Performance,optimiz,optimized,1710,"__P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1738,Performance,optimiz,optimized,1738,"__P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1842,Performance,optimiz,optimized,1842,":91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1867,Performance,optimiz,optimized,1867,":91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1892,Performance,optimiz,optimized,1892,":91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1931,Performance,optimiz,optimized,1931,":91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:1954,Performance,optimiz,optimized,1954,":91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:2426,Performance,optimiz,optimized,2426,"at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:2450,Performance,optimiz,optimized,2450,"at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:2469,Performance,optimiz,optimized,2469,"at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:2488,Performance,optimiz,optimized,2488,"at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:2507,Performance,optimiz,optimized,2507,"at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:2530,Performance,optimiz,optimized,2530,"at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:2549,Performance,optimiz,optimized,2549,"at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:2572,Performance,optimiz,optimized,2572,"at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:2611,Performance,optimiz,optimized,2611,"at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:2633,Performance,optimiz,optimized,2633,"at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:2672,Performance,optimiz,optimized,2672,"at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:3930,Performance,optimiz,optimized,3930,"dd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x00007faaae20f796 in pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) && (f=<optimized out>, f=<optimized out>, this=0x7ffdc830c010) at /usr/include/c++/10/ext/atomicity.h:100; #17 pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Matrix>, pybind11::detail::void_type, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)) && (f=<optimized out>, this=0x7ffdc830c010) at /usr/include/pybind11/cast.h:1954; #18 pybind11::cpp_function::initialize<std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Wavefunction>, pybind11::name, pybind11::scope, pybind11::sibling, char [61]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), py",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:3949,Performance,optimiz,optimized,3949,"dd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x00007faaae20f796 in pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) && (f=<optimized out>, f=<optimized out>, this=0x7ffdc830c010) at /usr/include/c++/10/ext/atomicity.h:100; #17 pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Matrix>, pybind11::detail::void_type, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)) && (f=<optimized out>, this=0x7ffdc830c010) at /usr/include/pybind11/cast.h:1954; #18 pybind11::cpp_function::initialize<std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Wavefunction>, pybind11::name, pybind11::scope, pybind11::sibling, char [61]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), py",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:4319,Performance,optimiz,optimized,4319,"_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x00007faaae20f796 in pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) && (f=<optimized out>, f=<optimized out>, this=0x7ffdc830c010) at /usr/include/c++/10/ext/atomicity.h:100; #17 pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Matrix>, pybind11::detail::void_type, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)) && (f=<optimized out>, this=0x7ffdc830c010) at /usr/include/pybind11/cast.h:1954; #18 pybind11::cpp_function::initialize<std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Wavefunction>, pybind11::name, pybind11::scope, pybind11::sibling, char [61]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#3}::operator()(pybind11::detail::function_call&) const (this=0x0, call=...) at /usr/include/pybind11/pybind11.h:160; #19 pybind11::cpp_function::initialize<std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Wavefunction>, p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:5701,Performance,optimiz,optimized,5701,"ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#3}::operator()(pybind11::detail::function_call&) const (this=0x0, call=...) at /usr/include/pybind11/pybind11.h:160; #19 pybind11::cpp_function::initialize<std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Wavefunction>, pybind11::name, pybind11::scope, pybind11::sibling, char [61]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) (); at /usr/include/pybind11/pybind11.h:137; #20 0x00007faaae20b610 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, n",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:6308,Performance,optimiz,optimized,6308,"_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) (); at /usr/include/pybind11/pybind11.h:137; #20 0x00007faaae20b610 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:6331,Performance,optimiz,optimized,6331,"_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) (); at /usr/include/pybind11/pybind11.h:137; #20 0x00007faaae20b610 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:6497,Performance,optimiz,optimized,6497,"ambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) (); at /usr/include/pybind11/pybind11.h:137; #20 0x00007faaae20b610 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_fu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:6544,Performance,optimiz,optimized,6544,"ambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) (); at /usr/include/pybind11/pybind11.h:137; #20 0x00007faaae20b610 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_fu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:6686,Performance,optimiz,optimized,6686,"imized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:6733,Performance,optimiz,optimized,6733,"imized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:6866,Performance,optimiz,optimized,6866,"f8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', hasc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:7035,Performance,optimiz,optimized,7035,"collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:7062,Performance,optimiz,optimized,7062,"collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:8204,Performance,optimiz,optimized,8204,"er/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:8229,Performance,optimiz,optimized,8229,"er/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:8253,Performance,optimiz,optimized,8253,"er/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:8275,Performance,optimiz,optimized,8275,"er/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:8301,Performance,optimiz,optimized,8301,"er/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:8375,Performance,optimiz,optimized,8375,"er/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:8626,Performance,optimiz,optimized,8626,"e_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dert",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:8672,Performance,optimiz,optimized,8672,"e_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dert",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:8697,Performance,optimiz,optimized,8697,"e_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dert",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:8878,Performance,optimiz,optimized,8878,"l=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dertype=1, optstash=<OptionsState(data={('E_CONVERGENCE', 'SCF'): <OptionState(option='E_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:8902,Performance,optimiz,optimized,8902,"l=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dertype=1, optstash=<OptionsState(data={('E_CONVERGENCE', 'SCF'): <OptionState(option='E_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:9181,Performance,optimiz,optimized,9181,"2.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dertype=1, optstash=<OptionsState(data={('E_CONVERGENCE', 'SCF'): <OptionState(option='E_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:9297,Performance,optimiz,optimized,9297,"ut>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dertype=1, optstash=<OptionsState(data={('E_CONVERGENCE', 'SCF'): <OptionState(option='E_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d46",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:9324,Performance,optimiz,optimized,9324,"ut>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dertype=1, optstash=<OptionsState(data={('E_CONVERGENCE', 'SCF'): <OptionState(option='E_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d46",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:10611,Performance,optimiz,optimized,10611,"NCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:10636,Performance,optimiz,optimized,10636,"NCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:10660,Performance,optimiz,optimized,10660,"NCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:10682,Performance,optimiz,optimized,10682,"NCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:10708,Performance,optimiz,optimized,10708,"NCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:10782,Performance,optimiz,optimized,10782,"NCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:11017,Performance,optimiz,optimized,11017,"tion='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:11063,Performance,optimiz,optimized,11063,"tion='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:11088,Performance,optimiz,optimized,11088,"tion='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:11269,Performance,optimiz,optimized,11269,"7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'O",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:11293,Performance,optimiz,optimized,11293,"7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'O",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:11589,Performance,optimiz,optimized,11589,"86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:11705,Performance,optimiz,optimized,11705,"t>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=Fals",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:11732,Performance,optimiz,optimized,11732,"t>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=Fals",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:11979,Performance,optimiz,optimize,11979,"wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:13019,Performance,optimiz,optimized,13019,"since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:13044,Performance,optimiz,optimized,13044,"since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:13068,Performance,optimiz,optimized,13068,"since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:13090,Performance,optimiz,optimized,13090,"since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:13116,Performance,optimiz,optimized,13116,"since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:13179,Performance,optimiz,optimized,13179,"since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:13258,Performance,optimiz,optimize,13258,"since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:13279,Performance,optimiz,optimize,13279,"since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:13413,Performance,optimiz,optimized,13413,", haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:13459,Performance,optimiz,optimized,13459,", haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:13484,Performance,optimiz,optimized,13484,", haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:13636,Performance,optimiz,optimized,13636,"l=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:13837,Performance,optimiz,optimized,13837,"='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14006,Performance,optimiz,optimized,14006,"timized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14033,Performance,optimiz,optimized,14033,"timized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14412,Performance,optimiz,optimized,14412,".8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14437,Performance,optimiz,optimized,14437,".8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14461,Performance,optimiz,optimized,14461,".8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14483,Performance,optimiz,optimized,14483,".8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14509,Performance,optimiz,optimized,14509,".8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14561,Performance,optimiz,optimized,14561,".8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14775,Performance,optimiz,optimized,14775,"tack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14800,Performance,optimiz,optimized,14800,"tack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14824,Performance,optimiz,optimized,14824,"tack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14846,Performance,optimiz,optimized,14846,"tack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14872,Performance,optimiz,optimized,14872,"tack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:14893,Performance,optimiz,optimized,14893,"tack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:15083,Performance,optimiz,optimized,15083,"ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, pre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:15108,Performance,optimiz,optimized,15108,"ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, pre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:15132,Performance,optimiz,optimized,15132,"ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, pre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:17488,Performance,optimiz,optimized,17488,", '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1125; #50 0x00007faabd6e0783 in run_mod (mod=<optimized out>, filename=<optimized out>, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true':",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:17514,Performance,optimiz,optimized,17514,", '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1125; #50 0x00007faabd6e0783 in run_mod (mod=<optimized out>, filename=<optimized out>, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true':",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:19636,Performance,optimiz,optimized,19636,"r__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:19659,Performance,optimiz,optimized,19659,"r__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:19797,Performance,optimiz,optimized,19797,"360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2010:22070,Performance,optimiz,optimized,22070,"hars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=0x7ffdc830ce40); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1034; #52 0x00007faabd6c3bf6 in builtin_exec_impl (module=<optimized out>, ; ```; Looks like the problem occurs within OpenBLAS, but it might be a good idea to double-check the Psi4 code at; ```; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; ```; i.e.; https://github.com/psi4/psi4/blob/f9ccef7676ce0549f5d18b82d9e13ae83c99532e/psi4/src/psi4/scfgrad/jk_grad.cc#L461. since raw calls to BLAS routines are easy to mess up... maybe there'd be a way to code these up with the built-in wrappers that always use the correct size arguments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2010
https://github.com/psi4/psi4/issues/2012:771,Availability,error,error,771,"The following input, given to me via email, gives a 'bad' dMP2 correction for SAPT:; ```; delta HF,r (2) -18.53850185 [mEh] -11.63308554 [kcal/mol] -48.67282991 [kJ/mol]; delta MP2,r (2) 141.03839795 [mEh] 88.50293088 [kcal/mol] 370.29626281 [kJ/mol]; ```. ```; molecule {; 0 1; F 0.00000000 0.00000000 2.96216000; I 0.00000000 0.00000000 0.96704400; --; 0 1; C 0.00000000 0.00000000 -2.52999200; N 0.00000000 0.00000000 -1.35165800; Na 0.00000000 0.00000000 -4.84283500; units angstrom; no_reorient; symmetry c1; }; memory 20 GiB; set {; basis def2-TZVP; freeze_core true; }; energy('sapt2+dMP2'); energy('mp2',bsse_type=['nocp']); ```. The issue is reproducible for MP2/CCSD post-SCF methods. It is not directly `DF` nor `ghost` atom related. (besides a possibly small error due to https://github.com/psi4/psi4/issues/1968). And not a module specific issue. Using different ECPs (LANL2DZ) or an all electron basis (x2c-SVPall, no rel. effects.) with global `FC=on` seems to give 'better' results in the sense that MP2 interaction energy is negative. One, and perhaps only, issue is `frozen_core`.; Turning `FC = off` only for the supermolecular MP2 part gives OK results. For the NaCN fragment we are freezing 10 electrons, while e.g. ORCA is freezing only 3. ; At least for this case, freezing the Ne-shell by default for Na is not a good choice. Tagging @PeterKraus. `freeze_core -2` makes the SAPT part crash because sth goes wrong for the `IF` fragment (fragment A):; ```; FOCC A = 18446744073709551611; FOCC B = 1; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2012
https://github.com/psi4/psi4/issues/2012:577,Energy Efficiency,energy,energy,577,"The following input, given to me via email, gives a 'bad' dMP2 correction for SAPT:; ```; delta HF,r (2) -18.53850185 [mEh] -11.63308554 [kcal/mol] -48.67282991 [kJ/mol]; delta MP2,r (2) 141.03839795 [mEh] 88.50293088 [kcal/mol] 370.29626281 [kJ/mol]; ```. ```; molecule {; 0 1; F 0.00000000 0.00000000 2.96216000; I 0.00000000 0.00000000 0.96704400; --; 0 1; C 0.00000000 0.00000000 -2.52999200; N 0.00000000 0.00000000 -1.35165800; Na 0.00000000 0.00000000 -4.84283500; units angstrom; no_reorient; symmetry c1; }; memory 20 GiB; set {; basis def2-TZVP; freeze_core true; }; energy('sapt2+dMP2'); energy('mp2',bsse_type=['nocp']); ```. The issue is reproducible for MP2/CCSD post-SCF methods. It is not directly `DF` nor `ghost` atom related. (besides a possibly small error due to https://github.com/psi4/psi4/issues/1968). And not a module specific issue. Using different ECPs (LANL2DZ) or an all electron basis (x2c-SVPall, no rel. effects.) with global `FC=on` seems to give 'better' results in the sense that MP2 interaction energy is negative. One, and perhaps only, issue is `frozen_core`.; Turning `FC = off` only for the supermolecular MP2 part gives OK results. For the NaCN fragment we are freezing 10 electrons, while e.g. ORCA is freezing only 3. ; At least for this case, freezing the Ne-shell by default for Na is not a good choice. Tagging @PeterKraus. `freeze_core -2` makes the SAPT part crash because sth goes wrong for the `IF` fragment (fragment A):; ```; FOCC A = 18446744073709551611; FOCC B = 1; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2012
https://github.com/psi4/psi4/issues/2012:599,Energy Efficiency,energy,energy,599,"The following input, given to me via email, gives a 'bad' dMP2 correction for SAPT:; ```; delta HF,r (2) -18.53850185 [mEh] -11.63308554 [kcal/mol] -48.67282991 [kJ/mol]; delta MP2,r (2) 141.03839795 [mEh] 88.50293088 [kcal/mol] 370.29626281 [kJ/mol]; ```. ```; molecule {; 0 1; F 0.00000000 0.00000000 2.96216000; I 0.00000000 0.00000000 0.96704400; --; 0 1; C 0.00000000 0.00000000 -2.52999200; N 0.00000000 0.00000000 -1.35165800; Na 0.00000000 0.00000000 -4.84283500; units angstrom; no_reorient; symmetry c1; }; memory 20 GiB; set {; basis def2-TZVP; freeze_core true; }; energy('sapt2+dMP2'); energy('mp2',bsse_type=['nocp']); ```. The issue is reproducible for MP2/CCSD post-SCF methods. It is not directly `DF` nor `ghost` atom related. (besides a possibly small error due to https://github.com/psi4/psi4/issues/1968). And not a module specific issue. Using different ECPs (LANL2DZ) or an all electron basis (x2c-SVPall, no rel. effects.) with global `FC=on` seems to give 'better' results in the sense that MP2 interaction energy is negative. One, and perhaps only, issue is `frozen_core`.; Turning `FC = off` only for the supermolecular MP2 part gives OK results. For the NaCN fragment we are freezing 10 electrons, while e.g. ORCA is freezing only 3. ; At least for this case, freezing the Ne-shell by default for Na is not a good choice. Tagging @PeterKraus. `freeze_core -2` makes the SAPT part crash because sth goes wrong for the `IF` fragment (fragment A):; ```; FOCC A = 18446744073709551611; FOCC B = 1; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2012
https://github.com/psi4/psi4/issues/2012:1032,Energy Efficiency,energy,energy,1032,"The following input, given to me via email, gives a 'bad' dMP2 correction for SAPT:; ```; delta HF,r (2) -18.53850185 [mEh] -11.63308554 [kcal/mol] -48.67282991 [kJ/mol]; delta MP2,r (2) 141.03839795 [mEh] 88.50293088 [kcal/mol] 370.29626281 [kJ/mol]; ```. ```; molecule {; 0 1; F 0.00000000 0.00000000 2.96216000; I 0.00000000 0.00000000 0.96704400; --; 0 1; C 0.00000000 0.00000000 -2.52999200; N 0.00000000 0.00000000 -1.35165800; Na 0.00000000 0.00000000 -4.84283500; units angstrom; no_reorient; symmetry c1; }; memory 20 GiB; set {; basis def2-TZVP; freeze_core true; }; energy('sapt2+dMP2'); energy('mp2',bsse_type=['nocp']); ```. The issue is reproducible for MP2/CCSD post-SCF methods. It is not directly `DF` nor `ghost` atom related. (besides a possibly small error due to https://github.com/psi4/psi4/issues/1968). And not a module specific issue. Using different ECPs (LANL2DZ) or an all electron basis (x2c-SVPall, no rel. effects.) with global `FC=on` seems to give 'better' results in the sense that MP2 interaction energy is negative. One, and perhaps only, issue is `frozen_core`.; Turning `FC = off` only for the supermolecular MP2 part gives OK results. For the NaCN fragment we are freezing 10 electrons, while e.g. ORCA is freezing only 3. ; At least for this case, freezing the Ne-shell by default for Na is not a good choice. Tagging @PeterKraus. `freeze_core -2` makes the SAPT part crash because sth goes wrong for the `IF` fragment (fragment A):; ```; FOCC A = 18446744073709551611; FOCC B = 1; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2012
https://github.com/psi4/psi4/pull/2013:235,Modifiability,variab,variable,235,## Description. <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] adds `CCSD(AT)` to cbs driver; - [x] progress counter for `(AT)`part.; - [x] fix for #1957 ; - [x] fix for printing wrong variable in `dfocc`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2013
https://github.com/psi4/psi4/pull/2013:276,Testability,Test,Tests,276,## Description. <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] adds `CCSD(AT)` to cbs driver; - [x] progress counter for `(AT)`part.; - [x] fix for #1957 ; - [x] fix for printing wrong variable in `dfocc`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2013
https://github.com/psi4/psi4/pull/2013:350,Testability,test,tests,350,## Description. <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] adds `CCSD(AT)` to cbs driver; - [x] progress counter for `(AT)`part.; - [x] fix for #1957 ; - [x] fix for printing wrong variable in `dfocc`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2013
https://github.com/psi4/psi4/pull/2013:441,Testability,test,tests,441,## Description. <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] adds `CCSD(AT)` to cbs driver; - [x] progress counter for `(AT)`part.; - [x] fix for #1957 ; - [x] fix for printing wrong variable in `dfocc`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2013
https://github.com/psi4/psi4/issues/2016:591,Availability,down,down,591,"Hi,. I have been comparing the basis sets _aug-cc-pVTZ_ and _aug-cc-pVQZ_. While I was running frequency calculations on a large set of molecules, I found out that some of my molecules never converged. This is not surprising, as there will always be complex geometries that will have a harder time converging within the default number of iterations (100). One of the molecules which never converged and stood out to me was ammonia (for aug-cc-pVQZ). The optimization of the structure was quick and easy, but the frequency calculation never converged due to the density matrix criterium (got down to ~10e-7, but never 10e-8). The atom coordinates I initially used was retrieved from a force field calculation. As these coordinates didn't work (even after increasing the number of iterations), I then changed the coordinates of ammonia to [this reference](https://www.researchgate.net/figure/Cartesian-coordinates-and-atomic-masses-of-ammonia_tbl2_259630381), but it still didn't do the trick as it got stuck at other atomic displacements instead. After playing around with these coordinates for a while, I finally got my run to converge. Questions is, is there a better (automated) way to achieve this kind of convergence, instead of doing this manually for the other remaining molecules? Changing the number of iterations feels a bit naive (and inefficient) and randomly displacing the atoms pre-Psi4 could mean a huge increase in CPU hours (especially for molecules > 100 Da). How would lowering the density matrix criterium (e.g. 10e-7) affect the results?. All tips appreciated! . Example of the ammonia Psi4 infile that finally worked:; ```; molecule mol_ammonia {; 0 1; H 0.000000000 0.000000000 1.208000000; N 0.000000000 0.000000000 0.000000000; H 1.150353000 0.000000000 -0.536000000; H -0.67517600 -1.0230290000 -0.536000000. units angstrom; no_reorient; }. set globals {; 	basis aug-cc-pVQZ; 	dft_spherical_points 434; 	dft_radial_points 85; }. set_memory(80000000000); try:; optimize('pwpb9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2016
https://github.com/psi4/psi4/issues/2016:454,Performance,optimiz,optimization,454,"Hi,. I have been comparing the basis sets _aug-cc-pVTZ_ and _aug-cc-pVQZ_. While I was running frequency calculations on a large set of molecules, I found out that some of my molecules never converged. This is not surprising, as there will always be complex geometries that will have a harder time converging within the default number of iterations (100). One of the molecules which never converged and stood out to me was ammonia (for aug-cc-pVQZ). The optimization of the structure was quick and easy, but the frequency calculation never converged due to the density matrix criterium (got down to ~10e-7, but never 10e-8). The atom coordinates I initially used was retrieved from a force field calculation. As these coordinates didn't work (even after increasing the number of iterations), I then changed the coordinates of ammonia to [this reference](https://www.researchgate.net/figure/Cartesian-coordinates-and-atomic-masses-of-ammonia_tbl2_259630381), but it still didn't do the trick as it got stuck at other atomic displacements instead. After playing around with these coordinates for a while, I finally got my run to converge. Questions is, is there a better (automated) way to achieve this kind of convergence, instead of doing this manually for the other remaining molecules? Changing the number of iterations feels a bit naive (and inefficient) and randomly displacing the atoms pre-Psi4 could mean a huge increase in CPU hours (especially for molecules > 100 Da). How would lowering the density matrix criterium (e.g. 10e-7) affect the results?. All tips appreciated! . Example of the ammonia Psi4 infile that finally worked:; ```; molecule mol_ammonia {; 0 1; H 0.000000000 0.000000000 1.208000000; N 0.000000000 0.000000000 0.000000000; H 1.150353000 0.000000000 -0.536000000; H -0.67517600 -1.0230290000 -0.536000000. units angstrom; no_reorient; }. set globals {; 	basis aug-cc-pVQZ; 	dft_spherical_points 434; 	dft_radial_points 85; }. set_memory(80000000000); try:; optimize('pwpb9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2016
https://github.com/psi4/psi4/issues/2016:1986,Performance,optimiz,optimize,1986,"e a harder time converging within the default number of iterations (100). One of the molecules which never converged and stood out to me was ammonia (for aug-cc-pVQZ). The optimization of the structure was quick and easy, but the frequency calculation never converged due to the density matrix criterium (got down to ~10e-7, but never 10e-8). The atom coordinates I initially used was retrieved from a force field calculation. As these coordinates didn't work (even after increasing the number of iterations), I then changed the coordinates of ammonia to [this reference](https://www.researchgate.net/figure/Cartesian-coordinates-and-atomic-masses-of-ammonia_tbl2_259630381), but it still didn't do the trick as it got stuck at other atomic displacements instead. After playing around with these coordinates for a while, I finally got my run to converge. Questions is, is there a better (automated) way to achieve this kind of convergence, instead of doing this manually for the other remaining molecules? Changing the number of iterations feels a bit naive (and inefficient) and randomly displacing the atoms pre-Psi4 could mean a huge increase in CPU hours (especially for molecules > 100 Da). How would lowering the density matrix criterium (e.g. 10e-7) affect the results?. All tips appreciated! . Example of the ammonia Psi4 infile that finally worked:; ```; molecule mol_ammonia {; 0 1; H 0.000000000 0.000000000 1.208000000; N 0.000000000 0.000000000 0.000000000; H 1.150353000 0.000000000 -0.536000000; H -0.67517600 -1.0230290000 -0.536000000. units angstrom; no_reorient; }. set globals {; 	basis aug-cc-pVQZ; 	dft_spherical_points 434; 	dft_radial_points 85; }. set_memory(80000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2016
https://github.com/psi4/psi4/issues/2016:2166,Performance,optimiz,optimize,2166,"e a harder time converging within the default number of iterations (100). One of the molecules which never converged and stood out to me was ammonia (for aug-cc-pVQZ). The optimization of the structure was quick and easy, but the frequency calculation never converged due to the density matrix criterium (got down to ~10e-7, but never 10e-8). The atom coordinates I initially used was retrieved from a force field calculation. As these coordinates didn't work (even after increasing the number of iterations), I then changed the coordinates of ammonia to [this reference](https://www.researchgate.net/figure/Cartesian-coordinates-and-atomic-masses-of-ammonia_tbl2_259630381), but it still didn't do the trick as it got stuck at other atomic displacements instead. After playing around with these coordinates for a while, I finally got my run to converge. Questions is, is there a better (automated) way to achieve this kind of convergence, instead of doing this manually for the other remaining molecules? Changing the number of iterations feels a bit naive (and inefficient) and randomly displacing the atoms pre-Psi4 could mean a huge increase in CPU hours (especially for molecules > 100 Da). How would lowering the density matrix criterium (e.g. 10e-7) affect the results?. All tips appreciated! . Example of the ammonia Psi4 infile that finally worked:; ```; molecule mol_ammonia {; 0 1; H 0.000000000 0.000000000 1.208000000; N 0.000000000 0.000000000 0.000000000; H 1.150353000 0.000000000 -0.536000000; H -0.67517600 -1.0230290000 -0.536000000. units angstrom; no_reorient; }. set globals {; 	basis aug-cc-pVQZ; 	dft_spherical_points 434; 	dft_radial_points 85; }. set_memory(80000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2016
https://github.com/psi4/psi4/pull/2017:58,Availability,error,errors,58,## Description; All credit to @hokru . This fixes runtime errors seen on Mac with clang 10. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2017
https://github.com/psi4/psi4/pull/2018:64,Deployability,update,update,64,## Description; This branch is just a sandbox for me to query / update the Windows Azure config. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2018
https://github.com/psi4/psi4/pull/2018:38,Modifiability,sandbox,sandbox,38,## Description; This branch is just a sandbox for me to query / update the Windows Azure config. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2018
https://github.com/psi4/psi4/pull/2018:89,Modifiability,config,config,89,## Description; This branch is just a sandbox for me to query / update the Windows Azure config. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2018
https://github.com/psi4/psi4/pull/2018:38,Testability,sandbox,sandbox,38,## Description; This branch is just a sandbox for me to query / update the Windows Azure config. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2018
https://github.com/psi4/psi4/issues/2019:5,Availability,error,errors,5,"PSIO errors are currently being written to `stderr`. (See [this line and the switch statement below](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/error.cc#L54).) Although the fact that there is a PSIO error is written to the output file, I'm semi-frequently encountering forum users who aren't familiar with `stderr`. It either takes longer than it should for me to get this information, or they can't provide it. For ease of debugging, this error information should be logged somewhere like the output file, where we can guarantee new users will keep it and be able to find it, so they can pass it on to developers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2019
https://github.com/psi4/psi4/issues/2019:164,Availability,error,error,164,"PSIO errors are currently being written to `stderr`. (See [this line and the switch statement below](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/error.cc#L54).) Although the fact that there is a PSIO error is written to the output file, I'm semi-frequently encountering forum users who aren't familiar with `stderr`. It either takes longer than it should for me to get this information, or they can't provide it. For ease of debugging, this error information should be logged somewhere like the output file, where we can guarantee new users will keep it and be able to find it, so they can pass it on to developers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2019
https://github.com/psi4/psi4/issues/2019:219,Availability,error,error,219,"PSIO errors are currently being written to `stderr`. (See [this line and the switch statement below](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/error.cc#L54).) Although the fact that there is a PSIO error is written to the output file, I'm semi-frequently encountering forum users who aren't familiar with `stderr`. It either takes longer than it should for me to get this information, or they can't provide it. For ease of debugging, this error information should be logged somewhere like the output file, where we can guarantee new users will keep it and be able to find it, so they can pass it on to developers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2019
https://github.com/psi4/psi4/issues/2019:460,Availability,error,error,460,"PSIO errors are currently being written to `stderr`. (See [this line and the switch statement below](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/error.cc#L54).) Although the fact that there is a PSIO error is written to the output file, I'm semi-frequently encountering forum users who aren't familiar with `stderr`. It either takes longer than it should for me to get this information, or they can't provide it. For ease of debugging, this error information should be logged somewhere like the output file, where we can guarantee new users will keep it and be able to find it, so they can pass it on to developers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2019
https://github.com/psi4/psi4/issues/2019:488,Testability,log,logged,488,"PSIO errors are currently being written to `stderr`. (See [this line and the switch statement below](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/error.cc#L54).) Although the fact that there is a PSIO error is written to the output file, I'm semi-frequently encountering forum users who aren't familiar with `stderr`. It either takes longer than it should for me to get this information, or they can't provide it. For ease of debugging, this error information should be logged somewhere like the output file, where we can guarantee new users will keep it and be able to find it, so they can pass it on to developers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2019
https://github.com/psi4/psi4/issues/2020:1065,Availability,error,error,1065," by a frequency calculation on 12-butadiene with the following input file:. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:1296,Availability,error,error,1296,"73100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFunction_FastC Unknown Unknown; python3.7 000055D7E21A64B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:4715,Energy Efficiency,energy,energy,4715,"2,7) = 2.053717	 1.086780; 	 R(3,4) = 2.460043	 1.301799; 	 R(4,5) = 2.048304	 1.083916; 	 R(4,6) = 2.048052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.892170	 108.413330; 	 D(3,2,1,8) = 2.105760	 120.651167; 	 D(3,2,1,9) = -0.000265	 -0.015201; 	 D(3,2,1,10) = -2.106403	 -120.688028; 	 D(7,2,1,8) = -1.035039	 -59.303377; 	 D(7,2,1,9) = -3.141065	 -179.969745; 	 D(7,2,1,10) = 1.035983	 59.357428; 	 D(1,2,4,5) = -1.570902	 -90.006049; 	 D(1,2,4,6) = 1.571763	 90.055389; 	 D(5,4,2,7) = 1.569937	 89.950750; 	 D(6,4,2,7) = -1.570584	 -89.987812. 	Current energy : -155.9174379498. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.02433; 	Projected energy change by RFO approximation: -0.0001821031. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 1.505794 -0.034892 3.856575 5.362368; 	 2 R(1,8) = 1.092251 -0.013706 3.549391 4.641642; 	 3 R(1,9) = 1.088350 -0.010961 4.187384 5.275733; 	 4 R(1,10) = 1.092294 -0.013927 3.544911 4.637205; 	 5 R(2,3) = 1.301698 -0.004903 0.637751 1.939449; 	 6 R(2,7) = 1.086780 -0.014812 4.341946 5.428727; 	 7 R(3,4) = 1.301799 -0.000235 0.638104 1.939903; 	 8 R(4,5) = 1.083",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:4940,Energy Efficiency,energy,energy,4940,"9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.892170	 108.413330; 	 D(3,2,1,8) = 2.105760	 120.651167; 	 D(3,2,1,9) = -0.000265	 -0.015201; 	 D(3,2,1,10) = -2.106403	 -120.688028; 	 D(7,2,1,8) = -1.035039	 -59.303377; 	 D(7,2,1,9) = -3.141065	 -179.969745; 	 D(7,2,1,10) = 1.035983	 59.357428; 	 D(1,2,4,5) = -1.570902	 -90.006049; 	 D(1,2,4,6) = 1.571763	 90.055389; 	 D(5,4,2,7) = 1.569937	 89.950750; 	 D(6,4,2,7) = -1.570584	 -89.987812. 	Current energy : -155.9174379498. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.02433; 	Projected energy change by RFO approximation: -0.0001821031. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 1.505794 -0.034892 3.856575 5.362368; 	 2 R(1,8) = 1.092251 -0.013706 3.549391 4.641642; 	 3 R(1,9) = 1.088350 -0.010961 4.187384 5.275733; 	 4 R(1,10) = 1.092294 -0.013927 3.544911 4.637205; 	 5 R(2,3) = 1.301698 -0.004903 0.637751 1.939449; 	 6 R(2,7) = 1.086780 -0.014812 4.341946 5.428727; 	 7 R(3,4) = 1.301799 -0.000235 0.638104 1.939903; 	 8 R(4,5) = 1.083916 -0.015328 3.771054 4.854970; 	 9 R(4,6) = 1.083782 -0.014647 3.771929 4.855711; 	 10 B(1,2,3) = 125.158344 -0.000118 -72.392563 52.765781; 	 11 B(1,2,7) = 116.880293 0.000088 48.210719 165.091012; 	 12 B(2,1,8) = 110.707222 -0.000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:1336,Integrability,Rout,Routine,1336,"73100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFunction_FastC Unknown Unknown; python3.7 000055D7E21A64B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:715,Performance,optimiz,optimize,715,"Hi,. I was running an optimzation followed by a frequency calculation on 12-butadiene with the following input file:. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:895,Performance,optimiz,optimize,895,"Hi,. I was running an optimzation followed by a frequency calculation on 12-butadiene with the following input file:. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:1036,Performance,optimiz,optimization,1036," by a frequency calculation on 12-butadiene with the following input file:. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:1078,Performance,Perform,Performing,1078,"t file:. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:3408,Performance,optimiz,optimization,3408,"own Unknown Unknown; python3.7 000055D7E221129D PyRun_StringFlags Unknown Unknown; python3.7 000055D7E21B5EB4 Unknown Unknown Unknown; python3.7 000055D7E213E789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AA795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E20EE714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E2210331 PyRun_FileExFlags Unknown Unknown; python3.7 000055D7E2210523 PyRun_SimpleFileE Unknown Unknown; python3.7 000055D7E2211655 Unknown Unknown Unknown; python3.7 000055D7E221177C _Py_UnixMain Unknown Unknown; libc-2.27.so 00007FB2DA614B97 __libc_start_main Unknown Unknown; python3.7 000055D7E21B5FF0 Unknown Unknown Unknown; Aborted (core dumped); ```. The last lines in the generated outfile:. ```; 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 2.845538	 1.505794; 	 R(1,8) = 2.064055	 1.092251; 	 R(1,9) = 2.056683	 1.088350; 	 R(1,10) = 2.064136	 1.092294; 	 R(2,3) = 2.459853	 1.301698; 	 R(2,7) = 2.053717	 1.086780; 	 R(3,4) = 2.460043	 1.301799; 	 R(4,5) = 2.048304	 1.083916; 	 R(4,6) = 2.048052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.892170	 108.413330; 	 D(3,2,1,8) = 2.105760	 120.651167; 	 D(3,2,1,9) = -0.000265	 -0.015201; 	 D(3,2,1,10)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:3455,Performance,optimiz,optimization,3455,"7E221129D PyRun_StringFlags Unknown Unknown; python3.7 000055D7E21B5EB4 Unknown Unknown Unknown; python3.7 000055D7E213E789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AA795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E20EE714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E2210331 PyRun_FileExFlags Unknown Unknown; python3.7 000055D7E2210523 PyRun_SimpleFileE Unknown Unknown; python3.7 000055D7E2211655 Unknown Unknown Unknown; python3.7 000055D7E221177C _Py_UnixMain Unknown Unknown; libc-2.27.so 00007FB2DA614B97 __libc_start_main Unknown Unknown; python3.7 000055D7E21B5FF0 Unknown Unknown Unknown; Aborted (core dumped); ```. The last lines in the generated outfile:. ```; 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 2.845538	 1.505794; 	 R(1,8) = 2.064055	 1.092251; 	 R(1,9) = 2.056683	 1.088350; 	 R(1,10) = 2.064136	 1.092294; 	 R(2,3) = 2.459853	 1.301698; 	 R(2,7) = 2.053717	 1.086780; 	 R(3,4) = 2.460043	 1.301799; 	 R(4,5) = 2.048304	 1.083916; 	 R(4,6) = 2.048052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.892170	 108.413330; 	 D(3,2,1,8) = 2.105760	 120.651167; 	 D(3,2,1,9) = -0.000265	 -0.015201; 	 D(3,2,1,10) = -2.106403	 -120.688028; 	 D(7,2,1,8",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:4818,Performance,optimiz,optimization,4818,"48052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.892170	 108.413330; 	 D(3,2,1,8) = 2.105760	 120.651167; 	 D(3,2,1,9) = -0.000265	 -0.015201; 	 D(3,2,1,10) = -2.106403	 -120.688028; 	 D(7,2,1,8) = -1.035039	 -59.303377; 	 D(7,2,1,9) = -3.141065	 -179.969745; 	 D(7,2,1,10) = 1.035983	 59.357428; 	 D(1,2,4,5) = -1.570902	 -90.006049; 	 D(1,2,4,6) = 1.571763	 90.055389; 	 D(5,4,2,7) = 1.569937	 89.950750; 	 D(6,4,2,7) = -1.570584	 -89.987812. 	Current energy : -155.9174379498. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.02433; 	Projected energy change by RFO approximation: -0.0001821031. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 1.505794 -0.034892 3.856575 5.362368; 	 2 R(1,8) = 1.092251 -0.013706 3.549391 4.641642; 	 3 R(1,9) = 1.088350 -0.010961 4.187384 5.275733; 	 4 R(1,10) = 1.092294 -0.013927 3.544911 4.637205; 	 5 R(2,3) = 1.301698 -0.004903 0.637751 1.939449; 	 6 R(2,7) = 1.086780 -0.014812 4.341946 5.428727; 	 7 R(3,4) = 1.301799 -0.000235 0.638104 1.939903; 	 8 R(4,5) = 1.083916 -0.015328 3.771054 4.854970; 	 9 R(4,6) = 1.083782 -0.014647 3.771929 4.855711; 	 10 B(1,2,3) = 125",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:1308,Safety,Abort,Abort,1308,"73100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFunction_FastC Unknown Unknown; python3.7 000055D7E21A64B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:1566,Safety,abort,abort,1566,"ts angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFunction_FastC Unknown Unknown; python3.7 000055D7E21A64B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E20EE714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E221129D PyRun_StringFlags Unknown Unknown; python3.7 000055D7E21B5EB4 Unknown Unknown Unknown; python3.7 000055D7E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/issues/2020:3323,Safety,Abort,Aborted,3323,"n Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E221129D PyRun_StringFlags Unknown Unknown; python3.7 000055D7E21B5EB4 Unknown Unknown Unknown; python3.7 000055D7E213E789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AA795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E20EE714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E2210331 PyRun_FileExFlags Unknown Unknown; python3.7 000055D7E2210523 PyRun_SimpleFileE Unknown Unknown; python3.7 000055D7E2211655 Unknown Unknown Unknown; python3.7 000055D7E221177C _Py_UnixMain Unknown Unknown; libc-2.27.so 00007FB2DA614B97 __libc_start_main Unknown Unknown; python3.7 000055D7E21B5FF0 Unknown Unknown Unknown; Aborted (core dumped); ```. The last lines in the generated outfile:. ```; 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 2.845538	 1.505794; 	 R(1,8) = 2.064055	 1.092251; 	 R(1,9) = 2.056683	 1.088350; 	 R(1,10) = 2.064136	 1.092294; 	 R(2,3) = 2.459853	 1.301698; 	 R(2,7) = 2.053717	 1.086780; 	 R(3,4) = 2.460043	 1.301799; 	 R(4,5) = 2.048304	 1.083916; 	 R(4,6) = 2.048052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.89217",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2020
https://github.com/psi4/psi4/pull/2022:206,Deployability,patch,patched,206,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2022
https://github.com/psi4/psi4/pull/2022:562,Deployability,Update,Updates,562,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2022
https://github.com/psi4/psi4/pull/2022:902,Deployability,Patch,Patch,902,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2022
https://github.com/psi4/psi4/pull/2022:993,Deployability,Update,Update,993,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2022
https://github.com/psi4/psi4/pull/2022:584,Integrability,wrap,wrapper,584,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2022
https://github.com/psi4/psi4/pull/2022:532,Modifiability,variab,variables,532,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2022
https://github.com/psi4/psi4/pull/2022:1048,Modifiability,variab,variables,1048,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2022
https://github.com/psi4/psi4/pull/2022:1089,Testability,test,tests,1089,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2022
https://github.com/psi4/psi4/pull/2022:1229,Testability,test,tested,1229,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2022
https://github.com/psi4/psi4/pull/2022:1310,Testability,test,tests,1310,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2022
https://github.com/psi4/psi4/pull/2022:1401,Testability,test,tests,1401,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2022
https://github.com/psi4/psi4/issues/2023:1168,Availability,error,error,1168,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:1209,Availability,error,error,1209,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:1337,Availability,Error,Error,1337,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:1463,Availability,Error,Error,1463,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:283,Integrability,message,message,283,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:62,Performance,Perform,Performing,62,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:116,Performance,Perform,Performing,116,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:177,Performance,Perform,Performing,177,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:621,Performance,Perform,Performing,621,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:1737,Performance,Perform,Performing,1737,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:1808,Performance,Perform,Performing,1808,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:73,Testability,Test,Test,73,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:127,Testability,Test,Test,127,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:188,Testability,Test,Test,188,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:608,Testability,log,log,608,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:646,Testability,Test,Test,646,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:1573,Testability,test,testing,1573,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:1748,Testability,Test,Test,1748,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2023:1819,Testability,Test,Test,1819,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2023
https://github.com/psi4/psi4/issues/2024:0,Deployability,Install,Installing,0,"Installing `ambertools >=20` alongside `psi4` on MacOS with:. ```; conda create --name psi4-at-test -c conda-forge -c psi4/label/dev ""ambertools >=20"" psi4; ```. results in unresolvable dependencies. Using `mamba` instead of `conda` for dependency resolution gives potentially useful output:; ```; Encountered problems while solving.; Problem: nothing provides gcc-5-mp needed by psi4-1.2a1.dev458+efadaad-py35_gnu_0; ```; This problem was first reported by @SimonBoothroyd, hampering MacOS tests for [openff-recharge](https://github.com/openforcefield/openff-recharge).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2024
https://github.com/psi4/psi4/issues/2024:186,Integrability,depend,dependencies,186,"Installing `ambertools >=20` alongside `psi4` on MacOS with:. ```; conda create --name psi4-at-test -c conda-forge -c psi4/label/dev ""ambertools >=20"" psi4; ```. results in unresolvable dependencies. Using `mamba` instead of `conda` for dependency resolution gives potentially useful output:; ```; Encountered problems while solving.; Problem: nothing provides gcc-5-mp needed by psi4-1.2a1.dev458+efadaad-py35_gnu_0; ```; This problem was first reported by @SimonBoothroyd, hampering MacOS tests for [openff-recharge](https://github.com/openforcefield/openff-recharge).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2024
https://github.com/psi4/psi4/issues/2024:237,Integrability,depend,dependency,237,"Installing `ambertools >=20` alongside `psi4` on MacOS with:. ```; conda create --name psi4-at-test -c conda-forge -c psi4/label/dev ""ambertools >=20"" psi4; ```. results in unresolvable dependencies. Using `mamba` instead of `conda` for dependency resolution gives potentially useful output:; ```; Encountered problems while solving.; Problem: nothing provides gcc-5-mp needed by psi4-1.2a1.dev458+efadaad-py35_gnu_0; ```; This problem was first reported by @SimonBoothroyd, hampering MacOS tests for [openff-recharge](https://github.com/openforcefield/openff-recharge).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2024
https://github.com/psi4/psi4/issues/2024:95,Testability,test,test,95,"Installing `ambertools >=20` alongside `psi4` on MacOS with:. ```; conda create --name psi4-at-test -c conda-forge -c psi4/label/dev ""ambertools >=20"" psi4; ```. results in unresolvable dependencies. Using `mamba` instead of `conda` for dependency resolution gives potentially useful output:; ```; Encountered problems while solving.; Problem: nothing provides gcc-5-mp needed by psi4-1.2a1.dev458+efadaad-py35_gnu_0; ```; This problem was first reported by @SimonBoothroyd, hampering MacOS tests for [openff-recharge](https://github.com/openforcefield/openff-recharge).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2024
https://github.com/psi4/psi4/issues/2024:491,Testability,test,tests,491,"Installing `ambertools >=20` alongside `psi4` on MacOS with:. ```; conda create --name psi4-at-test -c conda-forge -c psi4/label/dev ""ambertools >=20"" psi4; ```. results in unresolvable dependencies. Using `mamba` instead of `conda` for dependency resolution gives potentially useful output:; ```; Encountered problems while solving.; Problem: nothing provides gcc-5-mp needed by psi4-1.2a1.dev458+efadaad-py35_gnu_0; ```; This problem was first reported by @SimonBoothroyd, hampering MacOS tests for [openff-recharge](https://github.com/openforcefield/openff-recharge).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2024
https://github.com/psi4/psi4/pull/2025:24,Deployability,update,updates,24,"## Description; This PR updates options for CPPE (new release is out, including linear-scaling FMM); and adds PE(ECP) repulsive potentials to avoid electron spill-out (https://doi.org/10.1021/acs.jctc.9b01162). ~**Still work in progress....**~. Thanks @loriab for helping with the basis set customization!. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] options for FMM; - [x] bump CPPE version; - [x] option to enable PE(ECP); - [x] add basis set file for ECPs; - [x] add tests for PE(ECP). ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2025
https://github.com/psi4/psi4/pull/2025:54,Deployability,release,release,54,"## Description; This PR updates options for CPPE (new release is out, including linear-scaling FMM); and adds PE(ECP) repulsive potentials to avoid electron spill-out (https://doi.org/10.1021/acs.jctc.9b01162). ~**Still work in progress....**~. Thanks @loriab for helping with the basis set customization!. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] options for FMM; - [x] bump CPPE version; - [x] option to enable PE(ECP); - [x] add basis set file for ECPs; - [x] add tests for PE(ECP). ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2025
https://github.com/psi4/psi4/pull/2025:142,Safety,avoid,avoid,142,"## Description; This PR updates options for CPPE (new release is out, including linear-scaling FMM); and adds PE(ECP) repulsive potentials to avoid electron spill-out (https://doi.org/10.1021/acs.jctc.9b01162). ~**Still work in progress....**~. Thanks @loriab for helping with the basis set customization!. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] options for FMM; - [x] bump CPPE version; - [x] option to enable PE(ECP); - [x] add basis set file for ECPs; - [x] add tests for PE(ECP). ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2025
https://github.com/psi4/psi4/pull/2025:533,Testability,test,tests,533,"## Description; This PR updates options for CPPE (new release is out, including linear-scaling FMM); and adds PE(ECP) repulsive potentials to avoid electron spill-out (https://doi.org/10.1021/acs.jctc.9b01162). ~**Still work in progress....**~. Thanks @loriab for helping with the basis set customization!. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] options for FMM; - [x] bump CPPE version; - [x] option to enable PE(ECP); - [x] add basis set file for ECPs; - [x] add tests for PE(ECP). ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2025
https://github.com/psi4/psi4/pull/2025:603,Testability,Test,Tests,603,"## Description; This PR updates options for CPPE (new release is out, including linear-scaling FMM); and adds PE(ECP) repulsive potentials to avoid electron spill-out (https://doi.org/10.1021/acs.jctc.9b01162). ~**Still work in progress....**~. Thanks @loriab for helping with the basis set customization!. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] options for FMM; - [x] bump CPPE version; - [x] option to enable PE(ECP); - [x] add basis set file for ECPs; - [x] add tests for PE(ECP). ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2025
https://github.com/psi4/psi4/pull/2025:677,Testability,test,tests,677,"## Description; This PR updates options for CPPE (new release is out, including linear-scaling FMM); and adds PE(ECP) repulsive potentials to avoid electron spill-out (https://doi.org/10.1021/acs.jctc.9b01162). ~**Still work in progress....**~. Thanks @loriab for helping with the basis set customization!. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] options for FMM; - [x] bump CPPE version; - [x] option to enable PE(ECP); - [x] add basis set file for ECPs; - [x] add tests for PE(ECP). ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2025
https://github.com/psi4/psi4/pull/2025:768,Testability,test,tests,768,"## Description; This PR updates options for CPPE (new release is out, including linear-scaling FMM); and adds PE(ECP) repulsive potentials to avoid electron spill-out (https://doi.org/10.1021/acs.jctc.9b01162). ~**Still work in progress....**~. Thanks @loriab for helping with the basis set customization!. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] options for FMM; - [x] bump CPPE version; - [x] option to enable PE(ECP); - [x] add basis set file for ECPs; - [x] add tests for PE(ECP). ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2025
https://github.com/psi4/psi4/pull/2027:134,Availability,error,error,134,## Description; Fix memory bug in libtrans for large cases. ## Todos; - [X] bucketSize was overflowing int storage causing psio write error. ## Status; - [X] Ready to merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2027
https://github.com/psi4/psi4/pull/2028:133,Modifiability,plugin,plugins,133,"## Description; misc. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] let plugins work with pybind11 v2.6.0; - [x] there was extra testing in the == of cbs() tasks when options was involved (e.g., delta(ae - fc)). but I don't understand it, and it was preventing deduplication. so fixed it; - [x] Susi noticed trouble with ENABLE_XHOST in that the two options directed at Intel and GCC are valid cross-options. this is a workaround. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2028
https://github.com/psi4/psi4/pull/2028:190,Testability,test,testing,190,"## Description; misc. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] let plugins work with pybind11 v2.6.0; - [x] there was extra testing in the == of cbs() tasks when options was involved (e.g., delta(ae - fc)). but I don't understand it, and it was preventing deduplication. so fixed it; - [x] Susi noticed trouble with ENABLE_XHOST in that the two options directed at Intel and GCC are valid cross-options. this is a workaround. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2028
https://github.com/psi4/psi4/pull/2030:35,Availability,error,errors,35,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2030
https://github.com/psi4/psi4/pull/2030:266,Availability,Error,Error,266,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2030
https://github.com/psi4/psi4/pull/2030:550,Availability,Error,Error,550,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2030
https://github.com/psi4/psi4/pull/2030:617,Availability,error,error,617,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2030
https://github.com/psi4/psi4/pull/2030:810,Availability,error,errors,810,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2030
https://github.com/psi4/psi4/pull/2030:69,Integrability,message,message,69,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2030
https://github.com/psi4/psi4/pull/2030:417,Modifiability,variab,variable,417,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2030
https://github.com/psi4/psi4/pull/2030:881,Testability,test,testing,881,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2030
https://github.com/psi4/psi4/pull/2030:910,Testability,test,tests,910,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2030
https://github.com/psi4/psi4/pull/2032:197,Deployability,Update,Update,197,## Description; Closes #2031 . ## Todos; - [X] Add `compute_field_over_grid_in_memory` to `oeprop.cc` and `oeprop.h`; - [X] Expose `compute_field_over_grid_in_memory` in `export_oeprop.cc`.; - [X] Update `mints14` test. ## Questions; - N / A. ## Checklist; - [X] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2032
https://github.com/psi4/psi4/pull/2032:124,Security,Expose,Expose,124,## Description; Closes #2031 . ## Todos; - [X] Add `compute_field_over_grid_in_memory` to `oeprop.cc` and `oeprop.h`; - [X] Expose `compute_field_over_grid_in_memory` in `export_oeprop.cc`.; - [X] Update `mints14` test. ## Questions; - N / A. ## Checklist; - [X] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2032
https://github.com/psi4/psi4/pull/2032:214,Testability,test,test,214,## Description; Closes #2031 . ## Todos; - [X] Add `compute_field_over_grid_in_memory` to `oeprop.cc` and `oeprop.h`; - [X] Expose `compute_field_over_grid_in_memory` in `export_oeprop.cc`.; - [X] Update `mints14` test. ## Questions; - N / A. ## Checklist; - [X] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2032
https://github.com/psi4/psi4/pull/2032:263,Testability,Test,Tests,263,## Description; Closes #2031 . ## Todos; - [X] Add `compute_field_over_grid_in_memory` to `oeprop.cc` and `oeprop.h`; - [X] Expose `compute_field_over_grid_in_memory` in `export_oeprop.cc`.; - [X] Update `mints14` test. ## Questions; - N / A. ## Checklist; - [X] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2032
https://github.com/psi4/psi4/pull/2032:337,Testability,test,tests,337,## Description; Closes #2031 . ## Todos; - [X] Add `compute_field_over_grid_in_memory` to `oeprop.cc` and `oeprop.h`; - [X] Expose `compute_field_over_grid_in_memory` in `export_oeprop.cc`.; - [X] Update `mints14` test. ## Questions; - N / A. ## Checklist; - [X] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2032
https://github.com/psi4/psi4/pull/2032:428,Testability,test,tests,428,## Description; Closes #2031 . ## Todos; - [X] Add `compute_field_over_grid_in_memory` to `oeprop.cc` and `oeprop.h`; - [X] Expose `compute_field_over_grid_in_memory` in `export_oeprop.cc`.; - [X] Update `mints14` test. ## Questions; - N / A. ## Checklist; - [X] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2032
https://github.com/psi4/psi4/pull/2033:43,Availability,error,errors,43,"Fixes a bug reported by @hokru, where PSIO errors would result for large DFMP2 gradient computations. I forgot to rename a PSIO entry during #1923. . This bug wasn't any more serious because it would only trigger when a block-based algorithm requested multiple blocks. For DFMP2, this would be a large computation indeed. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2033
https://github.com/psi4/psi4/pull/2034:360,Energy Efficiency,ENERGY,ENERGY,360,"## Description; collection of small changes (see below). You can calculate the contribution of any delta correction using the db function:; ```; dcbs=[{""wfn"": ""hf"", ""basis"": ""cc-pvdz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pVDZ""}, {""wfn"": ""ccsd(t)"",""wfn_lo"":""ccsd"", ""basis"": ""minix""}]; db(cbs,'hbc6',cp='on',cbs_metadata=dcbs,subset='small',tabulate=['CBS DELTA1 TOTAL ENERGY']); ```. ## Features; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Delta correction `CBS {stage name} TOTAL ENERGY` variable from `cbs` function. E.g. `CBS DELTA1 TOTAL ENERGY`; - [x] removes a random `~`. Interferes with geometry optimizer print. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2034
https://github.com/psi4/psi4/pull/2034:527,Energy Efficiency,ENERGY,ENERGY,527,"## Description; collection of small changes (see below). You can calculate the contribution of any delta correction using the db function:; ```; dcbs=[{""wfn"": ""hf"", ""basis"": ""cc-pvdz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pVDZ""}, {""wfn"": ""ccsd(t)"",""wfn_lo"":""ccsd"", ""basis"": ""minix""}]; db(cbs,'hbc6',cp='on',cbs_metadata=dcbs,subset='small',tabulate=['CBS DELTA1 TOTAL ENERGY']); ```. ## Features; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Delta correction `CBS {stage name} TOTAL ENERGY` variable from `cbs` function. E.g. `CBS DELTA1 TOTAL ENERGY`; - [x] removes a random `~`. Interferes with geometry optimizer print. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2034
https://github.com/psi4/psi4/pull/2034:588,Energy Efficiency,ENERGY,ENERGY,588,"## Description; collection of small changes (see below). You can calculate the contribution of any delta correction using the db function:; ```; dcbs=[{""wfn"": ""hf"", ""basis"": ""cc-pvdz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pVDZ""}, {""wfn"": ""ccsd(t)"",""wfn_lo"":""ccsd"", ""basis"": ""minix""}]; db(cbs,'hbc6',cp='on',cbs_metadata=dcbs,subset='small',tabulate=['CBS DELTA1 TOTAL ENERGY']); ```. ## Features; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Delta correction `CBS {stage name} TOTAL ENERGY` variable from `cbs` function. E.g. `CBS DELTA1 TOTAL ENERGY`; - [x] removes a random `~`. Interferes with geometry optimizer print. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2034
https://github.com/psi4/psi4/pull/2034:535,Modifiability,variab,variable,535,"## Description; collection of small changes (see below). You can calculate the contribution of any delta correction using the db function:; ```; dcbs=[{""wfn"": ""hf"", ""basis"": ""cc-pvdz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pVDZ""}, {""wfn"": ""ccsd(t)"",""wfn_lo"":""ccsd"", ""basis"": ""minix""}]; db(cbs,'hbc6',cp='on',cbs_metadata=dcbs,subset='small',tabulate=['CBS DELTA1 TOTAL ENERGY']); ```. ## Features; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Delta correction `CBS {stage name} TOTAL ENERGY` variable from `cbs` function. E.g. `CBS DELTA1 TOTAL ENERGY`; - [x] removes a random `~`. Interferes with geometry optimizer print. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2034
https://github.com/psi4/psi4/pull/2034:650,Performance,optimiz,optimizer,650,"## Description; collection of small changes (see below). You can calculate the contribution of any delta correction using the db function:; ```; dcbs=[{""wfn"": ""hf"", ""basis"": ""cc-pvdz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pVDZ""}, {""wfn"": ""ccsd(t)"",""wfn_lo"":""ccsd"", ""basis"": ""minix""}]; db(cbs,'hbc6',cp='on',cbs_metadata=dcbs,subset='small',tabulate=['CBS DELTA1 TOTAL ENERGY']); ```. ## Features; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Delta correction `CBS {stage name} TOTAL ENERGY` variable from `cbs` function. E.g. `CBS DELTA1 TOTAL ENERGY`; - [x] removes a random `~`. Interferes with geometry optimizer print. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2034
https://github.com/psi4/psi4/pull/2034:687,Testability,Test,Tests,687,"## Description; collection of small changes (see below). You can calculate the contribution of any delta correction using the db function:; ```; dcbs=[{""wfn"": ""hf"", ""basis"": ""cc-pvdz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pVDZ""}, {""wfn"": ""ccsd(t)"",""wfn_lo"":""ccsd"", ""basis"": ""minix""}]; db(cbs,'hbc6',cp='on',cbs_metadata=dcbs,subset='small',tabulate=['CBS DELTA1 TOTAL ENERGY']); ```. ## Features; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Delta correction `CBS {stage name} TOTAL ENERGY` variable from `cbs` function. E.g. `CBS DELTA1 TOTAL ENERGY`; - [x] removes a random `~`. Interferes with geometry optimizer print. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2034
https://github.com/psi4/psi4/pull/2035:24,Deployability,update,updates,24,"## Description; This PR updates the MBIS documentation to match the state of the code. Missing logic to reshape the mbis multipoles was also added, which previous tests don't check for, but is necessary when running psi4's mbis through qcengine. ## Todos; - [x] Fixed docs; - [x] Fixed / cleaned up the handling of multipole matrix shapes. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2035
https://github.com/psi4/psi4/pull/2035:95,Testability,log,logic,95,"## Description; This PR updates the MBIS documentation to match the state of the code. Missing logic to reshape the mbis multipoles was also added, which previous tests don't check for, but is necessary when running psi4's mbis through qcengine. ## Todos; - [x] Fixed docs; - [x] Fixed / cleaned up the handling of multipole matrix shapes. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2035
https://github.com/psi4/psi4/pull/2035:163,Testability,test,tests,163,"## Description; This PR updates the MBIS documentation to match the state of the code. Missing logic to reshape the mbis multipoles was also added, which previous tests don't check for, but is necessary when running psi4's mbis through qcengine. ## Todos; - [x] Fixed docs; - [x] Fixed / cleaned up the handling of multipole matrix shapes. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2035
https://github.com/psi4/psi4/pull/2037:839,Availability,toler,tolerant,839,"## Description; Repercussions from trying to fix #1986 . I think this fixes #1939, fixes #1978, fixes #2011. ## Todos; - [x] standardize pytests on `@using(""<addon>"")` rather than `@using_<addon>`. addon detection is more runtime than compiletime; - [x] start a smoke tests suite of running through `psi4 --qcschema` to live alongside psithon and psiapi; - [x] finally fix the need for pe/pcm to manually set fix_com/fix_reorient. I have a strategy locally.; - [ ] expand `Mol._initial_cartesian` to other ways to construct a Mol; - [x] snsmp2 1.0.4; - [x] pybind11 2.6.1; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxsche",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2037
https://github.com/psi4/psi4/pull/2037:659,Deployability,patch,patched,659,"## Description; Repercussions from trying to fix #1986 . I think this fixes #1939, fixes #1978, fixes #2011. ## Todos; - [x] standardize pytests on `@using(""<addon>"")` rather than `@using_<addon>`. addon detection is more runtime than compiletime; - [x] start a smoke tests suite of running through `psi4 --qcschema` to live alongside psithon and psiapi; - [x] finally fix the need for pe/pcm to manually set fix_com/fix_reorient. I have a strategy locally.; - [ ] expand `Mol._initial_cartesian` to other ways to construct a Mol; - [x] snsmp2 1.0.4; - [x] pybind11 2.6.1; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxsche",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2037
https://github.com/psi4/psi4/pull/2037:1154,Modifiability,variab,variable,1154,"_<addon>`. addon detection is more runtime than compiletime; - [x] start a smoke tests suite of running through `psi4 --qcschema` to live alongside psithon and psiapi; - [x] finally fix the need for pe/pcm to manually set fix_com/fix_reorient. I have a strategy locally.; - [ ] expand `Mol._initial_cartesian` to other ways to construct a Mol; - [x] snsmp2 1.0.4; - [x] pybind11 2.6.1; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxscheurer CPPE: when active, this is getting the full c1/fix_com/fix_orient treatment, so I've removed all those lines from the tests. There's a new cppe mode test in test_addons_qcschema.py.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2037
https://github.com/psi4/psi4/pull/2037:204,Safety,detect,detection,204,"## Description; Repercussions from trying to fix #1986 . I think this fixes #1939, fixes #1978, fixes #2011. ## Todos; - [x] standardize pytests on `@using(""<addon>"")` rather than `@using_<addon>`. addon detection is more runtime than compiletime; - [x] start a smoke tests suite of running through `psi4 --qcschema` to live alongside psithon and psiapi; - [x] finally fix the need for pe/pcm to manually set fix_com/fix_reorient. I have a strategy locally.; - [ ] expand `Mol._initial_cartesian` to other ways to construct a Mol; - [x] snsmp2 1.0.4; - [x] pybind11 2.6.1; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxsche",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2037
https://github.com/psi4/psi4/pull/2037:268,Testability,test,tests,268,"## Description; Repercussions from trying to fix #1986 . I think this fixes #1939, fixes #1978, fixes #2011. ## Todos; - [x] standardize pytests on `@using(""<addon>"")` rather than `@using_<addon>`. addon detection is more runtime than compiletime; - [x] start a smoke tests suite of running through `psi4 --qcschema` to live alongside psithon and psiapi; - [x] finally fix the need for pe/pcm to manually set fix_com/fix_reorient. I have a strategy locally.; - [ ] expand `Mol._initial_cartesian` to other ways to construct a Mol; - [x] snsmp2 1.0.4; - [x] pybind11 2.6.1; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxsche",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2037
https://github.com/psi4/psi4/pull/2037:1810,Testability,test,test,1810,"; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxscheurer CPPE: when active, this is getting the full c1/fix_com/fix_orient treatment, so I've removed all those lines from the tests. There's a new cppe mode test in test_addons_qcschema.py. Since there isn't a mechanism for passing files through, I'm allowing the potfile keyword to be file name or contents. Any concerns?. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2037
https://github.com/psi4/psi4/pull/2037:2124,Testability,test,tests,2124,"; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxscheurer CPPE: when active, this is getting the full c1/fix_com/fix_orient treatment, so I've removed all those lines from the tests. There's a new cppe mode test in test_addons_qcschema.py. Since there isn't a mechanism for passing files through, I'm allowing the potfile keyword to be file name or contents. Any concerns?. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2037
https://github.com/psi4/psi4/pull/2037:2155,Testability,test,test,2155,"; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxscheurer CPPE: when active, this is getting the full c1/fix_com/fix_orient treatment, so I've removed all those lines from the tests. There's a new cppe mode test in test_addons_qcschema.py. Since there isn't a mechanism for passing files through, I'm allowing the potfile keyword to be file name or contents. Any concerns?. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2037
https://github.com/psi4/psi4/pull/2037:2342,Testability,Test,Tests,2342,"; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxscheurer CPPE: when active, this is getting the full c1/fix_com/fix_orient treatment, so I've removed all those lines from the tests. There's a new cppe mode test in test_addons_qcschema.py. Since there isn't a mechanism for passing files through, I'm allowing the potfile keyword to be file name or contents. Any concerns?. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2037
https://github.com/psi4/psi4/pull/2037:2416,Testability,test,tests,2416,"; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxscheurer CPPE: when active, this is getting the full c1/fix_com/fix_orient treatment, so I've removed all those lines from the tests. There's a new cppe mode test in test_addons_qcschema.py. Since there isn't a mechanism for passing files through, I'm allowing the potfile keyword to be file name or contents. Any concerns?. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2037
https://github.com/psi4/psi4/pull/2037:2507,Testability,test,tests,2507,"; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxscheurer CPPE: when active, this is getting the full c1/fix_com/fix_orient treatment, so I've removed all those lines from the tests. There's a new cppe mode test in test_addons_qcschema.py. Since there isn't a mechanism for passing files through, I'm allowing the potfile keyword to be file name or contents. Any concerns?. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2037
https://github.com/psi4/psi4/pull/2038:78,Testability,Test,Tests,78,## Description; <!--Adds clean-up recommended by LGTM-->. ## Checklist; - [ ] Tests added for any new features (no new features); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) (tests that run before changes also run after changes). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2038
https://github.com/psi4/psi4/pull/2038:170,Testability,test,tests,170,## Description; <!--Adds clean-up recommended by LGTM-->. ## Checklist; - [ ] Tests added for any new features (no new features); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) (tests that run before changes also run after changes). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2038
https://github.com/psi4/psi4/pull/2038:261,Testability,test,tests,261,## Description; <!--Adds clean-up recommended by LGTM-->. ## Checklist; - [ ] Tests added for any new features (no new features); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) (tests that run before changes also run after changes). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2038
https://github.com/psi4/psi4/pull/2038:269,Testability,test,tests,269,## Description; <!--Adds clean-up recommended by LGTM-->. ## Checklist; - [ ] Tests added for any new features (no new features); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) (tests that run before changes also run after changes). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2038
https://github.com/psi4/psi4/pull/2039:613,Deployability,Release,Release,613,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2039
https://github.com/psi4/psi4/pull/2039:133,Integrability,rout,routines,133,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2039
https://github.com/psi4/psi4/pull/2039:714,Integrability,rout,routines,714,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2039
https://github.com/psi4/psi4/pull/2039:578,Performance,optimiz,optimizations,578,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2039
https://github.com/psi4/psi4/pull/2039:648,Testability,test,tests,648,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2039
https://github.com/psi4/psi4/pull/2039:775,Testability,Test,Tests,775,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2039
https://github.com/psi4/psi4/pull/2039:849,Testability,test,tests,849,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2039
https://github.com/psi4/psi4/pull/2039:940,Testability,test,tests,940,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2039
https://github.com/psi4/psi4/pull/2040:313,Testability,Test,Tests,313,## Description; <!-- Adds DirectDFJK Functionality for cases where disk use is too inefficient. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] On-the-fly calculation of DF-ERI tensors for Fock builds; - [x] Works for RHF cases. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2040
https://github.com/psi4/psi4/pull/2040:387,Testability,test,tests,387,## Description; <!-- Adds DirectDFJK Functionality for cases where disk use is too inefficient. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] On-the-fly calculation of DF-ERI tensors for Fock builds; - [x] Works for RHF cases. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2040
https://github.com/psi4/psi4/pull/2040:478,Testability,test,tests,478,## Description; <!-- Adds DirectDFJK Functionality for cases where disk use is too inefficient. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] On-the-fly calculation of DF-ERI tensors for Fock builds; - [x] Works for RHF cases. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2040
https://github.com/psi4/psi4/issues/2041:338,Security,access,accessible,338,"Taken from the forum: http://forum.psicode.org/t/mbis-radial-moments/1990. ""Would it be possible to also compute/output the third radial moment of the atomic electron density, ie eq 24 from this paper?: https://pubs.acs.org/doi/10.1021/acs.jctc.6b00456. This would be really valuable for dispersion C6 coefficients, and should be readily accessible from the MBIS partitioned AIM densities."". @andyj10224 @zachglick thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2041
https://github.com/psi4/psi4/pull/2043:57,Integrability,depend,dependent,57,## Description; This PR adds functionality for frequency-dependent first hyperpolarizabilities using the CCSD quadratic response theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Implementation of left hand perturbed amplitudes.; - [ ] Implementation of quadratic response functions.; - [ ] Implementation of frequency-dependent first hyperpolarizabilities.; - [ ] Optimization and clean-up.; - [ ] Testing. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2043
https://github.com/psi4/psi4/pull/2043:384,Integrability,depend,dependent,384,## Description; This PR adds functionality for frequency-dependent first hyperpolarizabilities using the CCSD quadratic response theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Implementation of left hand perturbed amplitudes.; - [ ] Implementation of quadratic response functions.; - [ ] Implementation of frequency-dependent first hyperpolarizabilities.; - [ ] Optimization and clean-up.; - [ ] Testing. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2043
https://github.com/psi4/psi4/pull/2043:430,Performance,Optimiz,Optimization,430,## Description; This PR adds functionality for frequency-dependent first hyperpolarizabilities using the CCSD quadratic response theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Implementation of left hand perturbed amplitudes.; - [ ] Implementation of quadratic response functions.; - [ ] Implementation of frequency-dependent first hyperpolarizabilities.; - [ ] Optimization and clean-up.; - [ ] Testing. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2043
https://github.com/psi4/psi4/pull/2043:464,Testability,Test,Testing,464,## Description; This PR adds functionality for frequency-dependent first hyperpolarizabilities using the CCSD quadratic response theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Implementation of left hand perturbed amplitudes.; - [ ] Implementation of quadratic response functions.; - [ ] Implementation of frequency-dependent first hyperpolarizabilities.; - [ ] Optimization and clean-up.; - [ ] Testing. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2043
https://github.com/psi4/psi4/pull/2043:493,Testability,Test,Tests,493,## Description; This PR adds functionality for frequency-dependent first hyperpolarizabilities using the CCSD quadratic response theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Implementation of left hand perturbed amplitudes.; - [ ] Implementation of quadratic response functions.; - [ ] Implementation of frequency-dependent first hyperpolarizabilities.; - [ ] Optimization and clean-up.; - [ ] Testing. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2043
https://github.com/psi4/psi4/pull/2043:567,Testability,test,tests,567,## Description; This PR adds functionality for frequency-dependent first hyperpolarizabilities using the CCSD quadratic response theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Implementation of left hand perturbed amplitudes.; - [ ] Implementation of quadratic response functions.; - [ ] Implementation of frequency-dependent first hyperpolarizabilities.; - [ ] Optimization and clean-up.; - [ ] Testing. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2043
https://github.com/psi4/psi4/pull/2043:658,Testability,test,tests,658,## Description; This PR adds functionality for frequency-dependent first hyperpolarizabilities using the CCSD quadratic response theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Implementation of left hand perturbed amplitudes.; - [ ] Implementation of quadratic response functions.; - [ ] Implementation of frequency-dependent first hyperpolarizabilities.; - [ ] Optimization and clean-up.; - [ ] Testing. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2043
https://github.com/psi4/psi4/pull/2044:298,Testability,Test,Tests,298,## Description; Fixes a bug where a Becke grid is used instead of Treutler in case a Treutler grid was requested. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2044
https://github.com/psi4/psi4/pull/2044:372,Testability,test,tests,372,## Description; Fixes a bug where a Becke grid is used instead of Treutler in case a Treutler grid was requested. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2044
https://github.com/psi4/psi4/pull/2044:463,Testability,test,tests,463,## Description; Fixes a bug where a Becke grid is used instead of Treutler in case a Treutler grid was requested. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2044
https://github.com/psi4/psi4/pull/2045:356,Testability,Test,Tests,356,"## Description; The aim of the PR is to implement the parameter-free radial quadrature by Krack and Koster. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] ; - [ ] . ## Questions; - [ ] The cubature code is unintelligible, and needs to be restructured for clarity. See #2044 . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2045
https://github.com/psi4/psi4/pull/2045:430,Testability,test,tests,430,"## Description; The aim of the PR is to implement the parameter-free radial quadrature by Krack and Koster. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] ; - [ ] . ## Questions; - [ ] The cubature code is unintelligible, and needs to be restructured for clarity. See #2044 . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2045
https://github.com/psi4/psi4/pull/2045:521,Testability,test,tests,521,"## Description; The aim of the PR is to implement the parameter-free radial quadrature by Krack and Koster. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] ; - [ ] . ## Questions; - [ ] The cubature code is unintelligible, and needs to be restructured for clarity. See #2044 . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2045
https://github.com/psi4/psi4/issues/2046:191,Deployability,install,installed,191,"The addition of libint2 causes Psi4 to not build. Libint2 is trying to compile the hartree-fock++ test, which depends on Eigen3, which it is not finding for some reason even though I have it installed as a system package. Libint2 tests should be disabled in the Psi4 build, or the Eigen3 dependency added so that the build works even in the lack of a system package. (Note: libint2 is also suffering from the -march issue; the libint2 CMake files need to be updated.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2046
https://github.com/psi4/psi4/issues/2046:458,Deployability,update,updated,458,"The addition of libint2 causes Psi4 to not build. Libint2 is trying to compile the hartree-fock++ test, which depends on Eigen3, which it is not finding for some reason even though I have it installed as a system package. Libint2 tests should be disabled in the Psi4 build, or the Eigen3 dependency added so that the build works even in the lack of a system package. (Note: libint2 is also suffering from the -march issue; the libint2 CMake files need to be updated.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2046
https://github.com/psi4/psi4/issues/2046:110,Integrability,depend,depends,110,"The addition of libint2 causes Psi4 to not build. Libint2 is trying to compile the hartree-fock++ test, which depends on Eigen3, which it is not finding for some reason even though I have it installed as a system package. Libint2 tests should be disabled in the Psi4 build, or the Eigen3 dependency added so that the build works even in the lack of a system package. (Note: libint2 is also suffering from the -march issue; the libint2 CMake files need to be updated.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2046
https://github.com/psi4/psi4/issues/2046:288,Integrability,depend,dependency,288,"The addition of libint2 causes Psi4 to not build. Libint2 is trying to compile the hartree-fock++ test, which depends on Eigen3, which it is not finding for some reason even though I have it installed as a system package. Libint2 tests should be disabled in the Psi4 build, or the Eigen3 dependency added so that the build works even in the lack of a system package. (Note: libint2 is also suffering from the -march issue; the libint2 CMake files need to be updated.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2046
https://github.com/psi4/psi4/issues/2046:98,Testability,test,test,98,"The addition of libint2 causes Psi4 to not build. Libint2 is trying to compile the hartree-fock++ test, which depends on Eigen3, which it is not finding for some reason even though I have it installed as a system package. Libint2 tests should be disabled in the Psi4 build, or the Eigen3 dependency added so that the build works even in the lack of a system package. (Note: libint2 is also suffering from the -march issue; the libint2 CMake files need to be updated.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2046
https://github.com/psi4/psi4/issues/2046:230,Testability,test,tests,230,"The addition of libint2 causes Psi4 to not build. Libint2 is trying to compile the hartree-fock++ test, which depends on Eigen3, which it is not finding for some reason even though I have it installed as a system package. Libint2 tests should be disabled in the Psi4 build, or the Eigen3 dependency added so that the build works even in the lack of a system package. (Note: libint2 is also suffering from the -march issue; the libint2 CMake files need to be updated.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2046
https://github.com/psi4/psi4/pull/2047:98,Safety,avoid,avoid,98,## Description; Adds reference files for the FCHK pytest.; Changing geometry of test molecules to avoid degenerate orbitals. ## Checklist; - [x] fchk pytest works on a different machine. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2047
https://github.com/psi4/psi4/pull/2047:80,Testability,test,test,80,## Description; Adds reference files for the FCHK pytest.; Changing geometry of test molecules to avoid degenerate orbitals. ## Checklist; - [x] fchk pytest works on a different machine. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2047
https://github.com/psi4/psi4/pull/2048:952,Availability,failure,failure,952,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2048
https://github.com/psi4/psi4/pull/2048:760,Deployability,install,install,760,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2048
https://github.com/psi4/psi4/pull/2048:845,Deployability,release,released,845,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2048
https://github.com/psi4/psi4/pull/2048:787,Modifiability,plugin,plugins,787,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2048
https://github.com/psi4/psi4/pull/2048:1348,Modifiability,plugin,plugin,1348,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2048
https://github.com/psi4/psi4/pull/2048:97,Safety,detect,detection,97,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2048
https://github.com/psi4/psi4/pull/2048:552,Safety,detect,detection,552,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2048
https://github.com/psi4/psi4/pull/2048:1355,Testability,test,tests,1355,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2048
https://github.com/psi4/psi4/pull/2049:40,Modifiability,refactor,refactor,40,"## Description; Part of the DF Gradient refactor. It's become clear that Rob's implementation of the DF-MP2 gradients can't be generalized without incurring a performance hit, so the scope of the project now is to generalize what `dfocc` does out of `dfocc` so other modules (like `dct`) can use it. The current step of that is to make the procedure independent of `dfocc` globals. While I was at it, I got rid of unneeded headers and did some other minor code cleanup. ## Todos; - [x] Some `dfocc` cleanup. ## Checklist; - [x] `ctest -L df$` and `test_standard_suite.py` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2049
https://github.com/psi4/psi4/pull/2049:159,Performance,perform,performance,159,"## Description; Part of the DF Gradient refactor. It's become clear that Rob's implementation of the DF-MP2 gradients can't be generalized without incurring a performance hit, so the scope of the project now is to generalize what `dfocc` does out of `dfocc` so other modules (like `dct`) can use it. The current step of that is to make the procedure independent of `dfocc` globals. While I was at it, I got rid of unneeded headers and did some other minor code cleanup. ## Todos; - [x] Some `dfocc` cleanup. ## Checklist; - [x] `ctest -L df$` and `test_standard_suite.py` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2049
https://github.com/psi4/psi4/pull/2049:62,Usability,clear,clear,62,"## Description; Part of the DF Gradient refactor. It's become clear that Rob's implementation of the DF-MP2 gradients can't be generalized without incurring a performance hit, so the scope of the project now is to generalize what `dfocc` does out of `dfocc` so other modules (like `dct`) can use it. The current step of that is to make the procedure independent of `dfocc` globals. While I was at it, I got rid of unneeded headers and did some other minor code cleanup. ## Todos; - [x] Some `dfocc` cleanup. ## Checklist; - [x] `ctest -L df$` and `test_standard_suite.py` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2049
https://github.com/psi4/psi4/pull/2051:85,Testability,Test,Tests,85,"## Description; Remove spaces when reading options, fixes #2004. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2051
https://github.com/psi4/psi4/pull/2051:159,Testability,test,tests,159,"## Description; Remove spaces when reading options, fixes #2004. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2051
https://github.com/psi4/psi4/pull/2051:250,Testability,test,tests,250,"## Description; Remove spaces when reading options, fixes #2004. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2051
https://github.com/psi4/psi4/issues/2052:104,Performance,perform,performed,104,"When multiplying three matrices `A`, `B`, and `C` together in Psi4, the matrix multiplication is always performed as `((AB)C)`:; https://github.com/psi4/psi4/blob/2f085df4cab054b8b01c3e5c0bc1e1270c2e7bf2/psi4/src/psi4/libmints/matrix.cc#L3404-L3409; In some cases, this might result in more overall work than the equivalent `(A(BC))`. We should probably check for this, and choose the cheaper ordering.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2052
https://github.com/psi4/psi4/pull/2053:123,Energy Efficiency,efficient,efficient,123,"## Description; linalg::triplet currently does matrix multiplication in the same order (AB)C. Sometimes, A(BC) may be more efficient, per observation of @zachglick . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More efficient linalg::triplet call. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2053
https://github.com/psi4/psi4/pull/2053:278,Energy Efficiency,efficient,efficient,278,"## Description; linalg::triplet currently does matrix multiplication in the same order (AB)C. Sometimes, A(BC) may be more efficient, per observation of @zachglick . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More efficient linalg::triplet call. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2053
https://github.com/psi4/psi4/pull/2053:330,Testability,Test,Tests,330,"## Description; linalg::triplet currently does matrix multiplication in the same order (AB)C. Sometimes, A(BC) may be more efficient, per observation of @zachglick . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More efficient linalg::triplet call. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2053
https://github.com/psi4/psi4/pull/2053:404,Testability,test,tests,404,"## Description; linalg::triplet currently does matrix multiplication in the same order (AB)C. Sometimes, A(BC) may be more efficient, per observation of @zachglick . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More efficient linalg::triplet call. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2053
https://github.com/psi4/psi4/pull/2053:495,Testability,test,tests,495,"## Description; linalg::triplet currently does matrix multiplication in the same order (AB)C. Sometimes, A(BC) may be more efficient, per observation of @zachglick . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More efficient linalg::triplet call. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2053
https://github.com/psi4/psi4/issues/2054:366,Integrability,rout,routines,366,"The fitted version of the SAP guess we described in https://aip.scitation.org/doi/10.1063/5.0004046 might be useful for Psi4. Unlike the original version of SAP that I have already implemented in Psi4, this version of the guess doesn't need quadrature at all. Instead, the guess for the electron screening part of the Hamiltonian is formed with density-fitting type routines as; ```; Vsap(u,v) = \sum_A (uv|A); ```; where the As are auxiliary functions. The guess Hamiltonian is then obtained as `Hsap = Hcore + Vsap`, and can be diagonalized to get guess orbitals and orbital energies. The fitted guess is extremely rapid to form, since each nucleus has just one, tightly contracted s-type auxiliary basis function. The implementation should be rather straightforward; the main stumbling blocks are just . - the need to pass in the new type of fitting basis set from Python to the C++ routines and; - the need to translate the auxiliary basis set's contraction coefficients to the proper format (coefficients `c[i].c` get transformed by the exponents `c[i].z` by `c[i].c *= pow(c[i].z/M_PI,1.5)`). Since the implementation will require changes throughout, I'd need some help from the core developers to do this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2054
https://github.com/psi4/psi4/issues/2054:673,Integrability,contract,contracted,673,"The fitted version of the SAP guess we described in https://aip.scitation.org/doi/10.1063/5.0004046 might be useful for Psi4. Unlike the original version of SAP that I have already implemented in Psi4, this version of the guess doesn't need quadrature at all. Instead, the guess for the electron screening part of the Hamiltonian is formed with density-fitting type routines as; ```; Vsap(u,v) = \sum_A (uv|A); ```; where the As are auxiliary functions. The guess Hamiltonian is then obtained as `Hsap = Hcore + Vsap`, and can be diagonalized to get guess orbitals and orbital energies. The fitted guess is extremely rapid to form, since each nucleus has just one, tightly contracted s-type auxiliary basis function. The implementation should be rather straightforward; the main stumbling blocks are just . - the need to pass in the new type of fitting basis set from Python to the C++ routines and; - the need to translate the auxiliary basis set's contraction coefficients to the proper format (coefficients `c[i].c` get transformed by the exponents `c[i].z` by `c[i].c *= pow(c[i].z/M_PI,1.5)`). Since the implementation will require changes throughout, I'd need some help from the core developers to do this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2054
https://github.com/psi4/psi4/issues/2054:886,Integrability,rout,routines,886,"The fitted version of the SAP guess we described in https://aip.scitation.org/doi/10.1063/5.0004046 might be useful for Psi4. Unlike the original version of SAP that I have already implemented in Psi4, this version of the guess doesn't need quadrature at all. Instead, the guess for the electron screening part of the Hamiltonian is formed with density-fitting type routines as; ```; Vsap(u,v) = \sum_A (uv|A); ```; where the As are auxiliary functions. The guess Hamiltonian is then obtained as `Hsap = Hcore + Vsap`, and can be diagonalized to get guess orbitals and orbital energies. The fitted guess is extremely rapid to form, since each nucleus has just one, tightly contracted s-type auxiliary basis function. The implementation should be rather straightforward; the main stumbling blocks are just . - the need to pass in the new type of fitting basis set from Python to the C++ routines and; - the need to translate the auxiliary basis set's contraction coefficients to the proper format (coefficients `c[i].c` get transformed by the exponents `c[i].z` by `c[i].c *= pow(c[i].z/M_PI,1.5)`). Since the implementation will require changes throughout, I'd need some help from the core developers to do this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2054
https://github.com/psi4/psi4/issues/2054:950,Integrability,contract,contraction,950,"The fitted version of the SAP guess we described in https://aip.scitation.org/doi/10.1063/5.0004046 might be useful for Psi4. Unlike the original version of SAP that I have already implemented in Psi4, this version of the guess doesn't need quadrature at all. Instead, the guess for the electron screening part of the Hamiltonian is formed with density-fitting type routines as; ```; Vsap(u,v) = \sum_A (uv|A); ```; where the As are auxiliary functions. The guess Hamiltonian is then obtained as `Hsap = Hcore + Vsap`, and can be diagonalized to get guess orbitals and orbital energies. The fitted guess is extremely rapid to form, since each nucleus has just one, tightly contracted s-type auxiliary basis function. The implementation should be rather straightforward; the main stumbling blocks are just . - the need to pass in the new type of fitting basis set from Python to the C++ routines and; - the need to translate the auxiliary basis set's contraction coefficients to the proper format (coefficients `c[i].c` get transformed by the exponents `c[i].z` by `c[i].c *= pow(c[i].z/M_PI,1.5)`). Since the implementation will require changes throughout, I'd need some help from the core developers to do this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2054
https://github.com/psi4/psi4/issues/2055:646,Usability,guid,guide,646,"A post-DDD project. `normal_modes_write` is currently an option in the `findif` module. Back when all of Psi's hessians were finite difference, this was reasonable. But now, that Psi has RHF/UHF analytic hessians and is getting DFT analytic hessian technology, not all normal mode computations go through finite difference. This option should be moved from the `findif` ""module."". Instigating this issue is a recent [forum issue](http://forum.psicode.org/t/output-molden-normal-modes-file-in-jupyter-notebook/2006/6) where a user thought `normal_modes_write` should be accepted as a keyword argument to `driver.py:frequencies`. I agree. This may guide ideas on where we should move this option _to_.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2055
https://github.com/psi4/psi4/pull/2056:38,Energy Efficiency,charge,charge,38,"## Description; Uses MBIS (and future charge partitioning schemes) atomic electron densities to calculate expected atomic volumes (or radial moments). Useful for computing quantities like Hirshfeld ratios. Note: <r^n> possible, with <r^3> being the default. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Accurately calculates Expected Atomic Volumes; - [ ] Calculates an arbitrary <r^n> (Expected Atomic Hyper-Volumes, if <r^3> passes, maybe that won't be necessary, as a quick code check would work). ## Questions; - [x] @jeffschriber Is there an external way to compare the output for my code to some kind of reference to ensure that the answers I'm getting are valid or at least reasonable?. ## Checklist; - [x] Preliminary tests passed, MBIS code undamaged (mbis-1, 2, 3, 4, and 5); - [x] More tests comparing the validity of Expected Volumes. ## Status; - [x] Further Information Needed; - [x] Ready for review; - [ ] Ready for merge. closes #2041",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2056
https://github.com/psi4/psi4/pull/2056:788,Testability,test,tests,788,"## Description; Uses MBIS (and future charge partitioning schemes) atomic electron densities to calculate expected atomic volumes (or radial moments). Useful for computing quantities like Hirshfeld ratios. Note: <r^n> possible, with <r^3> being the default. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Accurately calculates Expected Atomic Volumes; - [ ] Calculates an arbitrary <r^n> (Expected Atomic Hyper-Volumes, if <r^3> passes, maybe that won't be necessary, as a quick code check would work). ## Questions; - [x] @jeffschriber Is there an external way to compare the output for my code to some kind of reference to ensure that the answers I'm getting are valid or at least reasonable?. ## Checklist; - [x] Preliminary tests passed, MBIS code undamaged (mbis-1, 2, 3, 4, and 5); - [x] More tests comparing the validity of Expected Volumes. ## Status; - [x] Further Information Needed; - [x] Ready for review; - [ ] Ready for merge. closes #2041",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2056
https://github.com/psi4/psi4/pull/2056:859,Testability,test,tests,859,"## Description; Uses MBIS (and future charge partitioning schemes) atomic electron densities to calculate expected atomic volumes (or radial moments). Useful for computing quantities like Hirshfeld ratios. Note: <r^n> possible, with <r^3> being the default. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Accurately calculates Expected Atomic Volumes; - [ ] Calculates an arbitrary <r^n> (Expected Atomic Hyper-Volumes, if <r^3> passes, maybe that won't be necessary, as a quick code check would work). ## Questions; - [x] @jeffschriber Is there an external way to compare the output for my code to some kind of reference to ensure that the answers I'm getting are valid or at least reasonable?. ## Checklist; - [x] Preliminary tests passed, MBIS code undamaged (mbis-1, 2, 3, 4, and 5); - [x] More tests comparing the validity of Expected Volumes. ## Status; - [x] Further Information Needed; - [x] Ready for review; - [ ] Ready for merge. closes #2041",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2056
https://github.com/psi4/psi4/issues/2057:94,Deployability,update,update,94,"We'll be wrapping up libxc 5.1.0 in December, which means it could be pulled in Psi4 1.4. The update is strongly recommended, since it solves a huge list of issues in 5.0.0, see https://gitlab.com/libxc/libxc/-/issues/186, as well as introduces new functionals that users may be interested in, especially r2SCAN by Furness et al. The update should be very easy, since 5.1.0 will be API compatible with 5.0.0.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2057
https://github.com/psi4/psi4/issues/2057:334,Deployability,update,update,334,"We'll be wrapping up libxc 5.1.0 in December, which means it could be pulled in Psi4 1.4. The update is strongly recommended, since it solves a huge list of issues in 5.0.0, see https://gitlab.com/libxc/libxc/-/issues/186, as well as introduces new functionals that users may be interested in, especially r2SCAN by Furness et al. The update should be very easy, since 5.1.0 will be API compatible with 5.0.0.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2057
https://github.com/psi4/psi4/issues/2057:9,Integrability,wrap,wrapping,9,"We'll be wrapping up libxc 5.1.0 in December, which means it could be pulled in Psi4 1.4. The update is strongly recommended, since it solves a huge list of issues in 5.0.0, see https://gitlab.com/libxc/libxc/-/issues/186, as well as introduces new functionals that users may be interested in, especially r2SCAN by Furness et al. The update should be very easy, since 5.1.0 will be API compatible with 5.0.0.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2057
https://github.com/psi4/psi4/pull/2058:59,Testability,Test,Tests,59,## Description; as it says on the tin. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2058
https://github.com/psi4/psi4/pull/2058:133,Testability,test,tests,133,## Description; as it says on the tin. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2058
https://github.com/psi4/psi4/pull/2058:224,Testability,test,tests,224,## Description; as it says on the tin. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2058
https://github.com/psi4/psi4/pull/2059:103,Deployability,update,update,103,"## Description; Clearly what's wrong with 2020 is that Psi4 hasn't acknowledged it. Let's fix that and update the samples, too. Don't bother reading the changes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2059
https://github.com/psi4/psi4/pull/2059:16,Usability,Clear,Clearly,16,"## Description; Clearly what's wrong with 2020 is that Psi4 hasn't acknowledged it. Let's fix that and update the samples, too. Don't bother reading the changes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2059
https://github.com/psi4/psi4/issues/2060:80,Deployability,install,installed,80,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2060
https://github.com/psi4/psi4/issues/2060:131,Deployability,install,installed,131,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2060
https://github.com/psi4/psi4/issues/2060:342,Deployability,configurat,configuration,342,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2060
https://github.com/psi4/psi4/issues/2060:403,Deployability,install,installed,403,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2060
https://github.com/psi4/psi4/issues/2060:508,Deployability,install,installed,508,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2060
https://github.com/psi4/psi4/issues/2060:739,Deployability,configurat,configuration,739,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2060
https://github.com/psi4/psi4/issues/2060:454,Integrability,depend,dependencies,454,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2060
https://github.com/psi4/psi4/issues/2060:342,Modifiability,config,configuration,342,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2060
https://github.com/psi4/psi4/issues/2060:739,Modifiability,config,configuration,739,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2060
https://github.com/psi4/psi4/issues/2060:270,Safety,abort,aborts,270,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2060
https://github.com/psi4/psi4/issues/2060:417,Safety,abort,abort,417,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2060
https://github.com/psi4/psi4/issues/2060:704,Safety,abort,abort,704,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2060
https://github.com/psi4/psi4/pull/2062:395,Safety,Sanity Check,Sanity Check,395,"## Description; Implements density screening into the direct SCF Algorithm, no incremental Fock build currently, but incremental Fock build will be a future addition. Reference paper: https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111. ## Notable Features; - [x] Improve the efficiency (less time) of the direct SCF Algorithm without compromising accuracy. ## Checklist; - [x] Passes Sanity Check for Water Molecule, will include a Google Sheets link as I include more tests; - [x] Passes Tests Using The Benzene, Naphthalene, etc... series; - [x] Code works with multithreading; - [x] Code works with reaction energies, interaction energies, conformation energies; - [x] Code works on open-shelled systems; - [x] Code tested on a diverse set of molecules. ## Status; - [x] Rough Draft Phase; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2062
https://github.com/psi4/psi4/pull/2062:480,Testability,test,tests,480,"## Description; Implements density screening into the direct SCF Algorithm, no incremental Fock build currently, but incremental Fock build will be a future addition. Reference paper: https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111. ## Notable Features; - [x] Improve the efficiency (less time) of the direct SCF Algorithm without compromising accuracy. ## Checklist; - [x] Passes Sanity Check for Water Molecule, will include a Google Sheets link as I include more tests; - [x] Passes Tests Using The Benzene, Naphthalene, etc... series; - [x] Code works with multithreading; - [x] Code works with reaction energies, interaction energies, conformation energies; - [x] Code works on open-shelled systems; - [x] Code tested on a diverse set of molecules. ## Status; - [x] Rough Draft Phase; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2062
https://github.com/psi4/psi4/pull/2062:500,Testability,Test,Tests,500,"## Description; Implements density screening into the direct SCF Algorithm, no incremental Fock build currently, but incremental Fock build will be a future addition. Reference paper: https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111. ## Notable Features; - [x] Improve the efficiency (less time) of the direct SCF Algorithm without compromising accuracy. ## Checklist; - [x] Passes Sanity Check for Water Molecule, will include a Google Sheets link as I include more tests; - [x] Passes Tests Using The Benzene, Naphthalene, etc... series; - [x] Code works with multithreading; - [x] Code works with reaction energies, interaction energies, conformation energies; - [x] Code works on open-shelled systems; - [x] Code tested on a diverse set of molecules. ## Status; - [x] Rough Draft Phase; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2062
https://github.com/psi4/psi4/pull/2062:730,Testability,test,tested,730,"## Description; Implements density screening into the direct SCF Algorithm, no incremental Fock build currently, but incremental Fock build will be a future addition. Reference paper: https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111. ## Notable Features; - [x] Improve the efficiency (less time) of the direct SCF Algorithm without compromising accuracy. ## Checklist; - [x] Passes Sanity Check for Water Molecule, will include a Google Sheets link as I include more tests; - [x] Passes Tests Using The Benzene, Naphthalene, etc... series; - [x] Code works with multithreading; - [x] Code works with reaction energies, interaction energies, conformation energies; - [x] Code works on open-shelled systems; - [x] Code tested on a diverse set of molecules. ## Status; - [x] Rough Draft Phase; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2062
https://github.com/psi4/psi4/pull/2063:37,Availability,error,errors,37,"## Description; getting intermittant errors < 3.e-9, so relaxing fchk tolerances a bit. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2063
https://github.com/psi4/psi4/pull/2063:70,Availability,toler,tolerances,70,"## Description; getting intermittant errors < 3.e-9, so relaxing fchk tolerances a bit. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2063
https://github.com/psi4/psi4/pull/2063:108,Testability,Test,Tests,108,"## Description; getting intermittant errors < 3.e-9, so relaxing fchk tolerances a bit. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2063
https://github.com/psi4/psi4/pull/2063:182,Testability,test,tests,182,"## Description; getting intermittant errors < 3.e-9, so relaxing fchk tolerances a bit. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2063
https://github.com/psi4/psi4/pull/2063:273,Testability,test,tests,273,"## Description; getting intermittant errors < 3.e-9, so relaxing fchk tolerances a bit. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2063
https://github.com/psi4/psi4/pull/2064:57,Security,expose,expose,57,## Description; Add set_Lagrangian in Wavefunction. Also expose `C_DGEQP3` function. . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L quick` all passed. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2064
https://github.com/psi4/psi4/pull/2064:141,Testability,test,tests,141,## Description; Add set_Lagrangian in Wavefunction. Also expose `C_DGEQP3` function. . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L quick` all passed. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2064
https://github.com/psi4/psi4/pull/2064:232,Testability,test,tests,232,## Description; Add set_Lagrangian in Wavefunction. Also expose `C_DGEQP3` function. . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L quick` all passed. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2064
https://github.com/psi4/psi4/pull/2065:26,Integrability,interface,interface,26,"## Todos; - [x] bump RESP interface from 0.8 to 1.0 (this will fix CI); - [x] add psixas (https://github.com/Masterluke87/psixas) ""testing"". output is a spectrum file, so hard to test beyond ""runs"". ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2065
https://github.com/psi4/psi4/pull/2065:131,Testability,test,testing,131,"## Todos; - [x] bump RESP interface from 0.8 to 1.0 (this will fix CI); - [x] add psixas (https://github.com/Masterluke87/psixas) ""testing"". output is a spectrum file, so hard to test beyond ""runs"". ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2065
https://github.com/psi4/psi4/pull/2065:179,Testability,test,test,179,"## Todos; - [x] bump RESP interface from 0.8 to 1.0 (this will fix CI); - [x] add psixas (https://github.com/Masterluke87/psixas) ""testing"". output is a spectrum file, so hard to test beyond ""runs"". ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2065
https://github.com/psi4/psi4/pull/2066:77,Availability,error,errors,77,"## Description; This PR follows the change of PR #2064. To avoid compilation errors for any downstream packages, `Lagrangian()` and `X()` in the `Wavefunction` class have been marked deprecated instead of removing them. Future code should use lowercase `lagrangian()` and `set_lagrangian()` to obtain and set the orbital Lagrangian matrix (both C++ and Python), respectively. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2066
https://github.com/psi4/psi4/pull/2066:92,Availability,down,downstream,92,"## Description; This PR follows the change of PR #2064. To avoid compilation errors for any downstream packages, `Lagrangian()` and `X()` in the `Wavefunction` class have been marked deprecated instead of removing them. Future code should use lowercase `lagrangian()` and `set_lagrangian()` to obtain and set the orbital Lagrangian matrix (both C++ and Python), respectively. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2066
https://github.com/psi4/psi4/pull/2066:59,Safety,avoid,avoid,59,"## Description; This PR follows the change of PR #2064. To avoid compilation errors for any downstream packages, `Lagrangian()` and `X()` in the `Wavefunction` class have been marked deprecated instead of removing them. Future code should use lowercase `lagrangian()` and `set_lagrangian()` to obtain and set the orbital Lagrangian matrix (both C++ and Python), respectively. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2066
https://github.com/psi4/psi4/pull/2066:430,Testability,test,tests,430,"## Description; This PR follows the change of PR #2064. To avoid compilation errors for any downstream packages, `Lagrangian()` and `X()` in the `Wavefunction` class have been marked deprecated instead of removing them. Future code should use lowercase `lagrangian()` and `set_lagrangian()` to obtain and set the orbital Lagrangian matrix (both C++ and Python), respectively. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2066
https://github.com/psi4/psi4/pull/2066:521,Testability,test,tests,521,"## Description; This PR follows the change of PR #2064. To avoid compilation errors for any downstream packages, `Lagrangian()` and `X()` in the `Wavefunction` class have been marked deprecated instead of removing them. Future code should use lowercase `lagrangian()` and `set_lagrangian()` to obtain and set the orbital Lagrangian matrix (both C++ and Python), respectively. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2066
https://github.com/psi4/psi4/pull/2067:164,Availability,ping,ping,164,"## Description; This PR eliminates 600+ duplicate lines of code from `dfocc`, as well as two functions. This cleans up a near-future PR of mine. Obligatory @loriab ping. ## Todos; - [x] `dfocc` repeats itself a little bit less. ## Checklist; - [x] `ctest -L df$` and `test_standard_suite.py` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2067
https://github.com/psi4/psi4/pull/2068:30,Deployability,upgrade,upgrade,30,"## Description; During the L2 upgrade, I missed the function that handles diffuse external multipoles. In constructing a test case to avoid a repeat, I found some normalization problems (and a lack of gradients) which will be addressed in a followup PR. H/T to @g-andres and his group for pointing the problem out. ## Todos; - [ ] Fixes energies with external diffuse potentials. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2068
https://github.com/psi4/psi4/pull/2068:134,Safety,avoid,avoid,134,"## Description; During the L2 upgrade, I missed the function that handles diffuse external multipoles. In constructing a test case to avoid a repeat, I found some normalization problems (and a lack of gradients) which will be addressed in a followup PR. H/T to @g-andres and his group for pointing the problem out. ## Todos; - [ ] Fixes energies with external diffuse potentials. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2068
https://github.com/psi4/psi4/pull/2068:121,Testability,test,test,121,"## Description; During the L2 upgrade, I missed the function that handles diffuse external multipoles. In constructing a test case to avoid a repeat, I found some normalization problems (and a lack of gradients) which will be addressed in a followup PR. H/T to @g-andres and his group for pointing the problem out. ## Todos; - [ ] Fixes energies with external diffuse potentials. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2068
https://github.com/psi4/psi4/pull/2069:200,Integrability,interface,interface,200,"## Description; In trying to make a good test case for #2068, I found some normalization problems that are fixed in this PR. Also, the analytic gradients were not implemented, has been addressed. The interface used here is terrible, but will eventually be merged with #1720 to give a better user experience; this test case will be helpful in making sure everything works correctly during that development. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a new feature to allow arbitrary order, arbitrary exponent multipoles to be defined.; - [x] Implement analytic gradients for the above.; - [x] New test case to make sure it all works and to demonstrate the current (terrible and to be replaced) syntax. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2069
https://github.com/psi4/psi4/pull/2069:41,Testability,test,test,41,"## Description; In trying to make a good test case for #2068, I found some normalization problems that are fixed in this PR. Also, the analytic gradients were not implemented, has been addressed. The interface used here is terrible, but will eventually be merged with #1720 to give a better user experience; this test case will be helpful in making sure everything works correctly during that development. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a new feature to allow arbitrary order, arbitrary exponent multipoles to be defined.; - [x] Implement analytic gradients for the above.; - [x] New test case to make sure it all works and to demonstrate the current (terrible and to be replaced) syntax. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2069
https://github.com/psi4/psi4/pull/2069:313,Testability,test,test,313,"## Description; In trying to make a good test case for #2068, I found some normalization problems that are fixed in this PR. Also, the analytic gradients were not implemented, has been addressed. The interface used here is terrible, but will eventually be merged with #1720 to give a better user experience; this test case will be helpful in making sure everything works correctly during that development. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a new feature to allow arbitrary order, arbitrary exponent multipoles to be defined.; - [x] Implement analytic gradients for the above.; - [x] New test case to make sure it all works and to demonstrate the current (terrible and to be replaced) syntax. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2069
https://github.com/psi4/psi4/pull/2069:664,Testability,test,test,664,"## Description; In trying to make a good test case for #2068, I found some normalization problems that are fixed in this PR. Also, the analytic gradients were not implemented, has been addressed. The interface used here is terrible, but will eventually be merged with #1720 to give a better user experience; this test case will be helpful in making sure everything works correctly during that development. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a new feature to allow arbitrary order, arbitrary exponent multipoles to be defined.; - [x] Implement analytic gradients for the above.; - [x] New test case to make sure it all works and to demonstrate the current (terrible and to be replaced) syntax. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2069
https://github.com/psi4/psi4/pull/2069:789,Testability,Test,Tests,789,"## Description; In trying to make a good test case for #2068, I found some normalization problems that are fixed in this PR. Also, the analytic gradients were not implemented, has been addressed. The interface used here is terrible, but will eventually be merged with #1720 to give a better user experience; this test case will be helpful in making sure everything works correctly during that development. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a new feature to allow arbitrary order, arbitrary exponent multipoles to be defined.; - [x] Implement analytic gradients for the above.; - [x] New test case to make sure it all works and to demonstrate the current (terrible and to be replaced) syntax. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2069
https://github.com/psi4/psi4/pull/2069:863,Testability,test,tests,863,"## Description; In trying to make a good test case for #2068, I found some normalization problems that are fixed in this PR. Also, the analytic gradients were not implemented, has been addressed. The interface used here is terrible, but will eventually be merged with #1720 to give a better user experience; this test case will be helpful in making sure everything works correctly during that development. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a new feature to allow arbitrary order, arbitrary exponent multipoles to be defined.; - [x] Implement analytic gradients for the above.; - [x] New test case to make sure it all works and to demonstrate the current (terrible and to be replaced) syntax. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2069
https://github.com/psi4/psi4/pull/2069:954,Testability,test,tests,954,"## Description; In trying to make a good test case for #2068, I found some normalization problems that are fixed in this PR. Also, the analytic gradients were not implemented, has been addressed. The interface used here is terrible, but will eventually be merged with #1720 to give a better user experience; this test case will be helpful in making sure everything works correctly during that development. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a new feature to allow arbitrary order, arbitrary exponent multipoles to be defined.; - [x] Implement analytic gradients for the above.; - [x] New test case to make sure it all works and to demonstrate the current (terrible and to be replaced) syntax. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2069
https://github.com/psi4/psi4/pull/2069:291,Usability,user experience,user experience,291,"## Description; In trying to make a good test case for #2068, I found some normalization problems that are fixed in this PR. Also, the analytic gradients were not implemented, has been addressed. The interface used here is terrible, but will eventually be merged with #1720 to give a better user experience; this test case will be helpful in making sure everything works correctly during that development. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a new feature to allow arbitrary order, arbitrary exponent multipoles to be defined.; - [x] Implement analytic gradients for the above.; - [x] New test case to make sure it all works and to demonstrate the current (terrible and to be replaced) syntax. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2069
https://github.com/psi4/psi4/pull/2070:125,Testability,Test,Tests,125,## Description; can't have internal `.X()`s or the string deprcation warning triggers and mints8 fails. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2070
https://github.com/psi4/psi4/pull/2070:200,Testability,test,tests,200,## Description; can't have internal `.X()`s or the string deprcation warning triggers and mints8 fails. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2070
https://github.com/psi4/psi4/pull/2070:291,Testability,test,tests,291,## Description; can't have internal `.X()`s or the string deprcation warning triggers and mints8 fails. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2070
https://github.com/psi4/psi4/pull/2072:352,Deployability,update,update,352,"## Description; <!-- Provide a brief description of the PR's purpose here. --> ; Fixes a couple of minor issues for a research project of mine. See todos. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Within the OCC module, updating the opdm to the wavefunction; - [x] Exposed a function to update the num_frozen_uocc global. ## Checklist. - [x] quick tests, occ module tests, standard suite tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2072
https://github.com/psi4/psi4/pull/2072:330,Security,Expose,Exposed,330,"## Description; <!-- Provide a brief description of the PR's purpose here. --> ; Fixes a couple of minor issues for a research project of mine. See todos. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Within the OCC module, updating the opdm to the wavefunction; - [x] Exposed a function to update the num_frozen_uocc global. ## Checklist. - [x] quick tests, occ module tests, standard suite tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2072
https://github.com/psi4/psi4/pull/2072:413,Testability,test,tests,413,"## Description; <!-- Provide a brief description of the PR's purpose here. --> ; Fixes a couple of minor issues for a research project of mine. See todos. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Within the OCC module, updating the opdm to the wavefunction; - [x] Exposed a function to update the num_frozen_uocc global. ## Checklist. - [x] quick tests, occ module tests, standard suite tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2072
https://github.com/psi4/psi4/pull/2072:431,Testability,test,tests,431,"## Description; <!-- Provide a brief description of the PR's purpose here. --> ; Fixes a couple of minor issues for a research project of mine. See todos. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Within the OCC module, updating the opdm to the wavefunction; - [x] Exposed a function to update the num_frozen_uocc global. ## Checklist. - [x] quick tests, occ module tests, standard suite tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2072
https://github.com/psi4/psi4/pull/2072:453,Testability,test,tests,453,"## Description; <!-- Provide a brief description of the PR's purpose here. --> ; Fixes a couple of minor issues for a research project of mine. See todos. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Within the OCC module, updating the opdm to the wavefunction; - [x] Exposed a function to update the num_frozen_uocc global. ## Checklist. - [x] quick tests, occ module tests, standard suite tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2072
https://github.com/psi4/psi4/pull/2073:310,Testability,Test,Tests,310,## Description; This PR enables easier single-shot calculations in Psi4 by short-circuiting the SCF solver if `maxiter == 0`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2073
https://github.com/psi4/psi4/pull/2073:384,Testability,test,tests,384,## Description; This PR enables easier single-shot calculations in Psi4 by short-circuiting the SCF solver if `maxiter == 0`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2073
https://github.com/psi4/psi4/pull/2073:475,Testability,test,tests,475,## Description; This PR enables easier single-shot calculations in Psi4 by short-circuiting the SCF solver if `maxiter == 0`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2073
https://github.com/psi4/psi4/pull/2076:75,Energy Efficiency,charge,charges,75,## Description; Adds the option to solve the potential integrals for point charges interacting with the density and the related Vpcm operator numerically.; -> anthracene HF/6-31+G*: factor 3 faster and parallel. (Makes PCM no longer the bottleneck). delta E(total)=0.11 mEh. _This is work in progress and messy in some places. But general comments welcome. Specific benchmark requests are encouraged._. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] spherical and cartesian basis; - [ ] Feature2. ## Questions; - [ ] where should this live? ; - [ ] . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2076
https://github.com/psi4/psi4/pull/2076:237,Performance,bottleneck,bottleneck,237,## Description; Adds the option to solve the potential integrals for point charges interacting with the density and the related Vpcm operator numerically.; -> anthracene HF/6-31+G*: factor 3 faster and parallel. (Makes PCM no longer the bottleneck). delta E(total)=0.11 mEh. _This is work in progress and messy in some places. But general comments welcome. Specific benchmark requests are encouraged._. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] spherical and cartesian basis; - [ ] Feature2. ## Questions; - [ ] where should this live? ; - [ ] . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2076
https://github.com/psi4/psi4/pull/2076:366,Testability,benchmark,benchmark,366,## Description; Adds the option to solve the potential integrals for point charges interacting with the density and the related Vpcm operator numerically.; -> anthracene HF/6-31+G*: factor 3 faster and parallel. (Makes PCM no longer the bottleneck). delta E(total)=0.11 mEh. _This is work in progress and messy in some places. But general comments welcome. Specific benchmark requests are encouraged._. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] spherical and cartesian basis; - [ ] Feature2. ## Questions; - [ ] where should this live? ; - [ ] . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2076
https://github.com/psi4/psi4/pull/2076:631,Testability,Test,Tests,631,## Description; Adds the option to solve the potential integrals for point charges interacting with the density and the related Vpcm operator numerically.; -> anthracene HF/6-31+G*: factor 3 faster and parallel. (Makes PCM no longer the bottleneck). delta E(total)=0.11 mEh. _This is work in progress and messy in some places. But general comments welcome. Specific benchmark requests are encouraged._. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] spherical and cartesian basis; - [ ] Feature2. ## Questions; - [ ] where should this live? ; - [ ] . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2076
https://github.com/psi4/psi4/pull/2076:705,Testability,test,tests,705,## Description; Adds the option to solve the potential integrals for point charges interacting with the density and the related Vpcm operator numerically.; -> anthracene HF/6-31+G*: factor 3 faster and parallel. (Makes PCM no longer the bottleneck). delta E(total)=0.11 mEh. _This is work in progress and messy in some places. But general comments welcome. Specific benchmark requests are encouraged._. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] spherical and cartesian basis; - [ ] Feature2. ## Questions; - [ ] where should this live? ; - [ ] . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2076
https://github.com/psi4/psi4/pull/2076:796,Testability,test,tests,796,## Description; Adds the option to solve the potential integrals for point charges interacting with the density and the related Vpcm operator numerically.; -> anthracene HF/6-31+G*: factor 3 faster and parallel. (Makes PCM no longer the bottleneck). delta E(total)=0.11 mEh. _This is work in progress and messy in some places. But general comments welcome. Specific benchmark requests are encouraged._. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] spherical and cartesian basis; - [ ] Feature2. ## Questions; - [ ] where should this live? ; - [ ] . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2076
https://github.com/psi4/psi4/pull/2077:202,Testability,test,tests,202,## Description; Corrects a minor bug in the coupled cluster ROA code. . ## Todos; - [X] Fixes ROA code in `ccresponse` so that `cc52` passes for code compiled with `debug`. ## Checklist; - [X] All `cc` tests run now. ## Status; - [X] Ready for review; - [X] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2077
https://github.com/psi4/psi4/pull/2078:117,Modifiability,variab,variables,117,"## Description; This PR removes ~300 lines worth of duplicate code in `dct`'s density-fitting, as well as some class variables that had no business being class variables. This is in preparation for an upcoming PR to fix a longstanding bug in the density-fitted code. ## Todos; - [x] Code cleaned. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2078
https://github.com/psi4/psi4/pull/2078:160,Modifiability,variab,variables,160,"## Description; This PR removes ~300 lines worth of duplicate code in `dct`'s density-fitting, as well as some class variables that had no business being class variables. This is in preparation for an upcoming PR to fix a longstanding bug in the density-fitted code. ## Todos; - [x] Code cleaned. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2078
https://github.com/psi4/psi4/pull/2078:321,Testability,test,tests,321,"## Description; This PR removes ~300 lines worth of duplicate code in `dct`'s density-fitting, as well as some class variables that had no business being class variables. This is in preparation for an upcoming PR to fix a longstanding bug in the density-fitted code. ## Todos; - [x] Code cleaned. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2078
https://github.com/psi4/psi4/pull/2079:186,Availability,ping,pings,186,"## Description; This PR moves the `dfocc` technology for density-fitted gradients out of `dfocc` and into the `libmints` module for use by other modules. Obligatory @jturney and @loriab pings. **Q:** Can other modules use this code?; **A:** I can personally promise that `dct` will be using this soon, and Forte can use this for its DF-CASSCF gradients. If you want to use this code, just send me a message! However, the other modules in Psi that currently support DF gradients shouldn't use this. The range-separated gradients mean that SCF can't use this, and DFT gradients are varied enough anyways that we shouldn't try to generalize them. Rob's DFMP2 implementation separates out the Coulomb and Exchange contributions from the derivative. The Coulomb terms allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2079
https://github.com/psi4/psi4/pull/2079:399,Integrability,message,message,399,"## Description; This PR moves the `dfocc` technology for density-fitted gradients out of `dfocc` and into the `libmints` module for use by other modules. Obligatory @jturney and @loriab pings. **Q:** Can other modules use this code?; **A:** I can personally promise that `dct` will be using this soon, and Forte can use this for its DF-CASSCF gradients. If you want to use this code, just send me a message! However, the other modules in Psi that currently support DF gradients shouldn't use this. The range-separated gradients mean that SCF can't use this, and DFT gradients are varied enough anyways that we shouldn't try to generalize them. Rob's DFMP2 implementation separates out the Coulomb and Exchange contributions from the derivative. The Coulomb terms allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2079
https://github.com/psi4/psi4/pull/2079:1717,Integrability,interface,interface,1717,"allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` approach of including back-transforming the 3-Center density intermediate in the main loop. In that case, the calling code doesn't even need to back-transform the density. If this change works, we can eliminate some code duplication in `dfmp2`, for an added bonus. In this case, all `dfocc` would need to do is stash intermediates it already computes in a place where my code can find them and then delete its back-transformation code. **Q:** What's this about adding a new block algorithm?; **A:** For large systems, you may not be able to assume that the three-center intermediate (naux*nmo^2) fits in memory. To remedy this, `dfmp2` uses a block algorithm, where it reads only ""blocks"" of this intermediate at a time. The old DF gradient code was based on Rob'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2079
https://github.com/psi4/psi4/pull/2079:1861,Integrability,interface,interface,1861," `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` approach of including back-transforming the 3-Center density intermediate in the main loop. In that case, the calling code doesn't even need to back-transform the density. If this change works, we can eliminate some code duplication in `dfmp2`, for an added bonus. In this case, all `dfocc` would need to do is stash intermediates it already computes in a place where my code can find them and then delete its back-transformation code. **Q:** What's this about adding a new block algorithm?; **A:** For large systems, you may not be able to assume that the three-center intermediate (naux*nmo^2) fits in memory. To remedy this, `dfmp2` uses a block algorithm, where it reads only ""blocks"" of this intermediate at a time. The old DF gradient code was based on Rob's `dfmp2` but in simplifying from Rob's code, had a block algorithm that used unnecessarily many blocks and incurred no memory s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2079
https://github.com/psi4/psi4/pull/2079:771,Performance,perform,performance,771,"## Description; This PR moves the `dfocc` technology for density-fitted gradients out of `dfocc` and into the `libmints` module for use by other modules. Obligatory @jturney and @loriab pings. **Q:** Can other modules use this code?; **A:** I can personally promise that `dct` will be using this soon, and Forte can use this for its DF-CASSCF gradients. If you want to use this code, just send me a message! However, the other modules in Psi that currently support DF gradients shouldn't use this. The range-separated gradients mean that SCF can't use this, and DFT gradients are varied enough anyways that we shouldn't try to generalize them. Rob's DFMP2 implementation separates out the Coulomb and Exchange contributions from the derivative. The Coulomb terms allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2079
https://github.com/psi4/psi4/pull/2079:783,Performance,optimiz,optimization,783,"## Description; This PR moves the `dfocc` technology for density-fitted gradients out of `dfocc` and into the `libmints` module for use by other modules. Obligatory @jturney and @loriab pings. **Q:** Can other modules use this code?; **A:** I can personally promise that `dct` will be using this soon, and Forte can use this for its DF-CASSCF gradients. If you want to use this code, just send me a message! However, the other modules in Psi that currently support DF gradients shouldn't use this. The range-separated gradients mean that SCF can't use this, and DFT gradients are varied enough anyways that we shouldn't try to generalize them. Rob's DFMP2 implementation separates out the Coulomb and Exchange contributions from the derivative. The Coulomb terms allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2079
https://github.com/psi4/psi4/pull/2079:1451,Usability,Simpl,Simplifying,1451,"an't use this, and DFT gradients are varied enough anyways that we shouldn't try to generalize them. Rob's DFMP2 implementation separates out the Coulomb and Exchange contributions from the derivative. The Coulomb terms allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` approach of including back-transforming the 3-Center density intermediate in the main loop. In that case, the calling code doesn't even need to back-transform the density. If this change works, we can eliminate some code duplication in `dfmp2`, for an added bonus. In this case, all `dfocc` would need to do is stash intermediates it already computes in a place where my code can find them and then delete its back-transformation code. **Q:** What's this about adding a new block algorithm?; **A:** For large systems, you may not be able to as",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2079
https://github.com/psi4/psi4/pull/2079:2780,Usability,simpl,simplifying,2780,"an imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` approach of including back-transforming the 3-Center density intermediate in the main loop. In that case, the calling code doesn't even need to back-transform the density. If this change works, we can eliminate some code duplication in `dfmp2`, for an added bonus. In this case, all `dfocc` would need to do is stash intermediates it already computes in a place where my code can find them and then delete its back-transformation code. **Q:** What's this about adding a new block algorithm?; **A:** For large systems, you may not be able to assume that the three-center intermediate (naux*nmo^2) fits in memory. To remedy this, `dfmp2` uses a block algorithm, where it reads only ""blocks"" of this intermediate at a time. The old DF gradient code was based on Rob's `dfmp2` but in simplifying from Rob's code, had a block algorithm that used unnecessarily many blocks and incurred no memory savings compared to an in-core algorithm. The new code has a `dfmp2`-style out-of-core algorithm. ## Todos; - [x] Migrate DF gradients; - [x] Add block algorithm for the 3-Center term . ## Checklist; - [x] `ctest -L quick` and `ctest -L df[ocm]` both pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2079
https://github.com/psi4/psi4/issues/2080:420,Availability,error,error,420,"With the following input file, I noticed that there's an uncaught C++ exception that crashes the program hard; ```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2080
https://github.com/psi4/psi4/issues/2080:576,Availability,Error,Error,576,"With the following input file, I noticed that there's an uncaught C++ exception that crashes the program hard; ```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2080
https://github.com/psi4/psi4/issues/2080:647,Availability,Error,Error,647,"With the following input file, I noticed that there's an uncaught C++ exception that crashes the program hard; ```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2080
https://github.com/psi4/psi4/issues/2080:836,Availability,error,error,836,"With the following input file, I noticed that there's an uncaught C++ exception that crashes the program hard; ```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2080
https://github.com/psi4/psi4/issues/2080:5037,Availability,error,error,5037,"Unknown Unknown; python3.7 000056310E0CB107 _PyFunction_FastC Unknown Unknown; python3.7 000056310E1334B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19E29D PyRun_StringFlags Unknown Unknown; python3.7 000056310E142EB4 Unknown Unknown Unknown; python3.7 000056310E0CB789 _PyMethodDef_RawF Unknown Unknown; python3.7 000056310E0CBA31 _PyCFunction_Fast Unknown Unknown; python3.7 000056310E137795 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19D331 PyRun_FileExFlags Unknown Unknown; python3.7 000056310E19D523 PyRun_SimpleFileE Unknown Unknown; python3.7 000056310E19E655 Unknown Unknown Unknown; python3.7 000056310E19E77C _Py_UnixMain Unknown Unknown; libc-2.26.so 00007F895E88906A __libc_start_main Unknown Unknown; python3.7 000056310E142FF0 Unknown Unknown Unknown; Aborted; ```; ; </details>. I first actually tried to reproduce this using the very convenient MyBinder link on the front page in python, rather than with a psithon input file, but unfortunately because it's an uncaught C++ exception that doesn't actually get translated into a python exception, it just kills the jupyter kernel and no error message is reported to the jupyter client running in the browser. Appologies in advance if this is a duplicate bug report. The fact that the grid is missing is okay; that's #827 IIUC. But if possible, -- especially for usage of the Python interface rather than the command line program -- it would might be better if these exceptions were translated into python rather than such violent crashes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2080
https://github.com/psi4/psi4/issues/2080:385,Energy Efficiency,energy,energy,385,"With the following input file, I noticed that there's an uncaught C++ exception that crashes the program hard; ```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2080
https://github.com/psi4/psi4/issues/2080:876,Integrability,Rout,Routine,876,"With the following input file, I noticed that there's an uncaught C++ exception that crashes the program hard; ```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2080
https://github.com/psi4/psi4/issues/2080:5043,Integrability,message,message,5043,"Unknown Unknown; python3.7 000056310E0CB107 _PyFunction_FastC Unknown Unknown; python3.7 000056310E1334B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19E29D PyRun_StringFlags Unknown Unknown; python3.7 000056310E142EB4 Unknown Unknown Unknown; python3.7 000056310E0CB789 _PyMethodDef_RawF Unknown Unknown; python3.7 000056310E0CBA31 _PyCFunction_Fast Unknown Unknown; python3.7 000056310E137795 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19D331 PyRun_FileExFlags Unknown Unknown; python3.7 000056310E19D523 PyRun_SimpleFileE Unknown Unknown; python3.7 000056310E19E655 Unknown Unknown Unknown; python3.7 000056310E19E77C _Py_UnixMain Unknown Unknown; libc-2.26.so 00007F895E88906A __libc_start_main Unknown Unknown; python3.7 000056310E142FF0 Unknown Unknown Unknown; Aborted; ```; ; </details>. I first actually tried to reproduce this using the very convenient MyBinder link on the front page in python, rather than with a psithon input file, but unfortunately because it's an uncaught C++ exception that doesn't actually get translated into a python exception, it just kills the jupyter kernel and no error message is reported to the jupyter client running in the browser. Appologies in advance if this is a duplicate bug report. The fact that the grid is missing is okay; that's #827 IIUC. But if possible, -- especially for usage of the Python interface rather than the command line program -- it would might be better if these exceptions were translated into python rather than such violent crashes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2080
https://github.com/psi4/psi4/issues/2080:5282,Integrability,interface,interface,5282,"Unknown Unknown; python3.7 000056310E0CB107 _PyFunction_FastC Unknown Unknown; python3.7 000056310E1334B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19E29D PyRun_StringFlags Unknown Unknown; python3.7 000056310E142EB4 Unknown Unknown Unknown; python3.7 000056310E0CB789 _PyMethodDef_RawF Unknown Unknown; python3.7 000056310E0CBA31 _PyCFunction_Fast Unknown Unknown; python3.7 000056310E137795 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19D331 PyRun_FileExFlags Unknown Unknown; python3.7 000056310E19D523 PyRun_SimpleFileE Unknown Unknown; python3.7 000056310E19E655 Unknown Unknown Unknown; python3.7 000056310E19E77C _Py_UnixMain Unknown Unknown; libc-2.26.so 00007F895E88906A __libc_start_main Unknown Unknown; python3.7 000056310E142FF0 Unknown Unknown Unknown; Aborted; ```; ; </details>. I first actually tried to reproduce this using the very convenient MyBinder link on the front page in python, rather than with a psithon input file, but unfortunately because it's an uncaught C++ exception that doesn't actually get translated into a python exception, it just kills the jupyter kernel and no error message is reported to the jupyter client running in the browser. Appologies in advance if this is a duplicate bug report. The fact that the grid is missing is okay; that's #827 IIUC. But if possible, -- especially for usage of the Python interface rather than the command line program -- it would might be better if these exceptions were translated into python rather than such violent crashes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2080
https://github.com/psi4/psi4/issues/2080:848,Safety,Abort,Abort,848,"With the following input file, I noticed that there's an uncaught C++ exception that crashes the program hard; ```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2080
https://github.com/psi4/psi4/issues/2080:1106,Safety,abort,abort,1106,"```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m- 00007F8955E6A8F0 _ZN3psi5VBase10in Unknown Unknown; core.cpython-37m- 00007F8955E6A209 Unknown Unknown Unkno",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2080
https://github.com/psi4/psi4/issues/2080:4701,Safety,Abort,Aborted,4701,"Unknown Unknown; python3.7 000056310E0CB107 _PyFunction_FastC Unknown Unknown; python3.7 000056310E1334B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19E29D PyRun_StringFlags Unknown Unknown; python3.7 000056310E142EB4 Unknown Unknown Unknown; python3.7 000056310E0CB789 _PyMethodDef_RawF Unknown Unknown; python3.7 000056310E0CBA31 _PyCFunction_Fast Unknown Unknown; python3.7 000056310E137795 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19D331 PyRun_FileExFlags Unknown Unknown; python3.7 000056310E19D523 PyRun_SimpleFileE Unknown Unknown; python3.7 000056310E19E655 Unknown Unknown Unknown; python3.7 000056310E19E77C _Py_UnixMain Unknown Unknown; libc-2.26.so 00007F895E88906A __libc_start_main Unknown Unknown; python3.7 000056310E142FF0 Unknown Unknown Unknown; Aborted; ```; ; </details>. I first actually tried to reproduce this using the very convenient MyBinder link on the front page in python, rather than with a psithon input file, but unfortunately because it's an uncaught C++ exception that doesn't actually get translated into a python exception, it just kills the jupyter kernel and no error message is reported to the jupyter client running in the browser. Appologies in advance if this is a duplicate bug report. The fact that the grid is missing is okay; that's #827 IIUC. But if possible, -- especially for usage of the Python interface rather than the command line program -- it would might be better if these exceptions were translated into python rather than such violent crashes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2080
https://github.com/psi4/psi4/pull/2081:405,Availability,avail,available,405,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2081
https://github.com/psi4/psi4/pull/2081:243,Deployability,release,release,243,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2081
https://github.com/psi4/psi4/pull/2081:497,Energy Efficiency,Adapt,Adapt,497,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2081
https://github.com/psi4/psi4/pull/2081:106,Integrability,rout,routines,106,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2081
https://github.com/psi4/psi4/pull/2081:497,Modifiability,Adapt,Adapt,497,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2081
https://github.com/psi4/psi4/pull/2081:435,Security,access,access,435,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2081
https://github.com/psi4/psi4/pull/2081:213,Testability,test,tests,213,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2081
https://github.com/psi4/psi4/pull/2081:568,Testability,Test,Tests,568,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2081
https://github.com/psi4/psi4/pull/2081:642,Testability,test,tests,642,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2081
https://github.com/psi4/psi4/pull/2081:733,Testability,test,tests,733,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2081
https://github.com/psi4/psi4/pull/2081:747,Testability,Test,Test,747,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2081
https://github.com/psi4/psi4/pull/2082:30,Availability,error,errors,30,"## Description; It looks like errors like #2080 happen when `throw` called from within threaded code in C++. From non-threaded code, Pybind11 catches them and turns them into nicely behaved `RuntimeError`s but from threaded, it just segfaults. This PR averts a few, but there could be far more throughout codebase. closes #2080 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cleans up namespace markings in libfock. also adds `namespace psi` into a formerly anonymous namespace; - [x] pre-clears SG0 and SG1 atoms before entering the threaded grid build proper. the non-SG0 and SG1 block had some throws, too, but I couldn't trigger them. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2082
https://github.com/psi4/psi4/pull/2082:721,Testability,Test,Tests,721,"## Description; It looks like errors like #2080 happen when `throw` called from within threaded code in C++. From non-threaded code, Pybind11 catches them and turns them into nicely behaved `RuntimeError`s but from threaded, it just segfaults. This PR averts a few, but there could be far more throughout codebase. closes #2080 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cleans up namespace markings in libfock. also adds `namespace psi` into a formerly anonymous namespace; - [x] pre-clears SG0 and SG1 atoms before entering the threaded grid build proper. the non-SG0 and SG1 block had some throws, too, but I couldn't trigger them. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2082
https://github.com/psi4/psi4/pull/2082:795,Testability,test,tests,795,"## Description; It looks like errors like #2080 happen when `throw` called from within threaded code in C++. From non-threaded code, Pybind11 catches them and turns them into nicely behaved `RuntimeError`s but from threaded, it just segfaults. This PR averts a few, but there could be far more throughout codebase. closes #2080 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cleans up namespace markings in libfock. also adds `namespace psi` into a formerly anonymous namespace; - [x] pre-clears SG0 and SG1 atoms before entering the threaded grid build proper. the non-SG0 and SG1 block had some throws, too, but I couldn't trigger them. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2082
https://github.com/psi4/psi4/pull/2082:886,Testability,test,tests,886,"## Description; It looks like errors like #2080 happen when `throw` called from within threaded code in C++. From non-threaded code, Pybind11 catches them and turns them into nicely behaved `RuntimeError`s but from threaded, it just segfaults. This PR averts a few, but there could be far more throughout codebase. closes #2080 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cleans up namespace markings in libfock. also adds `namespace psi` into a formerly anonymous namespace; - [x] pre-clears SG0 and SG1 atoms before entering the threaded grid build proper. the non-SG0 and SG1 block had some throws, too, but I couldn't trigger them. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2082
https://github.com/psi4/psi4/pull/2082:551,Usability,clear,clears,551,"## Description; It looks like errors like #2080 happen when `throw` called from within threaded code in C++. From non-threaded code, Pybind11 catches them and turns them into nicely behaved `RuntimeError`s but from threaded, it just segfaults. This PR averts a few, but there could be far more throughout codebase. closes #2080 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] cleans up namespace markings in libfock. also adds `namespace psi` into a formerly anonymous namespace; - [x] pre-clears SG0 and SG1 atoms before entering the threaded grid build proper. the non-SG0 and SG1 block had some throws, too, but I couldn't trigger them. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2082
https://github.com/psi4/psi4/pull/2083:75,Availability,avail,available,75,"## Description. Fixes special case of traceback printing where only lineno available is from `exec(content)`, which is useless. This fixes #1920 . We don't get Jonathon's nice `-->` offending line printing, but at least we don't get a new error. I've tried it on `print(""asdf"")` and some more common mistakes. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-py39/objdir39/stage/bin/psi4"", line 337, in <module>; exec(content). File ""<string>"", line 26; print ""asdf""; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""asdf"")?. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------!; ! !; ! Missing parentheses in call to 'print'. Did you mean print(""asdf"")? !; ! !; !----------------------------------------------------------------------!; ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2083
https://github.com/psi4/psi4/pull/2083:239,Availability,error,error,239,"## Description. Fixes special case of traceback printing where only lineno available is from `exec(content)`, which is useless. This fixes #1920 . We don't get Jonathon's nice `-->` offending line printing, but at least we don't get a new error. I've tried it on `print(""asdf"")` and some more common mistakes. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-py39/objdir39/stage/bin/psi4"", line 337, in <module>; exec(content). File ""<string>"", line 26; print ""asdf""; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""asdf"")?. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------!; ! !; ! Missing parentheses in call to 'print'. Did you mean print(""asdf"")? !; ! !; !----------------------------------------------------------------------!; ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2083
https://github.com/psi4/psi4/issues/2084:207,Availability,error,error,207,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2084
https://github.com/psi4/psi4/issues/2084:217,Availability,Error,Error,217,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2084
https://github.com/psi4/psi4/issues/2084:240,Availability,error,error,240,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2084
https://github.com/psi4/psi4/issues/2084:2,Deployability,install,installed,2,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2084
https://github.com/psi4/psi4/issues/2084:59,Deployability,install,installer,59,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2084
https://github.com/psi4/psi4/issues/2084:280,Integrability,Rout,Routine,280,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2084
https://github.com/psi4/psi4/issues/2084:252,Safety,Abort,Abort,252,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2084
https://github.com/psi4/psi4/issues/2084:510,Safety,abort,abort,510,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2084
https://github.com/psi4/psi4/issues/2084:2267,Safety,Abort,Aborted,2267,Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A9523 PyRun_SimpleFileE Unknown Unknown; python3.7 000055CE518AA655 Unknown Unknown Unknown; python3.7 000055CE518AA77C _Py_UnixMain Unknown Unknown; libc-2.27.so 00007F14B6F52BF7 __libc_start_main Unknown Unknown; python3.7 000055CE5184EFF0 Unknown Unknown Unknown; Aborted (core dumped); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2084
https://github.com/psi4/psi4/pull/2085:116,Deployability,toggle,toggle,116,"## Description; Cleanup EOM CC3 code a bit. ## Todos; - [x] Catchup the code with psifiles, etc., so that EOM_DEBUG toggle can be used; - [x] Change restart behavior in EOM CC3 computations to avoid odd bug. ## Checklist; - [x] No additional tests should be needed.; - [x] Tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2085
https://github.com/psi4/psi4/pull/2085:193,Safety,avoid,avoid,193,"## Description; Cleanup EOM CC3 code a bit. ## Todos; - [x] Catchup the code with psifiles, etc., so that EOM_DEBUG toggle can be used; - [x] Change restart behavior in EOM CC3 computations to avoid odd bug. ## Checklist; - [x] No additional tests should be needed.; - [x] Tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2085
https://github.com/psi4/psi4/pull/2085:242,Testability,test,tests,242,"## Description; Cleanup EOM CC3 code a bit. ## Todos; - [x] Catchup the code with psifiles, etc., so that EOM_DEBUG toggle can be used; - [x] Change restart behavior in EOM CC3 computations to avoid odd bug. ## Checklist; - [x] No additional tests should be needed.; - [x] Tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2085
https://github.com/psi4/psi4/pull/2085:273,Testability,Test,Tests,273,"## Description; Cleanup EOM CC3 code a bit. ## Todos; - [x] Catchup the code with psifiles, etc., so that EOM_DEBUG toggle can be used; - [x] Change restart behavior in EOM CC3 computations to avoid odd bug. ## Checklist; - [x] No additional tests should be needed.; - [x] Tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2085
https://github.com/psi4/psi4/issues/2087:25,Integrability,Interface,Interface,25,"The code samples on the [Interface to NumPy page of the documentation](https://psicode.org/psi4manual/master/numpy.html) do not currently run. A forum report says that at the least, `psi4.Matrix` needs to be replaced with `psi4.core.Matrix`. Somebody should check that all the code on that page actually runs, and that it's accessible to non-experts. I've had to link a couple forum users to that page lately. This is a great project for a new developer who wants to learn the fundamentals of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2087
https://github.com/psi4/psi4/issues/2087:324,Security,access,accessible,324,"The code samples on the [Interface to NumPy page of the documentation](https://psicode.org/psi4manual/master/numpy.html) do not currently run. A forum report says that at the least, `psi4.Matrix` needs to be replaced with `psi4.core.Matrix`. Somebody should check that all the code on that page actually runs, and that it's accessible to non-experts. I've had to link a couple forum users to that page lately. This is a great project for a new developer who wants to learn the fundamentals of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2087
https://github.com/psi4/psi4/issues/2087:467,Usability,learn,learn,467,"The code samples on the [Interface to NumPy page of the documentation](https://psicode.org/psi4manual/master/numpy.html) do not currently run. A forum report says that at the least, `psi4.Matrix` needs to be replaced with `psi4.core.Matrix`. Somebody should check that all the code on that page actually runs, and that it's accessible to non-experts. I've had to link a couple forum users to that page lately. This is a great project for a new developer who wants to learn the fundamentals of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2087
https://github.com/psi4/psi4/pull/2088:92,Availability,ping,ping,92,"## Description; Exactly what it says in the title. New `libmints` functions mean a @jturney ping, and new functions messing with integrals mean an @andysim ping. Also, a positive LoC PR. Sad. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Metric derivatives and derivative of the 3-center integrals are now available to Python. ## Checklist; - [x] I've tested that P4N DF-OMP2 gradients using these new functions match `dfocc` gradients to 6 decimal places, but that isn't suitable for the test suite. I'm open to suggestions on tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2088
https://github.com/psi4/psi4/pull/2088:156,Availability,ping,ping,156,"## Description; Exactly what it says in the title. New `libmints` functions mean a @jturney ping, and new functions messing with integrals mean an @andysim ping. Also, a positive LoC PR. Sad. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Metric derivatives and derivative of the 3-center integrals are now available to Python. ## Checklist; - [x] I've tested that P4N DF-OMP2 gradients using these new functions match `dfocc` gradients to 6 decimal places, but that isn't suitable for the test suite. I'm open to suggestions on tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2088
https://github.com/psi4/psi4/pull/2088:367,Availability,avail,available,367,"## Description; Exactly what it says in the title. New `libmints` functions mean a @jturney ping, and new functions messing with integrals mean an @andysim ping. Also, a positive LoC PR. Sad. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Metric derivatives and derivative of the 3-center integrals are now available to Python. ## Checklist; - [x] I've tested that P4N DF-OMP2 gradients using these new functions match `dfocc` gradients to 6 decimal places, but that isn't suitable for the test suite. I'm open to suggestions on tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2088
https://github.com/psi4/psi4/pull/2088:413,Testability,test,tested,413,"## Description; Exactly what it says in the title. New `libmints` functions mean a @jturney ping, and new functions messing with integrals mean an @andysim ping. Also, a positive LoC PR. Sad. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Metric derivatives and derivative of the 3-center integrals are now available to Python. ## Checklist; - [x] I've tested that P4N DF-OMP2 gradients using these new functions match `dfocc` gradients to 6 decimal places, but that isn't suitable for the test suite. I'm open to suggestions on tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2088
https://github.com/psi4/psi4/pull/2088:550,Testability,test,test,550,"## Description; Exactly what it says in the title. New `libmints` functions mean a @jturney ping, and new functions messing with integrals mean an @andysim ping. Also, a positive LoC PR. Sad. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Metric derivatives and derivative of the 3-center integrals are now available to Python. ## Checklist; - [x] I've tested that P4N DF-OMP2 gradients using these new functions match `dfocc` gradients to 6 decimal places, but that isn't suitable for the test suite. I'm open to suggestions on tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2088
https://github.com/psi4/psi4/pull/2088:589,Testability,test,tests,589,"## Description; Exactly what it says in the title. New `libmints` functions mean a @jturney ping, and new functions messing with integrals mean an @andysim ping. Also, a positive LoC PR. Sad. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Metric derivatives and derivative of the 3-center integrals are now available to Python. ## Checklist; - [x] I've tested that P4N DF-OMP2 gradients using these new functions match `dfocc` gradients to 6 decimal places, but that isn't suitable for the test suite. I'm open to suggestions on tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2088
https://github.com/psi4/psi4/pull/2089:72,Deployability,Update,Updated,72,"## Description; Address issue #2087. Specifically:. On `numpy.rst`:; 1) Updated Numpy quickstart guide link; 2) Updated Psi4Numpy Repo link; 3) Updated psi4.{Matrix, Vector, Dimension} -> psi4.core.{Matrix, Vector, Dimension}; 4) Added link to Psi4's Symmetry quick guide. On `numpy_helper.py`:; 1) Updated docstring example to `psi4.core.Matrix`. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ]. ## Questions; - [ ] Section ""Array to Matrix"" and ""Matrix to Array"" print and run the docstring. For ""Matrix to Array"" the example can be run with no problem. But ""Matrix to Array"" can only be run by its own class. Should this example be updated as well? e.g. replace both examples of; https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L99 with:. ```; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data); ```; My concern is that the example would not be calling the function directly. What would be the best way to proceed?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2089
https://github.com/psi4/psi4/pull/2089:112,Deployability,Update,Updated,112,"## Description; Address issue #2087. Specifically:. On `numpy.rst`:; 1) Updated Numpy quickstart guide link; 2) Updated Psi4Numpy Repo link; 3) Updated psi4.{Matrix, Vector, Dimension} -> psi4.core.{Matrix, Vector, Dimension}; 4) Added link to Psi4's Symmetry quick guide. On `numpy_helper.py`:; 1) Updated docstring example to `psi4.core.Matrix`. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ]. ## Questions; - [ ] Section ""Array to Matrix"" and ""Matrix to Array"" print and run the docstring. For ""Matrix to Array"" the example can be run with no problem. But ""Matrix to Array"" can only be run by its own class. Should this example be updated as well? e.g. replace both examples of; https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L99 with:. ```; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data); ```; My concern is that the example would not be calling the function directly. What would be the best way to proceed?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2089
https://github.com/psi4/psi4/pull/2089:144,Deployability,Update,Updated,144,"## Description; Address issue #2087. Specifically:. On `numpy.rst`:; 1) Updated Numpy quickstart guide link; 2) Updated Psi4Numpy Repo link; 3) Updated psi4.{Matrix, Vector, Dimension} -> psi4.core.{Matrix, Vector, Dimension}; 4) Added link to Psi4's Symmetry quick guide. On `numpy_helper.py`:; 1) Updated docstring example to `psi4.core.Matrix`. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ]. ## Questions; - [ ] Section ""Array to Matrix"" and ""Matrix to Array"" print and run the docstring. For ""Matrix to Array"" the example can be run with no problem. But ""Matrix to Array"" can only be run by its own class. Should this example be updated as well? e.g. replace both examples of; https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L99 with:. ```; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data); ```; My concern is that the example would not be calling the function directly. What would be the best way to proceed?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2089
https://github.com/psi4/psi4/pull/2089:299,Deployability,Update,Updated,299,"## Description; Address issue #2087. Specifically:. On `numpy.rst`:; 1) Updated Numpy quickstart guide link; 2) Updated Psi4Numpy Repo link; 3) Updated psi4.{Matrix, Vector, Dimension} -> psi4.core.{Matrix, Vector, Dimension}; 4) Added link to Psi4's Symmetry quick guide. On `numpy_helper.py`:; 1) Updated docstring example to `psi4.core.Matrix`. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ]. ## Questions; - [ ] Section ""Array to Matrix"" and ""Matrix to Array"" print and run the docstring. For ""Matrix to Array"" the example can be run with no problem. But ""Matrix to Array"" can only be run by its own class. Should this example be updated as well? e.g. replace both examples of; https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L99 with:. ```; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data); ```; My concern is that the example would not be calling the function directly. What would be the best way to proceed?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2089
https://github.com/psi4/psi4/pull/2089:696,Deployability,update,updated,696,"## Description; Address issue #2087. Specifically:. On `numpy.rst`:; 1) Updated Numpy quickstart guide link; 2) Updated Psi4Numpy Repo link; 3) Updated psi4.{Matrix, Vector, Dimension} -> psi4.core.{Matrix, Vector, Dimension}; 4) Added link to Psi4's Symmetry quick guide. On `numpy_helper.py`:; 1) Updated docstring example to `psi4.core.Matrix`. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ]. ## Questions; - [ ] Section ""Array to Matrix"" and ""Matrix to Array"" print and run the docstring. For ""Matrix to Array"" the example can be run with no problem. But ""Matrix to Array"" can only be run by its own class. Should this example be updated as well? e.g. replace both examples of; https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L99 with:. ```; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data); ```; My concern is that the example would not be calling the function directly. What would be the best way to proceed?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2089
https://github.com/psi4/psi4/pull/2089:1057,Testability,Test,Tests,1057,"## Description; Address issue #2087. Specifically:. On `numpy.rst`:; 1) Updated Numpy quickstart guide link; 2) Updated Psi4Numpy Repo link; 3) Updated psi4.{Matrix, Vector, Dimension} -> psi4.core.{Matrix, Vector, Dimension}; 4) Added link to Psi4's Symmetry quick guide. On `numpy_helper.py`:; 1) Updated docstring example to `psi4.core.Matrix`. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ]. ## Questions; - [ ] Section ""Array to Matrix"" and ""Matrix to Array"" print and run the docstring. For ""Matrix to Array"" the example can be run with no problem. But ""Matrix to Array"" can only be run by its own class. Should this example be updated as well? e.g. replace both examples of; https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L99 with:. ```; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data); ```; My concern is that the example would not be calling the function directly. What would be the best way to proceed?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2089
https://github.com/psi4/psi4/pull/2089:1131,Testability,test,tests,1131,"## Description; Address issue #2087. Specifically:. On `numpy.rst`:; 1) Updated Numpy quickstart guide link; 2) Updated Psi4Numpy Repo link; 3) Updated psi4.{Matrix, Vector, Dimension} -> psi4.core.{Matrix, Vector, Dimension}; 4) Added link to Psi4's Symmetry quick guide. On `numpy_helper.py`:; 1) Updated docstring example to `psi4.core.Matrix`. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ]. ## Questions; - [ ] Section ""Array to Matrix"" and ""Matrix to Array"" print and run the docstring. For ""Matrix to Array"" the example can be run with no problem. But ""Matrix to Array"" can only be run by its own class. Should this example be updated as well? e.g. replace both examples of; https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L99 with:. ```; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data); ```; My concern is that the example would not be calling the function directly. What would be the best way to proceed?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2089
https://github.com/psi4/psi4/pull/2089:1222,Testability,test,tests,1222,"## Description; Address issue #2087. Specifically:. On `numpy.rst`:; 1) Updated Numpy quickstart guide link; 2) Updated Psi4Numpy Repo link; 3) Updated psi4.{Matrix, Vector, Dimension} -> psi4.core.{Matrix, Vector, Dimension}; 4) Added link to Psi4's Symmetry quick guide. On `numpy_helper.py`:; 1) Updated docstring example to `psi4.core.Matrix`. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ]. ## Questions; - [ ] Section ""Array to Matrix"" and ""Matrix to Array"" print and run the docstring. For ""Matrix to Array"" the example can be run with no problem. But ""Matrix to Array"" can only be run by its own class. Should this example be updated as well? e.g. replace both examples of; https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L99 with:. ```; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data); ```; My concern is that the example would not be calling the function directly. What would be the best way to proceed?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2089
https://github.com/psi4/psi4/pull/2089:97,Usability,guid,guide,97,"## Description; Address issue #2087. Specifically:. On `numpy.rst`:; 1) Updated Numpy quickstart guide link; 2) Updated Psi4Numpy Repo link; 3) Updated psi4.{Matrix, Vector, Dimension} -> psi4.core.{Matrix, Vector, Dimension}; 4) Added link to Psi4's Symmetry quick guide. On `numpy_helper.py`:; 1) Updated docstring example to `psi4.core.Matrix`. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ]. ## Questions; - [ ] Section ""Array to Matrix"" and ""Matrix to Array"" print and run the docstring. For ""Matrix to Array"" the example can be run with no problem. But ""Matrix to Array"" can only be run by its own class. Should this example be updated as well? e.g. replace both examples of; https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L99 with:. ```; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data); ```; My concern is that the example would not be calling the function directly. What would be the best way to proceed?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2089
https://github.com/psi4/psi4/pull/2089:266,Usability,guid,guide,266,"## Description; Address issue #2087. Specifically:. On `numpy.rst`:; 1) Updated Numpy quickstart guide link; 2) Updated Psi4Numpy Repo link; 3) Updated psi4.{Matrix, Vector, Dimension} -> psi4.core.{Matrix, Vector, Dimension}; 4) Added link to Psi4's Symmetry quick guide. On `numpy_helper.py`:; 1) Updated docstring example to `psi4.core.Matrix`. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ]. ## Questions; - [ ] Section ""Array to Matrix"" and ""Matrix to Array"" print and run the docstring. For ""Matrix to Array"" the example can be run with no problem. But ""Matrix to Array"" can only be run by its own class. Should this example be updated as well? e.g. replace both examples of; https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L99 with:. ```; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data); ```; My concern is that the example would not be calling the function directly. What would be the best way to proceed?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2089
https://github.com/psi4/psi4/pull/2091:189,Testability,Test,Tests,189,## Description; Use reference fchk files generated with very tight convergence since the compare_fchkfiles are also pretty tight. #2079 uncovered some jitter in dfocc. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2091
https://github.com/psi4/psi4/pull/2091:264,Testability,test,tests,264,## Description; Use reference fchk files generated with very tight convergence since the compare_fchkfiles are also pretty tight. #2079 uncovered some jitter in dfocc. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2091
https://github.com/psi4/psi4/pull/2091:355,Testability,test,tests,355,## Description; Use reference fchk files generated with very tight convergence since the compare_fchkfiles are also pretty tight. #2079 uncovered some jitter in dfocc. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2091
https://github.com/psi4/psi4/pull/2092:92,Performance,load,load,92,"## Description; While working on some more DF technology, I discovered a bug when trying to load using `Matrix::SaveType::Full`. The code assumed the matrix was square. One of the things this PR does is have the code work when that assumption fails. But the bigger problem is that `Matrix::SaveType::Full` is Psi3 era tech that shouldn't exist anymore. That SaveType reads/writes a matrix _where all elements of the wrong symmetry are replaced with zeros_. The better solution is to use `Matrix::SaveType::SubBlocks`, where those zero's are neither written nor read. Accordingly, I'm deprecating the Full save in favor of SubBlocks save. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `Matrix::SaveType::Full` is deprecated; - [x] Fixed a correctness bug with loading from `Matrix::SaveType::Full`. ## Checklist; - [x] quicktests, standard stuite, and dfmp2 all pass; - [ ] I didn't bother adding a new test that I actually fixed the bug, since I accessed the buggy code through a method that's going to be deprecated anyways. Any objections?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2092
https://github.com/psi4/psi4/pull/2092:820,Performance,load,loading,820,"## Description; While working on some more DF technology, I discovered a bug when trying to load using `Matrix::SaveType::Full`. The code assumed the matrix was square. One of the things this PR does is have the code work when that assumption fails. But the bigger problem is that `Matrix::SaveType::Full` is Psi3 era tech that shouldn't exist anymore. That SaveType reads/writes a matrix _where all elements of the wrong symmetry are replaced with zeros_. The better solution is to use `Matrix::SaveType::SubBlocks`, where those zero's are neither written nor read. Accordingly, I'm deprecating the Full save in favor of SubBlocks save. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `Matrix::SaveType::Full` is deprecated; - [x] Fixed a correctness bug with loading from `Matrix::SaveType::Full`. ## Checklist; - [x] quicktests, standard stuite, and dfmp2 all pass; - [ ] I didn't bother adding a new test that I actually fixed the bug, since I accessed the buggy code through a method that's going to be deprecated anyways. Any objections?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2092
https://github.com/psi4/psi4/pull/2092:1007,Security,access,accessed,1007,"## Description; While working on some more DF technology, I discovered a bug when trying to load using `Matrix::SaveType::Full`. The code assumed the matrix was square. One of the things this PR does is have the code work when that assumption fails. But the bigger problem is that `Matrix::SaveType::Full` is Psi3 era tech that shouldn't exist anymore. That SaveType reads/writes a matrix _where all elements of the wrong symmetry are replaced with zeros_. The better solution is to use `Matrix::SaveType::SubBlocks`, where those zero's are neither written nor read. Accordingly, I'm deprecating the Full save in favor of SubBlocks save. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `Matrix::SaveType::Full` is deprecated; - [x] Fixed a correctness bug with loading from `Matrix::SaveType::Full`. ## Checklist; - [x] quicktests, standard stuite, and dfmp2 all pass; - [ ] I didn't bother adding a new test that I actually fixed the bug, since I accessed the buggy code through a method that's going to be deprecated anyways. Any objections?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2092
https://github.com/psi4/psi4/pull/2092:963,Testability,test,test,963,"## Description; While working on some more DF technology, I discovered a bug when trying to load using `Matrix::SaveType::Full`. The code assumed the matrix was square. One of the things this PR does is have the code work when that assumption fails. But the bigger problem is that `Matrix::SaveType::Full` is Psi3 era tech that shouldn't exist anymore. That SaveType reads/writes a matrix _where all elements of the wrong symmetry are replaced with zeros_. The better solution is to use `Matrix::SaveType::SubBlocks`, where those zero's are neither written nor read. Accordingly, I'm deprecating the Full save in favor of SubBlocks save. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `Matrix::SaveType::Full` is deprecated; - [x] Fixed a correctness bug with loading from `Matrix::SaveType::Full`. ## Checklist; - [x] quicktests, standard stuite, and dfmp2 all pass; - [ ] I didn't bother adding a new test that I actually fixed the bug, since I accessed the buggy code through a method that's going to be deprecated anyways. Any objections?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2092
https://github.com/psi4/psi4/pull/2093:528,Availability,recover,recovers,528,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2093
https://github.com/psi4/psi4/pull/2093:1421,Availability,error,error,1421,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2093
https://github.com/psi4/psi4/pull/2093:64,Energy Efficiency,energy,energy,64,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2093
https://github.com/psi4/psi4/pull/2093:262,Energy Efficiency,reduce,reduced-scaling,262,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2093
https://github.com/psi4/psi4/pull/2093:314,Energy Efficiency,efficient,efficient,314,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2093
https://github.com/psi4/psi4/pull/2093:575,Energy Efficiency,energy,energy,575,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2093
https://github.com/psi4/psi4/pull/2093:1030,Integrability,rout,routed,1030,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2093
https://github.com/psi4/psi4/pull/2093:528,Safety,recover,recovers,528,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2093
https://github.com/psi4/psi4/pull/2093:930,Testability,test,tests,930,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2093
https://github.com/psi4/psi4/pull/2093:1715,Testability,Test,Tests,1715,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2093
https://github.com/psi4/psi4/pull/2093:1789,Testability,test,tests,1789,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2093
https://github.com/psi4/psi4/pull/2093:1880,Testability,test,tests,1880,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2093
https://github.com/psi4/psi4/pull/2093:328,Usability,simpl,simple,328,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2093
https://github.com/psi4/psi4/pull/2094:256,Testability,test,testing,256,"## Description; once more, try for a clean conda build. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] I think the conftest changes will eliminate the markers warnings for _installed_ psi4 pytest testing; - [x] the py36 conda build failed one of the time tests for @andyj10224's triplet tests. I couldn't get it to trigger again in a py39 env, but multithreaded tests and time assertions are always iffy, so skipping those. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2094
https://github.com/psi4/psi4/pull/2094:315,Testability,test,tests,315,"## Description; once more, try for a clean conda build. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] I think the conftest changes will eliminate the markers warnings for _installed_ psi4 pytest testing; - [x] the py36 conda build failed one of the time tests for @andyj10224's triplet tests. I couldn't get it to trigger again in a py39 env, but multithreaded tests and time assertions are always iffy, so skipping those. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2094
https://github.com/psi4/psi4/pull/2094:347,Testability,test,tests,347,"## Description; once more, try for a clean conda build. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] I think the conftest changes will eliminate the markers warnings for _installed_ psi4 pytest testing; - [x] the py36 conda build failed one of the time tests for @andyj10224's triplet tests. I couldn't get it to trigger again in a py39 env, but multithreaded tests and time assertions are always iffy, so skipping those. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2094
https://github.com/psi4/psi4/pull/2094:422,Testability,test,tests,422,"## Description; once more, try for a clean conda build. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] I think the conftest changes will eliminate the markers warnings for _installed_ psi4 pytest testing; - [x] the py36 conda build failed one of the time tests for @andyj10224's triplet tests. I couldn't get it to trigger again in a py39 env, but multithreaded tests and time assertions are always iffy, so skipping those. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2094
https://github.com/psi4/psi4/pull/2094:437,Testability,assert,assertions,437,"## Description; once more, try for a clean conda build. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] I think the conftest changes will eliminate the markers warnings for _installed_ psi4 pytest testing; - [x] the py36 conda build failed one of the time tests for @andyj10224's triplet tests. I couldn't get it to trigger again in a py39 env, but multithreaded tests and time assertions are always iffy, so skipping those. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2094
https://github.com/psi4/psi4/pull/2096:195,Availability,down,downstream,195,"## Description; part III of let there be conda after the recent merge flurry. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] As it is, downstream plugins won't find Python.h . This passes the right include dir so they can and prompts updating cmake so new detection can be used. naturally, v2rdm showed this up.; - [x] bump minimum gcc to 6. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2096
https://github.com/psi4/psi4/pull/2096:206,Modifiability,plugin,plugins,206,"## Description; part III of let there be conda after the recent merge flurry. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] As it is, downstream plugins won't find Python.h . This passes the right include dir so they can and prompts updating cmake so new detection can be used. naturally, v2rdm showed this up.; - [x] bump minimum gcc to 6. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2096
https://github.com/psi4/psi4/pull/2096:316,Safety,detect,detection,316,"## Description; part III of let there be conda after the recent merge flurry. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] As it is, downstream plugins won't find Python.h . This passes the right include dir so they can and prompts updating cmake so new detection can be used. naturally, v2rdm showed this up.; - [x] bump minimum gcc to 6. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2096
https://github.com/psi4/psi4/pull/2098:0,Deployability,Update,Update,0,Update documentation in response to issue #2075. ## Description; Add a paragraph of DETCI documentation about spin multiplicities of higher roots in response to issue. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Documentation is updated. Lori should check my formatting and keyword references. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2098
https://github.com/psi4/psi4/pull/2098:292,Deployability,update,updated,292,Update documentation in response to issue #2075. ## Description; Add a paragraph of DETCI documentation about spin multiplicities of higher roots in response to issue. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Documentation is updated. Lori should check my formatting and keyword references. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2098
https://github.com/psi4/psi4/pull/2099:28,Modifiability,plugin,plugin,28,## Description; test module plugin on windows. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2099
https://github.com/psi4/psi4/pull/2099:16,Testability,test,test,16,## Description; test module plugin on windows. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2099
https://github.com/psi4/psi4/pull/2100:66,Availability,error,errors,66,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2100
https://github.com/psi4/psi4/pull/2100:235,Energy Efficiency,energy,energy,235,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2100
https://github.com/psi4/psi4/pull/2100:313,Energy Efficiency,energy,energy,313,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2100
https://github.com/psi4/psi4/pull/2100:364,Energy Efficiency,energy,energy,364,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2100
https://github.com/psi4/psi4/pull/2100:1285,Modifiability,variab,variables,1285,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2100
https://github.com/psi4/psi4/pull/2100:749,Testability,test,tests,749,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2100
https://github.com/psi4/psi4/pull/2100:1786,Testability,test,tests,1786,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2100
https://github.com/psi4/psi4/pull/2100:1828,Testability,test,tests,1828,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2100
https://github.com/psi4/psi4/pull/2100:341,Usability,simpl,simpler,341,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2100
https://github.com/psi4/psi4/pull/2100:538,Usability,Simpl,Simplifying,538,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2100
https://github.com/psi4/psi4/issues/2102:36,Availability,error,error,36,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2102
https://github.com/psi4/psi4/issues/2102:1222,Availability,Error,Error,1222,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2102
https://github.com/psi4/psi4/issues/2102:1234,Availability,Error,Error,1234,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2102
https://github.com/psi4/psi4/issues/2102:1243,Availability,Error,Error,1243,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2102
https://github.com/psi4/psi4/issues/2102:1348,Availability,error,error,1348,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2102
https://github.com/psi4/psi4/issues/2102:1867,Availability,error,error,1867,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2102
https://github.com/psi4/psi4/issues/2102:948,Energy Efficiency,energy,energy,948,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2102
https://github.com/psi4/psi4/issues/2102:976,Energy Efficiency,energy,energy,976,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2102
https://github.com/psi4/psi4/issues/2102:447,Modifiability,variab,variables,447,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2102
https://github.com/psi4/psi4/pull/2103:167,Modifiability,plugin,plugins,167,## Description; This is a non-optimal way out of https://github.com/psi4/psi4/pull/2048#issuecomment-771213188 . Non-optimal b/c libpython will be linked in to enable plugins. All indications are it'll work for v2rdm. Should but so far doesn't work for Forte on Azure. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2103
https://github.com/psi4/psi4/pull/2104:300,Testability,test,tests,300,"## Description; deconstruct the pybind11_add_module so that library is SHARED but Py linking is MODULE. give this a try for Forte, @lcyyork. * [x] Works for v2rdm locally (L); * [x] works for J. Turney locally (M); * [x] works for v2rdm conda package (L); * [x] works for Forte for York on Azure w/o tests (L); * [ ] works for Forte for York on Azure w/tests (L). Unless there's reasons to pursue the dual library approach, I vote for moving forward on this. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2104
https://github.com/psi4/psi4/pull/2104:353,Testability,test,tests,353,"## Description; deconstruct the pybind11_add_module so that library is SHARED but Py linking is MODULE. give this a try for Forte, @lcyyork. * [x] Works for v2rdm locally (L); * [x] works for J. Turney locally (M); * [x] works for v2rdm conda package (L); * [x] works for Forte for York on Azure w/o tests (L); * [ ] works for Forte for York on Azure w/tests (L). Unless there's reasons to pursue the dual library approach, I vote for moving forward on this. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2104
https://github.com/psi4/psi4/issues/2105:1097,Performance,throughput,throughput,1097,"A recent [forum post](http://forum.psicode.org/t/how-to-read-multiple-external-geometry-files-improve-documentation/2044) has brought to light more holes in the Psi4 documentation. 1. The [advanced python](https://psicode.org/psi4manual/master/psithonmol.html?highlight=xyz#advanced-python) section refers to `init_with_xyz`. Thanks to Lori, this method no longer exists. All references to this method should be replaced.; 2. Because Psi4 input files are parsed as Python, it's possible to include valid Python in a Psi files, and it just runs. While we mention this in the [Psithon tutorial](https://psicode.org/psi4manual/master/tutorial.html) (first light bulb), that section is billed as the difference between Psithon and PsiAPI. Somewhere in there, we should explicitly make the point that for use beyond molecule specification and top-level driver function call, writing Python code in the Psithon file is likely the way to go.; 3. Particular application: We should demonstrate how to read in a geometry from xyz file. This is a very important use case if we want to bill Psi4 as ""for high-throughput quantum chemistry.""; 4. Particular application: Not directly related to molecule reading, but we should also document how to read in an SCF guess. This has recently caused some vexation even here at UGA, and is another reasonably common use case. [This forum post](http://forum.psicode.org/t/custom-guess-for-hartree-fock/2026/6?u=jmisiewicz) of mine should explain how it's done, but whoever works on this should confirm it works. I'm also open to this being a cookbook example.; 5. `Molecule.from_string` is not [properly documented](https://psicode.org/psi4manual/master/psi4api.html?highlight=from_string#psi4.core.Molecule.from_string). We should document the Python function, so the Sphinx knows about it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2105
https://github.com/psi4/psi4/pull/2106:58,Deployability,release,released,58,"## Description; I was investigating the ""memory not being released"" problem that @fevangelista brought up at the developer meeting. For the case of a simple HF energy, the wavefunction object indeed persisted after the energy call. Investigation showed its lifetime was controlled by the fact that we had the legacy wavefunction stored, and garbage collection didn't occur until the legacy wavefunction changed. Seeing as we don't actually use the legacy wavefunction machinery for anything in Psi, except part of a plugin interface where we tell people to prefer explicit wavefunction passing, this PR deprecates the commands for removal in 1.5, so we can collect garbage faster. This PR doesn't explain Francesco's reports of _increasing_ memory consumption for FINDIF, but it at least is a start. ## Todos; - [x] Deprecates `legacy_wavefunction` and `set_legacy_wavefunction`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2106
https://github.com/psi4/psi4/pull/2106:160,Energy Efficiency,energy,energy,160,"## Description; I was investigating the ""memory not being released"" problem that @fevangelista brought up at the developer meeting. For the case of a simple HF energy, the wavefunction object indeed persisted after the energy call. Investigation showed its lifetime was controlled by the fact that we had the legacy wavefunction stored, and garbage collection didn't occur until the legacy wavefunction changed. Seeing as we don't actually use the legacy wavefunction machinery for anything in Psi, except part of a plugin interface where we tell people to prefer explicit wavefunction passing, this PR deprecates the commands for removal in 1.5, so we can collect garbage faster. This PR doesn't explain Francesco's reports of _increasing_ memory consumption for FINDIF, but it at least is a start. ## Todos; - [x] Deprecates `legacy_wavefunction` and `set_legacy_wavefunction`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2106
https://github.com/psi4/psi4/pull/2106:219,Energy Efficiency,energy,energy,219,"## Description; I was investigating the ""memory not being released"" problem that @fevangelista brought up at the developer meeting. For the case of a simple HF energy, the wavefunction object indeed persisted after the energy call. Investigation showed its lifetime was controlled by the fact that we had the legacy wavefunction stored, and garbage collection didn't occur until the legacy wavefunction changed. Seeing as we don't actually use the legacy wavefunction machinery for anything in Psi, except part of a plugin interface where we tell people to prefer explicit wavefunction passing, this PR deprecates the commands for removal in 1.5, so we can collect garbage faster. This PR doesn't explain Francesco's reports of _increasing_ memory consumption for FINDIF, but it at least is a start. ## Todos; - [x] Deprecates `legacy_wavefunction` and `set_legacy_wavefunction`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2106
https://github.com/psi4/psi4/pull/2106:748,Energy Efficiency,consumption,consumption,748,"## Description; I was investigating the ""memory not being released"" problem that @fevangelista brought up at the developer meeting. For the case of a simple HF energy, the wavefunction object indeed persisted after the energy call. Investigation showed its lifetime was controlled by the fact that we had the legacy wavefunction stored, and garbage collection didn't occur until the legacy wavefunction changed. Seeing as we don't actually use the legacy wavefunction machinery for anything in Psi, except part of a plugin interface where we tell people to prefer explicit wavefunction passing, this PR deprecates the commands for removal in 1.5, so we can collect garbage faster. This PR doesn't explain Francesco's reports of _increasing_ memory consumption for FINDIF, but it at least is a start. ## Todos; - [x] Deprecates `legacy_wavefunction` and `set_legacy_wavefunction`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2106
https://github.com/psi4/psi4/pull/2106:523,Integrability,interface,interface,523,"## Description; I was investigating the ""memory not being released"" problem that @fevangelista brought up at the developer meeting. For the case of a simple HF energy, the wavefunction object indeed persisted after the energy call. Investigation showed its lifetime was controlled by the fact that we had the legacy wavefunction stored, and garbage collection didn't occur until the legacy wavefunction changed. Seeing as we don't actually use the legacy wavefunction machinery for anything in Psi, except part of a plugin interface where we tell people to prefer explicit wavefunction passing, this PR deprecates the commands for removal in 1.5, so we can collect garbage faster. This PR doesn't explain Francesco's reports of _increasing_ memory consumption for FINDIF, but it at least is a start. ## Todos; - [x] Deprecates `legacy_wavefunction` and `set_legacy_wavefunction`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2106
https://github.com/psi4/psi4/pull/2106:516,Modifiability,plugin,plugin,516,"## Description; I was investigating the ""memory not being released"" problem that @fevangelista brought up at the developer meeting. For the case of a simple HF energy, the wavefunction object indeed persisted after the energy call. Investigation showed its lifetime was controlled by the fact that we had the legacy wavefunction stored, and garbage collection didn't occur until the legacy wavefunction changed. Seeing as we don't actually use the legacy wavefunction machinery for anything in Psi, except part of a plugin interface where we tell people to prefer explicit wavefunction passing, this PR deprecates the commands for removal in 1.5, so we can collect garbage faster. This PR doesn't explain Francesco's reports of _increasing_ memory consumption for FINDIF, but it at least is a start. ## Todos; - [x] Deprecates `legacy_wavefunction` and `set_legacy_wavefunction`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2106
https://github.com/psi4/psi4/pull/2106:150,Usability,simpl,simple,150,"## Description; I was investigating the ""memory not being released"" problem that @fevangelista brought up at the developer meeting. For the case of a simple HF energy, the wavefunction object indeed persisted after the energy call. Investigation showed its lifetime was controlled by the fact that we had the legacy wavefunction stored, and garbage collection didn't occur until the legacy wavefunction changed. Seeing as we don't actually use the legacy wavefunction machinery for anything in Psi, except part of a plugin interface where we tell people to prefer explicit wavefunction passing, this PR deprecates the commands for removal in 1.5, so we can collect garbage faster. This PR doesn't explain Francesco's reports of _increasing_ memory consumption for FINDIF, but it at least is a start. ## Todos; - [x] Deprecates `legacy_wavefunction` and `set_legacy_wavefunction`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2106
https://github.com/psi4/psi4/pull/2107:364,Testability,test,test,364,"## Description; While cleaning out old branches, I noticed a small `occ` cleanup: the H integrals written to disk are no longer used. Accordingly, we can just remove the code responsible for it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removes code that isn't used. ## Checklist; - [x] Every `occ` test I've tried passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2107
https://github.com/psi4/psi4/issues/2109:34,Deployability,update,updated,34,"_This is a meta-issue and will be updated as needed._. - [ ] open issues:; - [ ] #2105 (Molecule reading); - [ ] #1769 (document linear response features); - [ ] #1678 (orbital guess); - [ ] #1341 (outdated, but maybe similar for libint2); - [ ] #2108 (td-dft example); - [x] #2125 (obtaining psi4); - [ ] #2138 (misc. suggestions); - [ ] cross-check with (final) release notes if all features are documented/mentioned.; - [ ] Run every example input in the manual once a release candidate is ready.; ; Please add `documentation` as label for relevant new or old issues so they can be easily found.; https://github.com/psi4/psi4/issues?q=is%3Aissue+is%3Aopen+label%3Adocumentation",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2109
https://github.com/psi4/psi4/issues/2109:364,Deployability,release,release,364,"_This is a meta-issue and will be updated as needed._. - [ ] open issues:; - [ ] #2105 (Molecule reading); - [ ] #1769 (document linear response features); - [ ] #1678 (orbital guess); - [ ] #1341 (outdated, but maybe similar for libint2); - [ ] #2108 (td-dft example); - [x] #2125 (obtaining psi4); - [ ] #2138 (misc. suggestions); - [ ] cross-check with (final) release notes if all features are documented/mentioned.; - [ ] Run every example input in the manual once a release candidate is ready.; ; Please add `documentation` as label for relevant new or old issues so they can be easily found.; https://github.com/psi4/psi4/issues?q=is%3Aissue+is%3Aopen+label%3Adocumentation",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2109
https://github.com/psi4/psi4/issues/2109:472,Deployability,release,release,472,"_This is a meta-issue and will be updated as needed._. - [ ] open issues:; - [ ] #2105 (Molecule reading); - [ ] #1769 (document linear response features); - [ ] #1678 (orbital guess); - [ ] #1341 (outdated, but maybe similar for libint2); - [ ] #2108 (td-dft example); - [x] #2125 (obtaining psi4); - [ ] #2138 (misc. suggestions); - [ ] cross-check with (final) release notes if all features are documented/mentioned.; - [ ] Run every example input in the manual once a release candidate is ready.; ; Please add `documentation` as label for relevant new or old issues so they can be easily found.; https://github.com/psi4/psi4/issues?q=is%3Aissue+is%3Aopen+label%3Adocumentation",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2109
https://github.com/psi4/psi4/issues/2110:711,Energy Efficiency,energy,energy,711,"Carried forward from a forum report. Consider the following input file designed to use a custom SCF guess. (And unfortunately, there isn't a much cleaner way to do this.). ```; import numpy as np. memory 4 GB. molecule mymol {; symmetry C1; no_reorient; 0 1; H1 0.00000000 0.00000000 0.00000000; H2 0.00000000 0.00000000 0.60000000; }. set {; basis sto-3g; scf_type pk; reference rhf; maxiter 1; }. mo_coeff = np.array([; [ 3.12018412E-01, 2.77605634E-01, 3.12018412E-01, 2.77605634E-01],; [ 8.82705828E-02, 2.02527493E+00, -8.82705828E-02, -2.02527493E+00],; [ 7.20615388E-01, -6.53699105E-01, 7.20615388E-01, -6.53699105E-01],; [ -1.21367472E+00, 1.40100934E+00, 1.21367472E+00, -1.40100934E+00]; ]).T. try:; energy('scf'); except SCFConvergenceError as e:; scf_wfn = e.wfn; scf_wfn.Ca().from_array(mo_coeff); scf_wfn.to_file(scf_wfn.get_scratch_filename(180)); set guess read; set maxiter 200; energy('scf'); ```. The `set guess read` is ignored because Psi internally set the SCF local option to be read, causing the global option to be ignored. To fix this, first, we'll need to _find_ where Psi is setting this internally. Which seems like a simple enough fix. From there, we'll need to make sure that the setting is only temporary through the use of OptionsStash objects, as done frequently throughout `driver/procrouting.py`. I'm marking this as `new_dev` friendly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2110
https://github.com/psi4/psi4/issues/2110:897,Energy Efficiency,energy,energy,897,"Carried forward from a forum report. Consider the following input file designed to use a custom SCF guess. (And unfortunately, there isn't a much cleaner way to do this.). ```; import numpy as np. memory 4 GB. molecule mymol {; symmetry C1; no_reorient; 0 1; H1 0.00000000 0.00000000 0.00000000; H2 0.00000000 0.00000000 0.60000000; }. set {; basis sto-3g; scf_type pk; reference rhf; maxiter 1; }. mo_coeff = np.array([; [ 3.12018412E-01, 2.77605634E-01, 3.12018412E-01, 2.77605634E-01],; [ 8.82705828E-02, 2.02527493E+00, -8.82705828E-02, -2.02527493E+00],; [ 7.20615388E-01, -6.53699105E-01, 7.20615388E-01, -6.53699105E-01],; [ -1.21367472E+00, 1.40100934E+00, 1.21367472E+00, -1.40100934E+00]; ]).T. try:; energy('scf'); except SCFConvergenceError as e:; scf_wfn = e.wfn; scf_wfn.Ca().from_array(mo_coeff); scf_wfn.to_file(scf_wfn.get_scratch_filename(180)); set guess read; set maxiter 200; energy('scf'); ```. The `set guess read` is ignored because Psi internally set the SCF local option to be read, causing the global option to be ignored. To fix this, first, we'll need to _find_ where Psi is setting this internally. Which seems like a simple enough fix. From there, we'll need to make sure that the setting is only temporary through the use of OptionsStash objects, as done frequently throughout `driver/procrouting.py`. I'm marking this as `new_dev` friendly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2110
https://github.com/psi4/psi4/issues/2110:1148,Usability,simpl,simple,1148,"Carried forward from a forum report. Consider the following input file designed to use a custom SCF guess. (And unfortunately, there isn't a much cleaner way to do this.). ```; import numpy as np. memory 4 GB. molecule mymol {; symmetry C1; no_reorient; 0 1; H1 0.00000000 0.00000000 0.00000000; H2 0.00000000 0.00000000 0.60000000; }. set {; basis sto-3g; scf_type pk; reference rhf; maxiter 1; }. mo_coeff = np.array([; [ 3.12018412E-01, 2.77605634E-01, 3.12018412E-01, 2.77605634E-01],; [ 8.82705828E-02, 2.02527493E+00, -8.82705828E-02, -2.02527493E+00],; [ 7.20615388E-01, -6.53699105E-01, 7.20615388E-01, -6.53699105E-01],; [ -1.21367472E+00, 1.40100934E+00, 1.21367472E+00, -1.40100934E+00]; ]).T. try:; energy('scf'); except SCFConvergenceError as e:; scf_wfn = e.wfn; scf_wfn.Ca().from_array(mo_coeff); scf_wfn.to_file(scf_wfn.get_scratch_filename(180)); set guess read; set maxiter 200; energy('scf'); ```. The `set guess read` is ignored because Psi internally set the SCF local option to be read, causing the global option to be ignored. To fix this, first, we'll need to _find_ where Psi is setting this internally. Which seems like a simple enough fix. From there, we'll need to make sure that the setting is only temporary through the use of OptionsStash objects, as done frequently throughout `driver/procrouting.py`. I'm marking this as `new_dev` friendly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2110
https://github.com/psi4/psi4/pull/2111:38,Integrability,rout,routines,38,## Description; This PR refactors EFP routines such that they use the mints functions I implemented for PE a while ago.; Less code and a significant speed-up for the electric field integral evaluations. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move `efp.py` to `solvent` folder; - [x] Refactor functions. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features (already present); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2111
https://github.com/psi4/psi4/pull/2111:24,Modifiability,refactor,refactors,24,## Description; This PR refactors EFP routines such that they use the mints functions I implemented for PE a while ago.; Less code and a significant speed-up for the electric field integral evaluations. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move `efp.py` to `solvent` folder; - [x] Refactor functions. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features (already present); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2111
https://github.com/psi4/psi4/pull/2111:351,Modifiability,Refactor,Refactor,351,## Description; This PR refactors EFP routines such that they use the mints functions I implemented for PE a while ago.; Less code and a significant speed-up for the electric field integral evaluations. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move `efp.py` to `solvent` folder; - [x] Refactor functions. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features (already present); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2111
https://github.com/psi4/psi4/pull/2111:422,Testability,Test,Tests,422,## Description; This PR refactors EFP routines such that they use the mints functions I implemented for PE a while ago.; Less code and a significant speed-up for the electric field integral evaluations. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move `efp.py` to `solvent` folder; - [x] Refactor functions. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features (already present); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2111
https://github.com/psi4/psi4/pull/2111:514,Testability,test,tests,514,## Description; This PR refactors EFP routines such that they use the mints functions I implemented for PE a while ago.; Less code and a significant speed-up for the electric field integral evaluations. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move `efp.py` to `solvent` folder; - [x] Refactor functions. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features (already present); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2111
https://github.com/psi4/psi4/pull/2111:605,Testability,test,tests,605,## Description; This PR refactors EFP routines such that they use the mints functions I implemented for PE a while ago.; Less code and a significant speed-up for the electric field integral evaluations. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move `efp.py` to `solvent` folder; - [x] Refactor functions. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features (already present); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2111
https://github.com/psi4/psi4/pull/2112:608,Availability,error,error,608,"## Description; Fixes a bug that occurs when one runs `psi4 --qcschema` and requests that the wavefunction is returned. . Before the orbitals / fock matrix / etc. are returned, all AO-indexed tensors are sorted according to CCA ordering: `Ca` and `Cb` are dimension [AO x MO], so their rows are sorted. `Fa`, `Fb`, `Da`, and `Db` are all dimension [AO x AO], so they are sorted by both row and column. `epsilon_a` and `epsilon_b` are not AO-indexed, so they shouldn't be sorted at all. As an example, the following HF calculation has fewer MOs than AOs because of linear dependencies, and Psi4 will throw an error when `epsilon_a` is treated as if it were of length AO:; ```; import psi4. ret = psi4.schema_wrapper.run_qcschema({; ""molecule"": {; ""geometry"": [; 0.0, 0.0, -0.1294769411935893,; 0.0, -1.494187339479985, 1.0274465079245698,; 0.0, 1.494187339479985, 1.0274465079245698; ], ; ""symbols"": [""O"", ""H"", ""H""],; }, ; ""driver"": ""energy"",; ""model"": {; ""method"": ""hf"",; ""basis"": ""d-aug-cc-pvqz"" # larger basis -> more lin deps; }, ; ""keywords"": {; ""scf_type"": ""df"",; ""s_tolerance"" : 1e-4, # loosen lin dep cutoff; }, ; ""protocols"": {; ""wavefunction"" : ""orbitals_and_eigenvalues"",; } ; ; }); print(ret.error); ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2112
https://github.com/psi4/psi4/pull/2112:1203,Availability,error,error,1203,"## Description; Fixes a bug that occurs when one runs `psi4 --qcschema` and requests that the wavefunction is returned. . Before the orbitals / fock matrix / etc. are returned, all AO-indexed tensors are sorted according to CCA ordering: `Ca` and `Cb` are dimension [AO x MO], so their rows are sorted. `Fa`, `Fb`, `Da`, and `Db` are all dimension [AO x AO], so they are sorted by both row and column. `epsilon_a` and `epsilon_b` are not AO-indexed, so they shouldn't be sorted at all. As an example, the following HF calculation has fewer MOs than AOs because of linear dependencies, and Psi4 will throw an error when `epsilon_a` is treated as if it were of length AO:; ```; import psi4. ret = psi4.schema_wrapper.run_qcschema({; ""molecule"": {; ""geometry"": [; 0.0, 0.0, -0.1294769411935893,; 0.0, -1.494187339479985, 1.0274465079245698,; 0.0, 1.494187339479985, 1.0274465079245698; ], ; ""symbols"": [""O"", ""H"", ""H""],; }, ; ""driver"": ""energy"",; ""model"": {; ""method"": ""hf"",; ""basis"": ""d-aug-cc-pvqz"" # larger basis -> more lin deps; }, ; ""keywords"": {; ""scf_type"": ""df"",; ""s_tolerance"" : 1e-4, # loosen lin dep cutoff; }, ; ""protocols"": {; ""wavefunction"" : ""orbitals_and_eigenvalues"",; } ; ; }); print(ret.error); ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2112
https://github.com/psi4/psi4/pull/2112:933,Energy Efficiency,energy,energy,933,"## Description; Fixes a bug that occurs when one runs `psi4 --qcschema` and requests that the wavefunction is returned. . Before the orbitals / fock matrix / etc. are returned, all AO-indexed tensors are sorted according to CCA ordering: `Ca` and `Cb` are dimension [AO x MO], so their rows are sorted. `Fa`, `Fb`, `Da`, and `Db` are all dimension [AO x AO], so they are sorted by both row and column. `epsilon_a` and `epsilon_b` are not AO-indexed, so they shouldn't be sorted at all. As an example, the following HF calculation has fewer MOs than AOs because of linear dependencies, and Psi4 will throw an error when `epsilon_a` is treated as if it were of length AO:; ```; import psi4. ret = psi4.schema_wrapper.run_qcschema({; ""molecule"": {; ""geometry"": [; 0.0, 0.0, -0.1294769411935893,; 0.0, -1.494187339479985, 1.0274465079245698,; 0.0, 1.494187339479985, 1.0274465079245698; ], ; ""symbols"": [""O"", ""H"", ""H""],; }, ; ""driver"": ""energy"",; ""model"": {; ""method"": ""hf"",; ""basis"": ""d-aug-cc-pvqz"" # larger basis -> more lin deps; }, ; ""keywords"": {; ""scf_type"": ""df"",; ""s_tolerance"" : 1e-4, # loosen lin dep cutoff; }, ; ""protocols"": {; ""wavefunction"" : ""orbitals_and_eigenvalues"",; } ; ; }); print(ret.error); ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2112
https://github.com/psi4/psi4/pull/2112:571,Integrability,depend,dependencies,571,"## Description; Fixes a bug that occurs when one runs `psi4 --qcschema` and requests that the wavefunction is returned. . Before the orbitals / fock matrix / etc. are returned, all AO-indexed tensors are sorted according to CCA ordering: `Ca` and `Cb` are dimension [AO x MO], so their rows are sorted. `Fa`, `Fb`, `Da`, and `Db` are all dimension [AO x AO], so they are sorted by both row and column. `epsilon_a` and `epsilon_b` are not AO-indexed, so they shouldn't be sorted at all. As an example, the following HF calculation has fewer MOs than AOs because of linear dependencies, and Psi4 will throw an error when `epsilon_a` is treated as if it were of length AO:; ```; import psi4. ret = psi4.schema_wrapper.run_qcschema({; ""molecule"": {; ""geometry"": [; 0.0, 0.0, -0.1294769411935893,; 0.0, -1.494187339479985, 1.0274465079245698,; 0.0, 1.494187339479985, 1.0274465079245698; ], ; ""symbols"": [""O"", ""H"", ""H""],; }, ; ""driver"": ""energy"",; ""model"": {; ""method"": ""hf"",; ""basis"": ""d-aug-cc-pvqz"" # larger basis -> more lin deps; }, ; ""keywords"": {; ""scf_type"": ""df"",; ""s_tolerance"" : 1e-4, # loosen lin dep cutoff; }, ; ""protocols"": {; ""wavefunction"" : ""orbitals_and_eigenvalues"",; } ; ; }); print(ret.error); ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2112
https://github.com/psi4/psi4/pull/2112:1122,Integrability,protocol,protocols,1122,"## Description; Fixes a bug that occurs when one runs `psi4 --qcschema` and requests that the wavefunction is returned. . Before the orbitals / fock matrix / etc. are returned, all AO-indexed tensors are sorted according to CCA ordering: `Ca` and `Cb` are dimension [AO x MO], so their rows are sorted. `Fa`, `Fb`, `Da`, and `Db` are all dimension [AO x AO], so they are sorted by both row and column. `epsilon_a` and `epsilon_b` are not AO-indexed, so they shouldn't be sorted at all. As an example, the following HF calculation has fewer MOs than AOs because of linear dependencies, and Psi4 will throw an error when `epsilon_a` is treated as if it were of length AO:; ```; import psi4. ret = psi4.schema_wrapper.run_qcschema({; ""molecule"": {; ""geometry"": [; 0.0, 0.0, -0.1294769411935893,; 0.0, -1.494187339479985, 1.0274465079245698,; 0.0, 1.494187339479985, 1.0274465079245698; ], ; ""symbols"": [""O"", ""H"", ""H""],; }, ; ""driver"": ""energy"",; ""model"": {; ""method"": ""hf"",; ""basis"": ""d-aug-cc-pvqz"" # larger basis -> more lin deps; }, ; ""keywords"": {; ""scf_type"": ""df"",; ""s_tolerance"" : 1e-4, # loosen lin dep cutoff; }, ; ""protocols"": {; ""wavefunction"" : ""orbitals_and_eigenvalues"",; } ; ; }); print(ret.error); ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2112
https://github.com/psi4/psi4/pull/2112:1270,Testability,test,tests,1270,"## Description; Fixes a bug that occurs when one runs `psi4 --qcschema` and requests that the wavefunction is returned. . Before the orbitals / fock matrix / etc. are returned, all AO-indexed tensors are sorted according to CCA ordering: `Ca` and `Cb` are dimension [AO x MO], so their rows are sorted. `Fa`, `Fb`, `Da`, and `Db` are all dimension [AO x AO], so they are sorted by both row and column. `epsilon_a` and `epsilon_b` are not AO-indexed, so they shouldn't be sorted at all. As an example, the following HF calculation has fewer MOs than AOs because of linear dependencies, and Psi4 will throw an error when `epsilon_a` is treated as if it were of length AO:; ```; import psi4. ret = psi4.schema_wrapper.run_qcschema({; ""molecule"": {; ""geometry"": [; 0.0, 0.0, -0.1294769411935893,; 0.0, -1.494187339479985, 1.0274465079245698,; 0.0, 1.494187339479985, 1.0274465079245698; ], ; ""symbols"": [""O"", ""H"", ""H""],; }, ; ""driver"": ""energy"",; ""model"": {; ""method"": ""hf"",; ""basis"": ""d-aug-cc-pvqz"" # larger basis -> more lin deps; }, ; ""keywords"": {; ""scf_type"": ""df"",; ""s_tolerance"" : 1e-4, # loosen lin dep cutoff; }, ; ""protocols"": {; ""wavefunction"" : ""orbitals_and_eigenvalues"",; } ; ; }); print(ret.error); ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2112
https://github.com/psi4/psi4/pull/2112:1361,Testability,test,tests,1361,"## Description; Fixes a bug that occurs when one runs `psi4 --qcschema` and requests that the wavefunction is returned. . Before the orbitals / fock matrix / etc. are returned, all AO-indexed tensors are sorted according to CCA ordering: `Ca` and `Cb` are dimension [AO x MO], so their rows are sorted. `Fa`, `Fb`, `Da`, and `Db` are all dimension [AO x AO], so they are sorted by both row and column. `epsilon_a` and `epsilon_b` are not AO-indexed, so they shouldn't be sorted at all. As an example, the following HF calculation has fewer MOs than AOs because of linear dependencies, and Psi4 will throw an error when `epsilon_a` is treated as if it were of length AO:; ```; import psi4. ret = psi4.schema_wrapper.run_qcschema({; ""molecule"": {; ""geometry"": [; 0.0, 0.0, -0.1294769411935893,; 0.0, -1.494187339479985, 1.0274465079245698,; 0.0, 1.494187339479985, 1.0274465079245698; ], ; ""symbols"": [""O"", ""H"", ""H""],; }, ; ""driver"": ""energy"",; ""model"": {; ""method"": ""hf"",; ""basis"": ""d-aug-cc-pvqz"" # larger basis -> more lin deps; }, ; ""keywords"": {; ""scf_type"": ""df"",; ""s_tolerance"" : 1e-4, # loosen lin dep cutoff; }, ; ""protocols"": {; ""wavefunction"" : ""orbitals_and_eigenvalues"",; } ; ; }); print(ret.error); ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2112
https://github.com/psi4/psi4/pull/2113:418,Availability,avail,available,418,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Libxc 5.1.2 required. actually 5.1.0 is fine with Psi4, but 5.1.1 _isn't_ for at least OP fctls like BOP; - thanks to @susilehtola for fixing up libxc so we could have a clean test suite again; - [x] lgtm, which only has old cmake available, can't use `Python::Module`, so providing workaround.; - [x] linux and mac conda packages are ready; - [x] win conda package should be published shortly. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full test suite run with 5.1.2. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2113
https://github.com/psi4/psi4/pull/2113:363,Testability,test,test,363,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Libxc 5.1.2 required. actually 5.1.0 is fine with Psi4, but 5.1.1 _isn't_ for at least OP fctls like BOP; - thanks to @susilehtola for fixing up libxc so we could have a clean test suite again; - [x] lgtm, which only has old cmake available, can't use `Python::Module`, so providing workaround.; - [x] linux and mac conda packages are ready; - [x] win conda package should be published shortly. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full test suite run with 5.1.2. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2113
https://github.com/psi4/psi4/pull/2113:603,Testability,Test,Tests,603,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Libxc 5.1.2 required. actually 5.1.0 is fine with Psi4, but 5.1.1 _isn't_ for at least OP fctls like BOP; - thanks to @susilehtola for fixing up libxc so we could have a clean test suite again; - [x] lgtm, which only has old cmake available, can't use `Python::Module`, so providing workaround.; - [x] linux and mac conda packages are ready; - [x] win conda package should be published shortly. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full test suite run with 5.1.2. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2113
https://github.com/psi4/psi4/pull/2113:678,Testability,test,tests,678,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Libxc 5.1.2 required. actually 5.1.0 is fine with Psi4, but 5.1.1 _isn't_ for at least OP fctls like BOP; - thanks to @susilehtola for fixing up libxc so we could have a clean test suite again; - [x] lgtm, which only has old cmake available, can't use `Python::Module`, so providing workaround.; - [x] linux and mac conda packages are ready; - [x] win conda package should be published shortly. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full test suite run with 5.1.2. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2113
https://github.com/psi4/psi4/pull/2113:769,Testability,test,tests,769,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Libxc 5.1.2 required. actually 5.1.0 is fine with Psi4, but 5.1.1 _isn't_ for at least OP fctls like BOP; - thanks to @susilehtola for fixing up libxc so we could have a clean test suite again; - [x] lgtm, which only has old cmake available, can't use `Python::Module`, so providing workaround.; - [x] linux and mac conda packages are ready; - [x] win conda package should be published shortly. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full test suite run with 5.1.2. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2113
https://github.com/psi4/psi4/pull/2113:781,Testability,test,test,781,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Libxc 5.1.2 required. actually 5.1.0 is fine with Psi4, but 5.1.1 _isn't_ for at least OP fctls like BOP; - thanks to @susilehtola for fixing up libxc so we could have a clean test suite again; - [x] lgtm, which only has old cmake available, can't use `Python::Module`, so providing workaround.; - [x] linux and mac conda packages are ready; - [x] win conda package should be published shortly. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full test suite run with 5.1.2. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2113
https://github.com/psi4/psi4/issues/2114:2048,Availability,robust,robust,2048,"/master, but it completed okay with psi4/v1.3.2. This is due to the default integral screening threshold (`INTS_TOLERANCE`) changing from 0.0 to 1e-12 for the SCF module. The calculation converges fine when `INTS_TOLERANCE` is reset to 0.0:. ```; memory 64 GB. molecule mol {; 0 1 ; O -1.43902644 2.20001916 0.52666667; C -0.23262529 0.21202727 0.63286928; N -1.24873102 -2.11271381 0.47828968; C -3.7777515 -2.85877768 0.08730535; C -4.46145441 -5.34849185 0.74152853; C -2.56341349 -7.19739989 1.87800982; C -6.94682221 -6.16901094 0.3643392; C -8.75094374 -4.55140537 -0.66556154; C -8.08273658 -2.09627319 -1.33509151; C -5.61324248 -1.25402226 -0.96753978; C 2.6282311 0.28062433 1.05654588; C 3.98467651 2.83553405 0.63381414; N 6.54374363 2.70155247 -0.40515728; C 8.61979675 2.25141971 0.96961847; O 8.56480572 1.89615119 3.26884825; H -0.04232987 -3.54814977 0.82014114; H -3.42815216 -8.99585225 2.39447197; H -1.03934937 -7.57742382 0.54424112; H -1.71851694 -6.40333698 3.5817869; H -7.49559868 -8.07309898 0.86738429; H -10.66693706 -5.20506164 -0.95166608; H -9.47697652 -0.84262888 -2.14880758; H -5.16216486 0.65044373 -1.5435283; H 3.24390387 -0.55898099 2.83213254; H 3.51375676 -1.09698602 -0.19445282; H 3.04888413 3.57366108 -1.05446718; H 3.38827894 4.41440023 1.82490852; H 6.75331425 3.01713673 -2.28241121; H 10.34700643 2.24329388 -0.20333453; symmetry c1; no_com; no_reorient; units bohr; }. # set ints_tolerance 0.0 # uncomment to fix. energy('pbe0/aug-cc-pv_tpd_z'); ```; ~~[screen_zero.out.txt](https://github.com/psi4/psi4/files/5984125/screen_zero.out.txt)~~; ~~[screen_default.out.txt](https://github.com/psi4/psi4/files/5984126/screen_default.out.txt)~~; [failed_jobs.zip](https://github.com/psi4/psi4/files/5985739/failed_jobs.zip). I can post additional similar systems that fail at the same level of theory. Does this warrant changing the `INTS_TOLERANCE` default to a more conservative value? Or is this something that would be fixed by a more robust SCF solver?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2114
https://github.com/psi4/psi4/issues/2114:1530,Energy Efficiency,energy,energy,1530,"/master, but it completed okay with psi4/v1.3.2. This is due to the default integral screening threshold (`INTS_TOLERANCE`) changing from 0.0 to 1e-12 for the SCF module. The calculation converges fine when `INTS_TOLERANCE` is reset to 0.0:. ```; memory 64 GB. molecule mol {; 0 1 ; O -1.43902644 2.20001916 0.52666667; C -0.23262529 0.21202727 0.63286928; N -1.24873102 -2.11271381 0.47828968; C -3.7777515 -2.85877768 0.08730535; C -4.46145441 -5.34849185 0.74152853; C -2.56341349 -7.19739989 1.87800982; C -6.94682221 -6.16901094 0.3643392; C -8.75094374 -4.55140537 -0.66556154; C -8.08273658 -2.09627319 -1.33509151; C -5.61324248 -1.25402226 -0.96753978; C 2.6282311 0.28062433 1.05654588; C 3.98467651 2.83553405 0.63381414; N 6.54374363 2.70155247 -0.40515728; C 8.61979675 2.25141971 0.96961847; O 8.56480572 1.89615119 3.26884825; H -0.04232987 -3.54814977 0.82014114; H -3.42815216 -8.99585225 2.39447197; H -1.03934937 -7.57742382 0.54424112; H -1.71851694 -6.40333698 3.5817869; H -7.49559868 -8.07309898 0.86738429; H -10.66693706 -5.20506164 -0.95166608; H -9.47697652 -0.84262888 -2.14880758; H -5.16216486 0.65044373 -1.5435283; H 3.24390387 -0.55898099 2.83213254; H 3.51375676 -1.09698602 -0.19445282; H 3.04888413 3.57366108 -1.05446718; H 3.38827894 4.41440023 1.82490852; H 6.75331425 3.01713673 -2.28241121; H 10.34700643 2.24329388 -0.20333453; symmetry c1; no_com; no_reorient; units bohr; }. # set ints_tolerance 0.0 # uncomment to fix. energy('pbe0/aug-cc-pv_tpd_z'); ```; ~~[screen_zero.out.txt](https://github.com/psi4/psi4/files/5984125/screen_zero.out.txt)~~; ~~[screen_default.out.txt](https://github.com/psi4/psi4/files/5984126/screen_default.out.txt)~~; [failed_jobs.zip](https://github.com/psi4/psi4/files/5985739/failed_jobs.zip). I can post additional similar systems that fail at the same level of theory. Does this warrant changing the `INTS_TOLERANCE` default to a more conservative value? Or is this something that would be fixed by a more robust SCF solver?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2114
https://github.com/psi4/psi4/issues/2117:468,Availability,error,errors,468,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2117
https://github.com/psi4/psi4/issues/2117:411,Energy Efficiency,adapt,adapt,411,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2117
https://github.com/psi4/psi4/issues/2117:411,Modifiability,adapt,adapt,411,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2117
https://github.com/psi4/psi4/issues/2117:242,Performance,optimiz,optimization,242,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2117
https://github.com/psi4/psi4/issues/2117:1007,Performance,optimiz,optimize,1007,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2117
https://github.com/psi4/psi4/issues/2117:1187,Performance,optimiz,optimize,1187,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2117
https://github.com/psi4/psi4/issues/2117:347,Testability,test,tests,347,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2117
https://github.com/psi4/psi4/issues/2117:602,Usability,guid,guide,602,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2117
https://github.com/psi4/psi4/issues/2119:78,Energy Efficiency,energy,energy-not-equal-to-those-of-other-programs,78,"Carrying forward a recent [forum report](http://forum.psicode.org/t/df-casscf-energy-not-equal-to-those-of-other-programs/2064/4). The report has a working example of the behavior. Suppose you compute a DF-CASSCF wavefunction with an initial DF-HF wavefunction, and an initial conventional-integral HF wavefunction. In both cases, you change the orbitals because you have a better initial guess. The CASSCF energy should be the same in both cases, as long as the two attempts converge to the same state. No way these two initial wavefunctions differ should change the final result, not even their different initial Fock matrices. But for the reporter's example, the two have an energy difference of 14 microHartrees.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2119
https://github.com/psi4/psi4/issues/2119:407,Energy Efficiency,energy,energy,407,"Carrying forward a recent [forum report](http://forum.psicode.org/t/df-casscf-energy-not-equal-to-those-of-other-programs/2064/4). The report has a working example of the behavior. Suppose you compute a DF-CASSCF wavefunction with an initial DF-HF wavefunction, and an initial conventional-integral HF wavefunction. In both cases, you change the orbitals because you have a better initial guess. The CASSCF energy should be the same in both cases, as long as the two attempts converge to the same state. No way these two initial wavefunctions differ should change the final result, not even their different initial Fock matrices. But for the reporter's example, the two have an energy difference of 14 microHartrees.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2119
https://github.com/psi4/psi4/issues/2119:678,Energy Efficiency,energy,energy,678,"Carrying forward a recent [forum report](http://forum.psicode.org/t/df-casscf-energy-not-equal-to-those-of-other-programs/2064/4). The report has a working example of the behavior. Suppose you compute a DF-CASSCF wavefunction with an initial DF-HF wavefunction, and an initial conventional-integral HF wavefunction. In both cases, you change the orbitals because you have a better initial guess. The CASSCF energy should be the same in both cases, as long as the two attempts converge to the same state. No way these two initial wavefunctions differ should change the final result, not even their different initial Fock matrices. But for the reporter's example, the two have an energy difference of 14 microHartrees.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2119
https://github.com/psi4/psi4/issues/2120:462,Energy Efficiency,energy,energy,462,"DF-CC freaks out when linear dependencies are present, and i tracked the issue to an inconsistency between reference_wavefunction_->nmopi() and reference_wavefunction_->Ca()->coldim(). The latter has the correct value when linear dependencies are removed. . Should nmopi() and Ca()->coldim() be consistent in this case?. Minimal input:; ```; molecule { ; o ; h 1 1.0; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; scf_type df; cc_type df; s_tolerance 1e-3; }; energy('ccsd'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2120
https://github.com/psi4/psi4/issues/2120:29,Integrability,depend,dependencies,29,"DF-CC freaks out when linear dependencies are present, and i tracked the issue to an inconsistency between reference_wavefunction_->nmopi() and reference_wavefunction_->Ca()->coldim(). The latter has the correct value when linear dependencies are removed. . Should nmopi() and Ca()->coldim() be consistent in this case?. Minimal input:; ```; molecule { ; o ; h 1 1.0; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; scf_type df; cc_type df; s_tolerance 1e-3; }; energy('ccsd'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2120
https://github.com/psi4/psi4/issues/2120:230,Integrability,depend,dependencies,230,"DF-CC freaks out when linear dependencies are present, and i tracked the issue to an inconsistency between reference_wavefunction_->nmopi() and reference_wavefunction_->Ca()->coldim(). The latter has the correct value when linear dependencies are removed. . Should nmopi() and Ca()->coldim() be consistent in this case?. Minimal input:; ```; molecule { ; o ; h 1 1.0; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; scf_type df; cc_type df; s_tolerance 1e-3; }; energy('ccsd'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2120
https://github.com/psi4/psi4/issues/2121:254,Testability,test,tests,254,Forum feature request: http://forum.psicode.org/t/r2scan-3c-for-biomolecules/2066; paper: https://doi.org/10.1063/5.0040021. Will require:; - [x] new gCP code (see also #1898) (LAB edit: #2791); - [x] DFT-D4 (see also #1710) ; - [x] new basis set; - [ ] tests and documentation. This is also something I'd like personally.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2121
https://github.com/psi4/psi4/issues/2122:175,Energy Efficiency,energy,energy,175,"Consider the following simple input file:; ```; molecule { ; symmetry c1; 0 2; C ; N 1 r1 . r1 = 1.17; }. set reference uhf ; set diis_start 3; set stability_analysis follow; energy('hf/cc-pvdz'); ```. Stability analysis gives ; ```; => Iterations <=. Iter Converged Subspace Residual; DLU 1 0 1 6.419E-01; DLU 2 0 2 3.750E-01; DLU 3 0 3 2.147E-01; DLU 4 0 4 1.520E-01; DLU 5 0 5 8.829E-02; DLU 6 0 6 2.804E-02; DLU 7 0 7 5.664E-03; DLU 8 0 8 2.645E-03; DLU 9 0 9 6.334E-04; DLU 10 0 10 1.096E-04; DLU 11 0 11 1.377E-05; DLU 12 0 12 3.046E-06; DLU 13 1 13 4.870E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: 0.136742; Lowest UHF->UHF stability eigenvalues:; A 0.136742; ```. If you add symmetry, you get; ```; => Iterations <=. Iter Converged Subspace Residual; DLU 1 0 1 2.389E-01; DLU 2 0 2 8.290E-02; DLU 3 0 3 5.100E-02; ```; ...; ```; DLU 79 0 13 2.402E-05; DLU 80 0 3 2.963E-06; DLU 81 0 4 3.426E-06; DLU 82 1 5 8.990E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: -0.000000; Lowest UHF->UHF stability eigenvalues:; B2 -0.000000 B1 -0.000000 A2 -0.000000 A1 0.110020; ```. For reference, the conventional integral analysis gives lowest eigenvalues of `B2 0.136642 B1 0.136642 A2 0.163586 A1 0.163586`, so the `0.110020` number is simply _wrong_. Of course, the real fix for this issue is #1005, but I call Roberto saying that symmetry and DF integrals weren't working in TD-DFT using the new solvers either. Time for me to do more yak shaving, then.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2122
https://github.com/psi4/psi4/issues/2122:23,Usability,simpl,simple,23,"Consider the following simple input file:; ```; molecule { ; symmetry c1; 0 2; C ; N 1 r1 . r1 = 1.17; }. set reference uhf ; set diis_start 3; set stability_analysis follow; energy('hf/cc-pvdz'); ```. Stability analysis gives ; ```; => Iterations <=. Iter Converged Subspace Residual; DLU 1 0 1 6.419E-01; DLU 2 0 2 3.750E-01; DLU 3 0 3 2.147E-01; DLU 4 0 4 1.520E-01; DLU 5 0 5 8.829E-02; DLU 6 0 6 2.804E-02; DLU 7 0 7 5.664E-03; DLU 8 0 8 2.645E-03; DLU 9 0 9 6.334E-04; DLU 10 0 10 1.096E-04; DLU 11 0 11 1.377E-05; DLU 12 0 12 3.046E-06; DLU 13 1 13 4.870E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: 0.136742; Lowest UHF->UHF stability eigenvalues:; A 0.136742; ```. If you add symmetry, you get; ```; => Iterations <=. Iter Converged Subspace Residual; DLU 1 0 1 2.389E-01; DLU 2 0 2 8.290E-02; DLU 3 0 3 5.100E-02; ```; ...; ```; DLU 79 0 13 2.402E-05; DLU 80 0 3 2.963E-06; DLU 81 0 4 3.426E-06; DLU 82 1 5 8.990E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: -0.000000; Lowest UHF->UHF stability eigenvalues:; B2 -0.000000 B1 -0.000000 A2 -0.000000 A1 0.110020; ```. For reference, the conventional integral analysis gives lowest eigenvalues of `B2 0.136642 B1 0.136642 A2 0.163586 A1 0.163586`, so the `0.110020` number is simply _wrong_. Of course, the real fix for this issue is #1005, but I call Roberto saying that symmetry and DF integrals weren't working in TD-DFT using the new solvers either. Time for me to do more yak shaving, then.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2122
https://github.com/psi4/psi4/issues/2122:1381,Usability,simpl,simply,1381,"Consider the following simple input file:; ```; molecule { ; symmetry c1; 0 2; C ; N 1 r1 . r1 = 1.17; }. set reference uhf ; set diis_start 3; set stability_analysis follow; energy('hf/cc-pvdz'); ```. Stability analysis gives ; ```; => Iterations <=. Iter Converged Subspace Residual; DLU 1 0 1 6.419E-01; DLU 2 0 2 3.750E-01; DLU 3 0 3 2.147E-01; DLU 4 0 4 1.520E-01; DLU 5 0 5 8.829E-02; DLU 6 0 6 2.804E-02; DLU 7 0 7 5.664E-03; DLU 8 0 8 2.645E-03; DLU 9 0 9 6.334E-04; DLU 10 0 10 1.096E-04; DLU 11 0 11 1.377E-05; DLU 12 0 12 3.046E-06; DLU 13 1 13 4.870E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: 0.136742; Lowest UHF->UHF stability eigenvalues:; A 0.136742; ```. If you add symmetry, you get; ```; => Iterations <=. Iter Converged Subspace Residual; DLU 1 0 1 2.389E-01; DLU 2 0 2 8.290E-02; DLU 3 0 3 5.100E-02; ```; ...; ```; DLU 79 0 13 2.402E-05; DLU 80 0 3 2.963E-06; DLU 81 0 4 3.426E-06; DLU 82 1 5 8.990E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: -0.000000; Lowest UHF->UHF stability eigenvalues:; B2 -0.000000 B1 -0.000000 A2 -0.000000 A1 0.110020; ```. For reference, the conventional integral analysis gives lowest eigenvalues of `B2 0.136642 B1 0.136642 A2 0.163586 A1 0.163586`, so the `0.110020` number is simply _wrong_. Of course, the real fix for this issue is #1005, but I call Roberto saying that symmetry and DF integrals weren't working in TD-DFT using the new solvers either. Time for me to do more yak shaving, then.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2122
https://github.com/psi4/psi4/pull/2123:209,Deployability,toggle,toggles,209,## Description; as it says on the tin. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] upload Windows package to anaconda.org; - [x] conda.build bool toggles PR conda testing while master is always on. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2123
https://github.com/psi4/psi4/pull/2123:226,Testability,test,testing,226,## Description; as it says on the tin. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] upload Windows package to anaconda.org; - [x] conda.build bool toggles PR conda testing while master is always on. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2123
https://github.com/psi4/psi4/pull/2124:765,Integrability,contract,contracting,765,"## Description; This PR fixes a bug causing TD-DFT and stability analysis to give incorrect results (or diverge) when used with density-fitting and symmetry : more generally, the bug occurs any time JK objects used back-transformed C matrices that weren't totally symmetric. This is ultimately an issue of orbital indexing. When the left index of the generalized C matrix is back-transformed from SO to AO, the blocks need to be flattened together. The code previously combined the blocks from smallest h to lowest h. So columns of irrep `h ^ symmetry_` appear _in order of h ascending_, with the left C assumed totally symmetric. The matrices have different orbital indexing if your right C `symmetry_` is not totally symmetric! This produced inconsistencies when contracting quantities against each other that inherited this indexing. The fix is simple: change the order we back-transform irreps of the right matrix, so the order of orbitals is consistent and `symmetry_`-independent. Closes #2122. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Bugfix: Can now converge TD-SCF with DF and symmetry; - [x] Bugfix: Can now get correct stability analysis with DF and symmetry. ## Checklist; - [x] Tests added for newly working TD-SCF - they pass; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2124
https://github.com/psi4/psi4/pull/2124:812,Modifiability,inherit,inherited,812,"## Description; This PR fixes a bug causing TD-DFT and stability analysis to give incorrect results (or diverge) when used with density-fitting and symmetry : more generally, the bug occurs any time JK objects used back-transformed C matrices that weren't totally symmetric. This is ultimately an issue of orbital indexing. When the left index of the generalized C matrix is back-transformed from SO to AO, the blocks need to be flattened together. The code previously combined the blocks from smallest h to lowest h. So columns of irrep `h ^ symmetry_` appear _in order of h ascending_, with the left C assumed totally symmetric. The matrices have different orbital indexing if your right C `symmetry_` is not totally symmetric! This produced inconsistencies when contracting quantities against each other that inherited this indexing. The fix is simple: change the order we back-transform irreps of the right matrix, so the order of orbitals is consistent and `symmetry_`-independent. Closes #2122. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Bugfix: Can now converge TD-SCF with DF and symmetry; - [x] Bugfix: Can now get correct stability analysis with DF and symmetry. ## Checklist; - [x] Tests added for newly working TD-SCF - they pass; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2124
https://github.com/psi4/psi4/pull/2124:1257,Testability,Test,Tests,1257,"## Description; This PR fixes a bug causing TD-DFT and stability analysis to give incorrect results (or diverge) when used with density-fitting and symmetry : more generally, the bug occurs any time JK objects used back-transformed C matrices that weren't totally symmetric. This is ultimately an issue of orbital indexing. When the left index of the generalized C matrix is back-transformed from SO to AO, the blocks need to be flattened together. The code previously combined the blocks from smallest h to lowest h. So columns of irrep `h ^ symmetry_` appear _in order of h ascending_, with the left C assumed totally symmetric. The matrices have different orbital indexing if your right C `symmetry_` is not totally symmetric! This produced inconsistencies when contracting quantities against each other that inherited this indexing. The fix is simple: change the order we back-transform irreps of the right matrix, so the order of orbitals is consistent and `symmetry_`-independent. Closes #2122. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Bugfix: Can now converge TD-SCF with DF and symmetry; - [x] Bugfix: Can now get correct stability analysis with DF and symmetry. ## Checklist; - [x] Tests added for newly working TD-SCF - they pass; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2124
https://github.com/psi4/psi4/pull/2124:1319,Testability,test,tests,1319,"## Description; This PR fixes a bug causing TD-DFT and stability analysis to give incorrect results (or diverge) when used with density-fitting and symmetry : more generally, the bug occurs any time JK objects used back-transformed C matrices that weren't totally symmetric. This is ultimately an issue of orbital indexing. When the left index of the generalized C matrix is back-transformed from SO to AO, the blocks need to be flattened together. The code previously combined the blocks from smallest h to lowest h. So columns of irrep `h ^ symmetry_` appear _in order of h ascending_, with the left C assumed totally symmetric. The matrices have different orbital indexing if your right C `symmetry_` is not totally symmetric! This produced inconsistencies when contracting quantities against each other that inherited this indexing. The fix is simple: change the order we back-transform irreps of the right matrix, so the order of orbitals is consistent and `symmetry_`-independent. Closes #2122. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Bugfix: Can now converge TD-SCF with DF and symmetry; - [x] Bugfix: Can now get correct stability analysis with DF and symmetry. ## Checklist; - [x] Tests added for newly working TD-SCF - they pass; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2124
https://github.com/psi4/psi4/pull/2124:848,Usability,simpl,simple,848,"## Description; This PR fixes a bug causing TD-DFT and stability analysis to give incorrect results (or diverge) when used with density-fitting and symmetry : more generally, the bug occurs any time JK objects used back-transformed C matrices that weren't totally symmetric. This is ultimately an issue of orbital indexing. When the left index of the generalized C matrix is back-transformed from SO to AO, the blocks need to be flattened together. The code previously combined the blocks from smallest h to lowest h. So columns of irrep `h ^ symmetry_` appear _in order of h ascending_, with the left C assumed totally symmetric. The matrices have different orbital indexing if your right C `symmetry_` is not totally symmetric! This produced inconsistencies when contracting quantities against each other that inherited this indexing. The fix is simple: change the order we back-transform irreps of the right matrix, so the order of orbitals is consistent and `symmetry_`-independent. Closes #2122. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Bugfix: Can now converge TD-SCF with DF and symmetry; - [x] Bugfix: Can now get correct stability analysis with DF and symmetry. ## Checklist; - [x] Tests added for newly working TD-SCF - they pass; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2124
https://github.com/psi4/psi4/issues/2125:228,Availability,ping,ping,228,The page for [obtaining Psi4](https://psicode.org/psi4manual/master/build_obtaining.html) has a mixture of broken links and outdated information. Reported on [forums](https://github.com/psi4/psi4/issues/2125). Obligatory @hokru ping.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2125
https://github.com/psi4/psi4/pull/2126:253,Availability,ping,ping,253,"## Description; ~adds electric dipole polarizability, optical rotation, and electric dipole / magnetic dipole tensors to the `can_do_properties_` list so that they are correctly passed into `ret.extras` during a `run_qcshema` call. @loriab told you I'd ping you soon.~. both `omega` and `gauge` are picked up properly from Atomic Input keywords as well. . UPDATE: `_can_do_properties` was really acting as more of a ""default properties"" list, so the logic in `run_qcschema` had to be changed instead. . ## Todos; - [x] `_can_do_properties` -> `_default_properties`; - [x] remove can-do filter from `run_qcschema` (kept default properties); - [x] `run_qcschema` checks for `properties` list in `json['kwargs']` now instead of `json['model']`; - [x] new test . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2126
https://github.com/psi4/psi4/pull/2126:356,Deployability,UPDATE,UPDATE,356,"## Description; ~adds electric dipole polarizability, optical rotation, and electric dipole / magnetic dipole tensors to the `can_do_properties_` list so that they are correctly passed into `ret.extras` during a `run_qcshema` call. @loriab told you I'd ping you soon.~. both `omega` and `gauge` are picked up properly from Atomic Input keywords as well. . UPDATE: `_can_do_properties` was really acting as more of a ""default properties"" list, so the logic in `run_qcschema` had to be changed instead. . ## Todos; - [x] `_can_do_properties` -> `_default_properties`; - [x] remove can-do filter from `run_qcschema` (kept default properties); - [x] `run_qcschema` checks for `properties` list in `json['kwargs']` now instead of `json['model']`; - [x] new test . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2126
https://github.com/psi4/psi4/pull/2126:450,Testability,log,logic,450,"## Description; ~adds electric dipole polarizability, optical rotation, and electric dipole / magnetic dipole tensors to the `can_do_properties_` list so that they are correctly passed into `ret.extras` during a `run_qcshema` call. @loriab told you I'd ping you soon.~. both `omega` and `gauge` are picked up properly from Atomic Input keywords as well. . UPDATE: `_can_do_properties` was really acting as more of a ""default properties"" list, so the logic in `run_qcschema` had to be changed instead. . ## Todos; - [x] `_can_do_properties` -> `_default_properties`; - [x] remove can-do filter from `run_qcschema` (kept default properties); - [x] `run_qcschema` checks for `properties` list in `json['kwargs']` now instead of `json['model']`; - [x] new test . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2126
https://github.com/psi4/psi4/pull/2126:752,Testability,test,test,752,"## Description; ~adds electric dipole polarizability, optical rotation, and electric dipole / magnetic dipole tensors to the `can_do_properties_` list so that they are correctly passed into `ret.extras` during a `run_qcshema` call. @loriab told you I'd ping you soon.~. both `omega` and `gauge` are picked up properly from Atomic Input keywords as well. . UPDATE: `_can_do_properties` was really acting as more of a ""default properties"" list, so the logic in `run_qcschema` had to be changed instead. . ## Todos; - [x] `_can_do_properties` -> `_default_properties`; - [x] remove can-do filter from `run_qcschema` (kept default properties); - [x] `run_qcschema` checks for `properties` list in `json['kwargs']` now instead of `json['model']`; - [x] new test . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2126
https://github.com/psi4/psi4/pull/2127:613,Integrability,rout,routine,613,"## Description; New MBIS functionality enables computation of atom-in-molecule (AIM) volumes (<r^3>). More often in force field development, a volume ratio between the AIM volume and the free atom is needed (basically describes the difference in atomic volume between a free atom and an atom in a molecule). This PR automates the computation of MBIS volume ratios by computing free-atom densities at the same level of theory as the molecule. The free-atom computations are on the ground state of a given atom, with the multiplicity taken from the SAD code. These free-atom densities are then run through the MBIS routine, and volumes are computed along with the desired volume ratios. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Automate computation of unique free-atom densities; - [X] Compute volume ratio in MBIS routine. ## Questions; - [ ] Running the MBIS code now causes many UHF computations to run, do we need all of the printing here?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2127
https://github.com/psi4/psi4/pull/2127:879,Integrability,rout,routine,879,"## Description; New MBIS functionality enables computation of atom-in-molecule (AIM) volumes (<r^3>). More often in force field development, a volume ratio between the AIM volume and the free atom is needed (basically describes the difference in atomic volume between a free atom and an atom in a molecule). This PR automates the computation of MBIS volume ratios by computing free-atom densities at the same level of theory as the molecule. The free-atom computations are on the ground state of a given atom, with the multiplicity taken from the SAD code. These free-atom densities are then run through the MBIS routine, and volumes are computed along with the desired volume ratios. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Automate computation of unique free-atom densities; - [X] Compute volume ratio in MBIS routine. ## Questions; - [ ] Running the MBIS code now causes many UHF computations to run, do we need all of the printing here?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2127
https://github.com/psi4/psi4/pull/2127:1029,Testability,Test,Tests,1029,"## Description; New MBIS functionality enables computation of atom-in-molecule (AIM) volumes (<r^3>). More often in force field development, a volume ratio between the AIM volume and the free atom is needed (basically describes the difference in atomic volume between a free atom and an atom in a molecule). This PR automates the computation of MBIS volume ratios by computing free-atom densities at the same level of theory as the molecule. The free-atom computations are on the ground state of a given atom, with the multiplicity taken from the SAD code. These free-atom densities are then run through the MBIS routine, and volumes are computed along with the desired volume ratios. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Automate computation of unique free-atom densities; - [X] Compute volume ratio in MBIS routine. ## Questions; - [ ] Running the MBIS code now causes many UHF computations to run, do we need all of the printing here?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2127
https://github.com/psi4/psi4/pull/2127:1103,Testability,test,tests,1103,"## Description; New MBIS functionality enables computation of atom-in-molecule (AIM) volumes (<r^3>). More often in force field development, a volume ratio between the AIM volume and the free atom is needed (basically describes the difference in atomic volume between a free atom and an atom in a molecule). This PR automates the computation of MBIS volume ratios by computing free-atom densities at the same level of theory as the molecule. The free-atom computations are on the ground state of a given atom, with the multiplicity taken from the SAD code. These free-atom densities are then run through the MBIS routine, and volumes are computed along with the desired volume ratios. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Automate computation of unique free-atom densities; - [X] Compute volume ratio in MBIS routine. ## Questions; - [ ] Running the MBIS code now causes many UHF computations to run, do we need all of the printing here?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2127
https://github.com/psi4/psi4/pull/2127:1194,Testability,test,tests,1194,"## Description; New MBIS functionality enables computation of atom-in-molecule (AIM) volumes (<r^3>). More often in force field development, a volume ratio between the AIM volume and the free atom is needed (basically describes the difference in atomic volume between a free atom and an atom in a molecule). This PR automates the computation of MBIS volume ratios by computing free-atom densities at the same level of theory as the molecule. The free-atom computations are on the ground state of a given atom, with the multiplicity taken from the SAD code. These free-atom densities are then run through the MBIS routine, and volumes are computed along with the desired volume ratios. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Automate computation of unique free-atom densities; - [X] Compute volume ratio in MBIS routine. ## Questions; - [ ] Running the MBIS code now causes many UHF computations to run, do we need all of the printing here?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2127
https://github.com/psi4/psi4/pull/2128:290,Deployability,update,update,290,## Description; Remove some unused files. Bump qcel -- the 0.19 isn't strictly needed but it'll avert some bad qcel+pydantic combinations in the wild. Bump v2rdm -- @hokru noticed an incompatibility after #2100 . . ## Questions; - [ ] May as well wait on this PR until determine if safe to update reference of fchk+dct test. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2128
https://github.com/psi4/psi4/pull/2128:282,Safety,safe,safe,282,## Description; Remove some unused files. Bump qcel -- the 0.19 isn't strictly needed but it'll avert some bad qcel+pydantic combinations in the wild. Bump v2rdm -- @hokru noticed an incompatibility after #2100 . . ## Questions; - [ ] May as well wait on this PR until determine if safe to update reference of fchk+dct test. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2128
https://github.com/psi4/psi4/pull/2128:319,Testability,test,test,319,## Description; Remove some unused files. Bump qcel -- the 0.19 isn't strictly needed but it'll avert some bad qcel+pydantic combinations in the wild. Bump v2rdm -- @hokru noticed an incompatibility after #2100 . . ## Questions; - [ ] May as well wait on this PR until determine if safe to update reference of fchk+dct test. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2128
https://github.com/psi4/psi4/pull/2128:345,Testability,Test,Tests,345,## Description; Remove some unused files. Bump qcel -- the 0.19 isn't strictly needed but it'll avert some bad qcel+pydantic combinations in the wild. Bump v2rdm -- @hokru noticed an incompatibility after #2100 . . ## Questions; - [ ] May as well wait on this PR until determine if safe to update reference of fchk+dct test. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2128
https://github.com/psi4/psi4/pull/2128:419,Testability,test,tests,419,## Description; Remove some unused files. Bump qcel -- the 0.19 isn't strictly needed but it'll avert some bad qcel+pydantic combinations in the wild. Bump v2rdm -- @hokru noticed an incompatibility after #2100 . . ## Questions; - [ ] May as well wait on this PR until determine if safe to update reference of fchk+dct test. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2128
https://github.com/psi4/psi4/pull/2128:510,Testability,test,tests,510,## Description; Remove some unused files. Bump qcel -- the 0.19 isn't strictly needed but it'll avert some bad qcel+pydantic combinations in the wild. Bump v2rdm -- @hokru noticed an incompatibility after #2100 . . ## Questions; - [ ] May as well wait on this PR until determine if safe to update reference of fchk+dct test. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2128
https://github.com/psi4/psi4/pull/2129:268,Security,access,access,268,## Description; Addresses a linker warning when building on OSX.; Original change in 703c8a07b238249134424fd938374eae01d8c5af.; related: https://stackoverflow.com/questions/9894961/strange-warnings-from-the-linker-ld. example of the warning:; ```; ld: warning: direct access in function '__GLOBAL__sub_I_blas_diis.cc' from file 'psi4/psimrcc/libpsimrcc.a(blas_diis.cc.o)' to global weak symbol '__ZNSt6vectorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ESaIS7_EED1Ev' from file 'CMakeFiles/core.dir/create_new_plugin.cc.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; ```. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2129
https://github.com/psi4/psi4/pull/2129:734,Testability,test,tests,734,## Description; Addresses a linker warning when building on OSX.; Original change in 703c8a07b238249134424fd938374eae01d8c5af.; related: https://stackoverflow.com/questions/9894961/strange-warnings-from-the-linker-ld. example of the warning:; ```; ld: warning: direct access in function '__GLOBAL__sub_I_blas_diis.cc' from file 'psi4/psimrcc/libpsimrcc.a(blas_diis.cc.o)' to global weak symbol '__ZNSt6vectorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ESaIS7_EED1Ev' from file 'CMakeFiles/core.dir/create_new_plugin.cc.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; ```. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2129
https://github.com/psi4/psi4/issues/2130:480,Testability,test,testing,480,"Hello! Thank you all for this amazing piece of code. . I would just like to know if it is possible to obtain the analytical gradient decomposed. In particular, I would like to know if the call:. `wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs)`. can be modified to get me the gradient per KS-MO, exchange-correlation, and nuclear repulsion in a KS-DFT calculation (ideally from the Python API). I think this could be useful for many purposes, e.g. testing analytical gradients for custom Wee terms of the Hamiltonian, for instance; and it just requires exposing it. . Thanks in advance!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2130
https://github.com/psi4/psi4/pull/2131:182,Energy Efficiency,charge,charges,182,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request adds electrostatic embedding capabilities to the F-SAPT code. Previously, the point charges could only be assigned to the environment. Now point charges can be included with either the interacting fragments A and B or the external environment C. This PR adds support only for point charges. Future PRs can potentially add support for more complex external potentials but this is not intended here. The external potential interface is currently under revision in #2069. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Add electrostatic embedding to the F-SAPT code. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2131
https://github.com/psi4/psi4/pull/2131:243,Energy Efficiency,charge,charges,243,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request adds electrostatic embedding capabilities to the F-SAPT code. Previously, the point charges could only be assigned to the environment. Now point charges can be included with either the interacting fragments A and B or the external environment C. This PR adds support only for point charges. Future PRs can potentially add support for more complex external potentials but this is not intended here. The external potential interface is currently under revision in #2069. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Add electrostatic embedding to the F-SAPT code. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2131
https://github.com/psi4/psi4/pull/2131:380,Energy Efficiency,charge,charges,380,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request adds electrostatic embedding capabilities to the F-SAPT code. Previously, the point charges could only be assigned to the environment. Now point charges can be included with either the interacting fragments A and B or the external environment C. This PR adds support only for point charges. Future PRs can potentially add support for more complex external potentials but this is not intended here. The external potential interface is currently under revision in #2069. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Add electrostatic embedding to the F-SAPT code. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2131
https://github.com/psi4/psi4/pull/2131:519,Integrability,interface,interface,519,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request adds electrostatic embedding capabilities to the F-SAPT code. Previously, the point charges could only be assigned to the environment. Now point charges can be included with either the interacting fragments A and B or the external environment C. This PR adds support only for point charges. Future PRs can potentially add support for more complex external potentials but this is not intended here. The external potential interface is currently under revision in #2069. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Add electrostatic embedding to the F-SAPT code. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2131
https://github.com/psi4/psi4/pull/2131:764,Testability,Test,Tests,764,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request adds electrostatic embedding capabilities to the F-SAPT code. Previously, the point charges could only be assigned to the environment. Now point charges can be included with either the interacting fragments A and B or the external environment C. This PR adds support only for point charges. Future PRs can potentially add support for more complex external potentials but this is not intended here. The external potential interface is currently under revision in #2069. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Add electrostatic embedding to the F-SAPT code. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2131
https://github.com/psi4/psi4/pull/2131:838,Testability,test,tests,838,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request adds electrostatic embedding capabilities to the F-SAPT code. Previously, the point charges could only be assigned to the environment. Now point charges can be included with either the interacting fragments A and B or the external environment C. This PR adds support only for point charges. Future PRs can potentially add support for more complex external potentials but this is not intended here. The external potential interface is currently under revision in #2069. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Add electrostatic embedding to the F-SAPT code. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2131
https://github.com/psi4/psi4/pull/2131:929,Testability,test,tests,929,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request adds electrostatic embedding capabilities to the F-SAPT code. Previously, the point charges could only be assigned to the environment. Now point charges can be included with either the interacting fragments A and B or the external environment C. This PR adds support only for point charges. Future PRs can potentially add support for more complex external potentials but this is not intended here. The external potential interface is currently under revision in #2069. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Add electrostatic embedding to the F-SAPT code. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2131
https://github.com/psi4/psi4/pull/2132:205,Deployability,update,update,205,"## Description; This PR implements extrapolation of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:399,Energy Efficiency,energy,energy,399,"## Description; This PR implements extrapolation of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:616,Energy Efficiency,power,power,616,"## Description; This PR implements extrapolation of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:981,Energy Efficiency,energy,energy,981,"of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or releva",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:1058,Energy Efficiency,energy,energy,1058,"of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or releva",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:1590,Energy Efficiency,ENERGY,ENERGY,1590,"urrently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:1648,Energy Efficiency,ENERGY,ENERGY,1648,"urrently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:1846,Energy Efficiency,ENERGY,ENERGY,1846,"urrently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:1967,Energy Efficiency,ENERGY,ENERGY,1967,"urrently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:81,Integrability,interface,interface,81,"## Description; This PR implements extrapolation of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:1009,Integrability,interface,interface,1009,"of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or releva",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:1088,Integrability,interface,interface,1088,"of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or releva",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:1914,Modifiability,variab,variables,1914,"urrently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:1995,Testability,Test,Tests,1995,"urrently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:2069,Testability,test,tests,2069,"urrently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:2160,Testability,test,tests,2160,"urrently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2132:475,Usability,simpl,simple,475,"## Description; This PR implements extrapolation of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2132
https://github.com/psi4/psi4/pull/2134:621,Deployability,update,updated,621,"## Description; This adds new DF basis files for dzvp. dgauss-dzvp-autoaux was generated using the autoaux program (courtesy Susi Lehtola). This is a short-term solution for the current problem that there is no working DF basis for dzvp, as it is an all-electron basis for elements going beyond Kr. dgauss-dzvp-mix contains a mixture of the previous default, def2-qzvpp-jkfit for H-Br, and dgauss-dzvp-autoaux for heavier elements. The purpose of this DF basis is to avoid the performance decrease (without affecting accuracy) that comes with using dgauss-dzvp-autoaux for all elements. `basislistother.py` has also been updated to use dgauss-dzvp-mix for jkfit and dgauss-dzvp-autoaux for rifit. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Benchmark of basis sets and DF basis sets for conformational energies; [combined-results.pdf](https://github.com/psi4/psi4/files/6167929/combined-results.pdf)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2134
https://github.com/psi4/psi4/pull/2134:477,Performance,perform,performance,477,"## Description; This adds new DF basis files for dzvp. dgauss-dzvp-autoaux was generated using the autoaux program (courtesy Susi Lehtola). This is a short-term solution for the current problem that there is no working DF basis for dzvp, as it is an all-electron basis for elements going beyond Kr. dgauss-dzvp-mix contains a mixture of the previous default, def2-qzvpp-jkfit for H-Br, and dgauss-dzvp-autoaux for heavier elements. The purpose of this DF basis is to avoid the performance decrease (without affecting accuracy) that comes with using dgauss-dzvp-autoaux for all elements. `basislistother.py` has also been updated to use dgauss-dzvp-mix for jkfit and dgauss-dzvp-autoaux for rifit. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Benchmark of basis sets and DF basis sets for conformational energies; [combined-results.pdf](https://github.com/psi4/psi4/files/6167929/combined-results.pdf)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2134
https://github.com/psi4/psi4/pull/2134:467,Safety,avoid,avoid,467,"## Description; This adds new DF basis files for dzvp. dgauss-dzvp-autoaux was generated using the autoaux program (courtesy Susi Lehtola). This is a short-term solution for the current problem that there is no working DF basis for dzvp, as it is an all-electron basis for elements going beyond Kr. dgauss-dzvp-mix contains a mixture of the previous default, def2-qzvpp-jkfit for H-Br, and dgauss-dzvp-autoaux for heavier elements. The purpose of this DF basis is to avoid the performance decrease (without affecting accuracy) that comes with using dgauss-dzvp-autoaux for all elements. `basislistother.py` has also been updated to use dgauss-dzvp-mix for jkfit and dgauss-dzvp-autoaux for rifit. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Benchmark of basis sets and DF basis sets for conformational energies; [combined-results.pdf](https://github.com/psi4/psi4/files/6167929/combined-results.pdf)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2134
https://github.com/psi4/psi4/pull/2134:758,Testability,Benchmark,Benchmark,758,"## Description; This adds new DF basis files for dzvp. dgauss-dzvp-autoaux was generated using the autoaux program (courtesy Susi Lehtola). This is a short-term solution for the current problem that there is no working DF basis for dzvp, as it is an all-electron basis for elements going beyond Kr. dgauss-dzvp-mix contains a mixture of the previous default, def2-qzvpp-jkfit for H-Br, and dgauss-dzvp-autoaux for heavier elements. The purpose of this DF basis is to avoid the performance decrease (without affecting accuracy) that comes with using dgauss-dzvp-autoaux for all elements. `basislistother.py` has also been updated to use dgauss-dzvp-mix for jkfit and dgauss-dzvp-autoaux for rifit. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Benchmark of basis sets and DF basis sets for conformational energies; [combined-results.pdf](https://github.com/psi4/psi4/files/6167929/combined-results.pdf)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2134
https://github.com/psi4/psi4/pull/2135:964,Availability,avail,available,964,"## Description; This will upgrade our ECP engine from the native implementation to the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2135
https://github.com/psi4/psi4/pull/2135:1275,Availability,avail,availability,1275,"o the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2135
https://github.com/psi4/psi4/pull/2135:26,Deployability,upgrade,upgrade,26,"## Description; This will upgrade our ECP engine from the native implementation to the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2135
https://github.com/psi4/psi4/pull/2135:1168,Deployability,Install,Installation,1168,"o the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2135
https://github.com/psi4/psi4/pull/2135:588,Integrability,depend,depending,588,"## Description; This will upgrade our ECP engine from the native implementation to the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2135
https://github.com/psi4/psi4/pull/2135:1300,Integrability,message,message,1300,"o the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2135
https://github.com/psi4/psi4/pull/2135:265,Performance,perform,performance,265,"## Description; This will upgrade our ECP engine from the native implementation to the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2135
https://github.com/psi4/psi4/pull/2135:1442,Security,access,access,1442,"o the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2135
https://github.com/psi4/psi4/pull/2135:549,Testability,test,tests,549,"## Description; This will upgrade our ECP engine from the native implementation to the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2135
https://github.com/psi4/psi4/pull/2135:1852,Testability,Test,Tests,1852,"o the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2135
https://github.com/psi4/psi4/pull/2135:1926,Testability,test,tests,1926,"o the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2135
https://github.com/psi4/psi4/pull/2135:2017,Testability,test,tests,2017,"o the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2135
https://github.com/psi4/psi4/pull/2135:1261,Usability,simpl,simplicity,1261,"o the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2135
https://github.com/psi4/psi4/issues/2136:443,Availability,Error,Error,443,"Explanation:; When attempting to run gradients with CC2 or CC3 using density fitting (but not CCD, CCSD, or CCSD(T), the computation fails when attempting to initialize a new DPD instance, as the old one was not properly freed. When testing with BCCD, it failed due to the DF_BASIS_CC not being automatically set (and it didn't seem to accept my attempts to set it). Version: 1.4rc1; Installation source: conda install psi4 -c psi4/label/dev. Error message; ```; Traceback (most recent call last):; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 24, in <module>; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 675, in gradient; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver_cbs.py"", line 1960, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2731, in run_ccenergy_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: Attempting to initialize new DPD instance before the old one was freed.; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1615423313523/work/psi4/src/psi4/libdpd/init.cc on line: 68; The most recent 5 function calls were:; ```. Minimal example; ```; molecule {; H; H 1 1; }. set cc_type df. gradient('CC2/cc-pVDZ'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2136
https://github.com/psi4/psi4/issues/2136:1456,Availability,Error,Error,1456,"Explanation:; When attempting to run gradients with CC2 or CC3 using density fitting (but not CCD, CCSD, or CCSD(T), the computation fails when attempting to initialize a new DPD instance, as the old one was not properly freed. When testing with BCCD, it failed due to the DF_BASIS_CC not being automatically set (and it didn't seem to accept my attempts to set it). Version: 1.4rc1; Installation source: conda install psi4 -c psi4/label/dev. Error message; ```; Traceback (most recent call last):; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 24, in <module>; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 675, in gradient; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver_cbs.py"", line 1960, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2731, in run_ccenergy_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: Attempting to initialize new DPD instance before the old one was freed.; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1615423313523/work/psi4/src/psi4/libdpd/init.cc on line: 68; The most recent 5 function calls were:; ```. Minimal example; ```; molecule {; H; H 1 1; }. set cc_type df. gradient('CC2/cc-pVDZ'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2136
https://github.com/psi4/psi4/issues/2136:1536,Availability,Error,Error,1536,"Explanation:; When attempting to run gradients with CC2 or CC3 using density fitting (but not CCD, CCSD, or CCSD(T), the computation fails when attempting to initialize a new DPD instance, as the old one was not properly freed. When testing with BCCD, it failed due to the DF_BASIS_CC not being automatically set (and it didn't seem to accept my attempts to set it). Version: 1.4rc1; Installation source: conda install psi4 -c psi4/label/dev. Error message; ```; Traceback (most recent call last):; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 24, in <module>; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 675, in gradient; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver_cbs.py"", line 1960, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2731, in run_ccenergy_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: Attempting to initialize new DPD instance before the old one was freed.; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1615423313523/work/psi4/src/psi4/libdpd/init.cc on line: 68; The most recent 5 function calls were:; ```. Minimal example; ```; molecule {; H; H 1 1; }. set cc_type df. gradient('CC2/cc-pVDZ'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2136
https://github.com/psi4/psi4/issues/2136:384,Deployability,Install,Installation,384,"Explanation:; When attempting to run gradients with CC2 or CC3 using density fitting (but not CCD, CCSD, or CCSD(T), the computation fails when attempting to initialize a new DPD instance, as the old one was not properly freed. When testing with BCCD, it failed due to the DF_BASIS_CC not being automatically set (and it didn't seem to accept my attempts to set it). Version: 1.4rc1; Installation source: conda install psi4 -c psi4/label/dev. Error message; ```; Traceback (most recent call last):; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 24, in <module>; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 675, in gradient; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver_cbs.py"", line 1960, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2731, in run_ccenergy_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: Attempting to initialize new DPD instance before the old one was freed.; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1615423313523/work/psi4/src/psi4/libdpd/init.cc on line: 68; The most recent 5 function calls were:; ```. Minimal example; ```; molecule {; H; H 1 1; }. set cc_type df. gradient('CC2/cc-pVDZ'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2136
https://github.com/psi4/psi4/issues/2136:411,Deployability,install,install,411,"Explanation:; When attempting to run gradients with CC2 or CC3 using density fitting (but not CCD, CCSD, or CCSD(T), the computation fails when attempting to initialize a new DPD instance, as the old one was not properly freed. When testing with BCCD, it failed due to the DF_BASIS_CC not being automatically set (and it didn't seem to accept my attempts to set it). Version: 1.4rc1; Installation source: conda install psi4 -c psi4/label/dev. Error message; ```; Traceback (most recent call last):; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 24, in <module>; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 675, in gradient; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver_cbs.py"", line 1960, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2731, in run_ccenergy_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: Attempting to initialize new DPD instance before the old one was freed.; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1615423313523/work/psi4/src/psi4/libdpd/init.cc on line: 68; The most recent 5 function calls were:; ```. Minimal example; ```; molecule {; H; H 1 1; }. set cc_type df. gradient('CC2/cc-pVDZ'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2136
https://github.com/psi4/psi4/issues/2136:449,Integrability,message,message,449,"Explanation:; When attempting to run gradients with CC2 or CC3 using density fitting (but not CCD, CCSD, or CCSD(T), the computation fails when attempting to initialize a new DPD instance, as the old one was not properly freed. When testing with BCCD, it failed due to the DF_BASIS_CC not being automatically set (and it didn't seem to accept my attempts to set it). Version: 1.4rc1; Installation source: conda install psi4 -c psi4/label/dev. Error message; ```; Traceback (most recent call last):; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 24, in <module>; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 675, in gradient; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver_cbs.py"", line 1960, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2731, in run_ccenergy_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: Attempting to initialize new DPD instance before the old one was freed.; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1615423313523/work/psi4/src/psi4/libdpd/init.cc on line: 68; The most recent 5 function calls were:; ```. Minimal example; ```; molecule {; H; H 1 1; }. set cc_type df. gradient('CC2/cc-pVDZ'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2136
https://github.com/psi4/psi4/issues/2136:233,Testability,test,testing,233,"Explanation:; When attempting to run gradients with CC2 or CC3 using density fitting (but not CCD, CCSD, or CCSD(T), the computation fails when attempting to initialize a new DPD instance, as the old one was not properly freed. When testing with BCCD, it failed due to the DF_BASIS_CC not being automatically set (and it didn't seem to accept my attempts to set it). Version: 1.4rc1; Installation source: conda install psi4 -c psi4/label/dev. Error message; ```; Traceback (most recent call last):; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 24, in <module>; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 675, in gradient; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver_cbs.py"", line 1960, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2731, in run_ccenergy_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: Attempting to initialize new DPD instance before the old one was freed.; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1615423313523/work/psi4/src/psi4/libdpd/init.cc on line: 68; The most recent 5 function calls were:; ```. Minimal example; ```; molecule {; H; H 1 1; }. set cc_type df. gradient('CC2/cc-pVDZ'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2136
https://github.com/psi4/psi4/pull/2137:310,Testability,test,tests,310,"## Description; Fixes #2136 by remembering to close a DPD file, because I'm a glutton for DF gradient bugs. I'm impressed that these gradients are correct. I would have thought that the standard `libmints/deriv.cc` technology couldn't have gotten DF gradients right, but you can't argue with finite difference tests. I'll have to look into this at a later date. ## Todos; - [x] DF-CC2 gradients working. ## Checklist; - [x] Tests added for newly working DF-CC2 gradients. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2137
https://github.com/psi4/psi4/pull/2137:424,Testability,Test,Tests,424,"## Description; Fixes #2136 by remembering to close a DPD file, because I'm a glutton for DF gradient bugs. I'm impressed that these gradients are correct. I would have thought that the standard `libmints/deriv.cc` technology couldn't have gotten DF gradients right, but you can't argue with finite difference tests. I'll have to look into this at a later date. ## Todos; - [x] DF-CC2 gradients working. ## Checklist; - [x] Tests added for newly working DF-CC2 gradients. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2137
https://github.com/psi4/psi4/issues/2138:539,Availability,avail,available,539,"A few suggestions for the documentation based on a recent interaction of a new user with Psi4 that I could observe:. - The Psi4 manual is kinda ""hard to find"". The user searched for ""manual"" on psicode.org, and despite the ""Docs"" link in the top bar, was puzzled when no hits were found. Maybe just a brighter colour for the tabs on top.; - Unknown keywords (using Psithon) should print a warning. Not sure this is easy to do or whether we even want it, as it might mess with python functionality...; - The PCMsolver docs page should show available solvents somewhere - currently one has to go to PCMsolver's github, then docs, then manual, which is kinda tedious. A direct link in Psi4's PCMsolver page to the solvent table in PCMsolvers own docs would do the job, IMO.; - Search on the docs page is quite tough to deal with. Is it possible to sort the results to list hand-written pages before autogenerated ones?. Obligatory ping to #2109",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2138
https://github.com/psi4/psi4/issues/2138:928,Availability,ping,ping,928,"A few suggestions for the documentation based on a recent interaction of a new user with Psi4 that I could observe:. - The Psi4 manual is kinda ""hard to find"". The user searched for ""manual"" on psicode.org, and despite the ""Docs"" link in the top bar, was puzzled when no hits were found. Maybe just a brighter colour for the tabs on top.; - Unknown keywords (using Psithon) should print a warning. Not sure this is easy to do or whether we even want it, as it might mess with python functionality...; - The PCMsolver docs page should show available solvents somewhere - currently one has to go to PCMsolver's github, then docs, then manual, which is kinda tedious. A direct link in Psi4's PCMsolver page to the solvent table in PCMsolvers own docs would do the job, IMO.; - Search on the docs page is quite tough to deal with. Is it possible to sort the results to list hand-written pages before autogenerated ones?. Obligatory ping to #2109",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2138
https://github.com/psi4/psi4/pull/2139:482,Performance,perform,performed,482,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Disables libint2's primitive screening via the `engine_precision` parameter. This integral screening provided a minor speedup, but in rare cases led to disastrously wrong SCF behavior as noted in #2114 and [here](https://github.com/edeprince3/hilbert/issues/8). This pull request closes those issues. Note that this primitive screening is independent of the shell-pair level Schwarz and CSAM screening performed in Psi4. The previous workaround to this problem, which was to set the `ints_tolerance` keyword to 0.0, is no longer necessary. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Change precision. ## Checklist; - [x] all ctests are unaffected by this change. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2139
https://github.com/psi4/psi4/pull/2140:234,Deployability,pipeline,pipeline,234,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2140
https://github.com/psi4/psi4/pull/2140:152,Modifiability,config,configure,152,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2140
https://github.com/psi4/psi4/pull/2140:198,Safety,detect,detection,198,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2140
https://github.com/psi4/psi4/pull/2140:61,Testability,test,tests,61,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2140
https://github.com/psi4/psi4/pull/2140:110,Testability,test,tests,110,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2140
https://github.com/psi4/psi4/pull/2140:259,Testability,test,tests,259,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2140
https://github.com/psi4/psi4/pull/2140:393,Testability,test,tests,393,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2140
https://github.com/psi4/psi4/pull/2140:423,Testability,test,tests,423,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2140
https://github.com/psi4/psi4/pull/2140:481,Testability,Test,Tests,481,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2140
https://github.com/psi4/psi4/pull/2140:555,Testability,test,tests,555,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2140
https://github.com/psi4/psi4/pull/2140:646,Testability,test,tests,646,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2140
https://github.com/psi4/psi4/pull/2141:194,Testability,test,test,194,"## Description; This PR fixes a bug when the `method/basis` specification is used in conjunction with DiskDF (i.e. when the reference wfn is passed on to, e.g. TDSCF or FNOCC). Fixes #1604. New test cases added that would trigger the original problem. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fix; - [x] add tests. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2141
https://github.com/psi4/psi4/pull/2141:374,Testability,test,tests,374,"## Description; This PR fixes a bug when the `method/basis` specification is used in conjunction with DiskDF (i.e. when the reference wfn is passed on to, e.g. TDSCF or FNOCC). Fixes #1604. New test cases added that would trigger the original problem. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fix; - [x] add tests. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2141
https://github.com/psi4/psi4/pull/2141:401,Testability,Test,Tests,401,"## Description; This PR fixes a bug when the `method/basis` specification is used in conjunction with DiskDF (i.e. when the reference wfn is passed on to, e.g. TDSCF or FNOCC). Fixes #1604. New test cases added that would trigger the original problem. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fix; - [x] add tests. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2141
https://github.com/psi4/psi4/pull/2141:475,Testability,test,tests,475,"## Description; This PR fixes a bug when the `method/basis` specification is used in conjunction with DiskDF (i.e. when the reference wfn is passed on to, e.g. TDSCF or FNOCC). Fixes #1604. New test cases added that would trigger the original problem. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fix; - [x] add tests. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2141
https://github.com/psi4/psi4/pull/2141:566,Testability,test,tests,566,"## Description; This PR fixes a bug when the `method/basis` specification is used in conjunction with DiskDF (i.e. when the reference wfn is passed on to, e.g. TDSCF or FNOCC). Fixes #1604. New test cases added that would trigger the original problem. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fix; - [x] add tests. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2141
https://github.com/psi4/psi4/pull/2142:1026,Availability,down,down,1026,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2142:271,Deployability,update,update,271,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2142:925,Deployability,update,updates,925,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2142:1346,Deployability,update,updates,1346,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2142:1592,Deployability,install,install,1592,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2142:198,Integrability,interface,interface,198,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2142:237,Integrability,interface,interface,237,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2142:915,Integrability,interface,interface,915,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2142:424,Modifiability,extend,extend,424,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2142:770,Modifiability,extend,extend,770,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2142:396,Testability,test,tests,396,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2142:1052,Testability,Test,Tests,1052,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2142:1126,Testability,test,tests,1126,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2142:1217,Testability,test,tests,1217,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2142
https://github.com/psi4/psi4/pull/2143:221,Testability,Test,Tests,221,## Description; automate docs build. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2143
https://github.com/psi4/psi4/pull/2143:295,Testability,test,tests,295,## Description; automate docs build. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2143
https://github.com/psi4/psi4/pull/2143:386,Testability,test,tests,386,## Description; automate docs build. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2143
https://github.com/psi4/psi4/pull/2144:206,Availability,down,down,206,"## Description; This autobuilds the docs and deploys them to a netlify site, https://psi4manual.netlify.app/index.html. It also starts correcting all the format and bad link warnings. Started with ~300 and down to 15, so ready to start reviewing. Once clean, we can turn on warnings->errors and avert future beaks. This hasn't started looking at docs content, only docs format errors. No linkchecker run yet either. GHA-wise, this is for every master commit. There'll be other GHA to run similarly on PRs so that ppl can preview docs changes or note when changes broke docs. But that'll need different permissions. This seems a good place to start. I don't think this needs minute review -- save your energies for real code. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Any rst files added that I shouldn't have?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2144
https://github.com/psi4/psi4/pull/2144:284,Availability,error,errors,284,"## Description; This autobuilds the docs and deploys them to a netlify site, https://psi4manual.netlify.app/index.html. It also starts correcting all the format and bad link warnings. Started with ~300 and down to 15, so ready to start reviewing. Once clean, we can turn on warnings->errors and avert future beaks. This hasn't started looking at docs content, only docs format errors. No linkchecker run yet either. GHA-wise, this is for every master commit. There'll be other GHA to run similarly on PRs so that ppl can preview docs changes or note when changes broke docs. But that'll need different permissions. This seems a good place to start. I don't think this needs minute review -- save your energies for real code. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Any rst files added that I shouldn't have?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2144
https://github.com/psi4/psi4/pull/2144:377,Availability,error,errors,377,"## Description; This autobuilds the docs and deploys them to a netlify site, https://psi4manual.netlify.app/index.html. It also starts correcting all the format and bad link warnings. Started with ~300 and down to 15, so ready to start reviewing. Once clean, we can turn on warnings->errors and avert future beaks. This hasn't started looking at docs content, only docs format errors. No linkchecker run yet either. GHA-wise, this is for every master commit. There'll be other GHA to run similarly on PRs so that ppl can preview docs changes or note when changes broke docs. But that'll need different permissions. This seems a good place to start. I don't think this needs minute review -- save your energies for real code. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Any rst files added that I shouldn't have?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2144
https://github.com/psi4/psi4/pull/2144:45,Deployability,deploy,deploys,45,"## Description; This autobuilds the docs and deploys them to a netlify site, https://psi4manual.netlify.app/index.html. It also starts correcting all the format and bad link warnings. Started with ~300 and down to 15, so ready to start reviewing. Once clean, we can turn on warnings->errors and avert future beaks. This hasn't started looking at docs content, only docs format errors. No linkchecker run yet either. GHA-wise, this is for every master commit. There'll be other GHA to run similarly on PRs so that ppl can preview docs changes or note when changes broke docs. But that'll need different permissions. This seems a good place to start. I don't think this needs minute review -- save your energies for real code. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Any rst files added that I shouldn't have?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2144
https://github.com/psi4/psi4/pull/2144:942,Testability,Test,Tests,942,"## Description; This autobuilds the docs and deploys them to a netlify site, https://psi4manual.netlify.app/index.html. It also starts correcting all the format and bad link warnings. Started with ~300 and down to 15, so ready to start reviewing. Once clean, we can turn on warnings->errors and avert future beaks. This hasn't started looking at docs content, only docs format errors. No linkchecker run yet either. GHA-wise, this is for every master commit. There'll be other GHA to run similarly on PRs so that ppl can preview docs changes or note when changes broke docs. But that'll need different permissions. This seems a good place to start. I don't think this needs minute review -- save your energies for real code. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Any rst files added that I shouldn't have?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2144
https://github.com/psi4/psi4/pull/2144:1016,Testability,test,tests,1016,"## Description; This autobuilds the docs and deploys them to a netlify site, https://psi4manual.netlify.app/index.html. It also starts correcting all the format and bad link warnings. Started with ~300 and down to 15, so ready to start reviewing. Once clean, we can turn on warnings->errors and avert future beaks. This hasn't started looking at docs content, only docs format errors. No linkchecker run yet either. GHA-wise, this is for every master commit. There'll be other GHA to run similarly on PRs so that ppl can preview docs changes or note when changes broke docs. But that'll need different permissions. This seems a good place to start. I don't think this needs minute review -- save your energies for real code. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Any rst files added that I shouldn't have?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2144
https://github.com/psi4/psi4/pull/2144:1107,Testability,test,tests,1107,"## Description; This autobuilds the docs and deploys them to a netlify site, https://psi4manual.netlify.app/index.html. It also starts correcting all the format and bad link warnings. Started with ~300 and down to 15, so ready to start reviewing. Once clean, we can turn on warnings->errors and avert future beaks. This hasn't started looking at docs content, only docs format errors. No linkchecker run yet either. GHA-wise, this is for every master commit. There'll be other GHA to run similarly on PRs so that ppl can preview docs changes or note when changes broke docs. But that'll need different permissions. This seems a good place to start. I don't think this needs minute review -- save your energies for real code. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Any rst files added that I shouldn't have?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2144
https://github.com/psi4/psi4/issues/2145:221,Modifiability,variab,variables,221,"TD-DFT has [symmetry-labeled psivars](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/response/scf_response.py#L643-L670). The EOM-CC code psivars do not. For both consistency and user convenience, these variables should be symmetry-labelled. The offending code is [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L974-L977). Because the variables are written to globals rather than a wavefunction, the code is doubly offensive. (See #883.). Carried forward from [forum request](http://forum.psicode.org/t/excited-state-properties-from-psi4-api/2100/6).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2145
https://github.com/psi4/psi4/issues/2145:385,Modifiability,variab,variables,385,"TD-DFT has [symmetry-labeled psivars](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/response/scf_response.py#L643-L670). The EOM-CC code psivars do not. For both consistency and user convenience, these variables should be symmetry-labelled. The offending code is [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L974-L977). Because the variables are written to globals rather than a wavefunction, the code is doubly offensive. (See #883.). Carried forward from [forum request](http://forum.psicode.org/t/excited-state-properties-from-psi4-api/2100/6).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2145
https://github.com/psi4/psi4/pull/2146:652,Availability,error,errors,652,"## Description; technical improvements to docs, part 2. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] **bug fix and energy change** these changes to RI basis for sto-3g, sto-6g, 3-21g https://github.com/psi4/psi4/pull/2146/files#diff-343949bff4fe0802df72641969d7aceb07a122625e5b70d95c6e2757e4ee3c92R435 now refer to a real basis set, so in practice, calcs will use the svp now rather than the qzvpp. tests sapt-ecp and nbody-levels have been tweaked to pass. this will lead to real numbers changes in psi4 runs, though hopefully they'll be a little quicker, too. apparently hunting docs ref errors can fix real bugs; - [x] docs now pass `sphinx-build -b linkcheck`, meaning that all the external hyperlinks in the docs are ok or redirect, none broken (except for a few that are excused in conf.py.in). 300 -> 0 broken links!; - [x] started on the `sphinx-build -b html -n` nitpicky mode. 1300 -> 1000; - [x] fixed all the `docstring of psi4.core.PyCapsule.dfh:: WARNING: py:class reference target not found: psi::DFHelper`; - these happen when exports use or return a class that hasn't yet been pb11 exported, https://pybind11.readthedocs.io/en/stable/advanced/misc.html?highlight=docstring#avoiding-c-types-in-docstrings; - `OneBodySOInt` and `psio_entry` added; - a couple docstrings edited to figure out how parser wants str enums in docstring; - all other export_ and core.cc changes are rearrangements only. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2146
https://github.com/psi4/psi4/pull/2146:177,Energy Efficiency,energy,energy,177,"## Description; technical improvements to docs, part 2. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] **bug fix and energy change** these changes to RI basis for sto-3g, sto-6g, 3-21g https://github.com/psi4/psi4/pull/2146/files#diff-343949bff4fe0802df72641969d7aceb07a122625e5b70d95c6e2757e4ee3c92R435 now refer to a real basis set, so in practice, calcs will use the svp now rather than the qzvpp. tests sapt-ecp and nbody-levels have been tweaked to pass. this will lead to real numbers changes in psi4 runs, though hopefully they'll be a little quicker, too. apparently hunting docs ref errors can fix real bugs; - [x] docs now pass `sphinx-build -b linkcheck`, meaning that all the external hyperlinks in the docs are ok or redirect, none broken (except for a few that are excused in conf.py.in). 300 -> 0 broken links!; - [x] started on the `sphinx-build -b html -n` nitpicky mode. 1300 -> 1000; - [x] fixed all the `docstring of psi4.core.PyCapsule.dfh:: WARNING: py:class reference target not found: psi::DFHelper`; - these happen when exports use or return a class that hasn't yet been pb11 exported, https://pybind11.readthedocs.io/en/stable/advanced/misc.html?highlight=docstring#avoiding-c-types-in-docstrings; - `OneBodySOInt` and `psio_entry` added; - a couple docstrings edited to figure out how parser wants str enums in docstring; - all other export_ and core.cc changes are rearrangements only. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2146
https://github.com/psi4/psi4/pull/2146:1252,Safety,avoid,avoiding-c-types-in-docstrings,1252,"## Description; technical improvements to docs, part 2. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] **bug fix and energy change** these changes to RI basis for sto-3g, sto-6g, 3-21g https://github.com/psi4/psi4/pull/2146/files#diff-343949bff4fe0802df72641969d7aceb07a122625e5b70d95c6e2757e4ee3c92R435 now refer to a real basis set, so in practice, calcs will use the svp now rather than the qzvpp. tests sapt-ecp and nbody-levels have been tweaked to pass. this will lead to real numbers changes in psi4 runs, though hopefully they'll be a little quicker, too. apparently hunting docs ref errors can fix real bugs; - [x] docs now pass `sphinx-build -b linkcheck`, meaning that all the external hyperlinks in the docs are ok or redirect, none broken (except for a few that are excused in conf.py.in). 300 -> 0 broken links!; - [x] started on the `sphinx-build -b html -n` nitpicky mode. 1300 -> 1000; - [x] fixed all the `docstring of psi4.core.PyCapsule.dfh:: WARNING: py:class reference target not found: psi::DFHelper`; - these happen when exports use or return a class that hasn't yet been pb11 exported, https://pybind11.readthedocs.io/en/stable/advanced/misc.html?highlight=docstring#avoiding-c-types-in-docstrings; - `OneBodySOInt` and `psio_entry` added; - a couple docstrings edited to figure out how parser wants str enums in docstring; - all other export_ and core.cc changes are rearrangements only. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2146
https://github.com/psi4/psi4/pull/2146:461,Testability,test,tests,461,"## Description; technical improvements to docs, part 2. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] **bug fix and energy change** these changes to RI basis for sto-3g, sto-6g, 3-21g https://github.com/psi4/psi4/pull/2146/files#diff-343949bff4fe0802df72641969d7aceb07a122625e5b70d95c6e2757e4ee3c92R435 now refer to a real basis set, so in practice, calcs will use the svp now rather than the qzvpp. tests sapt-ecp and nbody-levels have been tweaked to pass. this will lead to real numbers changes in psi4 runs, though hopefully they'll be a little quicker, too. apparently hunting docs ref errors can fix real bugs; - [x] docs now pass `sphinx-build -b linkcheck`, meaning that all the external hyperlinks in the docs are ok or redirect, none broken (except for a few that are excused in conf.py.in). 300 -> 0 broken links!; - [x] started on the `sphinx-build -b html -n` nitpicky mode. 1300 -> 1000; - [x] fixed all the `docstring of psi4.core.PyCapsule.dfh:: WARNING: py:class reference target not found: psi::DFHelper`; - these happen when exports use or return a class that hasn't yet been pb11 exported, https://pybind11.readthedocs.io/en/stable/advanced/misc.html?highlight=docstring#avoiding-c-types-in-docstrings; - `OneBodySOInt` and `psio_entry` added; - a couple docstrings edited to figure out how parser wants str enums in docstring; - all other export_ and core.cc changes are rearrangements only. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2146
https://github.com/psi4/psi4/pull/2146:1495,Testability,Test,Tests,1495,"## Description; technical improvements to docs, part 2. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] **bug fix and energy change** these changes to RI basis for sto-3g, sto-6g, 3-21g https://github.com/psi4/psi4/pull/2146/files#diff-343949bff4fe0802df72641969d7aceb07a122625e5b70d95c6e2757e4ee3c92R435 now refer to a real basis set, so in practice, calcs will use the svp now rather than the qzvpp. tests sapt-ecp and nbody-levels have been tweaked to pass. this will lead to real numbers changes in psi4 runs, though hopefully they'll be a little quicker, too. apparently hunting docs ref errors can fix real bugs; - [x] docs now pass `sphinx-build -b linkcheck`, meaning that all the external hyperlinks in the docs are ok or redirect, none broken (except for a few that are excused in conf.py.in). 300 -> 0 broken links!; - [x] started on the `sphinx-build -b html -n` nitpicky mode. 1300 -> 1000; - [x] fixed all the `docstring of psi4.core.PyCapsule.dfh:: WARNING: py:class reference target not found: psi::DFHelper`; - these happen when exports use or return a class that hasn't yet been pb11 exported, https://pybind11.readthedocs.io/en/stable/advanced/misc.html?highlight=docstring#avoiding-c-types-in-docstrings; - `OneBodySOInt` and `psio_entry` added; - a couple docstrings edited to figure out how parser wants str enums in docstring; - all other export_ and core.cc changes are rearrangements only. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2146
https://github.com/psi4/psi4/pull/2146:1541,Testability,test,tests,1541,"## Description; technical improvements to docs, part 2. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] **bug fix and energy change** these changes to RI basis for sto-3g, sto-6g, 3-21g https://github.com/psi4/psi4/pull/2146/files#diff-343949bff4fe0802df72641969d7aceb07a122625e5b70d95c6e2757e4ee3c92R435 now refer to a real basis set, so in practice, calcs will use the svp now rather than the qzvpp. tests sapt-ecp and nbody-levels have been tweaked to pass. this will lead to real numbers changes in psi4 runs, though hopefully they'll be a little quicker, too. apparently hunting docs ref errors can fix real bugs; - [x] docs now pass `sphinx-build -b linkcheck`, meaning that all the external hyperlinks in the docs are ok or redirect, none broken (except for a few that are excused in conf.py.in). 300 -> 0 broken links!; - [x] started on the `sphinx-build -b html -n` nitpicky mode. 1300 -> 1000; - [x] fixed all the `docstring of psi4.core.PyCapsule.dfh:: WARNING: py:class reference target not found: psi::DFHelper`; - these happen when exports use or return a class that hasn't yet been pb11 exported, https://pybind11.readthedocs.io/en/stable/advanced/misc.html?highlight=docstring#avoiding-c-types-in-docstrings; - `OneBodySOInt` and `psio_entry` added; - a couple docstrings edited to figure out how parser wants str enums in docstring; - all other export_ and core.cc changes are rearrangements only. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2146
https://github.com/psi4/psi4/issues/2147:183,Availability,Error,Error,183,I had the following problem when trying to build Psi4 from current master branch. It seems like there was an issue extracting the Libint2-export-5-4-3-6-5-4_1.tgz archive. ```; CMake Error: Problem with archive_write_header(): Can't create 'export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h'; CMake Error: Current file: export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h; CMake Error: Problem extracting tar: ~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz; -- extracting... [error clean up]; CMake Error at libint2_external-stamp/extract-libint2_external.cmake:33 (message):; error: extract of; '~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz'; failed; ```. Relevant version numbers:; - Python: v3.6.3; - CMake: v3.19.2; - Intel C/C++ compiler: v18.0. Build instructions:; ```; cmake .. -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc; make -j 24; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2147
https://github.com/psi4/psi4/issues/2147:327,Availability,Error,Error,327,I had the following problem when trying to build Psi4 from current master branch. It seems like there was an issue extracting the Libint2-export-5-4-3-6-5-4_1.tgz archive. ```; CMake Error: Problem with archive_write_header(): Can't create 'export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h'; CMake Error: Current file: export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h; CMake Error: Problem extracting tar: ~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz; -- extracting... [error clean up]; CMake Error at libint2_external-stamp/extract-libint2_external.cmake:33 (message):; error: extract of; '~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz'; failed; ```. Relevant version numbers:; - Python: v3.6.3; - CMake: v3.19.2; - Intel C/C++ compiler: v18.0. Build instructions:; ```; cmake .. -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc; make -j 24; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2147
https://github.com/psi4/psi4/issues/2147:433,Availability,Error,Error,433,I had the following problem when trying to build Psi4 from current master branch. It seems like there was an issue extracting the Libint2-export-5-4-3-6-5-4_1.tgz archive. ```; CMake Error: Problem with archive_write_header(): Can't create 'export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h'; CMake Error: Current file: export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h; CMake Error: Problem extracting tar: ~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz; -- extracting... [error clean up]; CMake Error at libint2_external-stamp/extract-libint2_external.cmake:33 (message):; error: extract of; '~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz'; failed; ```. Relevant version numbers:; - Python: v3.6.3; - CMake: v3.19.2; - Intel C/C++ compiler: v18.0. Build instructions:; ```; cmake .. -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc; make -j 24; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2147
https://github.com/psi4/psi4/issues/2147:583,Availability,error,error,583,I had the following problem when trying to build Psi4 from current master branch. It seems like there was an issue extracting the Libint2-export-5-4-3-6-5-4_1.tgz archive. ```; CMake Error: Problem with archive_write_header(): Can't create 'export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h'; CMake Error: Current file: export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h; CMake Error: Problem extracting tar: ~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz; -- extracting... [error clean up]; CMake Error at libint2_external-stamp/extract-libint2_external.cmake:33 (message):; error: extract of; '~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz'; failed; ```. Relevant version numbers:; - Python: v3.6.3; - CMake: v3.19.2; - Intel C/C++ compiler: v18.0. Build instructions:; ```; cmake .. -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc; make -j 24; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2147
https://github.com/psi4/psi4/issues/2147:606,Availability,Error,Error,606,I had the following problem when trying to build Psi4 from current master branch. It seems like there was an issue extracting the Libint2-export-5-4-3-6-5-4_1.tgz archive. ```; CMake Error: Problem with archive_write_header(): Can't create 'export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h'; CMake Error: Current file: export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h; CMake Error: Problem extracting tar: ~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz; -- extracting... [error clean up]; CMake Error at libint2_external-stamp/extract-libint2_external.cmake:33 (message):; error: extract of; '~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz'; failed; ```. Relevant version numbers:; - Python: v3.6.3; - CMake: v3.19.2; - Intel C/C++ compiler: v18.0. Build instructions:; ```; cmake .. -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc; make -j 24; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2147
https://github.com/psi4/psi4/issues/2147:684,Availability,error,error,684,I had the following problem when trying to build Psi4 from current master branch. It seems like there was an issue extracting the Libint2-export-5-4-3-6-5-4_1.tgz archive. ```; CMake Error: Problem with archive_write_header(): Can't create 'export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h'; CMake Error: Current file: export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h; CMake Error: Problem extracting tar: ~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz; -- extracting... [error clean up]; CMake Error at libint2_external-stamp/extract-libint2_external.cmake:33 (message):; error: extract of; '~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz'; failed; ```. Relevant version numbers:; - Python: v3.6.3; - CMake: v3.19.2; - Intel C/C++ compiler: v18.0. Build instructions:; ```; cmake .. -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc; make -j 24; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2147
https://github.com/psi4/psi4/issues/2147:673,Integrability,message,message,673,I had the following problem when trying to build Psi4 from current master branch. It seems like there was an issue extracting the Libint2-export-5-4-3-6-5-4_1.tgz archive. ```; CMake Error: Problem with archive_write_header(): Can't create 'export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h'; CMake Error: Current file: export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h; CMake Error: Problem extracting tar: ~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz; -- extracting... [error clean up]; CMake Error at libint2_external-stamp/extract-libint2_external.cmake:33 (message):; error: extract of; '~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz'; failed; ```. Relevant version numbers:; - Python: v3.6.3; - CMake: v3.19.2; - Intel C/C++ compiler: v18.0. Build instructions:; ```; cmake .. -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc; make -j 24; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2147
https://github.com/psi4/psi4/pull/2148:29,Deployability,update,update,29,"## Description; effectively, update samples. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2148
https://github.com/psi4/psi4/pull/2150:138,Availability,error,error,138,## Description; This PR fixes a bug where a coupled cluster computation that diverges triggers a further bug in the timer system. A fatal error is now triggered instead. Closes #1864. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2150
https://github.com/psi4/psi4/pull/2151:1689,Availability,error,error,1689,"length in Eh. Options added to properties(‘ccsd’, properties=[‘polarizability’, ‘rotation’]): ; - local_method: `PNO`, `PNO++` and `CPNO++`; - local_pert: `DIPOLE`; - unpert_cutoff: double between 0 and 1. Pytest added to check the functionality at:; - Tcut=0 against the conventional CC code; - Tcut=1e-5 against hardcoded values. Some additional tweaks to existing code that were needed for me to run the simulation code:. - Under cclambda/ , L1_build and dijabL2 functions were outside of the CCLambdaWavefunction class, while L2 build functions were not. So I moved `L1_build`, `cc2_L1_build` and `dijabL2` into the class to make it more consistent and also to help run the simulation code. - cctransort/local.cc has an extra function to localize the occupied orbitals before the transformation of the one- and two-electron integrals. - Overloaded the schmidt_add_row function in libmints/matrix.cc in order to specify the cutoff value for vector norms to be discarded. - The ccenergy function that is called when Psi4 fails attempts to switch off the ‘ccenergy’ timer twice. The error was mentioned in issue #1864. And I see a new pull request that removes the line (#2150). I just commented out the line that was redundantly switching off the timer and that causes Psi4 to exit correctly when iterations fail to converge. - The psio_tocprint function under libpsio/psio.h didn’t match its definition in libpsio/tocprint.cc so I commented out the extra argument. ## Todos; - [x] Add simulation code to CCLR; - [x] Add tests; - [x] Remove the `WERNER` option completely, since it’s not implemented. ## Questions; - [ ] Old (non-working) code in ccenergy/ has been shifted to local_old.cc and Local_old.h, is it okay if I get rid of this code? There are also identical local.cc files under cclambda/ and ccresponse/ that are not needed. ## Checklist; - [x] Tests added for any new features; - [x] All or relevant fraction of full tests run. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2151
https://github.com/psi4/psi4/pull/2151:1824,Availability,redundant,redundantly,1824,"length in Eh. Options added to properties(‘ccsd’, properties=[‘polarizability’, ‘rotation’]): ; - local_method: `PNO`, `PNO++` and `CPNO++`; - local_pert: `DIPOLE`; - unpert_cutoff: double between 0 and 1. Pytest added to check the functionality at:; - Tcut=0 against the conventional CC code; - Tcut=1e-5 against hardcoded values. Some additional tweaks to existing code that were needed for me to run the simulation code:. - Under cclambda/ , L1_build and dijabL2 functions were outside of the CCLambdaWavefunction class, while L2 build functions were not. So I moved `L1_build`, `cc2_L1_build` and `dijabL2` into the class to make it more consistent and also to help run the simulation code. - cctransort/local.cc has an extra function to localize the occupied orbitals before the transformation of the one- and two-electron integrals. - Overloaded the schmidt_add_row function in libmints/matrix.cc in order to specify the cutoff value for vector norms to be discarded. - The ccenergy function that is called when Psi4 fails attempts to switch off the ‘ccenergy’ timer twice. The error was mentioned in issue #1864. And I see a new pull request that removes the line (#2150). I just commented out the line that was redundantly switching off the timer and that causes Psi4 to exit correctly when iterations fail to converge. - The psio_tocprint function under libpsio/psio.h didn’t match its definition in libpsio/tocprint.cc so I commented out the extra argument. ## Todos; - [x] Add simulation code to CCLR; - [x] Add tests; - [x] Remove the `WERNER` option completely, since it’s not implemented. ## Questions; - [ ] Old (non-working) code in ccenergy/ has been shifted to local_old.cc and Local_old.h, is it okay if I get rid of this code? There are also identical local.cc files under cclambda/ and ccresponse/ that are not needed. ## Checklist; - [x] Tests added for any new features; - [x] All or relevant fraction of full tests run. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2151
https://github.com/psi4/psi4/pull/2151:373,Energy Efficiency,energy,energy,373,"## Description; This pull request touches several files under cc/ccenergy, cc/cclambda and cc/ccresponse but only replaces existing (and non-working) local simulation code functionality in ccenergy/local.cc and the corresponding header file Local.h. The PNO++ methods and simulation code are described in https://pubs.acs.org/doi/10.1021/acs.jctc.0c01086. Options added to energy(‘ccsd’):; - local_method: `PNO`, `PNO++` and `CPNO++`; - local_pert: `DIPOLE`; - unpert_cutoff: double between 0 and 1; - omega: array of wavelengths for the creation of the PNO++ density, currently only accepts a single wavelength in Eh. Options added to properties(‘ccsd’, properties=[‘polarizability’, ‘rotation’]): ; - local_method: `PNO`, `PNO++` and `CPNO++`; - local_pert: `DIPOLE`; - unpert_cutoff: double between 0 and 1. Pytest added to check the functionality at:; - Tcut=0 against the conventional CC code; - Tcut=1e-5 against hardcoded values. Some additional tweaks to existing code that were needed for me to run the simulation code:. - Under cclambda/ , L1_build and dijabL2 functions were outside of the CCLambdaWavefunction class, while L2 build functions were not. So I moved `L1_build`, `cc2_L1_build` and `dijabL2` into the class to make it more consistent and also to help run the simulation code. - cctransort/local.cc has an extra function to localize the occupied orbitals before the transformation of the one- and two-electron integrals. - Overloaded the schmidt_add_row function in libmints/matrix.cc in order to specify the cutoff value for vector norms to be discarded. - The ccenergy function that is called when Psi4 fails attempts to switch off the ‘ccenergy’ timer twice. The error was mentioned in issue #1864. And I see a new pull request that removes the line (#2150). I just commented out the line that was redundantly switching off the timer and that causes Psi4 to exit correctly when iterations fail to converge. - The psio_tocprint function under libpsio/psio.h didn’t match its d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2151
https://github.com/psi4/psi4/pull/2151:1824,Safety,redund,redundantly,1824,"length in Eh. Options added to properties(‘ccsd’, properties=[‘polarizability’, ‘rotation’]): ; - local_method: `PNO`, `PNO++` and `CPNO++`; - local_pert: `DIPOLE`; - unpert_cutoff: double between 0 and 1. Pytest added to check the functionality at:; - Tcut=0 against the conventional CC code; - Tcut=1e-5 against hardcoded values. Some additional tweaks to existing code that were needed for me to run the simulation code:. - Under cclambda/ , L1_build and dijabL2 functions were outside of the CCLambdaWavefunction class, while L2 build functions were not. So I moved `L1_build`, `cc2_L1_build` and `dijabL2` into the class to make it more consistent and also to help run the simulation code. - cctransort/local.cc has an extra function to localize the occupied orbitals before the transformation of the one- and two-electron integrals. - Overloaded the schmidt_add_row function in libmints/matrix.cc in order to specify the cutoff value for vector norms to be discarded. - The ccenergy function that is called when Psi4 fails attempts to switch off the ‘ccenergy’ timer twice. The error was mentioned in issue #1864. And I see a new pull request that removes the line (#2150). I just commented out the line that was redundantly switching off the timer and that causes Psi4 to exit correctly when iterations fail to converge. - The psio_tocprint function under libpsio/psio.h didn’t match its definition in libpsio/tocprint.cc so I commented out the extra argument. ## Todos; - [x] Add simulation code to CCLR; - [x] Add tests; - [x] Remove the `WERNER` option completely, since it’s not implemented. ## Questions; - [ ] Old (non-working) code in ccenergy/ has been shifted to local_old.cc and Local_old.h, is it okay if I get rid of this code? There are also identical local.cc files under cclambda/ and ccresponse/ that are not needed. ## Checklist; - [x] Tests added for any new features; - [x] All or relevant fraction of full tests run. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2151
https://github.com/psi4/psi4/pull/2151:2128,Testability,test,tests,2128,"length in Eh. Options added to properties(‘ccsd’, properties=[‘polarizability’, ‘rotation’]): ; - local_method: `PNO`, `PNO++` and `CPNO++`; - local_pert: `DIPOLE`; - unpert_cutoff: double between 0 and 1. Pytest added to check the functionality at:; - Tcut=0 against the conventional CC code; - Tcut=1e-5 against hardcoded values. Some additional tweaks to existing code that were needed for me to run the simulation code:. - Under cclambda/ , L1_build and dijabL2 functions were outside of the CCLambdaWavefunction class, while L2 build functions were not. So I moved `L1_build`, `cc2_L1_build` and `dijabL2` into the class to make it more consistent and also to help run the simulation code. - cctransort/local.cc has an extra function to localize the occupied orbitals before the transformation of the one- and two-electron integrals. - Overloaded the schmidt_add_row function in libmints/matrix.cc in order to specify the cutoff value for vector norms to be discarded. - The ccenergy function that is called when Psi4 fails attempts to switch off the ‘ccenergy’ timer twice. The error was mentioned in issue #1864. And I see a new pull request that removes the line (#2150). I just commented out the line that was redundantly switching off the timer and that causes Psi4 to exit correctly when iterations fail to converge. - The psio_tocprint function under libpsio/psio.h didn’t match its definition in libpsio/tocprint.cc so I commented out the extra argument. ## Todos; - [x] Add simulation code to CCLR; - [x] Add tests; - [x] Remove the `WERNER` option completely, since it’s not implemented. ## Questions; - [ ] Old (non-working) code in ccenergy/ has been shifted to local_old.cc and Local_old.h, is it okay if I get rid of this code? There are also identical local.cc files under cclambda/ and ccresponse/ that are not needed. ## Checklist; - [x] Tests added for any new features; - [x] All or relevant fraction of full tests run. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2151
https://github.com/psi4/psi4/pull/2151:2465,Testability,Test,Tests,2465,"length in Eh. Options added to properties(‘ccsd’, properties=[‘polarizability’, ‘rotation’]): ; - local_method: `PNO`, `PNO++` and `CPNO++`; - local_pert: `DIPOLE`; - unpert_cutoff: double between 0 and 1. Pytest added to check the functionality at:; - Tcut=0 against the conventional CC code; - Tcut=1e-5 against hardcoded values. Some additional tweaks to existing code that were needed for me to run the simulation code:. - Under cclambda/ , L1_build and dijabL2 functions were outside of the CCLambdaWavefunction class, while L2 build functions were not. So I moved `L1_build`, `cc2_L1_build` and `dijabL2` into the class to make it more consistent and also to help run the simulation code. - cctransort/local.cc has an extra function to localize the occupied orbitals before the transformation of the one- and two-electron integrals. - Overloaded the schmidt_add_row function in libmints/matrix.cc in order to specify the cutoff value for vector norms to be discarded. - The ccenergy function that is called when Psi4 fails attempts to switch off the ‘ccenergy’ timer twice. The error was mentioned in issue #1864. And I see a new pull request that removes the line (#2150). I just commented out the line that was redundantly switching off the timer and that causes Psi4 to exit correctly when iterations fail to converge. - The psio_tocprint function under libpsio/psio.h didn’t match its definition in libpsio/tocprint.cc so I commented out the extra argument. ## Todos; - [x] Add simulation code to CCLR; - [x] Add tests; - [x] Remove the `WERNER` option completely, since it’s not implemented. ## Questions; - [ ] Old (non-working) code in ccenergy/ has been shifted to local_old.cc and Local_old.h, is it okay if I get rid of this code? There are also identical local.cc files under cclambda/ and ccresponse/ that are not needed. ## Checklist; - [x] Tests added for any new features; - [x] All or relevant fraction of full tests run. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2151
https://github.com/psi4/psi4/pull/2151:2538,Testability,test,tests,2538,"length in Eh. Options added to properties(‘ccsd’, properties=[‘polarizability’, ‘rotation’]): ; - local_method: `PNO`, `PNO++` and `CPNO++`; - local_pert: `DIPOLE`; - unpert_cutoff: double between 0 and 1. Pytest added to check the functionality at:; - Tcut=0 against the conventional CC code; - Tcut=1e-5 against hardcoded values. Some additional tweaks to existing code that were needed for me to run the simulation code:. - Under cclambda/ , L1_build and dijabL2 functions were outside of the CCLambdaWavefunction class, while L2 build functions were not. So I moved `L1_build`, `cc2_L1_build` and `dijabL2` into the class to make it more consistent and also to help run the simulation code. - cctransort/local.cc has an extra function to localize the occupied orbitals before the transformation of the one- and two-electron integrals. - Overloaded the schmidt_add_row function in libmints/matrix.cc in order to specify the cutoff value for vector norms to be discarded. - The ccenergy function that is called when Psi4 fails attempts to switch off the ‘ccenergy’ timer twice. The error was mentioned in issue #1864. And I see a new pull request that removes the line (#2150). I just commented out the line that was redundantly switching off the timer and that causes Psi4 to exit correctly when iterations fail to converge. - The psio_tocprint function under libpsio/psio.h didn’t match its definition in libpsio/tocprint.cc so I commented out the extra argument. ## Todos; - [x] Add simulation code to CCLR; - [x] Add tests; - [x] Remove the `WERNER` option completely, since it’s not implemented. ## Questions; - [ ] Old (non-working) code in ccenergy/ has been shifted to local_old.cc and Local_old.h, is it okay if I get rid of this code? There are also identical local.cc files under cclambda/ and ccresponse/ that are not needed. ## Checklist; - [x] Tests added for any new features; - [x] All or relevant fraction of full tests run. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2151
https://github.com/psi4/psi4/pull/2152:495,Testability,test,test,495,"## Description; This is the first of what will likely be quite a few cleanup PRs in `dct`, in preparation for some features I'd like for 1.5. This PR creates variants of existing constructors in `libmints`. We're no longer forced to use `SharedMatrix` in `set_block`, and we can now pass a single `Slice` object to `get_block` or `set_block` to use it for both rows and columns. This PR can be moved to 1.5 if needed. I can also opt for fewer but longer PRs if needed. ## Checklist; - [x] `dct` test suite passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2152
https://github.com/psi4/psi4/issues/2153:238,Availability,avail,available,238,"The TD-SCF code seems to work pretty well and comparably with other codes but the current level of output that appears in the output file by default is pretty minimal (energies, symmetries, oscillator strengths, etc.). A lot more info is available through various variables but they are pretty obscure and not the easiest to use. After a brief discussion on the forum [forum](http://forum.psicode.org/t/td-scf-excited-state-densities-and-or-contributing-excitations-available-yet/2109) I was encouraged to add this as a github issue. I'm happy to add these additions and, after a fair bit of fiddling, I think I have it mostly sussed. (And it's been a good learning experience: digging into RPA and TDA literature to some extent!). I have a few additions to scf_response.py to output the set of TDM vectors and the most important excitations (and deexcitations) contributing to each excited state, and I will submit a pull request once I've cleaned it up a bit. However it currently only works for C1, i.e no symmetry. One thing I have yet to get my head around is how to handle X and Y when symmetry is involved: comparing a calculation with C1 point group with the same molecule but using a higher point group, I can see the same coefficients within the sub-matrices for the different irreducible representations but I can't see how to unpick something like an ""A -> B"" single excitation that sees to appear only in the A representation sub-matrix. (If that makes sense!)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2153
https://github.com/psi4/psi4/issues/2153:466,Availability,avail,available-yet,466,"The TD-SCF code seems to work pretty well and comparably with other codes but the current level of output that appears in the output file by default is pretty minimal (energies, symmetries, oscillator strengths, etc.). A lot more info is available through various variables but they are pretty obscure and not the easiest to use. After a brief discussion on the forum [forum](http://forum.psicode.org/t/td-scf-excited-state-densities-and-or-contributing-excitations-available-yet/2109) I was encouraged to add this as a github issue. I'm happy to add these additions and, after a fair bit of fiddling, I think I have it mostly sussed. (And it's been a good learning experience: digging into RPA and TDA literature to some extent!). I have a few additions to scf_response.py to output the set of TDM vectors and the most important excitations (and deexcitations) contributing to each excited state, and I will submit a pull request once I've cleaned it up a bit. However it currently only works for C1, i.e no symmetry. One thing I have yet to get my head around is how to handle X and Y when symmetry is involved: comparing a calculation with C1 point group with the same molecule but using a higher point group, I can see the same coefficients within the sub-matrices for the different irreducible representations but I can't see how to unpick something like an ""A -> B"" single excitation that sees to appear only in the A representation sub-matrix. (If that makes sense!)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2153
https://github.com/psi4/psi4/issues/2153:264,Modifiability,variab,variables,264,"The TD-SCF code seems to work pretty well and comparably with other codes but the current level of output that appears in the output file by default is pretty minimal (energies, symmetries, oscillator strengths, etc.). A lot more info is available through various variables but they are pretty obscure and not the easiest to use. After a brief discussion on the forum [forum](http://forum.psicode.org/t/td-scf-excited-state-densities-and-or-contributing-excitations-available-yet/2109) I was encouraged to add this as a github issue. I'm happy to add these additions and, after a fair bit of fiddling, I think I have it mostly sussed. (And it's been a good learning experience: digging into RPA and TDA literature to some extent!). I have a few additions to scf_response.py to output the set of TDM vectors and the most important excitations (and deexcitations) contributing to each excited state, and I will submit a pull request once I've cleaned it up a bit. However it currently only works for C1, i.e no symmetry. One thing I have yet to get my head around is how to handle X and Y when symmetry is involved: comparing a calculation with C1 point group with the same molecule but using a higher point group, I can see the same coefficients within the sub-matrices for the different irreducible representations but I can't see how to unpick something like an ""A -> B"" single excitation that sees to appear only in the A representation sub-matrix. (If that makes sense!)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2153
https://github.com/psi4/psi4/issues/2153:657,Usability,learn,learning,657,"The TD-SCF code seems to work pretty well and comparably with other codes but the current level of output that appears in the output file by default is pretty minimal (energies, symmetries, oscillator strengths, etc.). A lot more info is available through various variables but they are pretty obscure and not the easiest to use. After a brief discussion on the forum [forum](http://forum.psicode.org/t/td-scf-excited-state-densities-and-or-contributing-excitations-available-yet/2109) I was encouraged to add this as a github issue. I'm happy to add these additions and, after a fair bit of fiddling, I think I have it mostly sussed. (And it's been a good learning experience: digging into RPA and TDA literature to some extent!). I have a few additions to scf_response.py to output the set of TDM vectors and the most important excitations (and deexcitations) contributing to each excited state, and I will submit a pull request once I've cleaned it up a bit. However it currently only works for C1, i.e no symmetry. One thing I have yet to get my head around is how to handle X and Y when symmetry is involved: comparing a calculation with C1 point group with the same molecule but using a higher point group, I can see the same coefficients within the sub-matrices for the different irreducible representations but I can't see how to unpick something like an ""A -> B"" single excitation that sees to appear only in the A representation sub-matrix. (If that makes sense!)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2153
https://github.com/psi4/psi4/pull/2154:277,Deployability,install,install,277,"## Description; adds O24 dataset [jcp paper](https://doi.org/10.1063/5.0043793) with two variants:; * `O24by5mb.py` - geometries with ghosted H as a midbond functions located at COM; * `O24by5.py` - geometries without midbond functions. ## Questions; - [ ] Should I modify any install script to accommodate additional files?; - [ ] Should test files be added, e.g. for three subsets (ED, DD, MX) that are defined?; - [x] I've defined constant `KCALMOL2WAVENUMBERS = 349.7551` inside the database, as paper values are in cm^-1 and psi database driver expects kcal/mol, is there a cleaner way to handle this conversion?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2154
https://github.com/psi4/psi4/pull/2154:339,Testability,test,test,339,"## Description; adds O24 dataset [jcp paper](https://doi.org/10.1063/5.0043793) with two variants:; * `O24by5mb.py` - geometries with ghosted H as a midbond functions located at COM; * `O24by5.py` - geometries without midbond functions. ## Questions; - [ ] Should I modify any install script to accommodate additional files?; - [ ] Should test files be added, e.g. for three subsets (ED, DD, MX) that are defined?; - [x] I've defined constant `KCALMOL2WAVENUMBERS = 349.7551` inside the database, as paper values are in cm^-1 and psi database driver expects kcal/mol, is there a cleaner way to handle this conversion?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2154
https://github.com/psi4/psi4/pull/2154:639,Testability,Test,Tests,639,"## Description; adds O24 dataset [jcp paper](https://doi.org/10.1063/5.0043793) with two variants:; * `O24by5mb.py` - geometries with ghosted H as a midbond functions located at COM; * `O24by5.py` - geometries without midbond functions. ## Questions; - [ ] Should I modify any install script to accommodate additional files?; - [ ] Should test files be added, e.g. for three subsets (ED, DD, MX) that are defined?; - [x] I've defined constant `KCALMOL2WAVENUMBERS = 349.7551` inside the database, as paper values are in cm^-1 and psi database driver expects kcal/mol, is there a cleaner way to handle this conversion?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2154
https://github.com/psi4/psi4/pull/2154:713,Testability,test,tests,713,"## Description; adds O24 dataset [jcp paper](https://doi.org/10.1063/5.0043793) with two variants:; * `O24by5mb.py` - geometries with ghosted H as a midbond functions located at COM; * `O24by5.py` - geometries without midbond functions. ## Questions; - [ ] Should I modify any install script to accommodate additional files?; - [ ] Should test files be added, e.g. for three subsets (ED, DD, MX) that are defined?; - [x] I've defined constant `KCALMOL2WAVENUMBERS = 349.7551` inside the database, as paper values are in cm^-1 and psi database driver expects kcal/mol, is there a cleaner way to handle this conversion?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2154
https://github.com/psi4/psi4/pull/2154:804,Testability,test,tests,804,"## Description; adds O24 dataset [jcp paper](https://doi.org/10.1063/5.0043793) with two variants:; * `O24by5mb.py` - geometries with ghosted H as a midbond functions located at COM; * `O24by5.py` - geometries without midbond functions. ## Questions; - [ ] Should I modify any install script to accommodate additional files?; - [ ] Should test files be added, e.g. for three subsets (ED, DD, MX) that are defined?; - [x] I've defined constant `KCALMOL2WAVENUMBERS = 349.7551` inside the database, as paper values are in cm^-1 and psi database driver expects kcal/mol, is there a cleaner way to handle this conversion?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2154
https://github.com/psi4/psi4/pull/2155:315,Deployability,Update,Updated,315,"## Description; Implements Density matrix-based integral screening algorithms for Direct SCF, as well as Incremental Fock Build, the process of building a Fock matrix using the difference in the density matrix between SCF iterations. Reference Paper:; https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111. Updated Version of PR #2062. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Provide Massive Speedups to DirectJK Builds for HF and DFT; - [x] Accuracy of Calculations remain uncompromised. ## Questions; - [x] Is my current method of handling the density matrix for UHF and ROHF ideal?. ## Checklist; - [x] Passing cc-pVDZ and cc-pVTZ tests for HF and DFT (e_convergence 1.0e-6); - [x] Passing aug-cc-pVDZ, aug-cc-pVTZ tests for HF and DFT. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2155
https://github.com/psi4/psi4/pull/2155:709,Testability,test,tests,709,"## Description; Implements Density matrix-based integral screening algorithms for Direct SCF, as well as Incremental Fock Build, the process of building a Fock matrix using the difference in the density matrix between SCF iterations. Reference Paper:; https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111. Updated Version of PR #2062. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Provide Massive Speedups to DirectJK Builds for HF and DFT; - [x] Accuracy of Calculations remain uncompromised. ## Questions; - [x] Is my current method of handling the density matrix for UHF and ROHF ideal?. ## Checklist; - [x] Passing cc-pVDZ and cc-pVTZ tests for HF and DFT (e_convergence 1.0e-6); - [x] Passing aug-cc-pVDZ, aug-cc-pVTZ tests for HF and DFT. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2155
https://github.com/psi4/psi4/pull/2155:793,Testability,test,tests,793,"## Description; Implements Density matrix-based integral screening algorithms for Direct SCF, as well as Incremental Fock Build, the process of building a Fock matrix using the difference in the density matrix between SCF iterations. Reference Paper:; https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111. Updated Version of PR #2062. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Provide Massive Speedups to DirectJK Builds for HF and DFT; - [x] Accuracy of Calculations remain uncompromised. ## Questions; - [x] Is my current method of handling the density matrix for UHF and ROHF ideal?. ## Checklist; - [x] Passing cc-pVDZ and cc-pVTZ tests for HF and DFT (e_convergence 1.0e-6); - [x] Passing aug-cc-pVDZ, aug-cc-pVTZ tests for HF and DFT. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2155
https://github.com/psi4/psi4/pull/2156:825,Testability,test,tests,825,"## Description; This adds further output to TDSCF and TDDFT calculations, including electric TDM vectors and the excitations and deexcitations that contribute to each excited state. Currently, excitations / deexcitations are only printed for C1 symmetry. A new option TDSCF_COEFF_CUTOFF (default = 0.1) has been added that sets the cutoff for printing excitation / deexcitation coefficients. ## Todos; - [ ] Add support for symmetry; - [ ] Add further output (e.g. other transition dipoles, etc. I've only added what I'm usually after from these calculations). ## Questions; - [ ] How to construct excitations / deexcitations when symmetry is used?; - [ ] Does documentation for new options get built automatically or do I need to add something somewhere?. ## Checklist; - [ ] Further comparisons could be added to the tdscf tests, e.g. TDM vectors; - [ ] All tdscf-? tests pass (although the output will be longer than the reference output; other tests still running - slow test machine - but should run as expected) . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2156
https://github.com/psi4/psi4/pull/2156:868,Testability,test,tests,868,"## Description; This adds further output to TDSCF and TDDFT calculations, including electric TDM vectors and the excitations and deexcitations that contribute to each excited state. Currently, excitations / deexcitations are only printed for C1 symmetry. A new option TDSCF_COEFF_CUTOFF (default = 0.1) has been added that sets the cutoff for printing excitation / deexcitation coefficients. ## Todos; - [ ] Add support for symmetry; - [ ] Add further output (e.g. other transition dipoles, etc. I've only added what I'm usually after from these calculations). ## Questions; - [ ] How to construct excitations / deexcitations when symmetry is used?; - [ ] Does documentation for new options get built automatically or do I need to add something somewhere?. ## Checklist; - [ ] Further comparisons could be added to the tdscf tests, e.g. TDM vectors; - [ ] All tdscf-? tests pass (although the output will be longer than the reference output; other tests still running - slow test machine - but should run as expected) . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2156
https://github.com/psi4/psi4/pull/2156:948,Testability,test,tests,948,"## Description; This adds further output to TDSCF and TDDFT calculations, including electric TDM vectors and the excitations and deexcitations that contribute to each excited state. Currently, excitations / deexcitations are only printed for C1 symmetry. A new option TDSCF_COEFF_CUTOFF (default = 0.1) has been added that sets the cutoff for printing excitation / deexcitation coefficients. ## Todos; - [ ] Add support for symmetry; - [ ] Add further output (e.g. other transition dipoles, etc. I've only added what I'm usually after from these calculations). ## Questions; - [ ] How to construct excitations / deexcitations when symmetry is used?; - [ ] Does documentation for new options get built automatically or do I need to add something somewhere?. ## Checklist; - [ ] Further comparisons could be added to the tdscf tests, e.g. TDM vectors; - [ ] All tdscf-? tests pass (although the output will be longer than the reference output; other tests still running - slow test machine - but should run as expected) . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2156
https://github.com/psi4/psi4/pull/2156:975,Testability,test,test,975,"## Description; This adds further output to TDSCF and TDDFT calculations, including electric TDM vectors and the excitations and deexcitations that contribute to each excited state. Currently, excitations / deexcitations are only printed for C1 symmetry. A new option TDSCF_COEFF_CUTOFF (default = 0.1) has been added that sets the cutoff for printing excitation / deexcitation coefficients. ## Todos; - [ ] Add support for symmetry; - [ ] Add further output (e.g. other transition dipoles, etc. I've only added what I'm usually after from these calculations). ## Questions; - [ ] How to construct excitations / deexcitations when symmetry is used?; - [ ] Does documentation for new options get built automatically or do I need to add something somewhere?. ## Checklist; - [ ] Further comparisons could be added to the tdscf tests, e.g. TDM vectors; - [ ] All tdscf-? tests pass (although the output will be longer than the reference output; other tests still running - slow test machine - but should run as expected) . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2156
https://github.com/psi4/psi4/issues/2157:63,Availability,avail,available,63,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2157
https://github.com/psi4/psi4/issues/2157:149,Availability,error,error,149,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2157
https://github.com/psi4/psi4/issues/2157:200,Availability,avail,available,200,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2157
https://github.com/psi4/psi4/issues/2157:292,Availability,avail,available,292,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2157
https://github.com/psi4/psi4/issues/2157:93,Energy Efficiency,energy,energy,93,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2157
https://github.com/psi4/psi4/issues/2157:260,Energy Efficiency,Energy,Energy,260,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2157
https://github.com/psi4/psi4/issues/2157:155,Integrability,message,message,155,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2157
https://github.com/psi4/psi4/issues/2157:243,Security,Validat,ValidationError,243,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2157
https://github.com/psi4/psi4/pull/2159:349,Testability,test,test,349,## Description; Debug symbols where being mistakenly striped from the core python module. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Debug symbols are back; - [x] Ability to break on line numbers is back. ## Checklist; - [x] Works for @JonathonMisiewicz and myself. Doesn't affect any test cases. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2159
https://github.com/psi4/psi4/pull/2160:24,Deployability,update,updates,24,## Description; This PR updates the MDI integration to support version 1.2 of the MDI Library. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2160
https://github.com/psi4/psi4/pull/2160:40,Deployability,integrat,integration,40,## Description; This PR updates the MDI integration to support version 1.2 of the MDI Library. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2160
https://github.com/psi4/psi4/pull/2160:40,Integrability,integrat,integration,40,## Description; This PR updates the MDI integration to support version 1.2 of the MDI Library. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2160
https://github.com/psi4/psi4/pull/2160:115,Testability,Test,Tests,115,## Description; This PR updates the MDI integration to support version 1.2 of the MDI Library. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2160
https://github.com/psi4/psi4/pull/2160:189,Testability,test,tests,189,## Description; This PR updates the MDI integration to support version 1.2 of the MDI Library. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2160
https://github.com/psi4/psi4/pull/2160:280,Testability,test,tests,280,## Description; This PR updates the MDI integration to support version 1.2 of the MDI Library. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2160
https://github.com/psi4/psi4/pull/2161:16,Deployability,Update,Update,16,## Description; Update MDI implementation to support MDI version 1.2. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2161
https://github.com/psi4/psi4/pull/2161:90,Testability,Test,Tests,90,## Description; Update MDI implementation to support MDI version 1.2. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2161
https://github.com/psi4/psi4/pull/2161:164,Testability,test,tests,164,## Description; Update MDI implementation to support MDI version 1.2. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2161
https://github.com/psi4/psi4/pull/2161:255,Testability,test,tests,255,## Description; Update MDI implementation to support MDI version 1.2. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2161
https://github.com/psi4/psi4/pull/2162:101,Availability,error,errors,101,"## Description; non-final PR while we work out merge order. this is a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. this would be non-controversial except that I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2162
https://github.com/psi4/psi4/pull/2162:232,Deployability,update,update,232,"## Description; non-final PR while we work out merge order. this is a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. this would be non-controversial except that I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2162
https://github.com/psi4/psi4/pull/2162:544,Integrability,wrap,wrappers,544,"## Description; non-final PR while we work out merge order. this is a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. this would be non-controversial except that I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2162
https://github.com/psi4/psi4/pull/2162:1419,Performance,optimiz,optimize,1419,"ersion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files, but this could influence p4n. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they are necessary for a clean docs build w/o hacks. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new feat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2162
https://github.com/psi4/psi4/pull/2162:897,Security,access,access,897,"## Description; non-final PR while we work out merge order. this is a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. this would be non-controversial except that I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2162
https://github.com/psi4/psi4/pull/2162:1915,Testability,test,tests,1915,"folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files, but this could influence p4n. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they are necessary for a clean docs build w/o hacks. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2162
https://github.com/psi4/psi4/pull/2162:2383,Testability,Test,Tests,2383,"folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files, but this could influence p4n. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they are necessary for a clean docs build w/o hacks. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2162
https://github.com/psi4/psi4/pull/2162:2457,Testability,test,tests,2457,"folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files, but this could influence p4n. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they are necessary for a clean docs build w/o hacks. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2162
https://github.com/psi4/psi4/pull/2162:2548,Testability,test,tests,2548,"folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files, but this could influence p4n. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they are necessary for a clean docs build w/o hacks. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2162
https://github.com/psi4/psi4/pull/2162:1467,Usability,clear,clear,1467,"ites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files, but this could influence p4n. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they are necessary for a clean docs build w/o hacks. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## S",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2162
https://github.com/psi4/psi4/pull/2163:16,Deployability,Update,Update,16,## Description; Update MDI support to version 1.2. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2163
https://github.com/psi4/psi4/pull/2163:71,Testability,Test,Tests,71,## Description; Update MDI support to version 1.2. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2163
https://github.com/psi4/psi4/pull/2163:145,Testability,test,tests,145,## Description; Update MDI support to version 1.2. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2163
https://github.com/psi4/psi4/pull/2163:236,Testability,test,tests,236,## Description; Update MDI support to version 1.2. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2163
https://github.com/psi4/psi4/pull/2164:585,Deployability,install,install,585,"## Description; All the docs links fixes that don't involve restructuring the driver imports. . ## Todos; - [x] fix qcvar collection and referencing. envvar referencing.; - [x] add mechanism for renaming, retiring qcvars; - [x] there's an extension for using typing in sphinx autodoc now, so move typing from docstrings to signature.; - [x] been partially isort-ed. these are the harmless changes.; - [x] edited a few misc. narrative docs; - [x] extensive additions to qcvar glossary so everything's defined. feel free to edit; - [x] instead of registering each pytest file, let cmake install all pytest tests by glob; - [x] added kwargs and some docstring cleanup to exports; - [x] removed broken option and added alias to run_psi4. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2164
https://github.com/psi4/psi4/pull/2164:604,Testability,test,tests,604,"## Description; All the docs links fixes that don't involve restructuring the driver imports. . ## Todos; - [x] fix qcvar collection and referencing. envvar referencing.; - [x] add mechanism for renaming, retiring qcvars; - [x] there's an extension for using typing in sphinx autodoc now, so move typing from docstrings to signature.; - [x] been partially isort-ed. these are the harmless changes.; - [x] edited a few misc. narrative docs; - [x] extensive additions to qcvar glossary so everything's defined. feel free to edit; - [x] instead of registering each pytest file, let cmake install all pytest tests by glob; - [x] added kwargs and some docstring cleanup to exports; - [x] removed broken option and added alias to run_psi4. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2164
https://github.com/psi4/psi4/pull/2164:785,Testability,Test,Tests,785,"## Description; All the docs links fixes that don't involve restructuring the driver imports. . ## Todos; - [x] fix qcvar collection and referencing. envvar referencing.; - [x] add mechanism for renaming, retiring qcvars; - [x] there's an extension for using typing in sphinx autodoc now, so move typing from docstrings to signature.; - [x] been partially isort-ed. these are the harmless changes.; - [x] edited a few misc. narrative docs; - [x] extensive additions to qcvar glossary so everything's defined. feel free to edit; - [x] instead of registering each pytest file, let cmake install all pytest tests by glob; - [x] added kwargs and some docstring cleanup to exports; - [x] removed broken option and added alias to run_psi4. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2164
https://github.com/psi4/psi4/pull/2164:859,Testability,test,tests,859,"## Description; All the docs links fixes that don't involve restructuring the driver imports. . ## Todos; - [x] fix qcvar collection and referencing. envvar referencing.; - [x] add mechanism for renaming, retiring qcvars; - [x] there's an extension for using typing in sphinx autodoc now, so move typing from docstrings to signature.; - [x] been partially isort-ed. these are the harmless changes.; - [x] edited a few misc. narrative docs; - [x] extensive additions to qcvar glossary so everything's defined. feel free to edit; - [x] instead of registering each pytest file, let cmake install all pytest tests by glob; - [x] added kwargs and some docstring cleanup to exports; - [x] removed broken option and added alias to run_psi4. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2164
https://github.com/psi4/psi4/pull/2164:950,Testability,test,tests,950,"## Description; All the docs links fixes that don't involve restructuring the driver imports. . ## Todos; - [x] fix qcvar collection and referencing. envvar referencing.; - [x] add mechanism for renaming, retiring qcvars; - [x] there's an extension for using typing in sphinx autodoc now, so move typing from docstrings to signature.; - [x] been partially isort-ed. these are the harmless changes.; - [x] edited a few misc. narrative docs; - [x] extensive additions to qcvar glossary so everything's defined. feel free to edit; - [x] instead of registering each pytest file, let cmake install all pytest tests by glob; - [x] added kwargs and some docstring cleanup to exports; - [x] removed broken option and added alias to run_psi4. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2164
https://github.com/psi4/psi4/pull/2165:103,Testability,test,tests,103,"## Description; Lori brought to my attention that my previous PR accidentally introduced a bug causing tests to fail. (It was an obvious indexing bug.) That is now fixed. In the interests of making test-running less onerous, I've also changed the test cases so that I can run all `dct` tests faster. We're checking things less tightly and using smaller basis sets. ## Todos; - [x] Fix bug introduced in #2152 ; - [x] Faster `dct` tests. ## Checklist; - [x] `dct` tests pass, and in under two minutes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2165
https://github.com/psi4/psi4/pull/2165:198,Testability,test,test-running,198,"## Description; Lori brought to my attention that my previous PR accidentally introduced a bug causing tests to fail. (It was an obvious indexing bug.) That is now fixed. In the interests of making test-running less onerous, I've also changed the test cases so that I can run all `dct` tests faster. We're checking things less tightly and using smaller basis sets. ## Todos; - [x] Fix bug introduced in #2152 ; - [x] Faster `dct` tests. ## Checklist; - [x] `dct` tests pass, and in under two minutes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2165
https://github.com/psi4/psi4/pull/2165:247,Testability,test,test,247,"## Description; Lori brought to my attention that my previous PR accidentally introduced a bug causing tests to fail. (It was an obvious indexing bug.) That is now fixed. In the interests of making test-running less onerous, I've also changed the test cases so that I can run all `dct` tests faster. We're checking things less tightly and using smaller basis sets. ## Todos; - [x] Fix bug introduced in #2152 ; - [x] Faster `dct` tests. ## Checklist; - [x] `dct` tests pass, and in under two minutes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2165
https://github.com/psi4/psi4/pull/2165:286,Testability,test,tests,286,"## Description; Lori brought to my attention that my previous PR accidentally introduced a bug causing tests to fail. (It was an obvious indexing bug.) That is now fixed. In the interests of making test-running less onerous, I've also changed the test cases so that I can run all `dct` tests faster. We're checking things less tightly and using smaller basis sets. ## Todos; - [x] Fix bug introduced in #2152 ; - [x] Faster `dct` tests. ## Checklist; - [x] `dct` tests pass, and in under two minutes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2165
https://github.com/psi4/psi4/pull/2165:430,Testability,test,tests,430,"## Description; Lori brought to my attention that my previous PR accidentally introduced a bug causing tests to fail. (It was an obvious indexing bug.) That is now fixed. In the interests of making test-running less onerous, I've also changed the test cases so that I can run all `dct` tests faster. We're checking things less tightly and using smaller basis sets. ## Todos; - [x] Fix bug introduced in #2152 ; - [x] Faster `dct` tests. ## Checklist; - [x] `dct` tests pass, and in under two minutes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2165
https://github.com/psi4/psi4/pull/2165:463,Testability,test,tests,463,"## Description; Lori brought to my attention that my previous PR accidentally introduced a bug causing tests to fail. (It was an obvious indexing bug.) That is now fixed. In the interests of making test-running less onerous, I've also changed the test cases so that I can run all `dct` tests faster. We're checking things less tightly and using smaller basis sets. ## Todos; - [x] Fix bug introduced in #2152 ; - [x] Faster `dct` tests. ## Checklist; - [x] `dct` tests pass, and in under two minutes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2165
https://github.com/psi4/psi4/pull/2166:63,Availability,error,errors,63,"## Description; This produces a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. This PR is the controversial part of the docs technical refresh. I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2166
https://github.com/psi4/psi4/pull/2166:194,Deployability,update,update,194,"## Description; This produces a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. This PR is the controversial part of the docs technical refresh. I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2166
https://github.com/psi4/psi4/pull/2166:527,Integrability,wrap,wrappers,527,"## Description; This produces a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. This PR is the controversial part of the docs technical refresh. I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2166
https://github.com/psi4/psi4/pull/2166:1460,Performance,optimiz,optimize,1460," was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files. P4n changes are fewer than I feared, https://github.com/psi4/psi4numpy/pull/112. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they, or something like them, are necessary for a clean docs build w/o hacks. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2166
https://github.com/psi4/psi4/pull/2166:938,Security,access,access,938,"## Description; This produces a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. This PR is the controversial part of the docs technical refresh. I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2166
https://github.com/psi4/psi4/pull/2166:1956,Testability,test,tests,1956,"to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files. P4n changes are fewer than I feared, https://github.com/psi4/psi4numpy/pull/112. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they, or something like them, are necessary for a clean docs build w/o hacks. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2166
https://github.com/psi4/psi4/pull/2166:2336,Testability,Test,Tests,2336,"to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files. P4n changes are fewer than I feared, https://github.com/psi4/psi4numpy/pull/112. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they, or something like them, are necessary for a clean docs build w/o hacks. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2166
https://github.com/psi4/psi4/pull/2166:2410,Testability,test,tests,2410,"to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files. P4n changes are fewer than I feared, https://github.com/psi4/psi4numpy/pull/112. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they, or something like them, are necessary for a clean docs build w/o hacks. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2166
https://github.com/psi4/psi4/pull/2166:2501,Testability,test,tests,2501,"to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files. P4n changes are fewer than I feared, https://github.com/psi4/psi4numpy/pull/112. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they, or something like them, are necessary for a clean docs build w/o hacks. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2166
https://github.com/psi4/psi4/pull/2166:1508,Usability,clear,clear,1508,"to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files. P4n changes are fewer than I feared, https://github.com/psi4/psi4numpy/pull/112. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they, or something like them, are necessary for a clean docs build w/o hacks. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2166
https://github.com/psi4/psi4/pull/2168:299,Integrability,depend,depends,299,"## Description; This PR removes some unused code from the `dct` module. Most importantly for me, this gets rid of a difficult-to-follow function and removes an IWL call. I count all three of those as victories for code cleanup. Expect another PR to replace some IWL in `dct` with `libdpd`, but that depends on the timing tests. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removes unused code. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2168
https://github.com/psi4/psi4/pull/2168:321,Testability,test,tests,321,"## Description; This PR removes some unused code from the `dct` module. Most importantly for me, this gets rid of a difficult-to-follow function and removes an IWL call. I count all three of those as victories for code cleanup. Expect another PR to replace some IWL in `dct` with `libdpd`, but that depends on the timing tests. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removes unused code. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2168
https://github.com/psi4/psi4/pull/2168:480,Testability,test,tests,480,"## Description; This PR removes some unused code from the `dct` module. Most importantly for me, this gets rid of a difficult-to-follow function and removes an IWL call. I count all three of those as victories for code cleanup. Expect another PR to replace some IWL in `dct` with `libdpd`, but that depends on the timing tests. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removes unused code. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2168
https://github.com/psi4/psi4/pull/2169:292,Energy Efficiency,Energy,Energy,292,"## Description; See Libxc version and citation. looks like below. I'd have to add `xc.h` to another file to put the printing in a nicer place. @susilehtola . ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 12; Number of basis functions: 24; Number of Cartesian functions: 25; Spherical Harmonics?: true; Max angular momentum: 2. ==> LibXC v5.1.2, S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018) (10.1016/j.softx.2017.11.002) <==. ==> DFT Potential <==. => Composite Functional: B3LYP <= . B3LYP Hyb-GGA Exchange-Correlation Functional. P. J. Stephens, F. J. Devlin, C. F. Chabalowski, and M. J. Frisch, J. Phys. Chem. 98, 11623 (1994) (10.1021/j100096a001). Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 0.0800 Slater exchange; 0.7200 Becke 88. => Exact (HF) Exchange <=. 0.2000 HF ; ```; ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2169
https://github.com/psi4/psi4/pull/2170:38,Testability,log,logic,38,## Description; Cleans up some of the logic and printing in optking's set_params. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2170
https://github.com/psi4/psi4/pull/2170:136,Testability,test,tests,136,## Description; Cleans up some of the logic and printing in optking's set_params. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2170
https://github.com/psi4/psi4/pull/2170:227,Testability,test,tests,227,## Description; Cleans up some of the logic and printing in optking's set_params. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2170
https://github.com/psi4/psi4/pull/2171:670,Energy Efficiency,reduce,reduced,670,"## Description; The next bite-sized DCT cleanup PR. To construct an intermediate `Fa_` and `Fb_`, previously, we'd divide the term in three parts, compute the three contributions separately, and then add them together. Making things more complicated, we add the pieces in different functions. In the RHF case, this PR combines two of those terms from the outset, so there are only two contributions to add. As a result, we now construct fewer `double*`, use fewer class variables, and have less cause to worry about whether the intermediates `Fa_` and `Fb_` are completely or incompletely constructed. While I haven't run timings, this code should also be faster due to reduced random-access of arrays. The UHF code is more complicated, so that's best saved for another PR. At that point, I hope to eliminate a few more class variables. ## Todos; - [x] More code cleanup. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2171
https://github.com/psi4/psi4/pull/2171:470,Modifiability,variab,variables,470,"## Description; The next bite-sized DCT cleanup PR. To construct an intermediate `Fa_` and `Fb_`, previously, we'd divide the term in three parts, compute the three contributions separately, and then add them together. Making things more complicated, we add the pieces in different functions. In the RHF case, this PR combines two of those terms from the outset, so there are only two contributions to add. As a result, we now construct fewer `double*`, use fewer class variables, and have less cause to worry about whether the intermediates `Fa_` and `Fb_` are completely or incompletely constructed. While I haven't run timings, this code should also be faster due to reduced random-access of arrays. The UHF code is more complicated, so that's best saved for another PR. At that point, I hope to eliminate a few more class variables. ## Todos; - [x] More code cleanup. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2171
https://github.com/psi4/psi4/pull/2171:826,Modifiability,variab,variables,826,"## Description; The next bite-sized DCT cleanup PR. To construct an intermediate `Fa_` and `Fb_`, previously, we'd divide the term in three parts, compute the three contributions separately, and then add them together. Making things more complicated, we add the pieces in different functions. In the RHF case, this PR combines two of those terms from the outset, so there are only two contributions to add. As a result, we now construct fewer `double*`, use fewer class variables, and have less cause to worry about whether the intermediates `Fa_` and `Fb_` are completely or incompletely constructed. While I haven't run timings, this code should also be faster due to reduced random-access of arrays. The UHF code is more complicated, so that's best saved for another PR. At that point, I hope to eliminate a few more class variables. ## Todos; - [x] More code cleanup. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2171
https://github.com/psi4/psi4/pull/2171:685,Security,access,access,685,"## Description; The next bite-sized DCT cleanup PR. To construct an intermediate `Fa_` and `Fb_`, previously, we'd divide the term in three parts, compute the three contributions separately, and then add them together. Making things more complicated, we add the pieces in different functions. In the RHF case, this PR combines two of those terms from the outset, so there are only two contributions to add. As a result, we now construct fewer `double*`, use fewer class variables, and have less cause to worry about whether the intermediates `Fa_` and `Fb_` are completely or incompletely constructed. While I haven't run timings, this code should also be faster due to reduced random-access of arrays. The UHF code is more complicated, so that's best saved for another PR. At that point, I hope to eliminate a few more class variables. ## Todos; - [x] More code cleanup. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2171
https://github.com/psi4/psi4/pull/2171:896,Testability,test,tests,896,"## Description; The next bite-sized DCT cleanup PR. To construct an intermediate `Fa_` and `Fb_`, previously, we'd divide the term in three parts, compute the three contributions separately, and then add them together. Making things more complicated, we add the pieces in different functions. In the RHF case, this PR combines two of those terms from the outset, so there are only two contributions to add. As a result, we now construct fewer `double*`, use fewer class variables, and have less cause to worry about whether the intermediates `Fa_` and `Fb_` are completely or incompletely constructed. While I haven't run timings, this code should also be faster due to reduced random-access of arrays. The UHF code is more complicated, so that's best saved for another PR. At that point, I hope to eliminate a few more class variables. ## Todos; - [x] More code cleanup. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2171
https://github.com/psi4/psi4/pull/2172:94,Performance,concurren,concurrency,94,## Description; * Fixes a line in docs that was causing a docs build fail; * Uses the new GHA concurrency feature to cancel previous docs job if new one presents itself. I've already seen it working correctly for the two commits of this branch. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2172
https://github.com/psi4/psi4/pull/2173:39,Testability,test,test,39,"## Description; I've just watched this test take 84--120 iterations to converge over consecutive runs. Lately for py38 conda package it has needed 121, failing the whole thing. So I'm adding extra cushioning. The output.ref is 88, so nothing new. Also the MKL_CBWR=AVX seems on average to increase the iterations needed. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2173
https://github.com/psi4/psi4/issues/2174:37,Availability,error,error,37,"Running this input results in a PSIO error in version 1.3.2.; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(h2o); set reference rhf; energy('b3lyp'). activate(ch3); set reference uhf; energy('b3lyp'); ```. However, if one switches the runs the other way around; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(ch3); set reference uhf; energy('b3lyp'). activate(h2o); set reference rhf; energy('b3lyp'); ```; the calculation succeeds.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2174
https://github.com/psi4/psi4/issues/2174:381,Energy Efficiency,energy,energy,381,"Running this input results in a PSIO error in version 1.3.2.; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(h2o); set reference rhf; energy('b3lyp'). activate(ch3); set reference uhf; energy('b3lyp'); ```. However, if one switches the runs the other way around; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(ch3); set reference uhf; energy('b3lyp'). activate(h2o); set reference rhf; energy('b3lyp'); ```; the calculation succeeds.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2174
https://github.com/psi4/psi4/issues/2174:432,Energy Efficiency,energy,energy,432,"Running this input results in a PSIO error in version 1.3.2.; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(h2o); set reference rhf; energy('b3lyp'). activate(ch3); set reference uhf; energy('b3lyp'); ```. However, if one switches the runs the other way around; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(ch3); set reference uhf; energy('b3lyp'). activate(h2o); set reference rhf; energy('b3lyp'); ```; the calculation succeeds.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2174
https://github.com/psi4/psi4/issues/2174:829,Energy Efficiency,energy,energy,829,"Running this input results in a PSIO error in version 1.3.2.; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(h2o); set reference rhf; energy('b3lyp'). activate(ch3); set reference uhf; energy('b3lyp'); ```. However, if one switches the runs the other way around; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(ch3); set reference uhf; energy('b3lyp'). activate(h2o); set reference rhf; energy('b3lyp'); ```; the calculation succeeds.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2174
https://github.com/psi4/psi4/issues/2174:880,Energy Efficiency,energy,energy,880,"Running this input results in a PSIO error in version 1.3.2.; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(h2o); set reference rhf; energy('b3lyp'). activate(ch3); set reference uhf; energy('b3lyp'); ```. However, if one switches the runs the other way around; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(ch3); set reference uhf; energy('b3lyp'). activate(h2o); set reference rhf; energy('b3lyp'); ```; the calculation succeeds.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2174
https://github.com/psi4/psi4/pull/2175:346,Integrability,rout,routine,346,"## Description; Even though Intel+defaults conda gcc7.3, azure gcc-s, and c-f conda gcc9 are perfectly fine with it, defaults conda gcc7.3 as primary compiler segfaults if the `py_psi_get_atomic_point_charges` fn is removed. I don't understand it, but I will appease it. All other changes are fixing stray non-ascii chars, since that's one of my routine steps when things don't make sense. Checking full tests locally. EDIT: full tests clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2175
https://github.com/psi4/psi4/pull/2175:404,Testability,test,tests,404,"## Description; Even though Intel+defaults conda gcc7.3, azure gcc-s, and c-f conda gcc9 are perfectly fine with it, defaults conda gcc7.3 as primary compiler segfaults if the `py_psi_get_atomic_point_charges` fn is removed. I don't understand it, but I will appease it. All other changes are fixing stray non-ascii chars, since that's one of my routine steps when things don't make sense. Checking full tests locally. EDIT: full tests clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2175
https://github.com/psi4/psi4/pull/2175:430,Testability,test,tests,430,"## Description; Even though Intel+defaults conda gcc7.3, azure gcc-s, and c-f conda gcc9 are perfectly fine with it, defaults conda gcc7.3 as primary compiler segfaults if the `py_psi_get_atomic_point_charges` fn is removed. I don't understand it, but I will appease it. All other changes are fixing stray non-ascii chars, since that's one of my routine steps when things don't make sense. Checking full tests locally. EDIT: full tests clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2175
https://github.com/psi4/psi4/issues/2177:128,Energy Efficiency,energy,energy,128,"There is a problem ""Orbital basis argument must not be empty"" when calling fchk() after the method and basis are defined in the energy() function call.; This problem is found in the latest development version 1.4rc2.dev97.; v1.3.x did not have this problem. ```; molecule {; 0 1; O 3.031916 1.669683 2.276015; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; }; E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); fchk(wfn, ""test4-dma.fchk""); clean(); ```. ```; Traceback (most recent call last):; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/bin/psi4"", line 332, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1993, in fchk; wfn_ = core.Wavefunction.build(wfn.molecule(), core.get_global_option('BASIS')); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 125, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 90, in _pybuild_basis; return_atomlist=return_atomlist); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 646, in pyconstruct; raise ValidationError(""""""Orbital basis argument must not be empty.""""""). psi4.driver.qcdb.exceptions.ValidationError: Orbital basis argument must not be empty. Printing out the relevant lines from the Psithon --> Python processed input file:; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; """"""); core.IO.set_default_namespace(""""); E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); --> fchk(wfn, ""test4-dma.fchk""); clean(). !--------------------------------------------!; ! !; ! Orbital basis argument must not be empty. !; ! !; !-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2177
https://github.com/psi4/psi4/issues/2177:382,Energy Efficiency,energy,energy,382,"There is a problem ""Orbital basis argument must not be empty"" when calling fchk() after the method and basis are defined in the energy() function call.; This problem is found in the latest development version 1.4rc2.dev97.; v1.3.x did not have this problem. ```; molecule {; 0 1; O 3.031916 1.669683 2.276015; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; }; E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); fchk(wfn, ""test4-dma.fchk""); clean(); ```. ```; Traceback (most recent call last):; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/bin/psi4"", line 332, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1993, in fchk; wfn_ = core.Wavefunction.build(wfn.molecule(), core.get_global_option('BASIS')); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 125, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 90, in _pybuild_basis; return_atomlist=return_atomlist); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 646, in pyconstruct; raise ValidationError(""""""Orbital basis argument must not be empty.""""""). psi4.driver.qcdb.exceptions.ValidationError: Orbital basis argument must not be empty. Printing out the relevant lines from the Psithon --> Python processed input file:; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; """"""); core.IO.set_default_namespace(""""); E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); --> fchk(wfn, ""test4-dma.fchk""); clean(). !--------------------------------------------!; ! !; ! Orbital basis argument must not be empty. !; ! !; !-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2177
https://github.com/psi4/psi4/issues/2177:1790,Energy Efficiency,energy,energy,1790,"t be empty"" when calling fchk() after the method and basis are defined in the energy() function call.; This problem is found in the latest development version 1.4rc2.dev97.; v1.3.x did not have this problem. ```; molecule {; 0 1; O 3.031916 1.669683 2.276015; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; }; E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); fchk(wfn, ""test4-dma.fchk""); clean(); ```. ```; Traceback (most recent call last):; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/bin/psi4"", line 332, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1993, in fchk; wfn_ = core.Wavefunction.build(wfn.molecule(), core.get_global_option('BASIS')); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 125, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 90, in _pybuild_basis; return_atomlist=return_atomlist); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 646, in pyconstruct; raise ValidationError(""""""Orbital basis argument must not be empty.""""""). psi4.driver.qcdb.exceptions.ValidationError: Orbital basis argument must not be empty. Printing out the relevant lines from the Psithon --> Python processed input file:; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; """"""); core.IO.set_default_namespace(""""); E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); --> fchk(wfn, ""test4-dma.fchk""); clean(). !--------------------------------------------!; ! !; ! Orbital basis argument must not be empty. !; ! !; !--------------------------------------------!. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2177
https://github.com/psi4/psi4/issues/2177:1444,Security,Validat,ValidationError,1444,"t be empty"" when calling fchk() after the method and basis are defined in the energy() function call.; This problem is found in the latest development version 1.4rc2.dev97.; v1.3.x did not have this problem. ```; molecule {; 0 1; O 3.031916 1.669683 2.276015; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; }; E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); fchk(wfn, ""test4-dma.fchk""); clean(); ```. ```; Traceback (most recent call last):; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/bin/psi4"", line 332, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1993, in fchk; wfn_ = core.Wavefunction.build(wfn.molecule(), core.get_global_option('BASIS')); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 125, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 90, in _pybuild_basis; return_atomlist=return_atomlist); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 646, in pyconstruct; raise ValidationError(""""""Orbital basis argument must not be empty.""""""). psi4.driver.qcdb.exceptions.ValidationError: Orbital basis argument must not be empty. Printing out the relevant lines from the Psithon --> Python processed input file:; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; """"""); core.IO.set_default_namespace(""""); E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); --> fchk(wfn, ""test4-dma.fchk""); clean(). !--------------------------------------------!; ! !; ! Orbital basis argument must not be empty. !; ! !; !--------------------------------------------!. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2177
https://github.com/psi4/psi4/issues/2177:1538,Security,Validat,ValidationError,1538,"t be empty"" when calling fchk() after the method and basis are defined in the energy() function call.; This problem is found in the latest development version 1.4rc2.dev97.; v1.3.x did not have this problem. ```; molecule {; 0 1; O 3.031916 1.669683 2.276015; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; }; E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); fchk(wfn, ""test4-dma.fchk""); clean(); ```. ```; Traceback (most recent call last):; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/bin/psi4"", line 332, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1993, in fchk; wfn_ = core.Wavefunction.build(wfn.molecule(), core.get_global_option('BASIS')); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 125, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 90, in _pybuild_basis; return_atomlist=return_atomlist); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 646, in pyconstruct; raise ValidationError(""""""Orbital basis argument must not be empty.""""""). psi4.driver.qcdb.exceptions.ValidationError: Orbital basis argument must not be empty. Printing out the relevant lines from the Psithon --> Python processed input file:; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; """"""); core.IO.set_default_namespace(""""); E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); --> fchk(wfn, ""test4-dma.fchk""); clean(). !--------------------------------------------!; ! !; ! Orbital basis argument must not be empty. !; ! !; !--------------------------------------------!. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2177
https://github.com/psi4/psi4/issues/2178:16,Availability,error,error,16,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:60,Availability,failure,failure,60,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:1685,Availability,ERROR,ERROR,1685,"iout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-pa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:1748,Availability,ERROR,ERROR,1748,"cratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:1906,Availability,ERROR,ERROR,1906,"06/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B, sapt_jk=sapt_jk, data=data, print_header=False); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_16206",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:1969,Availability,ERROR,ERROR,1969,"out_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B, sapt_jk=sapt_jk, data=data, print_header=False); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/dri",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:2032,Availability,ERROR,ERROR,2032,"t"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B, sapt_jk=sapt_jk, data=data, print_header=False); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 421, in sapt_dft; fdds",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:2095,Availability,ERROR,ERROR,2095,"506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B, sapt_jk=sapt_jk, data=data, print_header=False); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 421, in sapt_dft; fdds_disp = sapt_mp2_terms.df_fdds_dispersion(primary_basis, aux_ba",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:1605,Energy Efficiency,ENERGY,ENERGY,1605,"placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-package",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:1826,Energy Efficiency,ENERGY,ENERGY,1826,"620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:2511,Energy Efficiency,energy,energy,2511,"20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B, sapt_jk=sapt_jk, data=data, print_header=False); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 421, in sapt_dft; fdds_disp = sapt_mp2_terms.df_fdds_dispersion(primary_basis, aux_basis, cache, is_hybrid, x_alpha); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_mp2_terms.py"", line 146, in df_fdds_dispersion; Rtinv_A = np.linalg.pinv(R_A, rcond=1.e-13).transpose(); File ""<__array_function__ internals>"", line 6, in pinv; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:2537,Energy Efficiency,energy,energy,2537,"20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B, sapt_jk=sapt_jk, data=data, print_header=False); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 421, in sapt_dft; fdds_disp = sapt_mp2_terms.df_fdds_dispersion(primary_basis, aux_basis, cache, is_hybrid, x_alpha); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_mp2_terms.py"", line 146, in df_fdds_dispersion; Rtinv_A = np.linalg.pinv(R_A, rcond=1.e-13).transpose(); File ""<__array_function__ internals>"", line 6, in pinv; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:4895,Energy Efficiency,energy,energy,4895,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:4997,Energy Efficiency,energy,energy,4997,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:5035,Energy Efficiency,ENERGY,ENERGY,5035,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:5045,Energy Efficiency,energy,energy,5045,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:5146,Energy Efficiency,energy,energy,5146,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:5184,Energy Efficiency,ENERGY,ENERGY,5184,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:5198,Energy Efficiency,energy,energy,5198,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:5300,Energy Efficiency,energy,energy,5300,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:5338,Energy Efficiency,ENERGY,ENERGY,5338,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:168,Integrability,interface,interface,168,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:4963,Modifiability,variab,variable,4963,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:5112,Modifiability,variab,variable,5112,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:5266,Modifiability,variab,variable,5266,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:3121,Performance,cache,cache,3121,"st recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B, sapt_jk=sapt_jk, data=data, print_header=False); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 421, in sapt_dft; fdds_disp = sapt_mp2_terms.df_fdds_dispersion(primary_basis, aux_basis, cache, is_hybrid, x_alpha); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_mp2_terms.py"", line 146, in df_fdds_dispersion; Rtinv_A = np.linalg.pinv(R_A, rcond=1.e-13).transpose(); File ""<__array_function__ internals>"", line 6, in pinv; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 2003, in pinv; u, s, vt = svd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:38,Testability,test,test,38,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:107,Testability,test,test,107,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:229,Testability,Test,Testing,229,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:266,Testability,Test,Test,266,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:642,Testability,test,tests,642,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:729,Testability,test,tests,729,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:840,Testability,test,testresults,840,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:852,Testability,log,log,852,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:1018,Testability,test,tests,1018,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:1435,Testability,test,tests,1435,"placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-package",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:5552,Testability,Test,Test,5552,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/issues/2178:5635,Testability,Test,Test,5635,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2178
https://github.com/psi4/psi4/pull/2179:196,Deployability,release,release,196,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] With the release of Sphinx 4, a line in one of the cloud sphinx theme's extensions stopped working. Sphinx has long ago incorporated the extension's capability, so drop from list to allow newer Sphinx and fix the docs build workflow on master.; - [x] Further investigation on the ""expandtabs"" issue building the psi docs (https://github.com/pybind/pybind11/pull/2925), shows that neither of my first two fixes are any good. So let's `sed` a better file. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2179
https://github.com/psi4/psi4/pull/2180:204,Deployability,release,release,204,"## Description; It seems that in the course of harmonizing dftd4 in QCEngine, I touched enough dftd3, gcp, and mp2d that #2142 (dftd4 and minor dftd3, gcp, mp2d) can't be put off after the QCEngine v0.19 release. So here's the non-dftd4 tweaks. ## Todos; - [x] switch gcp interface to QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] Note that this won't build until new QCEngine release. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2180
https://github.com/psi4/psi4/pull/2180:301,Deployability,update,update,301,"## Description; It seems that in the course of harmonizing dftd4 in QCEngine, I touched enough dftd3, gcp, and mp2d that #2142 (dftd4 and minor dftd3, gcp, mp2d) can't be put off after the QCEngine v0.19 release. So here's the non-dftd4 tweaks. ## Todos; - [x] switch gcp interface to QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] Note that this won't build until new QCEngine release. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2180
https://github.com/psi4/psi4/pull/2180:467,Deployability,release,release,467,"## Description; It seems that in the course of harmonizing dftd4 in QCEngine, I touched enough dftd3, gcp, and mp2d that #2142 (dftd4 and minor dftd3, gcp, mp2d) can't be put off after the QCEngine v0.19 release. So here's the non-dftd4 tweaks. ## Todos; - [x] switch gcp interface to QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] Note that this won't build until new QCEngine release. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2180
https://github.com/psi4/psi4/pull/2180:272,Integrability,interface,interface,272,"## Description; It seems that in the course of harmonizing dftd4 in QCEngine, I touched enough dftd3, gcp, and mp2d that #2142 (dftd4 and minor dftd3, gcp, mp2d) can't be put off after the QCEngine v0.19 release. So here's the non-dftd4 tweaks. ## Todos; - [x] switch gcp interface to QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] Note that this won't build until new QCEngine release. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2180
https://github.com/psi4/psi4/pull/2180:496,Testability,Test,Tests,496,"## Description; It seems that in the course of harmonizing dftd4 in QCEngine, I touched enough dftd3, gcp, and mp2d that #2142 (dftd4 and minor dftd3, gcp, mp2d) can't be put off after the QCEngine v0.19 release. So here's the non-dftd4 tweaks. ## Todos; - [x] switch gcp interface to QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] Note that this won't build until new QCEngine release. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2180
https://github.com/psi4/psi4/pull/2180:570,Testability,test,tests,570,"## Description; It seems that in the course of harmonizing dftd4 in QCEngine, I touched enough dftd3, gcp, and mp2d that #2142 (dftd4 and minor dftd3, gcp, mp2d) can't be put off after the QCEngine v0.19 release. So here's the non-dftd4 tweaks. ## Todos; - [x] switch gcp interface to QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] Note that this won't build until new QCEngine release. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2180
https://github.com/psi4/psi4/pull/2180:661,Testability,test,tests,661,"## Description; It seems that in the course of harmonizing dftd4 in QCEngine, I touched enough dftd3, gcp, and mp2d that #2142 (dftd4 and minor dftd3, gcp, mp2d) can't be put off after the QCEngine v0.19 release. So here's the non-dftd4 tweaks. ## Todos; - [x] switch gcp interface to QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] Note that this won't build until new QCEngine release. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2180
https://github.com/psi4/psi4/issues/2181:224,Performance,optimiz,optimization,224,"issue raised on the forum: http://forum.psicode.org/t/memory-usage-using-jupyter-writing-cubes/2151/3?u=hokru; A comp chem lab notebook with repeated cube file generation. > Just as an example, the whole notebook (including optimization and scan along bond-length, and visualization with NGLview) takes ~700MB (Cl2) or ~450MB (Li2), where nearly half of the memory usage happens at cubeprop().",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2181
https://github.com/psi4/psi4/issues/2183:490,Deployability,update,update,490,"The SOSCF procedure appears to use a too small default value for `SOSCF_MAX_STEPS` that controls the number of microiterations (Davidson procedure) in computing the second-order step. Attached is a test case, which in Psi4 1.3.2 gives the following convergence pattern:. | SOSCF_MAX_STEPS | Number of SCF iterations to convergence |; |--|---|; |5 (**current default**)|>100|; |6|13|; |7|9|; |8|66|; |9|19|; |10|14|; |11|53|. I'm not sure I understand how the behavior can be so random; the update should converge pretty monotonically to the exact solution. Anyway, this test case fails to converge with default SCF and SOSCF, but the latter case can be fixed by increasing the maximum number of SOSCF updates to 6, saving ~90% in SCF iterations only at the cost of 6/5=1.2x=20% more effort in a single SOSCF step. [testcase.zip](https://github.com/psi4/psi4/files/6497888/testcase.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2183
https://github.com/psi4/psi4/issues/2183:701,Deployability,update,updates,701,"The SOSCF procedure appears to use a too small default value for `SOSCF_MAX_STEPS` that controls the number of microiterations (Davidson procedure) in computing the second-order step. Attached is a test case, which in Psi4 1.3.2 gives the following convergence pattern:. | SOSCF_MAX_STEPS | Number of SCF iterations to convergence |; |--|---|; |5 (**current default**)|>100|; |6|13|; |7|9|; |8|66|; |9|19|; |10|14|; |11|53|. I'm not sure I understand how the behavior can be so random; the update should converge pretty monotonically to the exact solution. Anyway, this test case fails to converge with default SCF and SOSCF, but the latter case can be fixed by increasing the maximum number of SOSCF updates to 6, saving ~90% in SCF iterations only at the cost of 6/5=1.2x=20% more effort in a single SOSCF step. [testcase.zip](https://github.com/psi4/psi4/files/6497888/testcase.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2183
https://github.com/psi4/psi4/issues/2183:198,Testability,test,test,198,"The SOSCF procedure appears to use a too small default value for `SOSCF_MAX_STEPS` that controls the number of microiterations (Davidson procedure) in computing the second-order step. Attached is a test case, which in Psi4 1.3.2 gives the following convergence pattern:. | SOSCF_MAX_STEPS | Number of SCF iterations to convergence |; |--|---|; |5 (**current default**)|>100|; |6|13|; |7|9|; |8|66|; |9|19|; |10|14|; |11|53|. I'm not sure I understand how the behavior can be so random; the update should converge pretty monotonically to the exact solution. Anyway, this test case fails to converge with default SCF and SOSCF, but the latter case can be fixed by increasing the maximum number of SOSCF updates to 6, saving ~90% in SCF iterations only at the cost of 6/5=1.2x=20% more effort in a single SOSCF step. [testcase.zip](https://github.com/psi4/psi4/files/6497888/testcase.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2183
https://github.com/psi4/psi4/issues/2183:570,Testability,test,test,570,"The SOSCF procedure appears to use a too small default value for `SOSCF_MAX_STEPS` that controls the number of microiterations (Davidson procedure) in computing the second-order step. Attached is a test case, which in Psi4 1.3.2 gives the following convergence pattern:. | SOSCF_MAX_STEPS | Number of SCF iterations to convergence |; |--|---|; |5 (**current default**)|>100|; |6|13|; |7|9|; |8|66|; |9|19|; |10|14|; |11|53|. I'm not sure I understand how the behavior can be so random; the update should converge pretty monotonically to the exact solution. Anyway, this test case fails to converge with default SCF and SOSCF, but the latter case can be fixed by increasing the maximum number of SOSCF updates to 6, saving ~90% in SCF iterations only at the cost of 6/5=1.2x=20% more effort in a single SOSCF step. [testcase.zip](https://github.com/psi4/psi4/files/6497888/testcase.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2183
https://github.com/psi4/psi4/issues/2183:815,Testability,test,testcase,815,"The SOSCF procedure appears to use a too small default value for `SOSCF_MAX_STEPS` that controls the number of microiterations (Davidson procedure) in computing the second-order step. Attached is a test case, which in Psi4 1.3.2 gives the following convergence pattern:. | SOSCF_MAX_STEPS | Number of SCF iterations to convergence |; |--|---|; |5 (**current default**)|>100|; |6|13|; |7|9|; |8|66|; |9|19|; |10|14|; |11|53|. I'm not sure I understand how the behavior can be so random; the update should converge pretty monotonically to the exact solution. Anyway, this test case fails to converge with default SCF and SOSCF, but the latter case can be fixed by increasing the maximum number of SOSCF updates to 6, saving ~90% in SCF iterations only at the cost of 6/5=1.2x=20% more effort in a single SOSCF step. [testcase.zip](https://github.com/psi4/psi4/files/6497888/testcase.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2183
https://github.com/psi4/psi4/issues/2183:872,Testability,test,testcase,872,"The SOSCF procedure appears to use a too small default value for `SOSCF_MAX_STEPS` that controls the number of microiterations (Davidson procedure) in computing the second-order step. Attached is a test case, which in Psi4 1.3.2 gives the following convergence pattern:. | SOSCF_MAX_STEPS | Number of SCF iterations to convergence |; |--|---|; |5 (**current default**)|>100|; |6|13|; |7|9|; |8|66|; |9|19|; |10|14|; |11|53|. I'm not sure I understand how the behavior can be so random; the update should converge pretty monotonically to the exact solution. Anyway, this test case fails to converge with default SCF and SOSCF, but the latter case can be fixed by increasing the maximum number of SOSCF updates to 6, saving ~90% in SCF iterations only at the cost of 6/5=1.2x=20% more effort in a single SOSCF step. [testcase.zip](https://github.com/psi4/psi4/files/6497888/testcase.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2183
https://github.com/psi4/psi4/pull/2185:355,Energy Efficiency,reduce,reduced,355,"## Description; The UHF version of #2171. The open-shell DCT code now adds two terms before contracting them against the two-electron integrals, rather than after. Unfortunately, this change was tightly coupled to surrounding code, making it unnecessarily complicated. This PR also removes that complexity. Again, I'd expect this code to be faster due to reduced random access in `process_so_integrals`, but I haven't run timings. ## Todos; - [x] More transparent code; - [x] 100 less lines code; - [x] Four fewer global variables . ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2185
https://github.com/psi4/psi4/pull/2185:92,Integrability,contract,contracting,92,"## Description; The UHF version of #2171. The open-shell DCT code now adds two terms before contracting them against the two-electron integrals, rather than after. Unfortunately, this change was tightly coupled to surrounding code, making it unnecessarily complicated. This PR also removes that complexity. Again, I'd expect this code to be faster due to reduced random access in `process_so_integrals`, but I haven't run timings. ## Todos; - [x] More transparent code; - [x] 100 less lines code; - [x] Four fewer global variables . ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2185
https://github.com/psi4/psi4/pull/2185:521,Modifiability,variab,variables,521,"## Description; The UHF version of #2171. The open-shell DCT code now adds two terms before contracting them against the two-electron integrals, rather than after. Unfortunately, this change was tightly coupled to surrounding code, making it unnecessarily complicated. This PR also removes that complexity. Again, I'd expect this code to be faster due to reduced random access in `process_so_integrals`, but I haven't run timings. ## Todos; - [x] More transparent code; - [x] 100 less lines code; - [x] Four fewer global variables . ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2185
https://github.com/psi4/psi4/pull/2185:370,Security,access,access,370,"## Description; The UHF version of #2171. The open-shell DCT code now adds two terms before contracting them against the two-electron integrals, rather than after. Unfortunately, this change was tightly coupled to surrounding code, making it unnecessarily complicated. This PR also removes that complexity. Again, I'd expect this code to be faster due to reduced random access in `process_so_integrals`, but I haven't run timings. ## Todos; - [x] More transparent code; - [x] 100 less lines code; - [x] Four fewer global variables . ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2185
https://github.com/psi4/psi4/pull/2185:557,Testability,test,tests,557,"## Description; The UHF version of #2171. The open-shell DCT code now adds two terms before contracting them against the two-electron integrals, rather than after. Unfortunately, this change was tightly coupled to surrounding code, making it unnecessarily complicated. This PR also removes that complexity. Again, I'd expect this code to be faster due to reduced random access in `process_so_integrals`, but I haven't run timings. ## Todos; - [x] More transparent code; - [x] 100 less lines code; - [x] Four fewer global variables . ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2185
https://github.com/psi4/psi4/pull/2186:542,Testability,test,tests,542,"## Description; This PR removes the files `PSIF_CHKPT` and `PSIF_OLD_CHKPT`, as well as references to them elsewhere in the docs and the code. These were unused and caused some confusion in a [recent forum topic](http://forum.psicode.org/t/cannot-retain-scratch-file/2181/4). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove `PSIF_CHKPT` and `PSIF_OLD_CHKPT`. ## Checklist; - [x] [`ctest` passes](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2186
https://github.com/psi4/psi4/pull/2187:760,Availability,Error,Errors,760,"## Description; Implements the linear exchange matrix build (LinK) algorithm for Direct SCF.; Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). NOTE: The J build already has density screening implemented (see #2155). ![wc_linK_errors_updated_06_04_21](https://user-images.githubusercontent.com/60559795/120875167-7c793e00-c578-11eb-83d2-b2b2e197d788.jpg); ![wc_linK_timings_hornet_06_04_21](https://user-images.githubusercontent.com/60559795/120875169-7d11d480-c578-11eb-8315-642e4ee0510c.jpg). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Builds the K matrix of large molecular systems in O(N) time; - [x] Errors are minimal when compared to approximations like Density Fitting. ## Questions; - [ ] This code is currently in DirectJK, should I make a new JK module for fast methods like LinK, since a fast K algorithm would be really useful for density fitting?. ## Checklist; - [x] Tested accuracy and speed of method on a 3D system of growing water clusters. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2187
https://github.com/psi4/psi4/pull/2187:1037,Testability,Test,Tested,1037,"## Description; Implements the linear exchange matrix build (LinK) algorithm for Direct SCF.; Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). NOTE: The J build already has density screening implemented (see #2155). ![wc_linK_errors_updated_06_04_21](https://user-images.githubusercontent.com/60559795/120875167-7c793e00-c578-11eb-83d2-b2b2e197d788.jpg); ![wc_linK_timings_hornet_06_04_21](https://user-images.githubusercontent.com/60559795/120875169-7d11d480-c578-11eb-8315-642e4ee0510c.jpg). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Builds the K matrix of large molecular systems in O(N) time; - [x] Errors are minimal when compared to approximations like Density Fitting. ## Questions; - [ ] This code is currently in DirectJK, should I make a new JK module for fast methods like LinK, since a fast K algorithm would be really useful for density fitting?. ## Checklist; - [x] Tested accuracy and speed of method on a 3D system of growing water clusters. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2187
https://github.com/psi4/psi4/pull/2188:101,Performance,optimiz,optimization,101,"## Description; A minor bugfix in optking: internal coordinate files are now kept after a successful optimization. I'm well-aware that the days of C-Optking are numbered, but I came across this when investigating a tangentially related bug report in forums, so I might as well fix it. ## Checklist; - [x] Code runs and keeps internal coordinate files when `keep_intcos` set to `true`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2188
https://github.com/psi4/psi4/pull/2190:80,Deployability,update,updates,80,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2190
https://github.com/psi4/psi4/pull/2190:805,Deployability,update,updated,805,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2190
https://github.com/psi4/psi4/pull/2190:191,Energy Efficiency,energy,energy,191,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2190
https://github.com/psi4/psi4/pull/2190:268,Energy Efficiency,energy,energy,268,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2190
https://github.com/psi4/psi4/pull/2190:337,Energy Efficiency,energy,energy,337,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2190
https://github.com/psi4/psi4/pull/2190:475,Energy Efficiency,energy,energy,475,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2190
https://github.com/psi4/psi4/pull/2190:553,Energy Efficiency,energy,energy,553,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2190
https://github.com/psi4/psi4/pull/2190:723,Modifiability,extend,extended,723,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2190
https://github.com/psi4/psi4/pull/2190:65,Security,access,accessible,65,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2190
https://github.com/psi4/psi4/pull/2190:1483,Testability,Test,Tests,1483,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2190
https://github.com/psi4/psi4/pull/2190:1542,Testability,test,tests,1542,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2190
https://github.com/psi4/psi4/pull/2190:1633,Testability,test,tests,1633,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2190
https://github.com/psi4/psi4/pull/2190:1012,Usability,simpl,simplifying,1012,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2190
https://github.com/psi4/psi4/pull/2191:530,Energy Efficiency,ENERGY,ENERGY,530,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] bumped libxc url to 5.1.4; - [x] fixed nbody bug where global qcvars != wfn qcvars for gradient nbody runs; - [x] fixed nbody bug identified by @AlexHeide and @psi-rking that [I introduced recently](https://github.com/psi4/psi4/pull/2180/files#diff-6c949ad06bfcc0f8d646a54c79a427c47e008cbdae82ca148b0f0af1e1319a63L223-R220) and led to CURRENT ENERGY being disp, not total for nbody runs involving dftd3; - [x] added module to provenance in qcschema return. ok place? it's sort of like ran function, also in prov.; - [x] fixed `psi4 --qcschema --messy` so that files remain, as ordered; - [x] test qcvars setting in nbody a bit more thoroughly and add a nbody+dftd3 test case. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2191
https://github.com/psi4/psi4/pull/2191:779,Testability,test,test,779,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] bumped libxc url to 5.1.4; - [x] fixed nbody bug where global qcvars != wfn qcvars for gradient nbody runs; - [x] fixed nbody bug identified by @AlexHeide and @psi-rking that [I introduced recently](https://github.com/psi4/psi4/pull/2180/files#diff-6c949ad06bfcc0f8d646a54c79a427c47e008cbdae82ca148b0f0af1e1319a63L223-R220) and led to CURRENT ENERGY being disp, not total for nbody runs involving dftd3; - [x] added module to provenance in qcschema return. ok place? it's sort of like ran function, also in prov.; - [x] fixed `psi4 --qcschema --messy` so that files remain, as ordered; - [x] test qcvars setting in nbody a bit more thoroughly and add a nbody+dftd3 test case. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2191
https://github.com/psi4/psi4/pull/2191:852,Testability,test,test,852,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] bumped libxc url to 5.1.4; - [x] fixed nbody bug where global qcvars != wfn qcvars for gradient nbody runs; - [x] fixed nbody bug identified by @AlexHeide and @psi-rking that [I introduced recently](https://github.com/psi4/psi4/pull/2180/files#diff-6c949ad06bfcc0f8d646a54c79a427c47e008cbdae82ca148b0f0af1e1319a63L223-R220) and led to CURRENT ENERGY being disp, not total for nbody runs involving dftd3; - [x] added module to provenance in qcschema return. ok place? it's sort of like ran function, also in prov.; - [x] fixed `psi4 --qcschema --messy` so that files remain, as ordered; - [x] test qcvars setting in nbody a bit more thoroughly and add a nbody+dftd3 test case. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2191
https://github.com/psi4/psi4/pull/2191:883,Testability,Test,Tests,883,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] bumped libxc url to 5.1.4; - [x] fixed nbody bug where global qcvars != wfn qcvars for gradient nbody runs; - [x] fixed nbody bug identified by @AlexHeide and @psi-rking that [I introduced recently](https://github.com/psi4/psi4/pull/2180/files#diff-6c949ad06bfcc0f8d646a54c79a427c47e008cbdae82ca148b0f0af1e1319a63L223-R220) and led to CURRENT ENERGY being disp, not total for nbody runs involving dftd3; - [x] added module to provenance in qcschema return. ok place? it's sort of like ran function, also in prov.; - [x] fixed `psi4 --qcschema --messy` so that files remain, as ordered; - [x] test qcvars setting in nbody a bit more thoroughly and add a nbody+dftd3 test case. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2191
https://github.com/psi4/psi4/pull/2191:957,Testability,test,tests,957,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] bumped libxc url to 5.1.4; - [x] fixed nbody bug where global qcvars != wfn qcvars for gradient nbody runs; - [x] fixed nbody bug identified by @AlexHeide and @psi-rking that [I introduced recently](https://github.com/psi4/psi4/pull/2180/files#diff-6c949ad06bfcc0f8d646a54c79a427c47e008cbdae82ca148b0f0af1e1319a63L223-R220) and led to CURRENT ENERGY being disp, not total for nbody runs involving dftd3; - [x] added module to provenance in qcschema return. ok place? it's sort of like ran function, also in prov.; - [x] fixed `psi4 --qcschema --messy` so that files remain, as ordered; - [x] test qcvars setting in nbody a bit more thoroughly and add a nbody+dftd3 test case. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2191
https://github.com/psi4/psi4/pull/2191:1048,Testability,test,tests,1048,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] bumped libxc url to 5.1.4; - [x] fixed nbody bug where global qcvars != wfn qcvars for gradient nbody runs; - [x] fixed nbody bug identified by @AlexHeide and @psi-rking that [I introduced recently](https://github.com/psi4/psi4/pull/2180/files#diff-6c949ad06bfcc0f8d646a54c79a427c47e008cbdae82ca148b0f0af1e1319a63L223-R220) and led to CURRENT ENERGY being disp, not total for nbody runs involving dftd3; - [x] added module to provenance in qcschema return. ok place? it's sort of like ran function, also in prov.; - [x] fixed `psi4 --qcschema --messy` so that files remain, as ordered; - [x] test qcvars setting in nbody a bit more thoroughly and add a nbody+dftd3 test case. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2191
https://github.com/psi4/psi4/issues/2192:93,Testability,test,test-fails,93,"Reported by a user in the Forum: http://forum.psicode.org/t/multithreaded-df-ccsd-t-gradient-test-fails/2200. Outputs with `print 3` for the `dfccsd-t-grad` test with conda's `1.4rc1+2d37164`; [1 thread](https://github.com/psi4/psi4/files/6655021/single.txt); [2 threads](https://github.com/psi4/psi4/files/6655018/parallel.txt). Visible differences in the `3-center <..> Density Gradient` parts.; <img width=""1101"" alt=""Screenshot 2021-06-15 at 12 52 56"" src=""https://user-images.githubusercontent.com/1648640/122040872-a3d1d580-cdd8-11eb-9b57-904640b63c05.png"">",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2192
https://github.com/psi4/psi4/issues/2192:157,Testability,test,test,157,"Reported by a user in the Forum: http://forum.psicode.org/t/multithreaded-df-ccsd-t-gradient-test-fails/2200. Outputs with `print 3` for the `dfccsd-t-grad` test with conda's `1.4rc1+2d37164`; [1 thread](https://github.com/psi4/psi4/files/6655021/single.txt); [2 threads](https://github.com/psi4/psi4/files/6655018/parallel.txt). Visible differences in the `3-center <..> Density Gradient` parts.; <img width=""1101"" alt=""Screenshot 2021-06-15 at 12 52 56"" src=""https://user-images.githubusercontent.com/1648640/122040872-a3d1d580-cdd8-11eb-9b57-904640b63c05.png"">",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2192
https://github.com/psi4/psi4/pull/2193:45,Availability,error,error,45,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2193
https://github.com/psi4/psi4/pull/2193:355,Availability,error,error,355,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2193
https://github.com/psi4/psi4/pull/2193:793,Availability,failure,failure,793,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2193
https://github.com/psi4/psi4/pull/2193:159,Deployability,release,release,159,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2193
https://github.com/psi4/psi4/pull/2193:121,Modifiability,refactor,refactoring,121,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2193
https://github.com/psi4/psi4/pull/2193:516,Performance,bottleneck,bottleneck,516,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2193
https://github.com/psi4/psi4/pull/2193:456,Testability,test,test,456,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2193
https://github.com/psi4/psi4/pull/2193:850,Testability,test,test,850,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2193
https://github.com/psi4/psi4/pull/2193:374,Usability,Learn,Learned,374,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2193
https://github.com/psi4/psi4/issues/2195:299,Performance,optimiz,optimize,299,"Dear psi4 developers,; I'm using psi4 v1.4rc1. I have troubles to set the max number of geometry iteration steps.; I'm running the following code on JupyterLab:; ```; psi4.set_module_options('optking', {'g_convergence': 'gau_loose'}); psi4.set_module_options('optking', {'geom_maxiter': 200}); psi4.optimize(opt_method, ; bsse_type=None,; molecule=geom); ```; and before I tried also:; ```; psi4.set_options('optking', {'g_convergence': 'gau_loose', 'geom_maxiter': 200}); ```. It seems like psi4 is reading some random number for `geom_maxiter`: ; indeed, you can see from my output that the calculation was killed after 17 steps.; ```; **** Optimization has failed! (in 17 steps) ****; 			--------------------------; 			 OPTKING Finished Execution ; 			--------------------------; 	Removing binary optimization data file.; 	Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 16 iterations.; ```; [02_dimers_00_output.txt](https://github.com/psi4/psi4/files/6686237/02_dimers_00_output.txt). It is weird however that the number of max iteration, when this threshold gets hit, is different every time, and it is not the default value of 50. Sometimes it allows for enough iterations to converge, so I don't know if in that case the program took my 200 maxiter or it ended up with a randomly high value for maxiter. . Please, let me know if this is a bug or I'm doing something wrong.; Thanks for your help.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2195
https://github.com/psi4/psi4/issues/2195:643,Performance,Optimiz,Optimization,643,"Dear psi4 developers,; I'm using psi4 v1.4rc1. I have troubles to set the max number of geometry iteration steps.; I'm running the following code on JupyterLab:; ```; psi4.set_module_options('optking', {'g_convergence': 'gau_loose'}); psi4.set_module_options('optking', {'geom_maxiter': 200}); psi4.optimize(opt_method, ; bsse_type=None,; molecule=geom); ```; and before I tried also:; ```; psi4.set_options('optking', {'g_convergence': 'gau_loose', 'geom_maxiter': 200}); ```. It seems like psi4 is reading some random number for `geom_maxiter`: ; indeed, you can see from my output that the calculation was killed after 17 steps.; ```; **** Optimization has failed! (in 17 steps) ****; 			--------------------------; 			 OPTKING Finished Execution ; 			--------------------------; 	Removing binary optimization data file.; 	Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 16 iterations.; ```; [02_dimers_00_output.txt](https://github.com/psi4/psi4/files/6686237/02_dimers_00_output.txt). It is weird however that the number of max iteration, when this threshold gets hit, is different every time, and it is not the default value of 50. Sometimes it allows for enough iterations to converge, so I don't know if in that case the program took my 200 maxiter or it ended up with a randomly high value for maxiter. . Please, let me know if this is a bug or I'm doing something wrong.; Thanks for your help.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2195
https://github.com/psi4/psi4/issues/2195:800,Performance,optimiz,optimization,800,"Dear psi4 developers,; I'm using psi4 v1.4rc1. I have troubles to set the max number of geometry iteration steps.; I'm running the following code on JupyterLab:; ```; psi4.set_module_options('optking', {'g_convergence': 'gau_loose'}); psi4.set_module_options('optking', {'geom_maxiter': 200}); psi4.optimize(opt_method, ; bsse_type=None,; molecule=geom); ```; and before I tried also:; ```; psi4.set_options('optking', {'g_convergence': 'gau_loose', 'geom_maxiter': 200}); ```. It seems like psi4 is reading some random number for `geom_maxiter`: ; indeed, you can see from my output that the calculation was killed after 17 steps.; ```; **** Optimization has failed! (in 17 steps) ****; 			--------------------------; 			 OPTKING Finished Execution ; 			--------------------------; 	Removing binary optimization data file.; 	Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 16 iterations.; ```; [02_dimers_00_output.txt](https://github.com/psi4/psi4/files/6686237/02_dimers_00_output.txt). It is weird however that the number of max iteration, when this threshold gets hit, is different every time, and it is not the default value of 50. Sometimes it allows for enough iterations to converge, so I don't know if in that case the program took my 200 maxiter or it ended up with a randomly high value for maxiter. . Please, let me know if this is a bug or I'm doing something wrong.; Thanks for your help.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2195
https://github.com/psi4/psi4/issues/2195:835,Performance,optimiz,optimization,835,"Dear psi4 developers,; I'm using psi4 v1.4rc1. I have troubles to set the max number of geometry iteration steps.; I'm running the following code on JupyterLab:; ```; psi4.set_module_options('optking', {'g_convergence': 'gau_loose'}); psi4.set_module_options('optking', {'geom_maxiter': 200}); psi4.optimize(opt_method, ; bsse_type=None,; molecule=geom); ```; and before I tried also:; ```; psi4.set_options('optking', {'g_convergence': 'gau_loose', 'geom_maxiter': 200}); ```. It seems like psi4 is reading some random number for `geom_maxiter`: ; indeed, you can see from my output that the calculation was killed after 17 steps.; ```; **** Optimization has failed! (in 17 steps) ****; 			--------------------------; 			 OPTKING Finished Execution ; 			--------------------------; 	Removing binary optimization data file.; 	Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 16 iterations.; ```; [02_dimers_00_output.txt](https://github.com/psi4/psi4/files/6686237/02_dimers_00_output.txt). It is weird however that the number of max iteration, when this threshold gets hit, is different every time, and it is not the default value of 50. Sometimes it allows for enough iterations to converge, so I don't know if in that case the program took my 200 maxiter or it ended up with a randomly high value for maxiter. . Please, let me know if this is a bug or I'm doing something wrong.; Thanks for your help.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2195
https://github.com/psi4/psi4/issues/2195:904,Performance,optimiz,optimization,904,"Dear psi4 developers,; I'm using psi4 v1.4rc1. I have troubles to set the max number of geometry iteration steps.; I'm running the following code on JupyterLab:; ```; psi4.set_module_options('optking', {'g_convergence': 'gau_loose'}); psi4.set_module_options('optking', {'geom_maxiter': 200}); psi4.optimize(opt_method, ; bsse_type=None,; molecule=geom); ```; and before I tried also:; ```; psi4.set_options('optking', {'g_convergence': 'gau_loose', 'geom_maxiter': 200}); ```. It seems like psi4 is reading some random number for `geom_maxiter`: ; indeed, you can see from my output that the calculation was killed after 17 steps.; ```; **** Optimization has failed! (in 17 steps) ****; 			--------------------------; 			 OPTKING Finished Execution ; 			--------------------------; 	Removing binary optimization data file.; 	Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 16 iterations.; ```; [02_dimers_00_output.txt](https://github.com/psi4/psi4/files/6686237/02_dimers_00_output.txt). It is weird however that the number of max iteration, when this threshold gets hit, is different every time, and it is not the default value of 50. Sometimes it allows for enough iterations to converge, so I don't know if in that case the program took my 200 maxiter or it ended up with a randomly high value for maxiter. . Please, let me know if this is a bug or I'm doing something wrong.; Thanks for your help.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2195
https://github.com/psi4/psi4/issues/2196:62,Availability,error,error-wavefunction-unable-to-obtain-mo-coefficients,62,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204). Psi currently does not support getting properties with BSSE corrections. This should be a simple matter of taking the properties with each BSSE component and doing the same operation to them you do to get the energies. (Thank you, linearity of derivatives!) There are two parts to this:. 1. `properties` should know to do this. At present, it ignores any BSSE keywords.; 2. When a user passes a wfn computed from BSSE to `OEProp`, it should give the user a clear error message telling it that OEProp is not designed for multi-component property computations. At present, it returns that it can't find the orbitals. While this response is perfectly reasonable, it's opaque.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2196
https://github.com/psi4/psi4/issues/2196:584,Availability,error,error,584,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204). Psi currently does not support getting properties with BSSE corrections. This should be a simple matter of taking the properties with each BSSE component and doing the same operation to them you do to get the energies. (Thank you, linearity of derivatives!) There are two parts to this:. 1. `properties` should know to do this. At present, it ignores any BSSE keywords.; 2. When a user passes a wfn computed from BSSE to `OEProp`, it should give the user a clear error message telling it that OEProp is not designed for multi-component property computations. At present, it returns that it can't find the orbitals. While this response is perfectly reasonable, it's opaque.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2196
https://github.com/psi4/psi4/issues/2196:590,Integrability,message,message,590,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204). Psi currently does not support getting properties with BSSE corrections. This should be a simple matter of taking the properties with each BSSE component and doing the same operation to them you do to get the energies. (Thank you, linearity of derivatives!) There are two parts to this:. 1. `properties` should know to do this. At present, it ignores any BSSE keywords.; 2. When a user passes a wfn computed from BSSE to `OEProp`, it should give the user a clear error message telling it that OEProp is not designed for multi-component property computations. At present, it returns that it can't find the orbitals. While this response is perfectly reasonable, it's opaque.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2196
https://github.com/psi4/psi4/issues/2196:211,Usability,simpl,simple,211,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204). Psi currently does not support getting properties with BSSE corrections. This should be a simple matter of taking the properties with each BSSE component and doing the same operation to them you do to get the energies. (Thank you, linearity of derivatives!) There are two parts to this:. 1. `properties` should know to do this. At present, it ignores any BSSE keywords.; 2. When a user passes a wfn computed from BSSE to `OEProp`, it should give the user a clear error message telling it that OEProp is not designed for multi-component property computations. At present, it returns that it can't find the orbitals. While this response is perfectly reasonable, it's opaque.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2196
https://github.com/psi4/psi4/issues/2196:578,Usability,clear,clear,578,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204). Psi currently does not support getting properties with BSSE corrections. This should be a simple matter of taking the properties with each BSSE component and doing the same operation to them you do to get the energies. (Thank you, linearity of derivatives!) There are two parts to this:. 1. `properties` should know to do this. At present, it ignores any BSSE keywords.; 2. When a user passes a wfn computed from BSSE to `OEProp`, it should give the user a clear error message telling it that OEProp is not designed for multi-component property computations. At present, it returns that it can't find the orbitals. While this response is perfectly reasonable, it's opaque.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2196
https://github.com/psi4/psi4/issues/2197:218,Availability,error,error,218,"Psi4 1.3.2 happily runs analytic derivatives when X2C is enabled, even though as confirmed by @fevangelista on Slack the gradient is not correct since it is missing the terms arising from X2C. The code should throw an error for analytic derivatives when X2C is employed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2197
https://github.com/psi4/psi4/issues/2198:275,Availability,error,error,275,"Dear Psi4 developer, ; I'm using v1.4rc2. I find very convenient to use the QCSchema for submitting my `energy` calculations, but it is not clear to me what is currently implemented for this input method.; Using `{""basis"": ""aug-cc-pv[tq]z"", ""method"": ""MP2""}`, results in the error; ```; npsi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: ; Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['N']; Basis Sets: [('AUG-CC-PV[TQ]Z', 'AUG-CC-PV[TQ]Z', None)]; ```; which makes me think that CompeteBasisSet (CBS) extrapolations are not yet implemented.; My goal would be to submit even more advanced extrapolation protocols like `mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz`.; Is there a way to do this with the current implementation of the QCSchema? Or do you see it possible in a near-future release?. Thank you very much for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2198
https://github.com/psi4/psi4/issues/2198:823,Deployability,release,release,823,"Dear Psi4 developer, ; I'm using v1.4rc2. I find very convenient to use the QCSchema for submitting my `energy` calculations, but it is not clear to me what is currently implemented for this input method.; Using `{""basis"": ""aug-cc-pv[tq]z"", ""method"": ""MP2""}`, results in the error; ```; npsi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: ; Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['N']; Basis Sets: [('AUG-CC-PV[TQ]Z', 'AUG-CC-PV[TQ]Z', None)]; ```; which makes me think that CompeteBasisSet (CBS) extrapolations are not yet implemented.; My goal would be to submit even more advanced extrapolation protocols like `mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz`.; Is there a way to do this with the current implementation of the QCSchema? Or do you see it possible in a near-future release?. Thank you very much for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2198
https://github.com/psi4/psi4/issues/2198:104,Energy Efficiency,energy,energy,104,"Dear Psi4 developer, ; I'm using v1.4rc2. I find very convenient to use the QCSchema for submitting my `energy` calculations, but it is not clear to me what is currently implemented for this input method.; Using `{""basis"": ""aug-cc-pv[tq]z"", ""method"": ""MP2""}`, results in the error; ```; npsi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: ; Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['N']; Basis Sets: [('AUG-CC-PV[TQ]Z', 'AUG-CC-PV[TQ]Z', None)]; ```; which makes me think that CompeteBasisSet (CBS) extrapolations are not yet implemented.; My goal would be to submit even more advanced extrapolation protocols like `mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz`.; Is there a way to do this with the current implementation of the QCSchema? Or do you see it possible in a near-future release?. Thank you very much for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2198
https://github.com/psi4/psi4/issues/2198:651,Integrability,protocol,protocols,651,"Dear Psi4 developer, ; I'm using v1.4rc2. I find very convenient to use the QCSchema for submitting my `energy` calculations, but it is not clear to me what is currently implemented for this input method.; Using `{""basis"": ""aug-cc-pv[tq]z"", ""method"": ""MP2""}`, results in the error; ```; npsi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: ; Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['N']; Basis Sets: [('AUG-CC-PV[TQ]Z', 'AUG-CC-PV[TQ]Z', None)]; ```; which makes me think that CompeteBasisSet (CBS) extrapolations are not yet implemented.; My goal would be to submit even more advanced extrapolation protocols like `mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz`.; Is there a way to do this with the current implementation of the QCSchema? Or do you see it possible in a near-future release?. Thank you very much for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2198
https://github.com/psi4/psi4/issues/2198:140,Usability,clear,clear,140,"Dear Psi4 developer, ; I'm using v1.4rc2. I find very convenient to use the QCSchema for submitting my `energy` calculations, but it is not clear to me what is currently implemented for this input method.; Using `{""basis"": ""aug-cc-pv[tq]z"", ""method"": ""MP2""}`, results in the error; ```; npsi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: ; Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['N']; Basis Sets: [('AUG-CC-PV[TQ]Z', 'AUG-CC-PV[TQ]Z', None)]; ```; which makes me think that CompeteBasisSet (CBS) extrapolations are not yet implemented.; My goal would be to submit even more advanced extrapolation protocols like `mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz`.; Is there a way to do this with the current implementation of the QCSchema? Or do you see it possible in a near-future release?. Thank you very much for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2198
