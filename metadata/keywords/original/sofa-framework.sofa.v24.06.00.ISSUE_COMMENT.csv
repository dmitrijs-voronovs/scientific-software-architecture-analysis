id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/sofa-framework/sofa/pull/11#issuecomment-236527691:13,Usability,simpl,simple,13,I guess this simple change is not breaking SOFA.; @matthieu-nesme ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/11#issuecomment-236527691
https://github.com/sofa-framework/sofa/pull/12#issuecomment-241391253:109,Safety,avoid,avoid,109,One remark about commented blocks: couldn't they be simply removed if not used anymore? ; Would be better to avoid introducing commented/unmaintained/why-is-this-here code.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/12#issuecomment-241391253
https://github.com/sofa-framework/sofa/pull/12#issuecomment-241391253:52,Usability,simpl,simply,52,One remark about commented blocks: couldn't they be simply removed if not used anymore? ; Would be better to avoid introducing commented/unmaintained/why-is-this-here code.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/12#issuecomment-241391253
https://github.com/sofa-framework/sofa/issues/21#issuecomment-250735840:51,Usability,simpl,simply,51,"There was a SVector<T> class added in sofa::helper simply to change the stream operators to use commas to delimit values and [ ] to delimit the vector itself (allowing for vectors inside vectors), but I don't like this design because the type itself is different affecting all the code that uses it...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/21#issuecomment-250735840
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:436,Availability,avail,available,436,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:776,Availability,reliab,reliable,776,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:390,Deployability,pipeline,pipeline,390,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:488,Deployability,update,updates,488,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:201,Modifiability,plugin,plugin,201,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:307,Modifiability,plugin,plugin,307,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:958,Modifiability,plugin,plugin,958,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:1076,Modifiability,plugin,plugin,1076,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:380,Safety,detect,detection,380,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:333,Usability,simpl,simple,333,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1386,Energy Efficiency,adapt,adapt,1386,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:547,Integrability,depend,depend,547,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1230,Integrability,depend,dependencies,1230,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1875,Integrability,depend,dependent,1875," :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposition.; Work in progress...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1931,Integrability,depend,dependent,1931," :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposition.; Work in progress...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1386,Modifiability,adapt,adapt,1386,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:294,Performance,concurren,concurrent,294,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1444,Performance,perform,performance,1444," :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposition.; Work in progress...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:266,Safety,safe,safe,266,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1213,Safety,predict,predict,1213,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1320,Safety,predict,predict,1320,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:100,Security,access,accesses,100,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:209,Security,access,accesses,209,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:276,Security,access,accesses,276,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:646,Security,access,accesses,646,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1048,Security,access,accesses,1048,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1337,Security,access,accesses,1337,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1588,Security,access,access,1588," :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposition.; Work in progress...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1623,Security,access,access,1623," :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposition.; Work in progress...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:16,Usability,feedback,feedback,16,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265:397,Energy Efficiency,efficient,efficient,397,Several lines of thought:; + Proposal around a new way of adding contribution in addKtoMatrix in SOFA and avoid a virtual call at each call; + Merge MatrixDeriv with a sparse matrix representation; + SparseVectors in SOFA; + Simplify the (quite complex) multi-matrix things as a lot of the initial intentions have never been really implemented and can be (maybe) solved in a more simple way using efficient sparse matrices and sparse vectors.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265:106,Safety,avoid,avoid,106,Several lines of thought:; + Proposal around a new way of adding contribution in addKtoMatrix in SOFA and avoid a virtual call at each call; + Merge MatrixDeriv with a sparse matrix representation; + SparseVectors in SOFA; + Simplify the (quite complex) multi-matrix things as a lot of the initial intentions have never been really implemented and can be (maybe) solved in a more simple way using efficient sparse matrices and sparse vectors.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265:380,Usability,simpl,simple,380,Several lines of thought:; + Proposal around a new way of adding contribution in addKtoMatrix in SOFA and avoid a virtual call at each call; + Merge MatrixDeriv with a sparse matrix representation; + SparseVectors in SOFA; + Simplify the (quite complex) multi-matrix things as a lot of the initial intentions have never been really implemented and can be (maybe) solved in a more simple way using efficient sparse matrices and sparse vectors.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716:735,Modifiability,plugin,plugin,735,"Hello @ChristianDuriez,. I've been discussing the sparse matrix issue with @matthieu-nesme for some time now. Here are some thoughts on the subject. The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on. In particular, I see two major orthogonal uses of sparse matrices:; 1. getting matrix data out of components; 2. working with sparse matrices (linear algebra, factorization, assembly). It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly. I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly `push_back` matrix data into a `std::vector<Eigen::Triplet<SReal> >` through a `std::back_insert_iterator`. With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for *getting the data* and *working with the data* instead of a single structure is the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716:1466,Performance,perform,performance-wise,1466,"Hello @ChristianDuriez,. I've been discussing the sparse matrix issue with @matthieu-nesme for some time now. Here are some thoughts on the subject. The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on. In particular, I see two major orthogonal uses of sparse matrices:; 1. getting matrix data out of components; 2. working with sparse matrices (linear algebra, factorization, assembly). It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly. I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly `push_back` matrix data into a `std::vector<Eigen::Triplet<SReal> >` through a `std::back_insert_iterator`. With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for *getting the data* and *working with the data* instead of a single structure is the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716:1501,Testability,benchmark,benchmarking,1501,"Hello @ChristianDuriez,. I've been discussing the sparse matrix issue with @matthieu-nesme for some time now. Here are some thoughts on the subject. The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on. In particular, I see two major orthogonal uses of sparse matrices:; 1. getting matrix data out of components; 2. working with sparse matrices (linear algebra, factorization, assembly). It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly. I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly `push_back` matrix data into a `std::vector<Eigen::Triplet<SReal> >` through a `std::back_insert_iterator`. With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for *getting the data* and *working with the data* instead of a single structure is the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716:943,Usability,simpl,simplest,943,"Hello @ChristianDuriez,. I've been discussing the sparse matrix issue with @matthieu-nesme for some time now. Here are some thoughts on the subject. The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on. In particular, I see two major orthogonal uses of sparse matrices:; 1. getting matrix data out of components; 2. working with sparse matrices (linear algebra, factorization, assembly). It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly. I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly `push_back` matrix data into a `std::vector<Eigen::Triplet<SReal> >` through a `std::back_insert_iterator`. With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for *getting the data* and *working with the data* instead of a single structure is the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:184,Availability,mask,mask,184,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:339,Availability,down,down,339,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:407,Deployability,configurat,configuration,407,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:407,Modifiability,config,configuration,407,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:37,Usability,clear,clear,37,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:1644,Modifiability,plugin,plugin,1644,"virtual calls. The back_inserter of the default type could decompose all the chunks in scalars, while implementations dedicated to 3x3 chunks could push them in vector<Triplet<Mat3x3>>. Pr. Francois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly push_back matrix data into a std::vector<Eigen::Triplet<SReal> > through a std::back_insert_iterator.; > ; > With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for getting the data and working with the data instead of a single structure is the way to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:2383,Performance,perform,performance-wise,2383,"ois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly push_back matrix data into a std::vector<Eigen::Triplet<SReal> > through a std::back_insert_iterator.; > ; > With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for getting the data and working with the data instead of a single structure is the way to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AHUGIb2x8bFdYI3KTJsLE_7Qy-d2FFJiks5rtSFPgaJpZM4KLEE1>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:698,Safety,avoid,avoid,698,"+1; Back-inserting triplets combines flexibility and efficiency. It is used in Eigen.; However, I think we have to seriously consider the demand for small dense chunks rather than scalars, since a significant number of applications use only 3D points as DOFs, and sorting such chunks can be much faster than scalars.; This may be easily handled using a choice of triplets, (such as Triplet<Mat3x3>) provided that we restrain the choice of chunk types to a reasonable number. All the square sizes from 1 to 12 should be way enough, and more could be added if necessary. (I am not sure that other sizes than 3x3 would be used in practice); The sparse matrix type could be a compile-time parameter to avoid virtual calls. The back_inserter of the default type could decompose all the chunks in scalars, while implementations dedicated to 3x3 chunks could push them in vector<Triplet<Mat3x3>>. Pr. Francois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/force",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:2418,Testability,benchmark,benchmarking,2418,"ois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly push_back matrix data into a std::vector<Eigen::Triplet<SReal> > through a std::back_insert_iterator.; > ; > With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for getting the data and working with the data instead of a single structure is the way to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AHUGIb2x8bFdYI3KTJsLE_7Qy-d2FFJiks5rtSFPgaJpZM4KLEE1>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:1859,Usability,simpl,simplest,1859,"t3x3>>. Pr. Francois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly push_back matrix data into a std::vector<Eigen::Triplet<SReal> > through a std::back_insert_iterator.; > ; > With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for getting the data and working with the data instead of a single structure is the way to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AHUGIb2x8bFdYI3KTJsLE_7Qy-d2FFJiks5rtSFPg",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877:852,Performance,optimiz,optimize,852,"@francoisfaure ; > E.g. Mat<3,3,SReal>. This just shifts the same issue to chunk types, then :-) . I probably misunderstood your proposal: you mentioned having the sparse matrix type passed as a template parameter for efficiency reasons. I was simply pointing out that this template type cannot be known outside of the component, and so cannot appear in the `back_insert_iterator` type which is part of the hypothetical API I hinted to. Maybe you had this in mind from the start and I did not get it. @fjourdes Maybe it would be preferable not to *return* a `std::vector`, but instead to push to an existing one like so:. ```c++; class BaseForceField; {; public: ; virtual void getMatrixChunks(std::vector<MatrixChunkType>& chunks) const = 0; ; };; ```. This way you make no assumption as to whom should manage the memory, and leave the opportunity to optimize memory allocations. . I assume the `MatrixChunkType` holds the type index, so you can `std::visit` it and dispatch using its actual type? Having a type index per chunk means having one dispatch per chunk, and I am afraid this would somewhat bring us back to the ""one virtual call per element"" issue :-/ But maybe the compiler would be clever enough to optimize this? . More problematic, each chunk would have the size of the largest element in the tagged union, unless we use an extra indirection. . I was more thinking of having one `std::vector` per chunk type in the chunk container like so: . ```c++. struct chunk_container {; // add more as needed; using chunk_vector = std::variant< std::vector< chunk<1, 1> >, ; std::vector< chunk<2, 2,> > >;; ; chunk_vector storage[2]; // size can be inferred automatically; ; template<int I, int J>; void push(chunk<I, J> c) {; static constexpr int index = chunk_index<I, J>(); // correct index in chunk_storage; std::get< std::vector<I, J> >(storage[index]).push_back(c);; }; };",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877:1213,Performance,optimiz,optimize,1213,"@francoisfaure ; > E.g. Mat<3,3,SReal>. This just shifts the same issue to chunk types, then :-) . I probably misunderstood your proposal: you mentioned having the sparse matrix type passed as a template parameter for efficiency reasons. I was simply pointing out that this template type cannot be known outside of the component, and so cannot appear in the `back_insert_iterator` type which is part of the hypothetical API I hinted to. Maybe you had this in mind from the start and I did not get it. @fjourdes Maybe it would be preferable not to *return* a `std::vector`, but instead to push to an existing one like so:. ```c++; class BaseForceField; {; public: ; virtual void getMatrixChunks(std::vector<MatrixChunkType>& chunks) const = 0; ; };; ```. This way you make no assumption as to whom should manage the memory, and leave the opportunity to optimize memory allocations. . I assume the `MatrixChunkType` holds the type index, so you can `std::visit` it and dispatch using its actual type? Having a type index per chunk means having one dispatch per chunk, and I am afraid this would somewhat bring us back to the ""one virtual call per element"" issue :-/ But maybe the compiler would be clever enough to optimize this? . More problematic, each chunk would have the size of the largest element in the tagged union, unless we use an extra indirection. . I was more thinking of having one `std::vector` per chunk type in the chunk container like so: . ```c++. struct chunk_container {; // add more as needed; using chunk_vector = std::variant< std::vector< chunk<1, 1> >, ; std::vector< chunk<2, 2,> > >;; ; chunk_vector storage[2]; // size can be inferred automatically; ; template<int I, int J>; void push(chunk<I, J> c) {; static constexpr int index = chunk_index<I, J>(); // correct index in chunk_storage; std::get< std::vector<I, J> >(storage[index]).push_back(c);; }; };",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877
https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877:244,Usability,simpl,simply,244,"@francoisfaure ; > E.g. Mat<3,3,SReal>. This just shifts the same issue to chunk types, then :-) . I probably misunderstood your proposal: you mentioned having the sparse matrix type passed as a template parameter for efficiency reasons. I was simply pointing out that this template type cannot be known outside of the component, and so cannot appear in the `back_insert_iterator` type which is part of the hypothetical API I hinted to. Maybe you had this in mind from the start and I did not get it. @fjourdes Maybe it would be preferable not to *return* a `std::vector`, but instead to push to an existing one like so:. ```c++; class BaseForceField; {; public: ; virtual void getMatrixChunks(std::vector<MatrixChunkType>& chunks) const = 0; ; };; ```. This way you make no assumption as to whom should manage the memory, and leave the opportunity to optimize memory allocations. . I assume the `MatrixChunkType` holds the type index, so you can `std::visit` it and dispatch using its actual type? Having a type index per chunk means having one dispatch per chunk, and I am afraid this would somewhat bring us back to the ""one virtual call per element"" issue :-/ But maybe the compiler would be clever enough to optimize this? . More problematic, each chunk would have the size of the largest element in the tagged union, unless we use an extra indirection. . I was more thinking of having one `std::vector` per chunk type in the chunk container like so: . ```c++. struct chunk_container {; // add more as needed; using chunk_vector = std::variant< std::vector< chunk<1, 1> >, ; std::vector< chunk<2, 2,> > >;; ; chunk_vector storage[2]; // size can be inferred automatically; ; template<int I, int J>; void push(chunk<I, J> c) {; static constexpr int index = chunk_index<I, J>(); // correct index in chunk_storage; std::get< std::vector<I, J> >(storage[index]).push_back(c);; }; };",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877
https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:1070,Availability,error,error,1070,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098
https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:1076,Integrability,message,message,1076,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098
https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:238,Modifiability,plugin,plugin,238,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098
https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:1206,Modifiability,plugin,plugin,1206,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098
https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:374,Usability,simpl,simply,374,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098
https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387:1344,Deployability,update,update,1344,"Agreed, I don't like adding a Data in every component just for this.; I think the underlying issue of having an empty scene bounding box when there is not visual models could also by fixed relatively simply and without introducing much cost by:; - including the collision models top-most bounding boxes that are already computed during each time step (in fact this could be the only information used by default, as it is cheaper in practice to obtain than the visual bounding boxes because it's already computed for the broad phase); - and/or having a flag in `DrawTool` to look at the given coordinates to compute a bounding box of all non-visual but visible elements. As the DrawTool API is quite inefficient anyway the overhead may be insignificant, and it will disappear in cases where there is no debug information visualised. To me this could be controlled by one of the master component in the root node, either the `AnimationLoop` (as the issue is when `UpdateBBox` happens and how it is implemented, bonus point is that this component would then have the ability to schedule it in parallel with the other computations), or the `VisualManager` (as the current use cases for bounding boxes are currently exclusively to setup the scene rendering bounds and/or show bounds of a subgraph). This control could either be by implementing this update directly, or providing the choice that is setup for this particular scene (which alternative to use, which frequency of bbox updates).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387
https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387:1476,Deployability,update,updates,1476,"Agreed, I don't like adding a Data in every component just for this.; I think the underlying issue of having an empty scene bounding box when there is not visual models could also by fixed relatively simply and without introducing much cost by:; - including the collision models top-most bounding boxes that are already computed during each time step (in fact this could be the only information used by default, as it is cheaper in practice to obtain than the visual bounding boxes because it's already computed for the broad phase); - and/or having a flag in `DrawTool` to look at the given coordinates to compute a bounding box of all non-visual but visible elements. As the DrawTool API is quite inefficient anyway the overhead may be insignificant, and it will disappear in cases where there is no debug information visualised. To me this could be controlled by one of the master component in the root node, either the `AnimationLoop` (as the issue is when `UpdateBBox` happens and how it is implemented, bonus point is that this component would then have the ability to schedule it in parallel with the other computations), or the `VisualManager` (as the current use cases for bounding boxes are currently exclusively to setup the scene rendering bounds and/or show bounds of a subgraph). This control could either be by implementing this update directly, or providing the choice that is setup for this particular scene (which alternative to use, which frequency of bbox updates).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387
https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387:1075,Energy Efficiency,schedul,schedule,1075,"Agreed, I don't like adding a Data in every component just for this.; I think the underlying issue of having an empty scene bounding box when there is not visual models could also by fixed relatively simply and without introducing much cost by:; - including the collision models top-most bounding boxes that are already computed during each time step (in fact this could be the only information used by default, as it is cheaper in practice to obtain than the visual bounding boxes because it's already computed for the broad phase); - and/or having a flag in `DrawTool` to look at the given coordinates to compute a bounding box of all non-visual but visible elements. As the DrawTool API is quite inefficient anyway the overhead may be insignificant, and it will disappear in cases where there is no debug information visualised. To me this could be controlled by one of the master component in the root node, either the `AnimationLoop` (as the issue is when `UpdateBBox` happens and how it is implemented, bonus point is that this component would then have the ability to schedule it in parallel with the other computations), or the `VisualManager` (as the current use cases for bounding boxes are currently exclusively to setup the scene rendering bounds and/or show bounds of a subgraph). This control could either be by implementing this update directly, or providing the choice that is setup for this particular scene (which alternative to use, which frequency of bbox updates).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387
https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387:200,Usability,simpl,simply,200,"Agreed, I don't like adding a Data in every component just for this.; I think the underlying issue of having an empty scene bounding box when there is not visual models could also by fixed relatively simply and without introducing much cost by:; - including the collision models top-most bounding boxes that are already computed during each time step (in fact this could be the only information used by default, as it is cheaper in practice to obtain than the visual bounding boxes because it's already computed for the broad phase); - and/or having a flag in `DrawTool` to look at the given coordinates to compute a bounding box of all non-visual but visible elements. As the DrawTool API is quite inefficient anyway the overhead may be insignificant, and it will disappear in cases where there is no debug information visualised. To me this could be controlled by one of the master component in the root node, either the `AnimationLoop` (as the issue is when `UpdateBBox` happens and how it is implemented, bonus point is that this component would then have the ability to schedule it in parallel with the other computations), or the `VisualManager` (as the current use cases for bounding boxes are currently exclusively to setup the scene rendering bounds and/or show bounds of a subgraph). This control could either be by implementing this update directly, or providing the choice that is setup for this particular scene (which alternative to use, which frequency of bbox updates).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823:294,Integrability,message,message,294,"If the Data was simply renamed (but is having the same role as previously), it is not a big deal to have a alias. If the Data is no longer used, backward compatibility will have to be done in the 'parse' function (to fill others Data for instance), in that case, it is easy to add a deprecated message. Note that the initial Data should not exist anymore.; As an example, you can look at RigidMapping, where the Data 'repartition' was removed, but the 'parse' function still ensures backward compatibility and log a deprecated msg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823:510,Testability,log,log,510,"If the Data was simply renamed (but is having the same role as previously), it is not a big deal to have a alias. If the Data is no longer used, backward compatibility will have to be done in the 'parse' function (to fill others Data for instance), in that case, it is easy to add a deprecated message. Note that the initial Data should not exist anymore.; As an example, you can look at RigidMapping, where the Data 'repartition' was removed, but the 'parse' function still ensures backward compatibility and log a deprecated msg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823:16,Usability,simpl,simply,16,"If the Data was simply renamed (but is having the same role as previously), it is not a big deal to have a alias. If the Data is no longer used, backward compatibility will have to be done in the 'parse' function (to fill others Data for instance), in that case, it is easy to add a deprecated message. Note that the initial Data should not exist anymore.; As an example, you can look at RigidMapping, where the Data 'repartition' was removed, but the 'parse' function still ensures backward compatibility and log a deprecated msg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:1402,Deployability,update,update,1402,"fferently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At the beginning of a scene with OGLModel and ""rest_position"" would be enough to make the alias obvious to the user preserving the convenience of Alias to the developpers. What do you think about the differnt appraoch ? ; DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:848,Integrability,message,message,848,"To cite Jeff Johson from GUI-Bloopers:; ""An even more blatant mistake is when designers put the same command onto different menus, but label it differently ... It is fairly serious because users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:877,Integrability,message,message,877,"To cite Jeff Johson from GUI-Bloopers:; ""An even more blatant mistake is when designers put the same command onto different menus, but label it differently ... It is fairly serious because users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:1044,Integrability,message,message,1044," blatant mistake is when designers put the same command onto different menus, but label it differently ... It is fairly serious because users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At the beginning of a scene with OGLModel and ""rest_posi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:1272,Integrability,message,message,1272,"users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At the beginning of a scene with OGLModel and ""rest_position"" would be enough to make the alias obvious to the user preserving the convenience of Alias to the developpers. What do you think a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:1385,Integrability,message,message,1385,"fferently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At the beginning of a scene with OGLModel and ""rest_position"" would be enough to make the alias obvious to the user preserving the convenience of Alias to the developpers. What do you think about the differnt appraoch ? ; DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:680,Usability,usab,usability,680,"To cite Jeff Johson from GUI-Bloopers:; ""An even more blatant mistake is when designers put the same command onto different menus, but label it differently ... It is fairly serious because users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194
https://github.com/sofa-framework/sofa/issues/35#issuecomment-258292916:452,Usability,simpl,simplify,452,"I have implemented a component ""MakeAlias"" to explicitely specify the Alias of a component (not a data) at the beginning of its scene. It is commited in https://github.com/sofa-framework/sofa/commit/92753c42b7eaa076ace4b3840aa4cac6c18172a7. Example of use: . ``` xml; <xml/>; <Node name=""Root"">; <MakeAlias targetcomponent=""TPointModel"" alias=""Point"">; ...; <Point> ; <Point> ; <Point> ; ...; </Node>; ```. With this approach people that want alias to simplify their scene...have them...but:; - there is not alias by default; - alias are explict so anyone reading the scene now that the object ""TPointModel"" will be named ""Point"". I'm looking on how to implement something equivalent for Data. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-258292916
https://github.com/sofa-framework/sofa/issues/36#issuecomment-257843781:590,Usability,clear,clear,590,"Hi @hugtalbot. In diagonalmass.cpp can you confirm that the following are bugs to fix: . The specialization for rigid3f ::init() & rigid3d ::init() are totally different. Seems to me they shouldn't. You said that ""totalMass parameter is re-computed in the un-specialized implementation of the reinit function sounds ok to me, but indeed, the specialization for rigid/vec should forward to this implementation"". ; I have the impression that the forwarding to the implementation is not missing in the specialized(rigid3) version. About the last point of your answer, sorry for not being very clear with ""not tagged"", I was in fact referring to the non usage of the readOnly flag.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-257843781
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238:623,Modifiability,refactor,refactoring,623,"Thanks for the feedbacks,. This seems related to the fact that Engines are designed to be data flow oriented and, keeping that in mind, we shouldn't break the general design of engines. But, it also appears that in several scenarios, ROIs are used to select features, eg 'position', but not necessarily at initialization time and not necessarily at rest_position and that there may not have an associated 'not changing' data field. My impression is that being able to pick a set of features from data field in a quick way, at controlled instant, is as desirable as not breaking the Engine logics. . What do you think about refactoring that and separate the two behaviors in different components. BoxROISelector and BoxROIEngine ?. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238:589,Testability,log,logics,589,"Thanks for the feedbacks,. This seems related to the fact that Engines are designed to be data flow oriented and, keeping that in mind, we shouldn't break the general design of engines. But, it also appears that in several scenarios, ROIs are used to select features, eg 'position', but not necessarily at initialization time and not necessarily at rest_position and that there may not have an associated 'not changing' data field. My impression is that being able to pick a set of features from data field in a quick way, at controlled instant, is as desirable as not breaking the Engine logics. . What do you think about refactoring that and separate the two behaviors in different components. BoxROISelector and BoxROIEngine ?. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238
https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238:15,Usability,feedback,feedbacks,15,"Thanks for the feedbacks,. This seems related to the fact that Engines are designed to be data flow oriented and, keeping that in mind, we shouldn't break the general design of engines. But, it also appears that in several scenarios, ROIs are used to select features, eg 'position', but not necessarily at initialization time and not necessarily at rest_position and that there may not have an associated 'not changing' data field. My impression is that being able to pick a set of features from data field in a quick way, at controlled instant, is as desirable as not breaking the Engine logics. . What do you think about refactoring that and separate the two behaviors in different components. BoxROISelector and BoxROIEngine ?. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238
https://github.com/sofa-framework/sofa/issues/41#issuecomment-268987556:447,Usability,simpl,simply,447,"What is the ""daccord repository""?. I would be happy to talk about saving a sofa scene (and to help making it work). first: indeed that's critical and it would do most of the job. second: most of the time these are other ways to describe existing Data (e.g. the Data 'translation' is a Vec3 , but the parse function is able to read scalars 'tx', 'ty' and 'tz'). In that case the Data ""translation"" is modified and should be saved. In Fact we could simply forbid parsing stuff that is not filling existing Data. third:; 'src' is not a problem, it is simply a way to automatically link Data together, so if a Data is modified, it will be saved (the saved scene would not have the 'src' arguments, but all the explicit Data links).; 'template' is not a problem, it is already working (you just have to always export the template name); 'name' is already a data.; what is 'type'?. I would add that saving a scene in the middle of a simulation could bring more problems:; - the states (pos,vel,rest_pos) of every *independent* dofs (only the mechanical objects at the roots of the mapping graph) should be exported.; - maybe others stuffs to find (external_forces of every dofs?); - maybe Data links broken by a copy-on-write should be exported.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-268987556
https://github.com/sofa-framework/sofa/issues/41#issuecomment-268987556:548,Usability,simpl,simply,548,"What is the ""daccord repository""?. I would be happy to talk about saving a sofa scene (and to help making it work). first: indeed that's critical and it would do most of the job. second: most of the time these are other ways to describe existing Data (e.g. the Data 'translation' is a Vec3 , but the parse function is able to read scalars 'tx', 'ty' and 'tz'). In that case the Data ""translation"" is modified and should be saved. In Fact we could simply forbid parsing stuff that is not filling existing Data. third:; 'src' is not a problem, it is simply a way to automatically link Data together, so if a Data is modified, it will be saved (the saved scene would not have the 'src' arguments, but all the explicit Data links).; 'template' is not a problem, it is already working (you just have to always export the template name); 'name' is already a data.; what is 'type'?. I would add that saving a scene in the middle of a simulation could bring more problems:; - the states (pos,vel,rest_pos) of every *independent* dofs (only the mechanical objects at the roots of the mapping graph) should be exported.; - maybe others stuffs to find (external_forces of every dofs?); - maybe Data links broken by a copy-on-write should be exported.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-268987556
https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:157,Deployability,integrat,integration,157,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246
https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:583,Deployability,update,updated,583,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246
https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:157,Integrability,integrat,integration,157,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246
https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:510,Testability,test,tests,510,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246
https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:693,Usability,feedback,feedback,693,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246
https://github.com/sofa-framework/sofa/issues/42#issuecomment-261508845:461,Performance,load,loaded,461,"`sofa::helper::io::Mesh*` has been deprecated since many years, replace by `MeshLoader` components, it would be indeed good now to clean it up ;); The biggest chunk of work required is to remove all the `""filename""` Data still around in quite a few components (BaseMeshTopology, MechanicalObject, DiagonalMass, UniformMass, VisualModelImpl, SpringForceField, RigidMapping, RigidRigidMapping), which would be easy except that we need clear warnings if an XML is loaded still using this, as those components are used everywhere. A quick search in Sofa examples directory finds 500 instances of OglModel with a filename or fileMesh attribute...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-261508845
https://github.com/sofa-framework/sofa/issues/42#issuecomment-261508845:433,Usability,clear,clear,433,"`sofa::helper::io::Mesh*` has been deprecated since many years, replace by `MeshLoader` components, it would be indeed good now to clean it up ;); The biggest chunk of work required is to remove all the `""filename""` Data still around in quite a few components (BaseMeshTopology, MechanicalObject, DiagonalMass, UniformMass, VisualModelImpl, SpringForceField, RigidMapping, RigidRigidMapping), which would be easy except that we need clear warnings if an XML is loaded still using this, as those components are used everywhere. A quick search in Sofa examples directory finds 500 instances of OglModel with a filename or fileMesh attribute...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-261508845
https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667:637,Performance,load,loadFromMemory,637,"For small scenes I found very convenient to write the scene directly in the test...; This allow to iterate on each variation of scene elements (PointLight, DirectionalLight, SpotLight) (or templates (Vec3d, Vec3f, Rigid)) with just a simple loop and string concat. . ```cpp; void mytestThatShouldExistsForAllLights(std::string& lighttype){; std::stringstream scene ;; scene << ""<?xml version='1.0'?> \n""; ""<Node 	name='Root' gravity='0 -9.81 0' time='0' animate='0' > \n""; "" <Node name='Level 1'> \n""; "" <MechanicalObject/> \n""; "" <""<< lighttype << "" name='light1'/> \n""; "" </Node> \n""; ""</Node> \n"" ;; Node::SPtr root = SceneLoaderXML::loadFromMemory (""testscene"",; scene.str().c_str(),; scene.str().size()) ;. ... the actual meat of the test....; }; ```; For complex scene I think that using a template langage could be an option ...but needs more work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667
https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667:76,Testability,test,test,76,"For small scenes I found very convenient to write the scene directly in the test...; This allow to iterate on each variation of scene elements (PointLight, DirectionalLight, SpotLight) (or templates (Vec3d, Vec3f, Rigid)) with just a simple loop and string concat. . ```cpp; void mytestThatShouldExistsForAllLights(std::string& lighttype){; std::stringstream scene ;; scene << ""<?xml version='1.0'?> \n""; ""<Node 	name='Root' gravity='0 -9.81 0' time='0' animate='0' > \n""; "" <Node name='Level 1'> \n""; "" <MechanicalObject/> \n""; "" <""<< lighttype << "" name='light1'/> \n""; "" </Node> \n""; ""</Node> \n"" ;; Node::SPtr root = SceneLoaderXML::loadFromMemory (""testscene"",; scene.str().c_str(),; scene.str().size()) ;. ... the actual meat of the test....; }; ```; For complex scene I think that using a template langage could be an option ...but needs more work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667
https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667:654,Testability,test,testscene,654,"For small scenes I found very convenient to write the scene directly in the test...; This allow to iterate on each variation of scene elements (PointLight, DirectionalLight, SpotLight) (or templates (Vec3d, Vec3f, Rigid)) with just a simple loop and string concat. . ```cpp; void mytestThatShouldExistsForAllLights(std::string& lighttype){; std::stringstream scene ;; scene << ""<?xml version='1.0'?> \n""; ""<Node 	name='Root' gravity='0 -9.81 0' time='0' animate='0' > \n""; "" <Node name='Level 1'> \n""; "" <MechanicalObject/> \n""; "" <""<< lighttype << "" name='light1'/> \n""; "" </Node> \n""; ""</Node> \n"" ;; Node::SPtr root = SceneLoaderXML::loadFromMemory (""testscene"",; scene.str().c_str(),; scene.str().size()) ;. ... the actual meat of the test....; }; ```; For complex scene I think that using a template langage could be an option ...but needs more work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667
https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667:739,Testability,test,test,739,"For small scenes I found very convenient to write the scene directly in the test...; This allow to iterate on each variation of scene elements (PointLight, DirectionalLight, SpotLight) (or templates (Vec3d, Vec3f, Rigid)) with just a simple loop and string concat. . ```cpp; void mytestThatShouldExistsForAllLights(std::string& lighttype){; std::stringstream scene ;; scene << ""<?xml version='1.0'?> \n""; ""<Node 	name='Root' gravity='0 -9.81 0' time='0' animate='0' > \n""; "" <Node name='Level 1'> \n""; "" <MechanicalObject/> \n""; "" <""<< lighttype << "" name='light1'/> \n""; "" </Node> \n""; ""</Node> \n"" ;; Node::SPtr root = SceneLoaderXML::loadFromMemory (""testscene"",; scene.str().c_str(),; scene.str().size()) ;. ... the actual meat of the test....; }; ```; For complex scene I think that using a template langage could be an option ...but needs more work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667
https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667:234,Usability,simpl,simple,234,"For small scenes I found very convenient to write the scene directly in the test...; This allow to iterate on each variation of scene elements (PointLight, DirectionalLight, SpotLight) (or templates (Vec3d, Vec3f, Rigid)) with just a simple loop and string concat. . ```cpp; void mytestThatShouldExistsForAllLights(std::string& lighttype){; std::stringstream scene ;; scene << ""<?xml version='1.0'?> \n""; ""<Node 	name='Root' gravity='0 -9.81 0' time='0' animate='0' > \n""; "" <Node name='Level 1'> \n""; "" <MechanicalObject/> \n""; "" <""<< lighttype << "" name='light1'/> \n""; "" </Node> \n""; ""</Node> \n"" ;; Node::SPtr root = SceneLoaderXML::loadFromMemory (""testscene"",; scene.str().c_str(),; scene.str().size()) ;. ... the actual meat of the test....; }; ```; For complex scene I think that using a template langage could be an option ...but needs more work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:2309,Availability,error,errors,2309,"ance using a tag class:; ; ``` c++; class BaseData {; public:; struct no_init {};; ; protected:; BaseData(no_init) : // ...; };; ```; ; This one should be easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ; this one is tedious but not that hard. Now if all of this can be done, a derived component class will be able to manage its data on a per-class basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain an issue, it is always possible to iterate using a callback instead, which is acceptable using c++11 lambdas/`std::function`, but probably too cumbersome using c++98. **To summarize I think the performance hit for current code path is minimal.**. On the other hand, a component using `BaseData::no_init` with per-class data managemenent potentially saves up to 6 heap allocations per data per constructor call, and a fraction of this during destruction. FYI, I counted 10 `Data` members in base class `Mapping<In, Out>` alone, `",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:107,Integrability,depend,depends,107,"Hello Damien, and thanks for your feedback. Let met address your points one by one:. ## Invasiveness. That depends on the use cases for `Data` embedded in a component. From the code in `Base.h`, it seems that components essentially should be able to:; - Enumerate all its `Data`; - Associate a name to a `Data`; - Adding/removing `Data`. Assuming it's all there is to `Data` management in a component, then the following changes could enable opt-in, class-based data management when needed:; 1. Make all the associated methods virtual: `Base::findData, Base::addData, Base::removeData, Base::getDataFields`, possibly changing return type in the case of `Base::getDataFields` from `const VecData&` to `VecData`. In the latter case it would probably be even better to change the iteration strategy altogether, for instance by using:; ; ``` c++; virtual void Base::getDataFields(VecData& out) const = 0;; ```; ; ...to leave allocation to the caller. Grepping `getDataFields` on the whole SOFA codebase yields around 10 hits (python bindings, generateDoc, GUI and modeler, solver merger) so it should be manageable.; 2. Provide a protected `BaseData` constructor that does not initialize links/owner datas. Obviously we do not want to silently break existing code, so this behavior should be opt-in, for instance using a tag class:; ; ``` c++; class BaseData {; public:; struct no_init {};; ; protected:; BaseData(no_init) : // ...; };; ```; ; This one should be easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:1761,Performance,optimiz,optimized,1761,"iteration strategy altogether, for instance by using:; ; ``` c++; virtual void Base::getDataFields(VecData& out) const = 0;; ```; ; ...to leave allocation to the caller. Grepping `getDataFields` on the whole SOFA codebase yields around 10 hits (python bindings, generateDoc, GUI and modeler, solver merger) so it should be manageable.; 2. Provide a protected `BaseData` constructor that does not initialize links/owner datas. Obviously we do not want to silently break existing code, so this behavior should be opt-in, for instance using a tag class:; ; ``` c++; class BaseData {; public:; struct no_init {};; ; protected:; BaseData(no_init) : // ...; };; ```; ; This one should be easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ; this one is tedious but not that hard. Now if all of this can be done, a derived component class will be able to manage its data on a per-class basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:2971,Performance,perform,performance,2971,"apping, etc.; ```; ; this one is tedious but not that hard. Now if all of this can be done, a derived component class will be able to manage its data on a per-class basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain an issue, it is always possible to iterate using a callback instead, which is acceptable using c++11 lambdas/`std::function`, but probably too cumbersome using c++98. **To summarize I think the performance hit for current code path is minimal.**. On the other hand, a component using `BaseData::no_init` with per-class data managemenent potentially saves up to 6 heap allocations per data per constructor call, and a fraction of this during destruction. FYI, I counted 10 `Data` members in base class `Mapping<In, Out>` alone, `collision::Contact` has 5, `ForceField` has 7,`MechanicalObject` has around 30. This means that for every collision between two different collision models, there are _at the very least_ 50+ `Data` created, each of which can cause up to 6 heap allocations. . **That is 300+ heap allocations potentially saved for a single collision, before even doing anything.**. Now one can always argue that by grouping objects in mechanical objects one can minimize the number of contact classes, but firstly for complex scenes this is a very tedious/complex thing to do, and secondly there should be a way of not paying for features you don't use (this is c++ after all). So I think it is s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:2623,Safety,avoid,avoid,2623,"a::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ; this one is tedious but not that hard. Now if all of this can be done, a derived component class will be able to manage its data on a per-class basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain an issue, it is always possible to iterate using a callback instead, which is acceptable using c++11 lambdas/`std::function`, but probably too cumbersome using c++98. **To summarize I think the performance hit for current code path is minimal.**. On the other hand, a component using `BaseData::no_init` with per-class data managemenent potentially saves up to 6 heap allocations per data per constructor call, and a fraction of this during destruction. FYI, I counted 10 `Data` members in base class `Mapping<In, Out>` alone, `collision::Contact` has 5, `ForceField` has 7,`MechanicalObject` has around 30. This means that for every collision between two different collision models, there are _at the very least_ 50+ `Data` created, each of which can cause up to 6 heap allocations. . **That is 300+ heap allocations potentially saved ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:3981,Safety,safe,safe,3981,"basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain an issue, it is always possible to iterate using a callback instead, which is acceptable using c++11 lambdas/`std::function`, but probably too cumbersome using c++98. **To summarize I think the performance hit for current code path is minimal.**. On the other hand, a component using `BaseData::no_init` with per-class data managemenent potentially saves up to 6 heap allocations per data per constructor call, and a fraction of this during destruction. FYI, I counted 10 `Data` members in base class `Mapping<In, Out>` alone, `collision::Contact` has 5, `ForceField` has 7,`MechanicalObject` has around 30. This means that for every collision between two different collision models, there are _at the very least_ 50+ `Data` created, each of which can cause up to 6 heap allocations. . **That is 300+ heap allocations potentially saved for a single collision, before even doing anything.**. Now one can always argue that by grouping objects in mechanical objects one can minimize the number of contact classes, but firstly for complex scenes this is a very tedious/complex thing to do, and secondly there should be a way of not paying for features you don't use (this is c++ after all). So I think it is safe to say that the potential benefits significantly outweigh the cost :-). I hope the above addressed your questions, please let me know if this sounds reasonable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:2442,Security,access,accessing,2442,"easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ; this one is tedious but not that hard. Now if all of this can be done, a derived component class will be able to manage its data on a per-class basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain an issue, it is always possible to iterate using a callback instead, which is acceptable using c++11 lambdas/`std::function`, but probably too cumbersome using c++98. **To summarize I think the performance hit for current code path is minimal.**. On the other hand, a component using `BaseData::no_init` with per-class data managemenent potentially saves up to 6 heap allocations per data per constructor call, and a fraction of this during destruction. FYI, I counted 10 `Data` members in base class `Mapping<In, Out>` alone, `collision::Contact` has 5, `ForceField` has 7,`MechanicalObject` has around 30. This means that for every collision between two different collision models",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:34,Usability,feedback,feedback,34,"Hello Damien, and thanks for your feedback. Let met address your points one by one:. ## Invasiveness. That depends on the use cases for `Data` embedded in a component. From the code in `Base.h`, it seems that components essentially should be able to:; - Enumerate all its `Data`; - Associate a name to a `Data`; - Adding/removing `Data`. Assuming it's all there is to `Data` management in a component, then the following changes could enable opt-in, class-based data management when needed:; 1. Make all the associated methods virtual: `Base::findData, Base::addData, Base::removeData, Base::getDataFields`, possibly changing return type in the case of `Base::getDataFields` from `const VecData&` to `VecData`. In the latter case it would probably be even better to change the iteration strategy altogether, for instance by using:; ; ``` c++; virtual void Base::getDataFields(VecData& out) const = 0;; ```; ; ...to leave allocation to the caller. Grepping `getDataFields` on the whole SOFA codebase yields around 10 hits (python bindings, generateDoc, GUI and modeler, solver merger) so it should be manageable.; 2. Provide a protected `BaseData` constructor that does not initialize links/owner datas. Obviously we do not want to silently break existing code, so this behavior should be opt-in, for instance using a tag class:; ; ``` c++; class BaseData {; public:; struct no_init {};; ; protected:; BaseData(no_init) : // ...; };; ```; ; This one should be easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557:597,Testability,test,testing,597,"Matt',. Yes the breakage would be minimal. . It would be possible to mix instance-based and class-based Data management as long as the consistency in maintained through the data API in `Base`. Static data would incur no extra penalty at construction time, but later add/remove would remain possible. . I am unsure this is desirable, however: a full-blown mix of class-based and instance-based management would require more efforts, mainly to chain class-based datas up the class hierarchy, and I am not sure it is worth it. It could be the case though, but this requires _significant_ changes and testing, like converting all the existing `initData` to the new system for example. The use case I had in mind was more like the 5-10% cases where it really matters to be fast, and we don't really care whether data's are setup properly, and we sure do _not_ want to pay for it. . If data inspection turns out to be required (e.g. for debug), then we can come up with an ad-hoc solution when/if it's needed, but at this point it is not clear whether this will be of sufficient interest. But maybe more people could step in and provide feedback?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557:1032,Usability,clear,clear,1032,"Matt',. Yes the breakage would be minimal. . It would be possible to mix instance-based and class-based Data management as long as the consistency in maintained through the data API in `Base`. Static data would incur no extra penalty at construction time, but later add/remove would remain possible. . I am unsure this is desirable, however: a full-blown mix of class-based and instance-based management would require more efforts, mainly to chain class-based datas up the class hierarchy, and I am not sure it is worth it. It could be the case though, but this requires _significant_ changes and testing, like converting all the existing `initData` to the new system for example. The use case I had in mind was more like the 5-10% cases where it really matters to be fast, and we don't really care whether data's are setup properly, and we sure do _not_ want to pay for it. . If data inspection turns out to be required (e.g. for debug), then we can come up with an ad-hoc solution when/if it's needed, but at this point it is not clear whether this will be of sufficient interest. But maybe more people could step in and provide feedback?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557
https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557:1131,Usability,feedback,feedback,1131,"Matt',. Yes the breakage would be minimal. . It would be possible to mix instance-based and class-based Data management as long as the consistency in maintained through the data API in `Base`. Static data would incur no extra penalty at construction time, but later add/remove would remain possible. . I am unsure this is desirable, however: a full-blown mix of class-based and instance-based management would require more efforts, mainly to chain class-based datas up the class hierarchy, and I am not sure it is worth it. It could be the case though, but this requires _significant_ changes and testing, like converting all the existing `initData` to the new system for example. The use case I had in mind was more like the 5-10% cases where it really matters to be fast, and we don't really care whether data's are setup properly, and we sure do _not_ want to pay for it. . If data inspection turns out to be required (e.g. for debug), then we can come up with an ad-hoc solution when/if it's needed, but at this point it is not clear whether this will be of sufficient interest. But maybe more people could step in and provide feedback?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557
https://github.com/sofa-framework/sofa/issues/44#issuecomment-256399737:571,Energy Efficiency,allocate,allocate,571,"Thank you Jeremie for this valuable feedback. . I started working towards a faster initialization path for `Data` and `Link` in a separate branch, I will post some results here if I get anything meaningful. The main use-case is a scene with many contacts, thus many components/data are added and removed at each time step due to collision handling. We'll see whether this is worth the effort. A small thing: I've seen that the DataTypeInfo for fixed array-like types (RigidCoord, Vec, and the like) all enable the CopyOnWrite flag, which makes any Data holding such type allocate on the heap on construction. Is this needed?. Thanks again for your help.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-256399737
https://github.com/sofa-framework/sofa/issues/44#issuecomment-256399737:36,Usability,feedback,feedback,36,"Thank you Jeremie for this valuable feedback. . I started working towards a faster initialization path for `Data` and `Link` in a separate branch, I will post some results here if I get anything meaningful. The main use-case is a scene with many contacts, thus many components/data are added and removed at each time step due to collision handling. We'll see whether this is worth the effort. A small thing: I've seen that the DataTypeInfo for fixed array-like types (RigidCoord, Vec, and the like) all enable the CopyOnWrite flag, which makes any Data holding such type allocate on the heap on construction. Is this needed?. Thanks again for your help.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-256399737
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:160,Availability,down,down,160,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:1060,Integrability,depend,depend,1060,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:277,Performance,optimiz,optimize,277,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:319,Performance,optimiz,optimize,319,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:965,Performance,optimiz,optimization,965,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:500,Safety,detect,detection,500,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:415,Testability,test,test,415,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:89,Usability,feedback,feedback,89,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574
https://github.com/sofa-framework/sofa/issues/44#issuecomment-271520439:27,Usability,feedback,feedback,27,"Hi Maxime,. Thanks for the feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-271520439
https://github.com/sofa-framework/sofa/issues/44#issuecomment-276933049:55,Usability,learn,learn,55,@matthieu-nesme I like so much your concision I should learn from that when writing ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-276933049
https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:23,Deployability,update,update,23,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336
https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:1141,Integrability,depend,dependency,1141,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336
https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:901,Performance,optimiz,optimize,901,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336
https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:1371,Safety,avoid,avoid,1371,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336
https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:265,Usability,simpl,simplified,265,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257862434:146,Usability,feedback,feedback,146,"For me, it makes no sense to have two different values based on the template in BilateralInteractionConstraint. But it would be nice to have some feedback from real expert on Constraints.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257862434
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:721,Availability,toler,tolerance,721,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:873,Deployability,patch,patch,873,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:676,Modifiability,refactor,refactoring,676,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:709,Security,expose,expose,709,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:498,Testability,log,log,498,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683
https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:10,Usability,simpl,simple,10,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683
https://github.com/sofa-framework/sofa/issues/47#issuecomment-262492386:219,Usability,clear,clear,219,Thank Mathieu for the info. So you are confirming that the name getContactPointWithSurfacePoint mismatch the behavior of what is actually implemented for vec3. Shouln't we separate the two behavior in two function with clear naming ?. DM,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/47#issuecomment-262492386
https://github.com/sofa-framework/sofa/pull/48#issuecomment-264177683:244,Security,access,access,244,"@damienmarchal it is not the right place, but it is the right moment, in case you did not know it.; It is easy to modify an existing PR. You simply have to add the fork containing the PR in your local repo (`git remote add`), you can then have access to the PR like any other branch. The pb with this specific PR, is that the branch is the master of the BehnamBinesh fork, it is quite disturbing to modify the master of someone else, but I guess it is ok here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264177683
https://github.com/sofa-framework/sofa/pull/48#issuecomment-264177683:141,Usability,simpl,simply,141,"@damienmarchal it is not the right place, but it is the right moment, in case you did not know it.; It is easy to modify an existing PR. You simply have to add the fork containing the PR in your local repo (`git remote add`), you can then have access to the PR like any other branch. The pb with this specific PR, is that the branch is the master of the BehnamBinesh fork, it is quite disturbing to modify the master of someone else, but I guess it is ok here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264177683
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:612,Energy Efficiency,green,green-to-red,612,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:147,Integrability,depend,depend,147,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:104,Testability,test,tests,104,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:832,Testability,test,test,832,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:1133,Testability,test,tests,1133,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:442,Usability,feedback,feedback,442,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:1215,Usability,feedback,feedback,1215,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:666,Availability,failure,failures,666,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:142,Testability,test,tests,142,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:429,Testability,test,tests,429,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:613,Testability,test,tests,613,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:879,Testability,test,tests,879,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:919,Testability,test,tests,919,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:951,Testability,test,tests,951,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:369,Usability,simpl,simple,369,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585
https://github.com/sofa-framework/sofa/issues/54#issuecomment-263270733:25,Usability,feedback,feedback,25,Thanks Guillaume for the feedback. I'm very surprise this fails since ; https://github.com/sofa-framework/sofa/commit/b70b477f9cdae6a1d31d4f462f23780d3bdbcde1. because I see no link between the two.... this is very strange to me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263270733
https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:566,Deployability,update,update,566,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734
https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:647,Deployability,update,update,647,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734
https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:486,Energy Efficiency,efficient,efficient,486,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734
https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:503,Energy Efficiency,monitor,monitor,503,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734
https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:31,Usability,feedback,feedback,31,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734
https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:1013,Usability,feedback,feedback,1013,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734
https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350:23,Modifiability,enhance,enhanced,23,"Yep, drawText could be enhanced, especially by changing the texture containing the letters.; Or directly generating the bitmaps by using libfreetype (http://learnopengl.com/#!In-Practice/Text-Rendering)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350
https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350:157,Usability,learn,learnopengl,157,"Yep, drawText could be enhanced, especially by changing the texture containing the letters.; Or directly generating the bitmaps by using libfreetype (http://learnopengl.com/#!In-Practice/Text-Rendering)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350
https://github.com/sofa-framework/sofa/pull/63#issuecomment-262619814:73,Usability,feedback,feedback,73,@hugtalbot Can you merge it please (unless someone see problems and give feedback),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/63#issuecomment-262619814
https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803:35,Testability,test,test,35,"@etienneschmitt, thank you for the test. ; ; The dashboard seems to report there is problem with the added test: ; https://www.sofa-framework.org/dash/?branch=pr/fix_vtkloader. EDIT1: isn't the file 'vox8_binary.vtk' missing ?. Apart from the dashboard issue i would say:; +1 for the use of c++x11 ; +1 for the test ; +1 for the new feature ; :). As @thomas-lemaire was assigned by Mathieu to this PR I assume having its feedback is important before merging.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803
https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803:107,Testability,test,test,107,"@etienneschmitt, thank you for the test. ; ; The dashboard seems to report there is problem with the added test: ; https://www.sofa-framework.org/dash/?branch=pr/fix_vtkloader. EDIT1: isn't the file 'vox8_binary.vtk' missing ?. Apart from the dashboard issue i would say:; +1 for the use of c++x11 ; +1 for the test ; +1 for the new feature ; :). As @thomas-lemaire was assigned by Mathieu to this PR I assume having its feedback is important before merging.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803
https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803:311,Testability,test,test,311,"@etienneschmitt, thank you for the test. ; ; The dashboard seems to report there is problem with the added test: ; https://www.sofa-framework.org/dash/?branch=pr/fix_vtkloader. EDIT1: isn't the file 'vox8_binary.vtk' missing ?. Apart from the dashboard issue i would say:; +1 for the use of c++x11 ; +1 for the test ; +1 for the new feature ; :). As @thomas-lemaire was assigned by Mathieu to this PR I assume having its feedback is important before merging.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803
https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803:421,Usability,feedback,feedback,421,"@etienneschmitt, thank you for the test. ; ; The dashboard seems to report there is problem with the added test: ; https://www.sofa-framework.org/dash/?branch=pr/fix_vtkloader. EDIT1: isn't the file 'vox8_binary.vtk' missing ?. Apart from the dashboard issue i would say:; +1 for the use of c++x11 ; +1 for the test ; +1 for the new feature ; :). As @thomas-lemaire was assigned by Mathieu to this PR I assume having its feedback is important before merging.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803
https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195:658,Testability,test,test,658,"Hi Fred,. Thank you for your pull-request. ; It looks really nice. . Some user friendly stuff...; - I would be great to have more details in the help string of the added Data. Currently it is more or less duplicating the name; maybe you can say what is it used for in term of rendering and shadowing.; - I have now clear opinion on that but maybe we should also add the default values in the docstring (I found it very annoying for the users to look in the source code to know what the default values are). ; - In the same spirit I think that somewhere VMS should be documented to the user. Maybe in the component helpstring when it is registered ? . I will test that by thursday unless someone else do that before.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195
https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195:315,Usability,clear,clear,315,"Hi Fred,. Thank you for your pull-request. ; It looks really nice. . Some user friendly stuff...; - I would be great to have more details in the help string of the added Data. Currently it is more or less duplicating the name; maybe you can say what is it used for in term of rendering and shadowing.; - I have now clear opinion on that but maybe we should also add the default values in the docstring (I found it very annoying for the users to look in the source code to know what the default values are). ; - In the same spirit I think that somewhere VMS should be documented to the user. Maybe in the component helpstring when it is registered ? . I will test that by thursday unless someone else do that before.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195
https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230:125,Security,validat,validate,125,In the case of the Light (and actually this is true to most of the sofa component) I see several very simple tests to add to validate the inputes. But you are totally right this cannot be done automatically (unless with a kind of ; code-path/coverage analysis) so the developper have to write at least the easy one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230
https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230:109,Testability,test,tests,109,In the case of the Light (and actually this is true to most of the sofa component) I see several very simple tests to add to validate the inputes. But you are totally right this cannot be done automatically (unless with a kind of ; code-path/coverage analysis) so the developper have to write at least the easy one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230
https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230:102,Usability,simpl,simple,102,In the case of the Light (and actually this is true to most of the sofa component) I see several very simple tests to add to validate the inputes. But you are totally right this cannot be done automatically (unless with a kind of ; code-path/coverage analysis) so the developper have to write at least the easy one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230
https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624:129,Deployability,integrat,integrate,129,This PR is connected with:; https://github.com/sofa-framework/sofa/issues/61. I refresh the build to see if this still work then integrate it as no one gave negative feedbacks. ; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624
https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624:129,Integrability,integrat,integrate,129,This PR is connected with:; https://github.com/sofa-framework/sofa/issues/61. I refresh the build to see if this still work then integrate it as no one gave negative feedbacks. ; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624
https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624:166,Usability,feedback,feedbacks,166,This PR is connected with:; https://github.com/sofa-framework/sofa/issues/61. I refresh the build to see if this still work then integrate it as no one gave negative feedbacks. ; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624
https://github.com/sofa-framework/sofa/issues/81#issuecomment-264505055:733,Usability,intuit,intuitive,733,"Hi,; thanks for your comments. 1) Indeed the local parameters should override the global parameter. If it is not the case there is a bug. 2) The friction coefficient cannot be negative, so set a positive value! Of course this could be checked. 3) Indeed the product of the two friction coefficients are used everywhere in SOFA (not only in Compliant as far as I know). In fact the friction coefficient should be defined for a pair of objects and not per object. Such an external table does not fit the actual Sofa design. But note that is possible to tweak the collision model's coefficients (even more easily when describing the scene in python).; `sqrt(coef1*coef2)` sounds a good suggestion to me, I guess it would produce a more intuitive behavior. Do you have a pointer talking about such behavior?. @maxime-tournier, your opinion?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-264505055
https://github.com/sofa-framework/sofa/issues/81#issuecomment-264918392:236,Usability,simpl,simpler,236,"Thanks a lot Matthieu 👍 . Can you expand a little bit on ""easy"" vs. ""hard"" to get global/local mu parameters?. Looking quickly at the code, one could just add a GLOBAL flag and use the global mu (if any): that would make the code a bit simpler and the behaviour more explicit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-264918392
https://github.com/sofa-framework/sofa/issues/81#issuecomment-265756690:90,Usability,intuit,intuition,90,"Wow, didn't expect that much interest :) My proposal for geometric average just came from intuition. There acutally may be users out there that have tables of friction values for material pairings, so we might want to consider that use case too. Here's a try:. We introduce a new ""material number"" property attached to collision models which could then be used as indices for looking up coefficients in a symmetric matrix within the ContactManager. An undefined material number could be mapped to 0 by default. Negative values indicate cells, whose friction coefficient has not (yet) been determined . * querying unset cells during contact creation triggers a computation from the locally defined mu values, using one of the mentioned heuristics (AVG, GEOMETRIC, MIN, MAX...). This mechanism maintains backwards compatibility with existing simulations, and it preserves the ability to distribute coefficient definitions across the simulation tree.; * presetting the friction coefficients matrix directly provides a way to override any local definitions via mu; * having a freely modifiable matrix covers all possible use cases. The ""material number"" concept might also come in handy in other circumstances.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265756690
https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802:203,Usability,clear,clearHandlers,203,So apparently `ImagePNG_test.ImagePNG_NoFile` fails when executed **after** `logging_test`.; I don't know Message API enough to understand what is wrong but it seems to be related to `MessageDispatcher::clearHandlers()` calls in `logging_test`.; Any idea @matthieu-nesme @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802
https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:46,Modifiability,inherit,inheriting,46,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479
https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:234,Modifiability,inherit,inherits,234,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479
https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:106,Testability,test,test,106,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479
https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:439,Testability,test,test,439,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479
https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:279,Usability,clear,clearHandler,279,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479
https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897:54,Deployability,install,install,54,"The pull-request #95 contains code that automatically install the dispatcher needed in tests. ; So normally it is not needed any more to clearHandlers (unless you really want a specific behavior). . EDIT: The Pull request #95 was not clean so I did a new one, sorry for the noise.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897
https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897:87,Testability,test,tests,87,"The pull-request #95 contains code that automatically install the dispatcher needed in tests. ; So normally it is not needed any more to clearHandlers (unless you really want a specific behavior). . EDIT: The Pull request #95 was not clean so I did a new one, sorry for the noise.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897
https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897:137,Usability,clear,clearHandlers,137,"The pull-request #95 contains code that automatically install the dispatcher needed in tests. ; So normally it is not needed any more to clearHandlers (unless you really want a specific behavior). . EDIT: The Pull request #95 was not clean so I did a new one, sorry for the noise.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897
https://github.com/sofa-framework/sofa/pull/100#issuecomment-266839785:17,Usability,clear,clear,17,"Everything looks clear to me. ; Why did you taggued this with ""bug"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/100#issuecomment-266839785
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927:554,Testability,benchmark,benchmark,554,"Thanks for your feedbacks. . @matthieu-nesme I agree with you about adding Data to base. This was discussed in; issue https://github.com/sofa-framework/sofa/issues/44 for which there was no clear conclusion so I still have no clear idea on what to do. My current thinking is that fundamentally Data are good (among other things they are a big part of the sofa UIs as well as offer saving capabilities)...the problem is that their init cost is too high. Instead of not using them shouldn't we accelerate that ? (To restart the discussion I have added few benchmark to the issue https://github.com/sofa-framework/sofa/issues/44). . @thomas-lemaire You are totally right about the printLog. Actually this was my long term target. But as I didn't wanted to break everything I just set-up the foundation of an alternative in this PR, to have your feedbacks, try the feature on few component then do the changing and cleaning all around in a second PR. Could we pursue the discussion in a dedicated issue (https://github.com/sofa-framework/sofa/issues/160) to define how we should do the general cleaning.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927:16,Usability,feedback,feedbacks,16,"Thanks for your feedbacks. . @matthieu-nesme I agree with you about adding Data to base. This was discussed in; issue https://github.com/sofa-framework/sofa/issues/44 for which there was no clear conclusion so I still have no clear idea on what to do. My current thinking is that fundamentally Data are good (among other things they are a big part of the sofa UIs as well as offer saving capabilities)...the problem is that their init cost is too high. Instead of not using them shouldn't we accelerate that ? (To restart the discussion I have added few benchmark to the issue https://github.com/sofa-framework/sofa/issues/44). . @thomas-lemaire You are totally right about the printLog. Actually this was my long term target. But as I didn't wanted to break everything I just set-up the foundation of an alternative in this PR, to have your feedbacks, try the feature on few component then do the changing and cleaning all around in a second PR. Could we pursue the discussion in a dedicated issue (https://github.com/sofa-framework/sofa/issues/160) to define how we should do the general cleaning.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927:190,Usability,clear,clear,190,"Thanks for your feedbacks. . @matthieu-nesme I agree with you about adding Data to base. This was discussed in; issue https://github.com/sofa-framework/sofa/issues/44 for which there was no clear conclusion so I still have no clear idea on what to do. My current thinking is that fundamentally Data are good (among other things they are a big part of the sofa UIs as well as offer saving capabilities)...the problem is that their init cost is too high. Instead of not using them shouldn't we accelerate that ? (To restart the discussion I have added few benchmark to the issue https://github.com/sofa-framework/sofa/issues/44). . @thomas-lemaire You are totally right about the printLog. Actually this was my long term target. But as I didn't wanted to break everything I just set-up the foundation of an alternative in this PR, to have your feedbacks, try the feature on few component then do the changing and cleaning all around in a second PR. Could we pursue the discussion in a dedicated issue (https://github.com/sofa-framework/sofa/issues/160) to define how we should do the general cleaning.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927:226,Usability,clear,clear,226,"Thanks for your feedbacks. . @matthieu-nesme I agree with you about adding Data to base. This was discussed in; issue https://github.com/sofa-framework/sofa/issues/44 for which there was no clear conclusion so I still have no clear idea on what to do. My current thinking is that fundamentally Data are good (among other things they are a big part of the sofa UIs as well as offer saving capabilities)...the problem is that their init cost is too high. Instead of not using them shouldn't we accelerate that ? (To restart the discussion I have added few benchmark to the issue https://github.com/sofa-framework/sofa/issues/44). . @thomas-lemaire You are totally right about the printLog. Actually this was my long term target. But as I didn't wanted to break everything I just set-up the foundation of an alternative in this PR, to have your feedbacks, try the feature on few component then do the changing and cleaning all around in a second PR. Could we pursue the discussion in a dedicated issue (https://github.com/sofa-framework/sofa/issues/160) to define how we should do the general cleaning.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927
https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927:842,Usability,feedback,feedbacks,842,"Thanks for your feedbacks. . @matthieu-nesme I agree with you about adding Data to base. This was discussed in; issue https://github.com/sofa-framework/sofa/issues/44 for which there was no clear conclusion so I still have no clear idea on what to do. My current thinking is that fundamentally Data are good (among other things they are a big part of the sofa UIs as well as offer saving capabilities)...the problem is that their init cost is too high. Instead of not using them shouldn't we accelerate that ? (To restart the discussion I have added few benchmark to the issue https://github.com/sofa-framework/sofa/issues/44). . @thomas-lemaire You are totally right about the printLog. Actually this was my long term target. But as I didn't wanted to break everything I just set-up the foundation of an alternative in this PR, to have your feedbacks, try the feature on few component then do the changing and cleaning all around in a second PR. Could we pursue the discussion in a dedicated issue (https://github.com/sofa-framework/sofa/issues/160) to define how we should do the general cleaning.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:238,Availability,error,error,238,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:355,Availability,error,error,355,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:456,Integrability,message,messages,456,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:564,Integrability,message,message,564,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:907,Integrability,message,messages,907,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:966,Integrability,message,messages,966,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:984,Modifiability,extend,extending,984,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:373,Safety,risk,risky,373,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:164,Testability,log,logging,164,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:244,Testability,log,logging,244,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:344,Testability,log,logging,344,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:103,Usability,feedback,feedback,103,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662
https://github.com/sofa-framework/sofa/issues/107#issuecomment-270331991:90,Usability,guid,guideline,90,"Wouldn't it make sense to alias the std container to sofa::helper ? . So that the general guideline could be to always use sofa::helper::* and not ""if your are using a list then use std::list, if it is a vector then use a sofa::helper::vector, ..."". . More generally ; - it would make the source code more consistent ; - it would ease newcommer's life to get into sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/107#issuecomment-270331991
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:329,Deployability,update,updates,329,"Hi Mathieu,. - About the 'd_size' data field. It is there just to store the attribute passed by the user. As the parse function already do the resize using the raw value of the attribute it was not needed to do any resize(d_size.getValue) anywhere. . - I share your concern about the cost of adding data. ; According to the last updates in Issue https://github.com/sofa-framework/sofa/issues/44) it seems that data is not that crucial for a real simulation. . To have more insight I just made a quick test with the following result: ; The time to create 200 000 (empty) component (without calling the init function):; - with 6 Data field is 1.10sec; - with 10 Data field is 1.55sec; So one data field added to a component cost 0.05ms at component creation (it is higher than what I expected). ; Now for a more realistic scenario with 200 SphereModel created and initialized one extra data field rise the cost from 3.1 ms 3.2ms and that this is 'dialuated' in all the other cost (collision detection, mechanics). . About your suggestion to set everything to persistent by default and have each component decide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explic",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:1913,Performance,load,loader,1913,"ecide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explicitely in the scene file; - the value specified explicitely in the GUI via the widget or the manipulators; Despite being very simple this work very well and without any risk that some authors breaks the saving because he forgot/decide not to setPersistent(false) in his component (and this happened quite a lot in the past). For your context of use, for which saving a simulated scene is important I think a very simple solution would be to write a visitor to switch all the Data values to persistent. And I would suggest to put this feature to a different entry in the menu (what about ""Export"" or ""Dump"" ?) so that in the same application we can either save or dump the scene with very well defined semantics ? . Now about the fact that some Data editted in the UI can be incompatible with another Data. I will let that for another day because to me this is a much more general UI problem. . Finally to improve a bit the general readability in any context of use we could, when writing big chunk of numbers (like vector.size() > 20) save them in separated files leading to something like: ; <MechanicalO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:989,Safety,detect,detection,989,"Hi Mathieu,. - About the 'd_size' data field. It is there just to store the attribute passed by the user. As the parse function already do the resize using the raw value of the attribute it was not needed to do any resize(d_size.getValue) anywhere. . - I share your concern about the cost of adding data. ; According to the last updates in Issue https://github.com/sofa-framework/sofa/issues/44) it seems that data is not that crucial for a real simulation. . To have more insight I just made a quick test with the following result: ; The time to create 200 000 (empty) component (without calling the init function):; - with 6 Data field is 1.10sec; - with 10 Data field is 1.55sec; So one data field added to a component cost 0.05ms at component creation (it is higher than what I expected). ; Now for a more realistic scenario with 200 SphereModel created and initialized one extra data field rise the cost from 3.1 ms 3.2ms and that this is 'dialuated' in all the other cost (collision detection, mechanics). . About your suggestion to set everything to persistent by default and have each component decide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explic",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:2169,Safety,risk,risk,2169,"ecide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explicitely in the scene file; - the value specified explicitely in the GUI via the widget or the manipulators; Despite being very simple this work very well and without any risk that some authors breaks the saving because he forgot/decide not to setPersistent(false) in his component (and this happened quite a lot in the past). For your context of use, for which saving a simulated scene is important I think a very simple solution would be to write a visitor to switch all the Data values to persistent. And I would suggest to put this feature to a different entry in the menu (what about ""Export"" or ""Dump"" ?) so that in the same application we can either save or dump the scene with very well defined semantics ? . Now about the fact that some Data editted in the UI can be incompatible with another Data. I will let that for another day because to me this is a much more general UI problem. . Finally to improve a bit the general readability in any context of use we could, when writing big chunk of numbers (like vector.size() > 20) save them in separated files leading to something like: ; <MechanicalO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:501,Testability,test,test,501,"Hi Mathieu,. - About the 'd_size' data field. It is there just to store the attribute passed by the user. As the parse function already do the resize using the raw value of the attribute it was not needed to do any resize(d_size.getValue) anywhere. . - I share your concern about the cost of adding data. ; According to the last updates in Issue https://github.com/sofa-framework/sofa/issues/44) it seems that data is not that crucial for a real simulation. . To have more insight I just made a quick test with the following result: ; The time to create 200 000 (empty) component (without calling the init function):; - with 6 Data field is 1.10sec; - with 10 Data field is 1.55sec; So one data field added to a component cost 0.05ms at component creation (it is higher than what I expected). ; Now for a more realistic scenario with 200 SphereModel created and initialized one extra data field rise the cost from 3.1 ms 3.2ms and that this is 'dialuated' in all the other cost (collision detection, mechanics). . About your suggestion to set everything to persistent by default and have each component decide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explic",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:2126,Usability,simpl,simple,2126,"ecide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explicitely in the scene file; - the value specified explicitely in the GUI via the widget or the manipulators; Despite being very simple this work very well and without any risk that some authors breaks the saving because he forgot/decide not to setPersistent(false) in his component (and this happened quite a lot in the past). For your context of use, for which saving a simulated scene is important I think a very simple solution would be to write a visitor to switch all the Data values to persistent. And I would suggest to put this feature to a different entry in the menu (what about ""Export"" or ""Dump"" ?) so that in the same application we can either save or dump the scene with very well defined semantics ? . Now about the fact that some Data editted in the UI can be incompatible with another Data. I will let that for another day because to me this is a much more general UI problem. . Finally to improve a bit the general readability in any context of use we could, when writing big chunk of numbers (like vector.size() > 20) save them in separated files leading to something like: ; <MechanicalO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:2413,Usability,simpl,simple,2413,"t of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explicitely in the scene file; - the value specified explicitely in the GUI via the widget or the manipulators; Despite being very simple this work very well and without any risk that some authors breaks the saving because he forgot/decide not to setPersistent(false) in his component (and this happened quite a lot in the past). For your context of use, for which saving a simulated scene is important I think a very simple solution would be to write a visitor to switch all the Data values to persistent. And I would suggest to put this feature to a different entry in the menu (what about ""Export"" or ""Dump"" ?) so that in the same application we can either save or dump the scene with very well defined semantics ? . Now about the fact that some Data editted in the UI can be incompatible with another Data. I will let that for another day because to me this is a much more general UI problem. . Finally to improve a bit the general readability in any context of use we could, when writing big chunk of numbers (like vector.size() > 20) save them in separated files leading to something like: ; <MechanicalObject name position=""@file://./name.position468768764568.txt"" />. I will come back later with commit that take your remarks into account.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:555,Integrability,interface,interface,555,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:954,Modifiability,extend,extended,954,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:432,Usability,UX,UX,432,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:1047,Usability,clear,clear,1047,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360
https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:1242,Usability,clear,clear,1242,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360
https://github.com/sofa-framework/sofa/issues/127#issuecomment-276599880:15,Usability,clear,clearly,15,The problem is clearly related to the DAG graph. A workaround until the bug is corrected is to use the Tree instead:. `$ runSofa -s tree`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-276599880
https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017:735,Safety,safe,safeguard,735,"After spending some (too much?) time on this topic, it seems that the fact that static_assert not being evaluated in uninstantiated functions of template classes is not consistent between compilers.; Neither could I find a way to trick the compiler to postpone the evaluation of the condition of the static_assert (for example replace (N==10) by (sizeof(T)==0||N==10) , of template tricks to force the compiler to wait for template instantiation before assertion evaluation. All this is also true for BOOST_STATIC_ASSERT (tried this with no chance, too). My opinion would be to simply remove the static_asserts, since in this context their behaviour is not specified by C++ references (and not consistent). We loose the benefit of the safeguard but are not subject to false-positive anymore. If anyone sees another solution...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017
https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017:453,Testability,assert,assertion,453,"After spending some (too much?) time on this topic, it seems that the fact that static_assert not being evaluated in uninstantiated functions of template classes is not consistent between compilers.; Neither could I find a way to trick the compiler to postpone the evaluation of the condition of the static_assert (for example replace (N==10) by (sizeof(T)==0||N==10) , of template tricks to force the compiler to wait for template instantiation before assertion evaluation. All this is also true for BOOST_STATIC_ASSERT (tried this with no chance, too). My opinion would be to simply remove the static_asserts, since in this context their behaviour is not specified by C++ references (and not consistent). We loose the benefit of the safeguard but are not subject to false-positive anymore. If anyone sees another solution...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017
https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017:578,Usability,simpl,simply,578,"After spending some (too much?) time on this topic, it seems that the fact that static_assert not being evaluated in uninstantiated functions of template classes is not consistent between compilers.; Neither could I find a way to trick the compiler to postpone the evaluation of the condition of the static_assert (for example replace (N==10) by (sizeof(T)==0||N==10) , of template tricks to force the compiler to wait for template instantiation before assertion evaluation. All this is also true for BOOST_STATIC_ASSERT (tried this with no chance, too). My opinion would be to simply remove the static_asserts, since in this context their behaviour is not specified by C++ references (and not consistent). We loose the benefit of the safeguard but are not subject to false-positive anymore. If anyone sees another solution...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258:55,Deployability,update,updated,55,"Hi Erik,. Nice commit. Some (cosmetic) remarks:; - you updated some attributes/data field names but the name you use are not following the sofa guidelines. Data should starts with d_ not m_ (https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md). ; - there are std::cout which should be replaced by the msg_error api ; ; +1 for the examples.; Would be nice to also have a test file validating the behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258:393,Security,validat,validating,393,"Hi Erik,. Nice commit. Some (cosmetic) remarks:; - you updated some attributes/data field names but the name you use are not following the sofa guidelines. Data should starts with d_ not m_ (https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md). ; - there are std::cout which should be replaced by the msg_error api ; ; +1 for the examples.; Would be nice to also have a test file validating the behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258:383,Testability,test,test,383,"Hi Erik,. Nice commit. Some (cosmetic) remarks:; - you updated some attributes/data field names but the name you use are not following the sofa guidelines. Data should starts with d_ not m_ (https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md). ; - there are std::cout which should be replaced by the msg_error api ; ; +1 for the examples.; Would be nice to also have a test file validating the behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258
https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258:144,Usability,guid,guidelines,144,"Hi Erik,. Nice commit. Some (cosmetic) remarks:; - you updated some attributes/data field names but the name you use are not following the sofa guidelines. Data should starts with d_ not m_ (https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md). ; - there are std::cout which should be replaced by the msg_error api ; ; +1 for the examples.; Would be nice to also have a test file validating the behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:349,Deployability,configurat,configuration,349,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:566,Deployability,patch,patch,566,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:986,Integrability,depend,depending,986,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:318,Modifiability,plugin,plugins,318,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:349,Modifiability,config,configuration,349,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:881,Modifiability,plugin,plugins,881,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:924,Modifiability,plugin,plugin,924,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:1280,Modifiability,plugin,plugin,1280,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:1125,Usability,simpl,simple,1125,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943
https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500:60,Availability,avail,available,60,I just removed all plugin-concerned commits. They are still available on guparan/sofa:clean_licenses_pr_139.; This PR should now be simple to review :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500
https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500:19,Modifiability,plugin,plugin-concerned,19,I just removed all plugin-concerned commits. They are still available on guparan/sofa:clean_licenses_pr_139.; This PR should now be simple to review :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500
https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500:132,Usability,simpl,simple,132,I just removed all plugin-concerned commits. They are still available on guparan/sofa:clean_licenses_pr_139.; This PR should now be simple to review :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500
https://github.com/sofa-framework/sofa/pull/141#issuecomment-275343846:397,Availability,avail,available,397,"sorry, it looked simple and fine for me... . ----- Mail original -----. > De: ""Guillaume Paran"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""State change""; > <state_change@noreply.github.com>; > Envoyé: Jeudi 26 Janvier 2017 10:21:34; > Objet: Re: [sofa-framework/sofa] [CI] Replace 'make' by 'ninja' when; > available. (#141). > This one was merged too fast.; > I wanted to change a bit the code :(. > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/141#issuecomment-275343846
https://github.com/sofa-framework/sofa/pull/141#issuecomment-275343846:17,Usability,simpl,simple,17,"sorry, it looked simple and fine for me... . ----- Mail original -----. > De: ""Guillaume Paran"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""State change""; > <state_change@noreply.github.com>; > Envoyé: Jeudi 26 Janvier 2017 10:21:34; > Objet: Re: [sofa-framework/sofa] [CI] Replace 'make' by 'ninja' when; > available. (#141). > This one was merged too fast.; > I wanted to change a bit the code :(. > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/141#issuecomment-275343846
https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765:39,Security,validat,validate,39,"I have not the competence nore time to validate it on the mechanical aspect so I suggest to let 1 week to anyone to give feedback, and after one week we merge it :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765
https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765:121,Usability,feedback,feedback,121,"I have not the competence nore time to validate it on the mechanical aspect so I suggest to let 1 week to anyone to give feedback, and after one week we merge it :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765
https://github.com/sofa-framework/sofa/issues/149#issuecomment-276515093:33,Deployability,install,install,33,+1. . We probably simply need to install the autodump trick somewhere in Sofa_test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-276515093
https://github.com/sofa-framework/sofa/issues/149#issuecomment-276515093:18,Usability,simpl,simply,18,+1. . We probably simply need to install the autodump trick somewhere in Sofa_test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-276515093
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:159,Availability,redundant,redundant,159,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:483,Deployability,install,installed,483,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:994,Deployability,install,installing,994,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:457,Integrability,message,message,457,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:769,Integrability,message,messages,769,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:159,Safety,redund,redundant,159,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:537,Testability,log,loggin,537,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:799,Testability,log,log,799,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:936,Testability,log,log,936,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:1009,Testability,log,logging,1009,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:918,Usability,clear,clear,918,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662
https://github.com/sofa-framework/sofa/pull/161#issuecomment-281657903:24,Usability,feedback,feedback,24,"@JeremieA thank for the feedback, . A closed pull-request is probably not the best location to rise this kind of discussion. Why not creating a new issue dedicated to this topic ? Something like ""Suggestion to cleaning & unifying the way we handle 'locale'"" would be nice.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281657903
https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098:766,Availability,mainten,maintenance,766,"FYI, the decision back in the sofa coding sprint of June 2014 (as fas as I remember), was to remove all `*GridTopology`, in favor of a new design based on `*GridLoader` or `*GridEngine` types of components. A workgroup worked on this topic during the sprint. The associated branch may or may not still exist, but unfortunatly it was not completed and merged back. The rational however is still valid, the current design of those topologies introduce many complexities that are not providing a lot of value, given how rarely then end-up being used, outside of quick and useful examples, but for which the performance gain (if any) of using these grids directly instead of using `MeshTopology` or `HexahedronSetTopologyContainer` does not really matter. So in term of maintenance it seems more practical to remove them completely from the codebase, once we have a usable (and simpler) alternative in place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098
https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098:604,Performance,perform,performance,604,"FYI, the decision back in the sofa coding sprint of June 2014 (as fas as I remember), was to remove all `*GridTopology`, in favor of a new design based on `*GridLoader` or `*GridEngine` types of components. A workgroup worked on this topic during the sprint. The associated branch may or may not still exist, but unfortunatly it was not completed and merged back. The rational however is still valid, the current design of those topologies introduce many complexities that are not providing a lot of value, given how rarely then end-up being used, outside of quick and useful examples, but for which the performance gain (if any) of using these grids directly instead of using `MeshTopology` or `HexahedronSetTopologyContainer` does not really matter. So in term of maintenance it seems more practical to remove them completely from the codebase, once we have a usable (and simpler) alternative in place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098
https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098:862,Usability,usab,usable,862,"FYI, the decision back in the sofa coding sprint of June 2014 (as fas as I remember), was to remove all `*GridTopology`, in favor of a new design based on `*GridLoader` or `*GridEngine` types of components. A workgroup worked on this topic during the sprint. The associated branch may or may not still exist, but unfortunatly it was not completed and merged back. The rational however is still valid, the current design of those topologies introduce many complexities that are not providing a lot of value, given how rarely then end-up being used, outside of quick and useful examples, but for which the performance gain (if any) of using these grids directly instead of using `MeshTopology` or `HexahedronSetTopologyContainer` does not really matter. So in term of maintenance it seems more practical to remove them completely from the codebase, once we have a usable (and simpler) alternative in place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098
https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098:874,Usability,simpl,simpler,874,"FYI, the decision back in the sofa coding sprint of June 2014 (as fas as I remember), was to remove all `*GridTopology`, in favor of a new design based on `*GridLoader` or `*GridEngine` types of components. A workgroup worked on this topic during the sprint. The associated branch may or may not still exist, but unfortunatly it was not completed and merged back. The rational however is still valid, the current design of those topologies introduce many complexities that are not providing a lot of value, given how rarely then end-up being used, outside of quick and useful examples, but for which the performance gain (if any) of using these grids directly instead of using `MeshTopology` or `HexahedronSetTopologyContainer` does not really matter. So in term of maintenance it seems more practical to remove them completely from the codebase, once we have a usable (and simpler) alternative in place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279689308:150,Usability,feedback,feedback,150,"@hugtalbot unless it is a very important fix, please don't forget to wait a 1 week quarantaine before merging to give an oportunity to anyone to give feedback :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279689308
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:521,Integrability,depend,dependencies,521,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:443,Performance,load,loaded,443,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:510,Performance,load,load,510,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:562,Safety,detect,detection,562,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:107,Usability,feedback,feedback,107,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777
https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:549,Usability,simpl,simple,549,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:744,Availability,reliab,reliable,744,"Hi everyone, Marc here :-). I remember I introduced the `init()` and `cleanup()` functions, so I'll add a few words of explanations. Bear with me, it's actually simpler that the length of my response may suggest. > So unless there is a compelling reason to leave it this way (and I would really like to know it). The trick which consists in using static variables to run dynamic initialization code (or cleanup code, for that matter) is an anti-pattern, for a couple of reasons:. * **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:354,Modifiability,variab,variables,354,"Hi everyone, Marc here :-). I remember I introduced the `init()` and `cleanup()` functions, so I'll add a few words of explanations. Bear with me, it's actually simpler that the length of my response may suggest. > So unless there is a compelling reason to leave it this way (and I would really like to know it). The trick which consists in using static variables to run dynamic initialization code (or cleanup code, for that matter) is an anti-pattern, for a couple of reasons:. * **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:2539,Modifiability,plugin,plugin,2539," of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. @maxime-tournier The CleanupCheck thingy is disposable; it's a just safeguard, a way to tell developpers about the `init()` and `cleanup()` function. You're right, this is almost the last chance to call cleanup(), but no _guarantee_ of correctness. Hope this helps,; Marc Legendre. --. > trying to call `std::exit` in some plugin. _Sweating_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:1796,Performance,load,loaded,1796," of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. @maxime-tournier The CleanupCheck thingy is disposable; it's a just safeguard, a way to tell developpers about the `init()` and `cleanup()` function. You're right, this is almost the last chance to call cleanup(), but no _guarantee_ of correctness. Hope this helps,; Marc Legendre. --. > trying to call `std::exit` in some plugin. _Sweating_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:2284,Safety,safe,safeguard,2284," of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. @maxime-tournier The CleanupCheck thingy is disposable; it's a just safeguard, a way to tell developpers about the `init()` and `cleanup()` function. You're right, this is almost the last chance to call cleanup(), but no _guarantee_ of correctness. Hope this helps,; Marc Legendre. --. > trying to call `std::exit` in some plugin. _Sweating_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:161,Usability,simpl,simpler,161,"Hi everyone, Marc here :-). I remember I introduced the `init()` and `cleanup()` functions, so I'll add a few words of explanations. Bear with me, it's actually simpler that the length of my response may suggest. > So unless there is a compelling reason to leave it this way (and I would really like to know it). The trick which consists in using static variables to run dynamic initialization code (or cleanup code, for that matter) is an anti-pattern, for a couple of reasons:. * **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:1969,Usability,simpl,simply,1969," of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. @maxime-tournier The CleanupCheck thingy is disposable; it's a just safeguard, a way to tell developpers about the `init()` and `cleanup()` function. You're right, this is almost the last chance to call cleanup(), but no _guarantee_ of correctness. Hope this helps,; Marc Legendre. --. > trying to call `std::exit` in some plugin. _Sweating_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:353,Availability,reliab,reliable,353,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:1614,Availability,error,error-prone,1614,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:677,Modifiability,variab,variable,677,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:928,Modifiability,variab,variables,928,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:839,Performance,load,loaded,839,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:966,Safety,safe,safe,966,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:1589,Safety,safe,safe,1589,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:38,Usability,feedback,feedback,38,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722:778,Integrability,message,message,778,"I like the simplicity of your proposal, however the macro trick (does it work with clang ?) could be avoided if we decide some different names for the macro, like . msg_info () << ""Implicit 'this'""; // keep that one, the most common . msg_info_component ( this ) << ""Explicit""; // or s.t. else shorter ; msg_info_name ( "" Something else "" ) << ""Hep""; // I think that one is mostly used in python, should it be exposed in c++ as a macro ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 16 Février 2017 13:54:11; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > About a possible implementation for the following syntax:; > msg_info () << ""Implicit 'this'""; msg_info ( this ) << ""Explicit""; msg_info (; > "" Something else "" ) << ""Hep"";. > I finally have one that seems to work on gcc and on visual studio.; > You can try it one-line at: http://www.cpp.sh/3xvfk. > I have a question to you @matthieu-nesme , @thomas-lemaire , @nurbal . I; > really like the implicit version but at the same time I fear using complex; > MACRO trick. What do you think ?. > DM. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722:101,Safety,avoid,avoided,101,"I like the simplicity of your proposal, however the macro trick (does it work with clang ?) could be avoided if we decide some different names for the macro, like . msg_info () << ""Implicit 'this'""; // keep that one, the most common . msg_info_component ( this ) << ""Explicit""; // or s.t. else shorter ; msg_info_name ( "" Something else "" ) << ""Hep""; // I think that one is mostly used in python, should it be exposed in c++ as a macro ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 16 Février 2017 13:54:11; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > About a possible implementation for the following syntax:; > msg_info () << ""Implicit 'this'""; msg_info ( this ) << ""Explicit""; msg_info (; > "" Something else "" ) << ""Hep"";. > I finally have one that seems to work on gcc and on visual studio.; > You can try it one-line at: http://www.cpp.sh/3xvfk. > I have a question to you @matthieu-nesme , @thomas-lemaire , @nurbal . I; > really like the implicit version but at the same time I fear using complex; > MACRO trick. What do you think ?. > DM. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722:410,Security,expose,exposed,410,"I like the simplicity of your proposal, however the macro trick (does it work with clang ?) could be avoided if we decide some different names for the macro, like . msg_info () << ""Implicit 'this'""; // keep that one, the most common . msg_info_component ( this ) << ""Explicit""; // or s.t. else shorter ; msg_info_name ( "" Something else "" ) << ""Hep""; // I think that one is mostly used in python, should it be exposed in c++ as a macro ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 16 Février 2017 13:54:11; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > About a possible implementation for the following syntax:; > msg_info () << ""Implicit 'this'""; msg_info ( this ) << ""Explicit""; msg_info (; > "" Something else "" ) << ""Hep"";. > I finally have one that seems to work on gcc and on visual studio.; > You can try it one-line at: http://www.cpp.sh/3xvfk. > I have a question to you @matthieu-nesme , @thomas-lemaire , @nurbal . I; > really like the implicit version but at the same time I fear using complex; > MACRO trick. What do you think ?. > DM. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722:11,Usability,simpl,simplicity,11,"I like the simplicity of your proposal, however the macro trick (does it work with clang ?) could be avoided if we decide some different names for the macro, like . msg_info () << ""Implicit 'this'""; // keep that one, the most common . msg_info_component ( this ) << ""Explicit""; // or s.t. else shorter ; msg_info_name ( "" Something else "" ) << ""Hep""; // I think that one is mostly used in python, should it be exposed in c++ as a macro ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 16 Février 2017 13:54:11; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > About a possible implementation for the following syntax:; > msg_info () << ""Implicit 'this'""; msg_info ( this ) << ""Explicit""; msg_info (; > "" Something else "" ) << ""Hep"";. > I finally have one that seems to work on gcc and on visual studio.; > You can try it one-line at: http://www.cpp.sh/3xvfk. > I have a question to you @matthieu-nesme , @thomas-lemaire , @nurbal . I; > really like the implicit version but at the same time I fear using complex; > MACRO trick. What do you think ?. > DM. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493:103,Integrability,message,message,103,"at least I would push for simplicity here, like if msgInfoLevel==InfoMessageLevel::MUTED, then no info message goes to the component stack, ; when using: ; msg_info () << ""I print if I am not muted"" ; . the _when version can be kept for fine tuning (I personally find it overkill) . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 17 Février 2017 13:21:47; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > Almost done... the f_printLog stuff is replaced with d_msgInfoLevel.; > Backward compatibility is implemented as well as deprecation warning. > This allow to write the follow things:; > msg_info_when ( d_msgInfoLevel.getValue() != InfoMessageLevel::MUTED ) << ""I; > print often"" ; msg_info_when ( d_msgInfoLevel.getValue() !=; > InfoMessageLevel::MUTED ) << ""I print often"" ;. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493:624,Integrability,message,message,624,"at least I would push for simplicity here, like if msgInfoLevel==InfoMessageLevel::MUTED, then no info message goes to the component stack, ; when using: ; msg_info () << ""I print if I am not muted"" ; . the _when version can be kept for fine tuning (I personally find it overkill) . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 17 Février 2017 13:21:47; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > Almost done... the f_printLog stuff is replaced with d_msgInfoLevel.; > Backward compatibility is implemented as well as deprecation warning. > This allow to write the follow things:; > msg_info_when ( d_msgInfoLevel.getValue() != InfoMessageLevel::MUTED ) << ""I; > print often"" ; msg_info_when ( d_msgInfoLevel.getValue() !=; > InfoMessageLevel::MUTED ) << ""I print often"" ;. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493
https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493:26,Usability,simpl,simplicity,26,"at least I would push for simplicity here, like if msgInfoLevel==InfoMessageLevel::MUTED, then no info message goes to the component stack, ; when using: ; msg_info () << ""I print if I am not muted"" ; . the _when version can be kept for fine tuning (I personally find it overkill) . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 17 Février 2017 13:21:47; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > Almost done... the f_printLog stuff is replaced with d_msgInfoLevel.; > Backward compatibility is implemented as well as deprecation warning. > This allow to write the follow things:; > msg_info_when ( d_msgInfoLevel.getValue() != InfoMessageLevel::MUTED ) << ""I; > print often"" ; msg_info_when ( d_msgInfoLevel.getValue() !=; > InfoMessageLevel::MUTED ) << ""I print often"" ;. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493
https://github.com/sofa-framework/sofa/pull/182#issuecomment-280387227:334,Usability,guid,guide,334,"Hi @ewpostek . Thank you for getting involved in the SOFA community!; Unfortunately, this pull request is not well formatted. It is a merge of our master on our v16.08 and does not contain any commit from you. ; I think that what you wanted to do was to propose a change on our master branch. I invite you to **read [our CONTRIBUTING guide](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md)** and create a new pull request when you are ready.; If you have questions, do not hesitate to reply here. For now, I close this one (discussion is still possible). Cheers,; Guillaume.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/182#issuecomment-280387227
https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:301,Deployability,update,updates,301,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576
https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:16,Energy Efficiency,schedul,schedule,16,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576
https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:57,Integrability,synchroniz,synchronize,57,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576
https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:317,Testability,test,tests,317,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576
https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:240,Usability,clear,clearly,240,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576
https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457:304,Deployability,release,release,304,Hi all. @EulalieCoevoet @epernod @matthieu-nesme @thomas-lemaire @hugtalbot @guparan @fredroy . I suggest we use this issue for general communication about what is happening on the UX group either on github and/or on gitlab. . Please tell anyone interested to join/. Our general target for the next sofa release (17.06) is to ship a runSofa2 application. ; This means we only have less than 3 month. ; I suggest that in April & first day of May we add the missing features and we keep the last month to test and bug fix the software. . DM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457
https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457:503,Testability,test,test,503,Hi all. @EulalieCoevoet @epernod @matthieu-nesme @thomas-lemaire @hugtalbot @guparan @fredroy . I suggest we use this issue for general communication about what is happening on the UX group either on github and/or on gitlab. . Please tell anyone interested to join/. Our general target for the next sofa release (17.06) is to ship a runSofa2 application. ; This means we only have less than 3 month. ; I suggest that in April & first day of May we add the missing features and we keep the last month to test and bug fix the software. . DM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457
https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457:181,Usability,UX,UX,181,Hi all. @EulalieCoevoet @epernod @matthieu-nesme @thomas-lemaire @hugtalbot @guparan @fredroy . I suggest we use this issue for general communication about what is happening on the UX group either on github and/or on gitlab. . Please tell anyone interested to join/. Our general target for the next sofa release (17.06) is to ship a runSofa2 application. ; This means we only have less than 3 month. ; I suggest that in April & first day of May we add the missing features and we keep the last month to test and bug fix the software. . DM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:1206,Energy Efficiency,green,green,1206,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:261,Integrability,message,messages,261,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:793,Integrability,message,messages,793,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:1084,Integrability,message,messages,1084,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:1149,Integrability,message,message,1149,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:1266,Integrability,message,message,1266,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:285,Usability,simpl,simple,285,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:1447,Energy Efficiency,green,green,1447,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:380,Integrability,message,message,380,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:673,Integrability,message,messages,673,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:1188,Integrability,message,messages,1188,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:1320,Integrability,message,messages,1320,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:1389,Integrability,message,message,1389,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:1509,Integrability,message,message,1509,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:369,Testability,log,logging,369,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:700,Usability,simpl,simple,700,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2308,Availability,error,error,2308,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1131,Deployability,install,installed,1131,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1749,Deployability,release,release,1749,"ow fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1152,Integrability,rout,routing,1152,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1164,Integrability,message,message,1164,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1203,Integrability,message,message,1203,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1387,Integrability,message,message,1387,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1438,Integrability,rout,routed,1438,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1545,Integrability,message,message,1545,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1624,Integrability,message,message,1624,"time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2171,Integrability,message,message,2171,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2222,Integrability,rout,routed,2222,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2252,Integrability,depend,depending,2252,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2677,Integrability,message,message,2677,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2739,Integrability,message,message,2739,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2866,Integrability,message,message,2866,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:77,Safety,avoid,avoid,77,"Hi @matthieu-nesme . Thanks for your feedback, I really did my best on it to avoid as much as possible trouble. I suggest to cut this PR in several part (haha) to remove the Flexible/Compliant files from the changes, this woud make the move much smooth. . This will give you time to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1428,Testability,log,logger,1428,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2212,Testability,log,logger,2212,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2840,Testability,test,tests,2840,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2948,Testability,test,test,2948,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:37,Usability,feedback,feedback,37,"Hi @matthieu-nesme . Thanks for your feedback, I really did my best on it to avoid as much as possible trouble. I suggest to cut this PR in several part (haha) to remove the Flexible/Compliant files from the changes, this woud make the move much smooth. . This will give you time to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960
https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155:126,Testability,test,tests,126,"Did not have time to start this yet. 😢 ; As discussed last wednesday, the idea would be to simply `cat` the output of crashed tests during the `print-summary()` phases (for unit tests and scene tests). So only scripts stuff.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155
https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155:178,Testability,test,tests,178,"Did not have time to start this yet. 😢 ; As discussed last wednesday, the idea would be to simply `cat` the output of crashed tests during the `print-summary()` phases (for unit tests and scene tests). So only scripts stuff.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155
https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155:194,Testability,test,tests,194,"Did not have time to start this yet. 😢 ; As discussed last wednesday, the idea would be to simply `cat` the output of crashed tests during the `print-summary()` phases (for unit tests and scene tests). So only scripts stuff.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155
https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155:91,Usability,simpl,simply,91,"Did not have time to start this yet. 😢 ; As discussed last wednesday, the idea would be to simply `cat` the output of crashed tests during the `print-summary()` phases (for unit tests and scene tests). So only scripts stuff.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155
https://github.com/sofa-framework/sofa/issues/193#issuecomment-284732397:93,Usability,clear,clear,93,"I see, thanks to have a look at it.; Au secours encore un reinit! ;). Could we find a way to clear/empty the python environment rather than deleting and creating a new one?. I guess the numpy problem comes from PythonEnvironment.cpp:70 ^^",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284732397
https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:114,Deployability,install,install,114,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694
https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:94,Performance,load,loaded,94,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694
https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:289,Performance,cache,cache,289,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694
https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:366,Performance,load,loading,366,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694
https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:38,Usability,simpl,simple,38,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694
https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:667,Usability,clear,cleared,667,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694
https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958:511,Availability,error,error,511,"@damienmarchal I added a `UnableToOpenFile()` function and modified ""MeshTrian.cpp"" accordingly, for now. Could you check if I am in right direction? If I am, I would follow up with changes in other loader and components. **Caution**: I couldn't test if it actually works! Because, a function `findfile(filename)` exists to check if file exists. So, to make `fopen()` purposely fail, even after supplying correct filename, I tried changing permissions with `chmod uga-r MeshTrian.cpp`, but it didn't report any error even with sofa's official master version. I tried couple other ways to purposely fail `fopen()` but they didn't work. Anyway, since the code looked fine, and to receive feedback, I will make a PR shortly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958
https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958:199,Performance,load,loader,199,"@damienmarchal I added a `UnableToOpenFile()` function and modified ""MeshTrian.cpp"" accordingly, for now. Could you check if I am in right direction? If I am, I would follow up with changes in other loader and components. **Caution**: I couldn't test if it actually works! Because, a function `findfile(filename)` exists to check if file exists. So, to make `fopen()` purposely fail, even after supplying correct filename, I tried changing permissions with `chmod uga-r MeshTrian.cpp`, but it didn't report any error even with sofa's official master version. I tried couple other ways to purposely fail `fopen()` but they didn't work. Anyway, since the code looked fine, and to receive feedback, I will make a PR shortly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958
https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958:246,Testability,test,test,246,"@damienmarchal I added a `UnableToOpenFile()` function and modified ""MeshTrian.cpp"" accordingly, for now. Could you check if I am in right direction? If I am, I would follow up with changes in other loader and components. **Caution**: I couldn't test if it actually works! Because, a function `findfile(filename)` exists to check if file exists. So, to make `fopen()` purposely fail, even after supplying correct filename, I tried changing permissions with `chmod uga-r MeshTrian.cpp`, but it didn't report any error even with sofa's official master version. I tried couple other ways to purposely fail `fopen()` but they didn't work. Anyway, since the code looked fine, and to receive feedback, I will make a PR shortly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958
https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958:686,Usability,feedback,feedback,686,"@damienmarchal I added a `UnableToOpenFile()` function and modified ""MeshTrian.cpp"" accordingly, for now. Could you check if I am in right direction? If I am, I would follow up with changes in other loader and components. **Caution**: I couldn't test if it actually works! Because, a function `findfile(filename)` exists to check if file exists. So, to make `fopen()` purposely fail, even after supplying correct filename, I tried changing permissions with `chmod uga-r MeshTrian.cpp`, but it didn't report any error even with sofa's official master version. I tried couple other ways to purposely fail `fopen()` but they didn't work. Anyway, since the code looked fine, and to receive feedback, I will make a PR shortly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958
https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641:164,Integrability,depend,depends,164,"Thanks a lot for being able to solve that because it has been a pain in the ass for too long!. But please, remove all that stuff about plugin reinit!!! Moreover it depends on the app/gui implementation, it is not satisfying. I think a simple workaround would do the job in PythonEnvironment::Init():; `; PyRun_SimpleString(""; try: __SofaPython_mainenvironment__.uninstall(); except: __SofaPython_mainenvironment__=ImportFrame()"");; `; (approximative code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641
https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641:135,Modifiability,plugin,plugin,135,"Thanks a lot for being able to solve that because it has been a pain in the ass for too long!. But please, remove all that stuff about plugin reinit!!! Moreover it depends on the app/gui implementation, it is not satisfying. I think a simple workaround would do the job in PythonEnvironment::Init():; `; PyRun_SimpleString(""; try: __SofaPython_mainenvironment__.uninstall(); except: __SofaPython_mainenvironment__=ImportFrame()"");; `; (approximative code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641
https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641:235,Usability,simpl,simple,235,"Thanks a lot for being able to solve that because it has been a pain in the ass for too long!. But please, remove all that stuff about plugin reinit!!! Moreover it depends on the app/gui implementation, it is not satisfying. I think a simple workaround would do the job in PythonEnvironment::Init():; `; PyRun_SimpleString(""; try: __SofaPython_mainenvironment__.uninstall(); except: __SofaPython_mainenvironment__=ImportFrame()"");; `; (approximative code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641
https://github.com/sofa-framework/sofa/pull/202#issuecomment-286384827:110,Usability,simpl,simply,110,You are right (once again).; I just pushed a new proposition where nothing is done in your back anymore.; You simply have to call `SofaPython.unloadModules()` manually where you want unload the modules.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286384827
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:239,Deployability,update,update,239,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:134,Integrability,message,messages,134,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:254,Testability,test,tests,254,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:351,Testability,test,test,351,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:369,Usability,simpl,simply,369,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:201,Availability,error,errors,201,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:321,Availability,error,error,321,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:425,Availability,error,error,425,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:439,Availability,failure,failure,439,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:978,Availability,failure,failure,978,"ion. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warnin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1520,Availability,error,errors,1520,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1553,Availability,error,error,1553,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1120,Integrability,message,message,1120,"ion. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warnin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1576,Integrability,message,messages,1576,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:2039,Integrability,message,message,2039,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:291,Safety,avoid,avoid,291,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:300,Safety,detect,detected,300,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1396,Security,expose,expose,1396,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:66,Testability,test,test,66,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:137,Testability,test,tests,137,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:264,Testability,test,tests,264,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:434,Testability,test,test,434,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:482,Testability,test,tests,482,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:528,Testability,test,tests,528,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:698,Testability,test,test,698,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:724,Testability,test,test,724,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:814,Testability,test,tests,814,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:897,Testability,test,testing,897,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:926,Testability,test,testing,926,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:973,Testability,test,test,973,"ion. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warnin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1084,Testability,test,test,1084,"ion. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warnin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1204,Testability,test,testReport,1204,"n they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/Da",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1820,Testability,test,testReport,1820,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1946,Testability,test,test,1946,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:2180,Testability,test,testReport,2180,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:839,Usability,clear,clear,839,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:304,Availability,error,errors,304,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:407,Availability,error,errors,407,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:434,Availability,error,error,434,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:586,Modifiability,plugin,plugins,586,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:886,Modifiability,flexible,flexible,886,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:191,Testability,test,tests,191,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:477,Testability,test,tests,477,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:531,Testability,test,tests,531,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:573,Testability,test,tests,573,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:614,Testability,test,tests,614,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:935,Testability,test,test,935,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:1015,Usability,clear,clear,1015,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630
https://github.com/sofa-framework/sofa/pull/213#issuecomment-290018588:133,Safety,redund,redundency,133,"Thanks @matthieu-nesme for the feedbacks and discussions. . About the implementation I agree there is some smoothing to do (there is redundency in the classes, the constructors with std::initializer are now useless as vs2013 don't like them)... But I would be happy to have that happens in a second PR as I think I can change this without touching the API :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-290018588
https://github.com/sofa-framework/sofa/pull/213#issuecomment-290018588:31,Usability,feedback,feedbacks,31,"Thanks @matthieu-nesme for the feedbacks and discussions. . About the implementation I agree there is some smoothing to do (there is redundency in the classes, the constructors with std::initializer are now useless as vs2013 don't like them)... But I would be happy to have that happens in a second PR as I think I can change this without touching the API :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-290018588
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:6,Availability,failure,failure,6,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:428,Availability,failure,failure,428,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:754,Availability,error,error,754,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:848,Deployability,update,update,848,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:183,Integrability,message,messages,183,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:760,Integrability,message,message,760,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:134,Testability,test,tests,134,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:272,Testability,test,test,272,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:454,Testability,test,test,454,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:565,Testability,test,testing,565,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:600,Testability,test,tests,600,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:685,Testability,test,test,685,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:788,Usability,clear,clear,788,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:875,Usability,clear,clear,875,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:839,Availability,failure,failures,839,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1092,Availability,failure,failures,1092,"ly one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1317,Availability,failure,failures,1317,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1379,Availability,failure,failures,1379,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1568,Availability,failure,failure,1568,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1792,Availability,down,down,1792,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1801,Availability,failure,failure,1801,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:2099,Availability,failure,failure,2099,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:535,Integrability,message,message,535,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1127,Integrability,message,messages,1127,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1497,Integrability,message,message,1497,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:318,Testability,test,tests,318,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:574,Testability,test,tests,574,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:737,Testability,test,test,737,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:833,Testability,test,tests,833,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1087,Testability,test,test,1087,"ly one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1311,Testability,test,tests,1311,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1350,Testability,test,test,1350,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1480,Testability,test,test,1480,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1882,Testability,test,test,1882,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:2078,Testability,test,tests,2078,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:486,Usability,clear,clear,486,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008
https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542:12,Testability,test,tests,12,"The failing tests were mainly due to a unintended side effect that projective constraints were no longer applied at the end of Simulation::init(). To make sure similar issues were not hidden somewhere else, in the last commit I renamed the propagate visitor to make sure existing codes fail at compilation time. Fixing other codes in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. This information should be added to the changelog, but as far as I understood this needs to be done after the PR is merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542
https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542:425,Usability,simpl,simply,425,"The failing tests were mainly due to a unintended side effect that projective constraints were no longer applied at the end of Simulation::init(). To make sure similar issues were not hidden somewhere else, in the last commit I renamed the propagate visitor to make sure existing codes fail at compilation time. Fixing other codes in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. This information should be added to the changelog, but as far as I understood this needs to be done after the PR is merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542
https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705:174,Deployability,integrat,integrate,174,"Hello @JeremieA, the current approach about the changelog management is to have a description of the changes in the PR's description so that @guparan & @hugtalbot can easily integrate them into the CHANGELOG.md file in a (more or less :)) weekly basis. . You can add a dedicated CHANGELOG section in the PR description in which there is a summary of the changes and, in case of behavior or API changes, the mecanism used to notify other's and minimal guideline/example on how they should fix their code. You already provided this informations into the comments feeds...but, having that in the comments feed makes them hard to find so it is better if all that is summarized. . EDIT: I just updated the PR description up to my understanding.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705
https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705:689,Deployability,update,updated,689,"Hello @JeremieA, the current approach about the changelog management is to have a description of the changes in the PR's description so that @guparan & @hugtalbot can easily integrate them into the CHANGELOG.md file in a (more or less :)) weekly basis. . You can add a dedicated CHANGELOG section in the PR description in which there is a summary of the changes and, in case of behavior or API changes, the mecanism used to notify other's and minimal guideline/example on how they should fix their code. You already provided this informations into the comments feeds...but, having that in the comments feed makes them hard to find so it is better if all that is summarized. . EDIT: I just updated the PR description up to my understanding.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705
https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705:174,Integrability,integrat,integrate,174,"Hello @JeremieA, the current approach about the changelog management is to have a description of the changes in the PR's description so that @guparan & @hugtalbot can easily integrate them into the CHANGELOG.md file in a (more or less :)) weekly basis. . You can add a dedicated CHANGELOG section in the PR description in which there is a summary of the changes and, in case of behavior or API changes, the mecanism used to notify other's and minimal guideline/example on how they should fix their code. You already provided this informations into the comments feeds...but, having that in the comments feed makes them hard to find so it is better if all that is summarized. . EDIT: I just updated the PR description up to my understanding.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705
https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705:451,Usability,guid,guideline,451,"Hello @JeremieA, the current approach about the changelog management is to have a description of the changes in the PR's description so that @guparan & @hugtalbot can easily integrate them into the CHANGELOG.md file in a (more or less :)) weekly basis. . You can add a dedicated CHANGELOG section in the PR description in which there is a summary of the changes and, in case of behavior or API changes, the mecanism used to notify other's and minimal guideline/example on how they should fix their code. You already provided this informations into the comments feeds...but, having that in the comments feed makes them hard to find so it is better if all that is summarized. . EDIT: I just updated the PR description up to my understanding.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705
https://github.com/sofa-framework/sofa/pull/218#issuecomment-292125250:13,Usability,simpl,simply,13,"I propose to simply remove the `projectForce` Data from this PR, as this debug feature is not essential, and you have it in your own fork.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-292125250
https://github.com/sofa-framework/sofa/pull/218#issuecomment-453789725:40,Usability,simpl,simpler,40,Let's see if we can make it cleaner and simpler!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-453789725
https://github.com/sofa-framework/sofa/pull/218#issuecomment-456727444:110,Usability,feedback,feedback,110,"@fjourdes and @ChristianDuriez I think this comes from the collaboration between you guys.; Last moment for a feedback before merge, thx",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-456727444
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:100,Availability,error,errors,100,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:130,Safety,abort,abort,130,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:140,Testability,test,test,140,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:212,Testability,log,logging,212,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:255,Testability,test,tests,255,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:123,Usability,simpl,simply,123,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:131,Deployability,continuous,continuous,131,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:54,Integrability,message,message,54,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:94,Safety,timeout,timeout,94,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:11,Testability,test,tests,11,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:74,Usability,intuit,intuition,74,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:309,Modifiability,config,configured,309,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:13,Safety,timeout,timeout,13,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:37,Safety,timeout,timeout,37,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:225,Safety,timeout,timeout,225,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:301,Safety,timeout,timeout,301,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:411,Safety,timeout,timeout,411,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:457,Safety,timeout,timeout,457,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:686,Safety,detect,detect,686,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:198,Testability,log,logics,198,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:373,Testability,test,test,373,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:554,Testability,log,log,554,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:669,Testability,log,log,669,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:154,Usability,clear,clearly,154,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117
https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:199,Safety,safe,safe,199,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132
https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:229,Safety,safe,safe,229,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132
https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:103,Security,validat,validated,103,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132
https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:163,Security,validat,validation,163,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132
https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:17,Testability,test,tests,17,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132
https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:288,Usability,guid,guidelines,288,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132
https://github.com/sofa-framework/sofa/issues/234#issuecomment-291500471:50,Usability,simpl,simply,50,"@guparan it was there and ""already in the path"" I simply dropped ninja in it :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/234#issuecomment-291500471
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:688,Deployability,update,update,688,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:855,Deployability,configurat,configuration,855,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:22,Integrability,depend,dependency,22,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:536,Modifiability,variab,variable,536,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:714,Modifiability,variab,variable,714,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:825,Modifiability,variab,variables,825,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:855,Modifiability,config,configuration,855,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:2378,Usability,simpl,simply,2378,"he topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implementation of `PointSetTopologyContainer`, which can only contain set of contiguous indices ( e.g 0 1 2 3 4 5 ... ) and not any sub set of indices ( e.g 2 6 8 9 12) unlike the other TopologyContainers.; This would lead to at least two clarifications : ; - some forcefields specify the list of the dof indices they contribute to, it would no longer be necessary to do so, they would simply fetch the list of point indices they are supposed to work on from the closest `PointSetTopologyContainer`; - `SubsetMapping` would be deprecated, ( and not `SubsetMultiMapping` which has some other purpose ), since it would be only necessary to describe the point subset of interest that needs to be considered.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672
https://github.com/sofa-framework/sofa/pull/243#issuecomment-312803016:15,Usability,clear,clear,15,"Thanks for the clear answer, . I'm afraid that if no one spend time on fixing this issue, the whole PR will wait for an un-defined amount of time. ; On my side I'm fully booked.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-312803016
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1061,Deployability,update,updated,1061,"Hello,. Before I explain the bug, let me give a bit of context (it is a bit long, but I hope it is useful ;)). The point of this change was to make it transparent which topology is used by which state, and allow for correct initialization and most importantly topological changes propagation. One issue with the initial implementation, associating a state to the first topology found in its parents and then ignoring it if it is not in the same context (hopefully in all codes using state->m_topology, but who checked?), is that this make it impossible to share the same topology (and topological changes) with multiple states in different (children) nodes. One such example is when you use an IdentityMapping (or a Rigid <-> Vec3 mapping or any other mapping that produce the same number of outputs as its inputs), previously to get correct topology association and changes propagation you would need to replicate the topology (and the topological mappings) with a topology both before and after the mapping (but beware if they end up with different sizes, or updated in the wrong order...). With our changes, there is a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:2237,Safety,safe,safe,2237,"a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1714,Testability,test,tested,1714,"pping that produce the same number of outputs as its inputs), previously to get correct topology association and changes propagation you would need to replicate the topology (and the topological mappings) with a topology both before and after the mapping (but beware if they end up with different sizes, or updated in the wrong order...). With our changes, there is a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1997,Testability,log,logic,1997,"a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:3622,Testability,assert,asserted,3622,"ate was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, allowing to go to the parent to find a topology. It assumes that the Mapping in the root node is there to write to the state/topology of the root node, so it is not considered as something that would block the topology to remain active. Hence the wrong link being created, and the bug. The fix (beaaaf5) is a simple one-line change in MappingTest, creating the mapping in childNode instead of root, which should have been the case to respect Sofa's conventions (but which are unfortunately not checked/asserted by anyone). Hopefully all is well now. It's difficult to know for sure because not-disabled tests are still failing on my computer (but they are also failing on the master...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:3723,Testability,test,tests,3723,"ate was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, allowing to go to the parent to find a topology. It assumes that the Mapping in the root node is there to write to the state/topology of the root node, so it is not considered as something that would block the topology to remain active. Hence the wrong link being created, and the bug. The fix (beaaaf5) is a simple one-line change in MappingTest, creating the mapping in childNode instead of root, which should have been the case to respect Sofa's conventions (but which are unfortunately not checked/asserted by anyone). Hopefully all is well now. It's difficult to know for sure because not-disabled tests are still failing on my computer (but they are also failing on the master...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1122,Usability,clear,clear,1122," by which state, and allow for correct initialization and most importantly topological changes propagation. One issue with the initial implementation, associating a state to the first topology found in its parents and then ignoring it if it is not in the same context (hopefully in all codes using state->m_topology, but who checked?), is that this make it impossible to share the same topology (and topological changes) with multiple states in different (children) nodes. One such example is when you use an IdentityMapping (or a Rigid <-> Vec3 mapping or any other mapping that produce the same number of outputs as its inputs), previously to get correct topology association and changes propagation you would need to replicate the topology (and the topological mappings) with a topology both before and after the mapping (but beware if they end up with different sizes, or updated in the wrong order...). With our changes, there is a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:3429,Usability,simpl,simple,3429,"ate was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, allowing to go to the parent to find a topology. It assumes that the Mapping in the root node is there to write to the state/topology of the root node, so it is not considered as something that would block the topology to remain active. Hence the wrong link being created, and the bug. The fix (beaaaf5) is a simple one-line change in MappingTest, creating the mapping in childNode instead of root, which should have been the case to respect Sofa's conventions (but which are unfortunately not checked/asserted by anyone). Hopefully all is well now. It's difficult to know for sure because not-disabled tests are still failing on my computer (but they are also failing on the master...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201
https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346:148,Modifiability,refactor,refactoring,148,"Indeed, the naming is therefore pretty inappropriate, we will follow your guidelines ;); Thank you very much @matthieu-nesme . Isn't there a way of refactoring (inheritance) these components ? it would make things easier to understand, no?; Just curious, in which case the SpringForceField can be really useful ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346
https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346:161,Modifiability,inherit,inheritance,161,"Indeed, the naming is therefore pretty inappropriate, we will follow your guidelines ;); Thank you very much @matthieu-nesme . Isn't there a way of refactoring (inheritance) these components ? it would make things easier to understand, no?; Just curious, in which case the SpringForceField can be really useful ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346
https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346:74,Usability,guid,guidelines,74,"Indeed, the naming is therefore pretty inappropriate, we will follow your guidelines ;); Thank you very much @matthieu-nesme . Isn't there a way of refactoring (inheritance) these components ? it would make things easier to understand, no?; Just curious, in which case the SpringForceField can be really useful ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346
https://github.com/sofa-framework/sofa/pull/250#issuecomment-300176048:38,Usability,simpl,simplify,38,I guess lowercasing on windows was to simplify path comparisons (using string comparison). Be careful not to break something else while removing it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250#issuecomment-300176048
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:232,Availability,down,downside,232,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:362,Availability,avail,available,362,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:2010,Availability,recover,recover,2010," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1194,Deployability,install,installed,1194,"not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1253,Deployability,deploy,deploy,1253,"not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1422,Deployability,install,install,1422," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1702,Deployability,configurat,configuration,1702," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1732,Deployability,configurat,configuration,1732," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:116,Modifiability,plugin,plugin,116,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:164,Modifiability,plugin,plugin,164,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:286,Modifiability,plugin,plugin,286,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:372,Modifiability,plugin,plugins,372,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:549,Modifiability,variab,variables,549,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:742,Modifiability,plugin,plugins,742,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:841,Modifiability,plugin,plugin,841,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1663,Modifiability,plugin,plugin,1663," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1702,Modifiability,config,configuration,1702," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1732,Modifiability,config,configuration,1732," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1891,Modifiability,plugin,plugins,1891," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1920,Modifiability,config,config,1920," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:2186,Modifiability,plugin,plugin,2186," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:128,Performance,load,loadable,128,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:254,Performance,load,load,254,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:301,Performance,load,loadable,301,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:349,Performance,load,load,349,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:759,Performance,load,loaded,759,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1066,Performance,load,load,1066,"ic symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ``",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1682,Performance,load,load,1682," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:2010,Safety,recover,recover,2010," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:990,Security,expose,exposed,990,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1695,Usability,simpl,simple,1695," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:1028,Deployability,configurat,configuration,1028,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:458,Modifiability,plugin,plugin,458,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:1028,Modifiability,config,configuration,1028,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:1048,Modifiability,plugin,plugins,1048,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:1171,Modifiability,plugin,plugin,1171,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:1202,Modifiability,plugin,plugin,1202,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:670,Performance,load,loaded,670,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:942,Performance,load,loaded,942,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:1014,Performance,load,loaded,1014,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:37,Usability,feedback,feedback,37,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:134,Usability,usab,usability,134,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257
https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342:340,Safety,avoid,avoid,340,"@fredroy, welcome back, . When I'm in this situation here is my workflow: . If it is really important for other to see my progress, or have multiple person commiting in the branh and have systematic feedback from the CI...I let the PR open with the pr:wip tag as guillaume answered. . Otherwise, if I prefer less publicity on the work (and avoid the PR to stay for month in the wip status) I close the PR, then open a new issue sumerizing & centralizing the discussion and I continue working in the closed PR. If from time to time if I need CI's feedback I re-open the closed PR for few hours..then close it back again until I really think this is a work nearly done.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342
https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342:199,Usability,feedback,feedback,199,"@fredroy, welcome back, . When I'm in this situation here is my workflow: . If it is really important for other to see my progress, or have multiple person commiting in the branh and have systematic feedback from the CI...I let the PR open with the pr:wip tag as guillaume answered. . Otherwise, if I prefer less publicity on the work (and avoid the PR to stay for month in the wip status) I close the PR, then open a new issue sumerizing & centralizing the discussion and I continue working in the closed PR. If from time to time if I need CI's feedback I re-open the closed PR for few hours..then close it back again until I really think this is a work nearly done.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342
https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342:546,Usability,feedback,feedback,546,"@fredroy, welcome back, . When I'm in this situation here is my workflow: . If it is really important for other to see my progress, or have multiple person commiting in the branh and have systematic feedback from the CI...I let the PR open with the pr:wip tag as guillaume answered. . Otherwise, if I prefer less publicity on the work (and avoid the PR to stay for month in the wip status) I close the PR, then open a new issue sumerizing & centralizing the discussion and I continue working in the closed PR. If from time to time if I need CI's feedback I re-open the closed PR for few hours..then close it back again until I really think this is a work nearly done.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342
https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603:369,Availability,down,downside,369,"One simple solution, it to add [Base::checkDataValidity()](url). Its call would be let to the application.; For example, runSofa would call it right before `init` and `reinit`, but a more specific application could chose not to call it not to add over-cost. Note that high level checkers could be implemented (such as `check_it_is_a_valid_vector_of_indices`, ...). The downside is how to perform the check on a single Data rather than at the component level? But maybe it would be way sufficient for what we attend to do?; To perform the test at the Data level, we need to differentiate Data modification coming from a user vs coming from a computation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603
https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603:388,Performance,perform,perform,388,"One simple solution, it to add [Base::checkDataValidity()](url). Its call would be let to the application.; For example, runSofa would call it right before `init` and `reinit`, but a more specific application could chose not to call it not to add over-cost. Note that high level checkers could be implemented (such as `check_it_is_a_valid_vector_of_indices`, ...). The downside is how to perform the check on a single Data rather than at the component level? But maybe it would be way sufficient for what we attend to do?; To perform the test at the Data level, we need to differentiate Data modification coming from a user vs coming from a computation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603
https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603:526,Performance,perform,perform,526,"One simple solution, it to add [Base::checkDataValidity()](url). Its call would be let to the application.; For example, runSofa would call it right before `init` and `reinit`, but a more specific application could chose not to call it not to add over-cost. Note that high level checkers could be implemented (such as `check_it_is_a_valid_vector_of_indices`, ...). The downside is how to perform the check on a single Data rather than at the component level? But maybe it would be way sufficient for what we attend to do?; To perform the test at the Data level, we need to differentiate Data modification coming from a user vs coming from a computation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603
https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603:538,Testability,test,test,538,"One simple solution, it to add [Base::checkDataValidity()](url). Its call would be let to the application.; For example, runSofa would call it right before `init` and `reinit`, but a more specific application could chose not to call it not to add over-cost. Note that high level checkers could be implemented (such as `check_it_is_a_valid_vector_of_indices`, ...). The downside is how to perform the check on a single Data rather than at the component level? But maybe it would be way sufficient for what we attend to do?; To perform the test at the Data level, we need to differentiate Data modification coming from a user vs coming from a computation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603
https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603:4,Usability,simpl,simple,4,"One simple solution, it to add [Base::checkDataValidity()](url). Its call would be let to the application.; For example, runSofa would call it right before `init` and `reinit`, but a more specific application could chose not to call it not to add over-cost. Note that high level checkers could be implemented (such as `check_it_is_a_valid_vector_of_indices`, ...). The downside is how to perform the check on a single Data rather than at the component level? But maybe it would be way sufficient for what we attend to do?; To perform the test at the Data level, we need to differentiate Data modification coming from a user vs coming from a computation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603
https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259:147,Modifiability,variab,variable,147,"I still do not get the interest of storing `m_gridDim`. What is the limitation of a simple function? So you never have to change the value of this variable to keep it consistent. If it was in a data you want to plug in a Data/Engine graph, it would indeed be necessary to store it, but it is not the case here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259
https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259:84,Usability,simpl,simple,84,"I still do not get the interest of storing `m_gridDim`. What is the limitation of a simple function? So you never have to change the value of this variable to keep it consistent. If it was in a data you want to plug in a Data/Engine graph, it would indeed be necessary to store it, but it is not the case here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302639771:452,Usability,simpl,simplify,452,@matthieu-nesme . Currently no-one answered to the checkData API related issues https://github.com/sofa-framework/sofa/issues/265 so I don't know when this will happen.I hope this will happen soon but currently I have no visibility so I prefer to make the change of existing function in batch when a PR related to #265 will be accepted. . In the meantime it is probably a good idea to add a function called checkDataValidity() called in init() just to simplify the transition when it will happen.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302639771
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302702732:197,Usability,simpl,simply,197,"@damienmarchal if you check for '-' in the vector<unsigned>::read specialization, is it necessary to check for it in the getUnsignedNumber?; Also, since strtoll returns a signed integer, you could simply check for its sign rather than playing with strings.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302702732
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:1469,Energy Efficiency,green,green,1469,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:362,Performance,perform,performance,362,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:454,Performance,perform,performances,454,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:611,Performance,perform,performance,611,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:39,Safety,detect,detect,39,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:604,Safety,detect,detect,604,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:517,Testability,benchmark,benchmark,517,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:534,Testability,benchmark,benchmark,534,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:566,Testability,test,test,566,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:1356,Usability,simpl,simpler,1356,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828
https://github.com/sofa-framework/sofa/issues/274#issuecomment-302061194:434,Usability,feedback,feedback,434,I made a quick POC using constructor delegation (c++x11) in; https://github.com/SofaDefrost/sofa/tree/constructor_delegation. (I messed up with the branch so only have a look at how I factorize the constructors in; RegularGridTopology.cpp & GridTopology.cpp). . To me this looks quite an improvement over the existing approach but maybe I made mistake or there is scenario in which we will have trouble if we generalize this...so any feedback from c++ you (guru or not) will be appreciated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-302061194
https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:167,Testability,test,test,167,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439
https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:226,Testability,test,test,226,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439
https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:248,Testability,test,test,248,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439
https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:263,Testability,test,test,263,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439
https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:271,Testability,test,test,271,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439
https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:25,Usability,simpl,simply,25,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439
https://github.com/sofa-framework/sofa/pull/276#issuecomment-306526433:8,Usability,feedback,feedback,8,Without feedback of yours @courtecuisse and @JeremieA this will be merged tomorrow (7 days since we poked you),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306526433
https://github.com/sofa-framework/sofa/issues/277#issuecomment-303150889:377,Usability,clear,clearer,377,"But then for the sake of clarity at least, wouldn't it still make sense to implement this function by checking whether or not the values are the same as the defaults?; One can argue that a zero-ed matrix doesn't mean an ""empty"" matrix, and some could consider the identity matrix to be an empty matrix maybe in some cases, but at least, with a little comment, it would make it clearer.; Otherwise a msg_warning in this method would be helpful for whoever tries to call it without knowing that it has a ""return false"" behavior?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303150889
https://github.com/sofa-framework/sofa/issues/277#issuecomment-303156473:141,Usability,undo,undocumented,141,"However in the particular case your are mentionning ( ie compile time fixed size matrices ) nothing really strikes me as a ""bad behavior"" or undocumented behavior of some sort that needs to be amended in the current design. Then again in the standard which has `std::array` for compile time fixed size array, the `empty()` method always return false unless your array is degenerated ( ie it cannot contain anything at all ).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303156473
https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697:819,Safety,avoid,avoid,819,"@maxime-tournier and @matthieu-nesme ; Thanks for your suggestions,. It is not very clear when you are refering to ""current approach"" if you are discussing about the sofa version or the one that is already in this PR. . Existing Sofa looks like: ; ```cpp; namespace std{; ... operator<<(ostream, std::set); ; }; ```. In this PR it looks like: ; ```cpp; namespace sofa::helper{; using std::set ; /// do we need the template prefix as matthieu suggested ? ; ... operator<<(ostream, sofa::helper::set); ; }; ```. Maxime's suggestion ; ```cpp; namespace foo{; template<class ...T>; struct vector final : std::vector<T...> {; using std::vector<T...>::vector;; };; ... operator<<(ostream, sofa::helper::set); ; }; ```. The sofa existing one is clearly bad as it pollute the namespace. It seems to me that maxime's suggestion avoid the need to have 'using operator<<' in calling code. It is unclear to me what are the drawback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697
https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697:84,Usability,clear,clear,84,"@maxime-tournier and @matthieu-nesme ; Thanks for your suggestions,. It is not very clear when you are refering to ""current approach"" if you are discussing about the sofa version or the one that is already in this PR. . Existing Sofa looks like: ; ```cpp; namespace std{; ... operator<<(ostream, std::set); ; }; ```. In this PR it looks like: ; ```cpp; namespace sofa::helper{; using std::set ; /// do we need the template prefix as matthieu suggested ? ; ... operator<<(ostream, sofa::helper::set); ; }; ```. Maxime's suggestion ; ```cpp; namespace foo{; template<class ...T>; struct vector final : std::vector<T...> {; using std::vector<T...>::vector;; };; ... operator<<(ostream, sofa::helper::set); ; }; ```. The sofa existing one is clearly bad as it pollute the namespace. It seems to me that maxime's suggestion avoid the need to have 'using operator<<' in calling code. It is unclear to me what are the drawback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697
https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697:738,Usability,clear,clearly,738,"@maxime-tournier and @matthieu-nesme ; Thanks for your suggestions,. It is not very clear when you are refering to ""current approach"" if you are discussing about the sofa version or the one that is already in this PR. . Existing Sofa looks like: ; ```cpp; namespace std{; ... operator<<(ostream, std::set); ; }; ```. In this PR it looks like: ; ```cpp; namespace sofa::helper{; using std::set ; /// do we need the template prefix as matthieu suggested ? ; ... operator<<(ostream, sofa::helper::set); ; }; ```. Maxime's suggestion ; ```cpp; namespace foo{; template<class ...T>; struct vector final : std::vector<T...> {; using std::vector<T...>::vector;; };; ... operator<<(ostream, sofa::helper::set); ; }; ```. The sofa existing one is clearly bad as it pollute the namespace. It seems to me that maxime's suggestion avoid the need to have 'using operator<<' in calling code. It is unclear to me what are the drawback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:62,Availability,failure,failure,62,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:120,Availability,failure,failure,120,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:342,Availability,error,error,342,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:408,Availability,error,error,408,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:748,Availability,fault,faulty,748,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:468,Deployability,release,release,468,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:348,Integrability,message,message,348,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:414,Integrability,message,message,414,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:57,Testability,test,test,57,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:277,Testability,test,test,277,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:432,Testability,test,test,432,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:460,Testability,test,test,460,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:527,Testability,test,test,527,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:1051,Usability,feedback,feedback,1051,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180
https://github.com/sofa-framework/sofa/issues/281#issuecomment-311036684:109,Usability,feedback,feedback,109,"Hi Fred,. On my side I have implemented the ""warning"" behavior. It is in PR #306 and I would appreciate your feedback (and if you have time, some support to fix the linking problem on windows).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-311036684
https://github.com/sofa-framework/sofa/pull/282#issuecomment-305491712:14,Usability,simpl,simple,14,This PR is so simple I cannot imagine anything that would go against its fast merging.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/282#issuecomment-305491712
https://github.com/sofa-framework/sofa/pull/283#issuecomment-306789278:33,Usability,responsiv,responsiveness,33,@maxime-tournier Thanks for your responsiveness ;). Mergeable to me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306789278
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306476756:78,Usability,feedback,feedback,78,"Hi Felix,. Thank you for your PR. ; Let's see if it builds and if people have feedback to give you. [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306476756
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829:737,Integrability,message,messages,737,"@maxime-tournier ; I think that any code that pass a sequence to createObject will work differently. ; Eg: ; 1) passing a python sequence to a Data<string> was resulting in [1,2,3], now it will be 1 2 3. If your component count on the [1,2,3] structure to do something it will not work anymore. ; 2) passing a python sequence to a Data<set> was resulting in [1, 2 3] but because the parser was not reporting problems this was resulting in something different (0 0 0 ?) ... if the scene was, 'by surprise', working...it will not work anymore. The case (1) is probably rare but not fundamentally bad.; The case (2) is clearly bad but exists. 1 & 2 are rare cases and I'm convinced we shouldn't annoy anyone using createObject with warning messages this is why I personally think that having a global switch (not an #ifdef) to print these kind of messages would be great to tools to help users to debug their scenes through the API changes. (maybe it is overkill :)). About having the warning in the 'else' case. It may be an option but we still want to support simple conversion from int/string/float values without a warning right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829:844,Integrability,message,messages,844,"@maxime-tournier ; I think that any code that pass a sequence to createObject will work differently. ; Eg: ; 1) passing a python sequence to a Data<string> was resulting in [1,2,3], now it will be 1 2 3. If your component count on the [1,2,3] structure to do something it will not work anymore. ; 2) passing a python sequence to a Data<set> was resulting in [1, 2 3] but because the parser was not reporting problems this was resulting in something different (0 0 0 ?) ... if the scene was, 'by surprise', working...it will not work anymore. The case (1) is probably rare but not fundamentally bad.; The case (2) is clearly bad but exists. 1 & 2 are rare cases and I'm convinced we shouldn't annoy anyone using createObject with warning messages this is why I personally think that having a global switch (not an #ifdef) to print these kind of messages would be great to tools to help users to debug their scenes through the API changes. (maybe it is overkill :)). About having the warning in the 'else' case. It may be an option but we still want to support simple conversion from int/string/float values without a warning right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829:616,Usability,clear,clearly,616,"@maxime-tournier ; I think that any code that pass a sequence to createObject will work differently. ; Eg: ; 1) passing a python sequence to a Data<string> was resulting in [1,2,3], now it will be 1 2 3. If your component count on the [1,2,3] structure to do something it will not work anymore. ; 2) passing a python sequence to a Data<set> was resulting in [1, 2 3] but because the parser was not reporting problems this was resulting in something different (0 0 0 ?) ... if the scene was, 'by surprise', working...it will not work anymore. The case (1) is probably rare but not fundamentally bad.; The case (2) is clearly bad but exists. 1 & 2 are rare cases and I'm convinced we shouldn't annoy anyone using createObject with warning messages this is why I personally think that having a global switch (not an #ifdef) to print these kind of messages would be great to tools to help users to debug their scenes through the API changes. (maybe it is overkill :)). About having the warning in the 'else' case. It may be an option but we still want to support simple conversion from int/string/float values without a warning right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829:1059,Usability,simpl,simple,1059,"@maxime-tournier ; I think that any code that pass a sequence to createObject will work differently. ; Eg: ; 1) passing a python sequence to a Data<string> was resulting in [1,2,3], now it will be 1 2 3. If your component count on the [1,2,3] structure to do something it will not work anymore. ; 2) passing a python sequence to a Data<set> was resulting in [1, 2 3] but because the parser was not reporting problems this was resulting in something different (0 0 0 ?) ... if the scene was, 'by surprise', working...it will not work anymore. The case (1) is probably rare but not fundamentally bad.; The case (2) is clearly bad but exists. 1 & 2 are rare cases and I'm convinced we shouldn't annoy anyone using createObject with warning messages this is why I personally think that having a global switch (not an #ifdef) to print these kind of messages would be great to tools to help users to debug their scenes through the API changes. (maybe it is overkill :)). About having the warning in the 'else' case. It may be an option but we still want to support simple conversion from int/string/float values without a warning right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:22,Integrability,message,message,22,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:337,Integrability,message,messages,337,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:479,Security,expose,exposed,479,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:395,Testability,test,test,395,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:73,Usability,simpl,simple,73,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:232,Usability,simpl,simple,232,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:240,Usability,simpl,simply,240,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:471,Usability,clear,clearly,471,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307767628:140,Usability,simpl,simply,140,"After some tries, I could not come up with something that fails either. This is good news, right? :-). As to the semantics, maybe we should simply add an `__str__` method to `BaseObject` that returns `getLinkPath()`. This way we don't have extra special cases in `createObject` and the semantics become clear enough to me: arguments are converted to strings unless they are sequences, in which case they are converted to the expected format.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307767628
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307767628:303,Usability,clear,clear,303,"After some tries, I could not come up with something that fails either. This is good news, right? :-). As to the semantics, maybe we should simply add an `__str__` method to `BaseObject` that returns `getLinkPath()`. This way we don't have extra special cases in `createObject` and the semantics become clear enough to me: arguments are converted to strings unless they are sequences, in which case they are converted to the expected format.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307767628
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319:91,Testability,test,tests,91,"Thanks for your feedback,. We need examples of use of Data & Base conversion to add in the tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319:16,Usability,feedback,feedback,16,"Thanks for your feedback,. We need examples of use of Data & Base conversion to add in the tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307835375:262,Safety,avoid,avoid,262,"The current implementation is now converting things like:; Sequence (non recursively), string, scalar, and boolean without a warning. . If the object has a method named ""getSofaPath()"". This one is used in the createObject to do the conversion. My target was to avoid collision with the existing str() function that may have a different semantic and I wanted to preserve it. This function could be implemented in Base and Data but in virtually any object we want to be used as a parameter in createObject. . It sounds nice to me because it make things ""explicit"" and convenient as it simplify user's scripts.; I'm not a big fan of 'getAsSofaPath()' and though about getAsSofaValue or getAsACreateObjectParameter(). What do you think ? Do you have alternative names ? . PS: @matthieu-nesme you said: ... ""Data's str already gives the stringvalue"", ; ```python; first = rootNode.createObject( 'ExternalComponent', name='theFirst'); print('VERSION 1:'+ str( first.findData('name') + "" type: "" + str(type(first.name)) ); print('VERSION 2:'+ str( first.name ) + "" type: "" + str(type(first.name)) ); ```; Actually prints: ; ```; VERSION 1: <Sofa.Data object at 0x7ff43b77f6f0> -> <type 'Sofa.Data'>; VERSION 2: theFirst -> <type 'str'>; ```; So str() function is not implemented as you said.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307835375
https://github.com/sofa-framework/sofa/pull/286#issuecomment-307835375:584,Usability,simpl,simplify,584,"The current implementation is now converting things like:; Sequence (non recursively), string, scalar, and boolean without a warning. . If the object has a method named ""getSofaPath()"". This one is used in the createObject to do the conversion. My target was to avoid collision with the existing str() function that may have a different semantic and I wanted to preserve it. This function could be implemented in Base and Data but in virtually any object we want to be used as a parameter in createObject. . It sounds nice to me because it make things ""explicit"" and convenient as it simplify user's scripts.; I'm not a big fan of 'getAsSofaPath()' and though about getAsSofaValue or getAsACreateObjectParameter(). What do you think ? Do you have alternative names ? . PS: @matthieu-nesme you said: ... ""Data's str already gives the stringvalue"", ; ```python; first = rootNode.createObject( 'ExternalComponent', name='theFirst'); print('VERSION 1:'+ str( first.findData('name') + "" type: "" + str(type(first.name)) ); print('VERSION 2:'+ str( first.name ) + "" type: "" + str(type(first.name)) ); ```; Actually prints: ; ```; VERSION 1: <Sofa.Data object at 0x7ff43b77f6f0> -> <type 'Sofa.Data'>; VERSION 2: theFirst -> <type 'str'>; ```; So str() function is not implemented as you said.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307835375
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308039440:66,Usability,clear,clear,66,@matthieu-nesme what's wrong with using `str` ? The semantics are clear and concise and you don't have to mentally infer the various checks that will take place when converting. The explicit case checking looks much worse to me. (sorry for bikeshedding). @damienmarchal why not recursive? This prevents setting `MechanicalObject` positions when `size > 1`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308039440
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308057027:101,Usability,simpl,simple,101,"@maxime-tournier ok I am convinced, let's use str for everyone (except list/iterable) to remain on a simple implementation. Please could you propose us an implementation?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308057027
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:1668,Integrability,protocol,protocol,1668,". 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject hav",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3172,Integrability,depend,depending,3172,"be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3468,Integrability,depend,depending,3468,". ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the inherent flexibility of its specification) but I prefer avoiding it to generate string that have to be processed by a program. When I have to generate string that are ""parsable"" I tend to use specific function with much tighter specification. . @maxime-tournier You are totally right about the recursive aspect...I didn't though ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:446,Modifiability,extend,extend,446,"@matthieu-nesme I think we should implement str() as you have in your fork ;) . First of all thanks Matthieu and Maxime for the interest and time you put into this PR because it is getting very long. . Let's me summary the different approach that have been tried so far. . 1) The first version of the code was doing conversion by hard-coding the object type detection and calling getLinkPath(). The problem with this version is that it cannot be extend without adding more hard-coded test and recompiling the SofaPython plugin. ; Everyone agree this version is bad. . 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conver",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:520,Modifiability,plugin,plugin,520,"@matthieu-nesme I think we should implement str() as you have in your fork ;) . First of all thanks Matthieu and Maxime for the interest and time you put into this PR because it is getting very long. . Let's me summary the different approach that have been tried so far. . 1) The first version of the code was doing conversion by hard-coding the object type detection and calling getLinkPath(). The problem with this version is that it cannot be extend without adding more hard-coded test and recompiling the SofaPython plugin. ; Everyone agree this version is bad. . 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conver",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3100,Modifiability,flexible,flexible,3100,"be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:358,Safety,detect,detection,358,"@matthieu-nesme I think we should implement str() as you have in your fork ;) . First of all thanks Matthieu and Maxime for the interest and time you put into this PR because it is getting very long. . Let's me summary the different approach that have been tried so far. . 1) The first version of the code was doing conversion by hard-coding the object type detection and calling getLinkPath(). The problem with this version is that it cannot be extend without adding more hard-coded test and recompiling the SofaPython plugin. ; Everyone agree this version is bad. . 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conver",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:2362,Safety,risk,risk,2362,"ion will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For oth",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:4187,Safety,avoid,avoiding,4187,"r function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the inherent flexibility of its specification) but I prefer avoiding it to generate string that have to be processed by a program. When I have to generate string that are ""parsable"" I tend to use specific function with much tighter specification. . @maxime-tournier You are totally right about the recursive aspect...I didn't though about that. My initial worrying was it was transformating a complex structure into a flat one and I wasn't sure it was something that should be done in every cases for any types.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:484,Testability,test,test,484,"@matthieu-nesme I think we should implement str() as you have in your fork ;) . First of all thanks Matthieu and Maxime for the interest and time you put into this PR because it is getting very long. . Let's me summary the different approach that have been tried so far. . 1) The first version of the code was doing conversion by hard-coding the object type detection and calling getLinkPath(). The problem with this version is that it cannot be extend without adding more hard-coded test and recompiling the SofaPython plugin. ; Everyone agree this version is bad. . 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conver",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:2255,Testability,test,test,2255,"know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatos",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:1837,Usability,simpl,simply,1837,"d idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:2808,Usability,clear,clear,2808,"ly link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3559,Usability,clear,clearly,3559,"d in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the inherent flexibility of its specification) but I prefer avoiding it to generate string that have to be processed by a program. When I have to generate string that are ""parsable"" I tend to use specific function with much tighter specification. . @maxime-tournier You are totally right about the recursive aspect...I didn't though about that. My initial worrying was it was transformating a complex structure into a f",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3632,Usability,clear,clearly,3632,"r function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the inherent flexibility of its specification) but I prefer avoiding it to generate string that have to be processed by a program. When I have to generate string that are ""parsable"" I tend to use specific function with much tighter specification. . @maxime-tournier You are totally right about the recursive aspect...I didn't though about that. My initial worrying was it was transformating a complex structure into a flat one and I wasn't sure it was something that should be done in every cases for any types.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349:491,Modifiability,variab,variables,491,"Just my 2 cents (after the war) about this ```__str__``` stuff... . I don't know how to explain it clearly, but using the built-in ```str``` function to serialize objects in a createObject-specific format sounds weird to me, even if it works in our context. This is the first time we have to convert Sofa objects to string, it does not mean that converting sofa objects to string will only be needed for this specific purpose in the future. ; I am confident that we can find examples of bad variables usages in the code of Sofa : ""this var exists and seems not used by anyone, so I will use it to store my context-specific information without recompiling everything"". The wrong tool used for the good result, I don't know if you get me. . In a naive approach I would expect as a end-user, that issuing a ```print(mySofaStuff)``` from the sofa GUI built-in python console would return a human-readable string, a summary with the object class name, perhaps the object name, plus some useful infos. Getting either a path or a suite of numbers would be kinda disapointing in this context...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349
https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349:99,Usability,clear,clearly,99,"Just my 2 cents (after the war) about this ```__str__``` stuff... . I don't know how to explain it clearly, but using the built-in ```str``` function to serialize objects in a createObject-specific format sounds weird to me, even if it works in our context. This is the first time we have to convert Sofa objects to string, it does not mean that converting sofa objects to string will only be needed for this specific purpose in the future. ; I am confident that we can find examples of bad variables usages in the code of Sofa : ""this var exists and seems not used by anyone, so I will use it to store my context-specific information without recompiling everything"". The wrong tool used for the good result, I don't know if you get me. . In a naive approach I would expect as a end-user, that issuing a ```print(mySofaStuff)``` from the sofa GUI built-in python console would return a human-readable string, a summary with the object class name, perhaps the object name, plus some useful infos. Getting either a path or a suite of numbers would be kinda disapointing in this context...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349
https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:183,Integrability,message,messages,183,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464
https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:624,Integrability,message,messages,624,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464
https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:474,Security,access,access,474,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464
https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:73,Usability,guid,guidelines,73,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464
https://github.com/sofa-framework/sofa/pull/287#issuecomment-307788624:93,Usability,guid,guidelines,93,@guparan; ​Thanks for managing the pull request. I'll make a new one according to the commit guidelines within the week .,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-307788624
https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188:143,Modifiability,plugin,plugins,143,"Hi @WilkGardariki,; Thanks for this fix. Let's start the [ci-build]. ; About your question, I guess the simpler is the better. There are other plugins with a scenes folder (CGal, Geomagic).; I am also interested in a _examples vs scenes_ discussion. I personally prefer _scenes_ as I find it more accurate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188
https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188:104,Usability,simpl,simpler,104,"Hi @WilkGardariki,; Thanks for this fix. Let's start the [ci-build]. ; About your question, I guess the simpler is the better. There are other plugins with a scenes folder (CGal, Geomagic).; I am also interested in a _examples vs scenes_ discussion. I personally prefer _scenes_ as I find it more accurate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188
https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531:65,Modifiability,plugin,plugin,65,"I would rather rename every ""scenes"" dir in ""examples"" to follow plugin guidelines.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531
https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531:72,Usability,guid,guidelines,72,"I would rather rename every ""scenes"" dir in ""examples"" to follow plugin guidelines.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531
https://github.com/sofa-framework/sofa/pull/301#issuecomment-311036354:31,Usability,feedback,feedback,31,"Thanks @fredroy for taking the feedback into account. ; To me this PR is ready to merge because it fullfill our checklist and no one said ""no go"" in 15 days.; I rebuild from a fresh [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311036354
https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143:195,Modifiability,refactor,refactoring,195,"I just cherry-picked Anatoscope's changes related to SofaPython (excl. PythonScriptController that comes in #283).; It seems huge, but it is simply:; - mainly cleaning-up,; - adding bindings,; - refactoring python-tests. More cleanings are coming, and waiting for #283 and #286.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143
https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143:214,Testability,test,tests,214,"I just cherry-picked Anatoscope's changes related to SofaPython (excl. PythonScriptController that comes in #283).; It seems huge, but it is simply:; - mainly cleaning-up,; - adding bindings,; - refactoring python-tests. More cleanings are coming, and waiting for #283 and #286.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143
https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143:141,Usability,simpl,simply,141,"I just cherry-picked Anatoscope's changes related to SofaPython (excl. PythonScriptController that comes in #283).; It seems huge, but it is simply:; - mainly cleaning-up,; - adding bindings,; - refactoring python-tests. More cleanings are coming, and waiting for #283 and #286.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143
https://github.com/sofa-framework/sofa/pull/310#issuecomment-312254210:53,Usability,simpl,simple,53,Many thanks for all your PR @untereiner . This looks simple and I trust you it is the thing to do. So let's wait our 7 days quarantine if someone says a 'no-go' and merge it otherwise.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/310#issuecomment-312254210
https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828:105,Availability,error,error,105,"OK,; I updated the PR with a few things:; 1 / the test now checks the content of the generated files for error; 2 / Monitor has an additional data field ""fileName"" through which one can override the default path to the generated files; 3 / Monitor now respects basic coding guidelines; Looks a bit better now",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828
https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828:7,Deployability,update,updated,7,"OK,; I updated the PR with a few things:; 1 / the test now checks the content of the generated files for error; 2 / Monitor has an additional data field ""fileName"" through which one can override the default path to the generated files; 3 / Monitor now respects basic coding guidelines; Looks a bit better now",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828
https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828:50,Testability,test,test,50,"OK,; I updated the PR with a few things:; 1 / the test now checks the content of the generated files for error; 2 / Monitor has an additional data field ""fileName"" through which one can override the default path to the generated files; 3 / Monitor now respects basic coding guidelines; Looks a bit better now",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828
https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828:274,Usability,guid,guidelines,274,"OK,; I updated the PR with a few things:; 1 / the test now checks the content of the generated files for error; 2 / Monitor has an additional data field ""fileName"" through which one can override the default path to the generated files; 3 / Monitor now respects basic coding guidelines; Looks a bit better now",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828
https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276:103,Deployability,release,release,103,"Closing & Re-opning was a mistake :). You are right, breaking changes should be done only for punctual release...I wanted to discuss that in issue #318. But given the amount of breaking changes people want to merge...It think maybe the 17.16 will be a ""breaking"" release. To make the change more manageable by user I introduced a recent PR #329 for which I would like to have feedback (or support or thumb-up :)). ; ; Can you describe what exactly are the breaking and if you have time it would be super great if with #PR329 you can provide a custom hook to warn inform user of which changes happens.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276
https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276:263,Deployability,release,release,263,"Closing & Re-opning was a mistake :). You are right, breaking changes should be done only for punctual release...I wanted to discuss that in issue #318. But given the amount of breaking changes people want to merge...It think maybe the 17.16 will be a ""breaking"" release. To make the change more manageable by user I introduced a recent PR #329 for which I would like to have feedback (or support or thumb-up :)). ; ; Can you describe what exactly are the breaking and if you have time it would be super great if with #PR329 you can provide a custom hook to warn inform user of which changes happens.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276
https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276:376,Usability,feedback,feedback,376,"Closing & Re-opning was a mistake :). You are right, breaking changes should be done only for punctual release...I wanted to discuss that in issue #318. But given the amount of breaking changes people want to merge...It think maybe the 17.16 will be a ""breaking"" release. To make the change more manageable by user I introduced a recent PR #329 for which I would like to have feedback (or support or thumb-up :)). ; ; Can you describe what exactly are the breaking and if you have time it would be super great if with #PR329 you can provide a custom hook to warn inform user of which changes happens.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:838,Availability,down,downvote,838,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:132,Integrability,depend,dependency,132,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:940,Integrability,depend,dependencies,940,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:174,Modifiability,plugin,plugin,174,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:347,Modifiability,plugin,plugins,347,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:921,Modifiability,plugin,plugin,921,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:961,Modifiability,plugin,plugin,961,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:1087,Modifiability,plugin,plugin,1087,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:1071,Security,expose,exposed,1071,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:1101,Usability,simpl,simply,1101,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473:39,Integrability,depend,dependencies,39,"I totally agree with the idea to limit dependencies, as a general state of mind. (not only in this particular case); +1 to backport the commits that cut boost dependency, though I have no idea how simply doable it is... :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473:159,Integrability,depend,dependency,159,"I totally agree with the idea to limit dependencies, as a general state of mind. (not only in this particular case); +1 to backport the commits that cut boost dependency, though I have no idea how simply doable it is... :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473
https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473:197,Usability,simpl,simply,197,"I totally agree with the idea to limit dependencies, as a general state of mind. (not only in this particular case); +1 to backport the commits that cut boost dependency, though I have no idea how simply doable it is... :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473
https://github.com/sofa-framework/sofa/pull/317#issuecomment-315029412:130,Usability,feedback,feedback,130,@maxime-tournier I believe the last commits takes your input into consideration (if I didn't miss anything); Looking forward your feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-315029412
https://github.com/sofa-framework/sofa/issues/318#issuecomment-313111808:90,Usability,guid,guide,90,I just submitted a new PR #322 on top of the SceneChecker to implement gentle mecanism to guide users through changes in Sofa. . My underlying target is to favor a bit more the PR that improves things but changes the behavior as long as our users are warned and guided to fix their scenes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318#issuecomment-313111808
https://github.com/sofa-framework/sofa/issues/318#issuecomment-313111808:262,Usability,guid,guided,262,I just submitted a new PR #322 on top of the SceneChecker to implement gentle mecanism to guide users through changes in Sofa. . My underlying target is to favor a bit more the PR that improves things but changes the behavior as long as our users are warned and guided to fix their scenes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318#issuecomment-313111808
https://github.com/sofa-framework/sofa/pull/326#issuecomment-314418538:104,Usability,feedback,feedback,104,"@damienmarchal you're right, my bad, it does not fail on my build :-/ . Looking into it, thanks for the feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-314418538
https://github.com/sofa-framework/sofa/pull/328#issuecomment-314191421:245,Usability,feedback,feedback,245,I thomas...I think something goes wrong in your PR as there is more than thousand file changed :) . I support the idea of removing one of the way to handle vector serialization in sofa. When your PR will be readable I will provide you with more feedback :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/328#issuecomment-314191421
https://github.com/sofa-framework/sofa/pull/332#issuecomment-316340088:166,Performance,perform,performance,166,"Right for the overhead, my target was clearly to minimize the developement time because this is a very scarce resource. The good news I see is that if the function a performance limiting we are still able to improve it a lot (by order of magnitude).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332#issuecomment-316340088
https://github.com/sofa-framework/sofa/pull/332#issuecomment-316340088:38,Usability,clear,clearly,38,"Right for the overhead, my target was clearly to minimize the developement time because this is a very scarce resource. The good news I see is that if the function a performance limiting we are still able to improve it a lot (by order of magnitude).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332#issuecomment-316340088
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:165,Availability,error,error,165,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:554,Availability,error,error,554,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:263,Deployability,release,release,263,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:285,Deployability,release,release,285,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:398,Energy Efficiency,power,power,398,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:343,Integrability,message,messages,343,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:560,Integrability,message,messages,560,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:36,Usability,feedback,feedback,36,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439
https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409:238,Integrability,wrap,wrap,238,"> Can static methods be binded ?. If your question is: ""can c++ static methods be bound in python"", then yes. If your question is ""can I bind something as a python class/static method"", I *think* the answer is yes but in any case you can wrap it as a free function in a module. If applicable, I suggest your binding class follows the context protocol (https://www.python.org/dev/peps/pep-0343/) so that you can time code fragments using `with` statements:. ```python; with Sofa.Timer('description'):; # do something time-consuming here; ```. In this case, you need to:; 1. create the type object and store needed state, in this case that would be a simple string for identifying the timed action; 2. bind `beginStep` as the `__enter__` method; 3. bind `endStep` as the `__exit__` method. and that should be it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409
https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409:342,Integrability,protocol,protocol,342,"> Can static methods be binded ?. If your question is: ""can c++ static methods be bound in python"", then yes. If your question is ""can I bind something as a python class/static method"", I *think* the answer is yes but in any case you can wrap it as a free function in a module. If applicable, I suggest your binding class follows the context protocol (https://www.python.org/dev/peps/pep-0343/) so that you can time code fragments using `with` statements:. ```python; with Sofa.Timer('description'):; # do something time-consuming here; ```. In this case, you need to:; 1. create the type object and store needed state, in this case that would be a simple string for identifying the timed action; 2. bind `beginStep` as the `__enter__` method; 3. bind `endStep` as the `__exit__` method. and that should be it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409
https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409:649,Usability,simpl,simple,649,"> Can static methods be binded ?. If your question is: ""can c++ static methods be bound in python"", then yes. If your question is ""can I bind something as a python class/static method"", I *think* the answer is yes but in any case you can wrap it as a free function in a module. If applicable, I suggest your binding class follows the context protocol (https://www.python.org/dev/peps/pep-0343/) so that you can time code fragments using `with` statements:. ```python; with Sofa.Timer('description'):; # do something time-consuming here; ```. In this case, you need to:; 1. create the type object and store needed state, in this case that would be a simple string for identifying the timed action; 2. bind `beginStep` as the `__enter__` method; 3. bind `endStep` as the `__exit__` method. and that should be it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409
https://github.com/sofa-framework/sofa/pull/337#issuecomment-318174397:12,Usability,feedback,feedback,12,"Hi all, any feedback on this PR ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337#issuecomment-318174397
https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855:338,Integrability,depend,dependent,338,"Hi Francois,; thank you for the feedback. Hopefully for the common good, this non-zero default value will disappear!; I did not know the historical explanation of the ForceField/Mass API. On my opinion, no matter how many scenes will be broken: hidden numerical damping is worse than anything else. Finally about making them clearly time dependent, I don't really see the point but whatever, this can be done in a second stage.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855
https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855:32,Usability,feedback,feedback,32,"Hi Francois,; thank you for the feedback. Hopefully for the common good, this non-zero default value will disappear!; I did not know the historical explanation of the ForceField/Mass API. On my opinion, no matter how many scenes will be broken: hidden numerical damping is worse than anything else. Finally about making them clearly time dependent, I don't really see the point but whatever, this can be done in a second stage.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855
https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855:325,Usability,clear,clearly,325,"Hi Francois,; thank you for the feedback. Hopefully for the common good, this non-zero default value will disappear!; I did not know the historical explanation of the ForceField/Mass API. On my opinion, no matter how many scenes will be broken: hidden numerical damping is worse than anything else. Finally about making them clearly time dependent, I don't really see the point but whatever, this can be done in a second stage.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:99,Deployability,release,release,99,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:342,Deployability,update,update,342,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:818,Deployability,update,update,818,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:149,Modifiability,plugin,plugins,149,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:317,Modifiability,plugin,plugin,317,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:460,Modifiability,plugin,plugins,460,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:858,Usability,simpl,simply,858,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481
https://github.com/sofa-framework/sofa/issues/346#issuecomment-330655449:58,Usability,feedback,feedback,58,This include PR #389 #407 #396 ; It would be nice to have feedback..otherwise...well after merge it will be to late ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-330655449
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332165689:587,Usability,simpl,simplest,587,"For me handling different sets of sofa components with a lots of CMakeLists is cumbersome. ; I am not ashamed to say that I do not understand the difference between SofaKernel/SofaFramework/SofaMisc/SofaNG/SofaAdvanced/SofaGeneral. I would suggest an another direction more in the spirit of Qt, e.g. having meaningful modules. ; In Qt they have: Qt Core/ Qt Multimedia / Qt Network etc. ; I suggest to have something similar: Sofa Core (with only the glue) / Sofa Solvers / Sofa Elastic / Sofa Fluid / Sofa Collision /; In each of these modules we could have several algorithms from the simplest and cheap to the more complex expensive one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332165689
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:636,Deployability,integrat,integration,636,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:1434,Deployability,integrat,integrate,1434,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:636,Integrability,integrat,integration,636,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:1434,Integrability,integrat,integrate,1434,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:972,Modifiability,refactor,refactoring,972,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:1735,Modifiability,plugin,pluginization,1735,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:15,Usability,feedback,feedback,15,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:713,Usability,clear,clear,713,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:1822,Energy Efficiency,reduce,reduce,1822,"of a definitive list of components that have to be keep. We can already, small step after small step, moving the ones for which there is a agreement into the right set (and people not using the set will stop being bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:1764,Modifiability,plugin,plugins,1764,"of a definitive list of components that have to be keep. We can already, small step after small step, moving the ones for which there is a agreement into the right set (and people not using the set will stop being bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:1794,Modifiability,plugin,plugins,1794,"of a definitive list of components that have to be keep. We can already, small step after small step, moving the ones for which there is a agreement into the right set (and people not using the set will stop being bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:1951,Modifiability,plugin,plugins,1951,"ng bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the scene-checker to warn users. ; - make a PR; - if the PR is accepted you can be proud of the result because you saved:; ```; 1 second (average compilation time per component); * 20 (number of sofa compilation per",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:2181,Modifiability,plugin,plugins,2181,"o ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the scene-checker to warn users. ; - make a PR; - if the PR is accepted you can be proud of the result because you saved:; ```; 1 second (average compilation time per component); * 20 (number of sofa compilation per day); * 150 (number of sofa developpers); = 3000 seconds per day. ; ```; The return of investment is very high :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:2636,Modifiability,coupling,coupling,2636,"o ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the scene-checker to warn users. ; - make a PR; - if the PR is accepted you can be proud of the result because you saved:; ```; 1 second (average compilation time per component); * 20 (number of sofa compilation per day); * 150 (number of sofa developpers); = 3000 seconds per day. ; ```; The return of investment is very high :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:1501,Performance,load,loading,1501,"the deprecated set. This is very interesting question but it deserve a whole issue & STC or an autocratic gentle decision :). To me the presented approach is interesting as:; - it is incremental and thus we don't have to wait any decision of a definitive list of components that have to be keep. We can already, small step after small step, moving the ones for which there is a agreement into the right set (and people not using the set will stop being bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:28,Usability,feedback,feedback,28,"Hi Stéphane, thanks for the feedback, . If we split the existing set of components into sub-sets eg (""stable"", ""fullset"", ""deprecated"") our starting point would be the current sofa with everything in the ""fullset"". Starting from that we can start moving the good enough one in the ""minimal"" or ""stable"" set, the bad ones into the ""deprecated"" set and keep the one we cannot decide into the ""fullset"". . You are totally right that this proposal is not providing any ideas on who will take the decision to move one component into the deprecated set. This is very interesting question but it deserve a whole issue & STC or an autocratic gentle decision :). To me the presented approach is interesting as:; - it is incremental and thus we don't have to wait any decision of a definitive list of components that have to be keep. We can already, small step after small step, moving the ones for which there is a agreement into the right set (and people not using the set will stop being bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functiona",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:2134,Usability,clear,clear,2134,"o ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the scene-checker to warn users. ; - make a PR; - if the PR is accepted you can be proud of the result because you saved:; ```; 1 second (average compilation time per component); * 20 (number of sofa compilation per day); * 150 (number of sofa developpers); = 3000 seconds per day. ; ```; The return of investment is very high :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715
https://github.com/sofa-framework/sofa/pull/347#issuecomment-317654029:199,Usability,feedback,feedback,199,"hey @maxime-tournier could you provide me some info for the changelog ?; i also add a flag setting your PR as wip, but do not hesitate to change its status to review when the ci is fine and you want feedback. Cheers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347#issuecomment-317654029
https://github.com/sofa-framework/sofa/pull/347#issuecomment-319000414:419,Usability,simpl,simple,419,"@damienmarchal there's not really anything you could've done differently, that was just the first time I encountered this situation. I tried re-merging my branch on a new PR and it succeeded, but the build failed since all the previous changes were reverted (so no `PythonEnvironment::gil` defined, etc). I had to find and revert the revert commit, then push it to the PR branch to get the changes back in. It was very simple in the end but for a while it got me pretty worried :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347#issuecomment-319000414
https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815:602,Testability,test,tests,602,"Hi Thomas,. Glad you made this PR, so thank you. ; ; Some feedback:; - Everything in sofa is a component so the default name of ""DistanceGridComponent"" should be shortened into ""DistanceGrid"" when it is used in the scene. You can do that by overriding the function std::string Base::getClassName() const.; - I would be much better to have the number of samples (the nx,ny,nz) stored at the beginning of the tmg file. ; - I assume that in MeshGenerationFromDG, the DG is for DistanceGrid. As it work with ImplicitShape wouldn't it be better to name it MeshGenerationFromImplicitShape ? ; - There is not tests for the added classes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815
https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815:58,Usability,feedback,feedback,58,"Hi Thomas,. Glad you made this PR, so thank you. ; ; Some feedback:; - Everything in sofa is a component so the default name of ""DistanceGridComponent"" should be shortened into ""DistanceGrid"" when it is used in the scene. You can do that by overriding the function std::string Base::getClassName() const.; - I would be much better to have the number of samples (the nx,ny,nz) stored at the beginning of the tmg file. ; - I assume that in MeshGenerationFromDG, the DG is for DistanceGrid. As it work with ImplicitShape wouldn't it be better to name it MeshGenerationFromImplicitShape ? ; - There is not tests for the added classes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323679624:218,Usability,simpl,simplest,218,"I most definitely agree with you, this is very annoying. In fact, I have a custom build of the main SOFA executable just for this. As of now, there is no mechanism I know of that will forward `sys.argv` correctly. The simplest and by far the most natural solution would be to forward anything happening after `--` to `sys.argv`. . Unless there is a compelling reason not to do so (@damienmarchal ?), I'll give it a quick shot soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323679624
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853:146,Modifiability,plugin,plugin,146,"Hi, thanks four your feedback :-). I'm tackling 1. and it's almost done, however I lack a clean way of exposing the extra args to the sofa python plugin. any idea ?; 2. can't you just use `__file__` for that anyway ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853:21,Usability,feedback,feedback,21,"Hi, thanks four your feedback :-). I'm tackling 1. and it's almost done, however I lack a clean way of exposing the extra args to the sofa python plugin. any idea ?; 2. can't you just use `__file__` for that anyway ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853
https://github.com/sofa-framework/sofa/issues/356#issuecomment-323698076:364,Usability,simpl,simple,364,"Hi Maxime,. For 1. ; What about just setting the arguments into sys.argv using PySys_SetArgv(argc, argv) ? . For 2. ; Isn't __ file __ returning the current file... So in a python script controller __ file __ it would not contain the scene filename but the controller's one. But you are totally right that this could solve the initial @chrijopa question in a very simple way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323698076
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:484,Modifiability,plugin,plugins,484,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:590,Modifiability,plugin,plugins,590,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:1067,Modifiability,plugin,plugin,1067,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:1133,Modifiability,plugin,plugins,1133,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:1051,Performance,load,load,1051,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:1566,Security,access,access,1566,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:843,Testability,test,test,843,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:880,Testability,test,test,880,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:1302,Testability,test,test,1302,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:154,Usability,simpl,simple,154,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:317,Availability,error,errors,317,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:430,Availability,failure,failure,430,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:608,Availability,failure,failure,608,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:535,Integrability,message,message,535,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:663,Integrability,message,message,663,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:2058,Safety,avoid,avoid,2058,"NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licensing aspects. - For code coherency I think that we should avoid using ""weird"" namespaces in the sofa code base (eg: 'nlohmann::json') so that I suggest you to add a sofa/helper/json.hpp file with something more or less like that:; ```cpp; #include ""extlibs/json/json.hpp""; namespace sofa{; namespace helper{; using nlohmann::json ; ; }; }; ```; Would be nice as codes that want to use it will have to do it this way: ; ```cpp; #include ""sofa/helper/json.hpp""; using sofa::helper::json ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:272,Testability,test,test,272,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:185,Usability,feedback,feedback,185,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216:70,Modifiability,enhance,enhancements,70,"Thank you for your feedback @damienmarchal ! . I've done most of your enhancements, but I can't figure out what tests we can create for this PR. ; Do you have some suggestions ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216:112,Testability,test,tests,112,"Thank you for your feedback @damienmarchal ! . I've done most of your enhancements, but I can't figure out what tests we can create for this PR. ; Do you have some suggestions ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216:19,Usability,feedback,feedback,19,"Thank you for your feedback @damienmarchal ! . I've done most of your enhancements, but I can't figure out what tests we can create for this PR. ; Do you have some suggestions ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1821,Security,access,accessible,1821,"h out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::string type); else {; msg_warning(""AdvancedTimer"") << ""Unable to set the type to '""<< type << ""' Switching to the default",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:26,Testability,test,tests,26,"Hi @ggrosshenny . For the tests I think that the ideal target of testing to have a good code coverage (https://en.wikipedia.org/wiki/Code_coverage). A very strong level of testing may requires ""path coverage"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They do",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:65,Testability,test,testing,65,"Hi @ggrosshenny . For the tests I think that the ideal target of testing to have a good code coverage (https://en.wikipedia.org/wiki/Code_coverage). A very strong level of testing may requires ""path coverage"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They do",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:172,Testability,test,testing,172,"Hi @ggrosshenny . For the tests I think that the ideal target of testing to have a good code coverage (https://en.wikipedia.org/wiki/Code_coverage). A very strong level of testing may requires ""path coverage"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They do",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:509,Testability,test,tests,509,"Hi @ggrosshenny . For the tests I think that the ideal target of testing to have a good code coverage (https://en.wikipedia.org/wiki/Code_coverage). A very strong level of testing may requires ""path coverage"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They do",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:735,Testability,test,test,735,"Hi @ggrosshenny . For the tests I think that the ideal target of testing to have a good code coverage (https://en.wikipedia.org/wiki/Code_coverage). A very strong level of testing may requires ""path coverage"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They do",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:851,Testability,test,test,851,"Hi @ggrosshenny . For the tests I think that the ideal target of testing to have a good code coverage (https://en.wikipedia.org/wiki/Code_coverage). A very strong level of testing may requires ""path coverage"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They do",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1059,Testability,test,tests,1059,"e"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does i",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1614,Testability,test,test,1614,"considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/sc",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1675,Testability,test,testing,1675,"n your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::stri",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1723,Testability,test,test,1723,"n your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::stri",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1894,Usability,feedback,feedback,1894," to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::string type); else {; msg_warning(""AdvancedTimer"") << ""Unable to set the type to '""<< type << ""' Switching to the default 'stdout' output. Other valid types are [stdout, JSON, LJSON]."" ; data.timerOutputType = STDOUT;; }; ```. Hope thi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1987,Usability,clear,clear,1987," to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::string type); else {; msg_warning(""AdvancedTimer"") << ""Unable to set the type to '""<< type << ""' Switching to the default 'stdout' output. Other valid types are [stdout, JSON, LJSON]."" ; data.timerOutputType = STDOUT;; }; ```. Hope thi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977
https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680:1306,Testability,test,tests,1306,"Hello all, . I've added some modifications on this PR. . First I've created a new *Python* script in PythonSofa to make the use of the *AdvancedTimer* easier. Now, if you want to use it in a *Python scene*, the easiest way to do it is to use the script with the method *measureAnimationTime*. You will have to add this line: . ```py; from SofaPython import PythonAdvancedTimer; ```. at the beginning of your script. Then you have to add the method *bwdInitGraph(self, node)* method at least as the following:. ```py; def bwdInitGraph(self, node):; # It will call the simulationStep method too; PythonAdvancedTimer.measureAnimationTime(node, ""timerPoutre"", ; 2, ""ljson"", ""poutre_grid_sofa_timerLog"", 0.1, 1000); return 0; ```. If you already have defined a bwdInitGraph, you juste have to add the *measureAnimationTime()* method to get your scene analyzed. To use it by your own way, you can take a look at the *PythonAdvancedTimer.py* script. You'll find it in the *Sofa project* at *SofaPython/python/SofaPython/PythonAdvancedTimer.py*. Second, I've added two scripts to use the returned *light JSON* files of the *AdvancedTimer* : *TimerLJSONPlot.py* and *timerLjsonManyFilesPlot.py*. I've also added the documentation to informe future users how to use the *AdvancedTimer* and the plotting scripts. The tests will come soon. Thank you for your feedback @damienmarchal .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680
https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680:1347,Usability,feedback,feedback,1347,"Hello all, . I've added some modifications on this PR. . First I've created a new *Python* script in PythonSofa to make the use of the *AdvancedTimer* easier. Now, if you want to use it in a *Python scene*, the easiest way to do it is to use the script with the method *measureAnimationTime*. You will have to add this line: . ```py; from SofaPython import PythonAdvancedTimer; ```. at the beginning of your script. Then you have to add the method *bwdInitGraph(self, node)* method at least as the following:. ```py; def bwdInitGraph(self, node):; # It will call the simulationStep method too; PythonAdvancedTimer.measureAnimationTime(node, ""timerPoutre"", ; 2, ""ljson"", ""poutre_grid_sofa_timerLog"", 0.1, 1000); return 0; ```. If you already have defined a bwdInitGraph, you juste have to add the *measureAnimationTime()* method to get your scene analyzed. To use it by your own way, you can take a look at the *PythonAdvancedTimer.py* script. You'll find it in the *Sofa project* at *SofaPython/python/SofaPython/PythonAdvancedTimer.py*. Second, I've added two scripts to use the returned *light JSON* files of the *AdvancedTimer* : *TimerLJSONPlot.py* and *timerLjsonManyFilesPlot.py*. I've also added the documentation to informe future users how to use the *AdvancedTimer* and the plotting scripts. The tests will come soon. Thank you for your feedback @damienmarchal .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680
https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570:60,Testability,test,tests,60,@untereiner sorry I didn't saw you expected feedback on the tests. ; I will do that next monday.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570
https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570:44,Usability,feedback,feedback,44,@untereiner sorry I didn't saw you expected feedback on the tests. ; I will do that next monday.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382:86,Performance,optimiz,optimization,86,"Thanks for the feedback,. I totally agree that O(log n) as well as memory/indirection optimization would be nicer but this topic should have its own issue. About the checking...I also like the idea of the Visitor and this is very consistent as we already have existing SceneCheckerVisitor.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382:49,Testability,log,log,49,"Thanks for the feedback,. I totally agree that O(log n) as well as memory/indirection optimization would be nicer but this topic should have its own issue. About the checking...I also like the idea of the Visitor and this is very consistent as we already have existing SceneCheckerVisitor.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382
https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382:15,Usability,feedback,feedback,15,"Thanks for the feedback,. I totally agree that O(log n) as well as memory/indirection optimization would be nicer but this topic should have its own issue. About the checking...I also like the idea of the Visitor and this is very consistent as we already have existing SceneCheckerVisitor.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382
https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991:288,Availability,avail,availableOptions,288,"Hi @lagarkane . Maybe I have not clearly understood what you want to achieve but what about something like the following:; ```cpp; void YourObject::parse( BaseObjectDescription* arg ); {; /// Initialize the possible list of options by parsing ""manually"" the list:; if (arg->getAttribute(""availableOptions"")){; /// vectorFromString is not existing...but this is just to give you the idea ; OptionGroup options(vectorFromString( arg->getAttribute(""availableOptions"") ))) ; ; d_myOptionGroup.setValue(options) ; . /// don't remove the availableOptions so that it is parsed as ""usual"" ; /// and it will be correctly saved. ; } ; ; /// Call the normal parse function. ; Inherit1::parse(arg) ; ; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991
https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991:446,Availability,avail,availableOptions,446,"Hi @lagarkane . Maybe I have not clearly understood what you want to achieve but what about something like the following:; ```cpp; void YourObject::parse( BaseObjectDescription* arg ); {; /// Initialize the possible list of options by parsing ""manually"" the list:; if (arg->getAttribute(""availableOptions"")){; /// vectorFromString is not existing...but this is just to give you the idea ; OptionGroup options(vectorFromString( arg->getAttribute(""availableOptions"") ))) ; ; d_myOptionGroup.setValue(options) ; . /// don't remove the availableOptions so that it is parsed as ""usual"" ; /// and it will be correctly saved. ; } ; ; /// Call the normal parse function. ; Inherit1::parse(arg) ; ; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991
https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991:532,Availability,avail,availableOptions,532,"Hi @lagarkane . Maybe I have not clearly understood what you want to achieve but what about something like the following:; ```cpp; void YourObject::parse( BaseObjectDescription* arg ); {; /// Initialize the possible list of options by parsing ""manually"" the list:; if (arg->getAttribute(""availableOptions"")){; /// vectorFromString is not existing...but this is just to give you the idea ; OptionGroup options(vectorFromString( arg->getAttribute(""availableOptions"") ))) ; ; d_myOptionGroup.setValue(options) ; . /// don't remove the availableOptions so that it is parsed as ""usual"" ; /// and it will be correctly saved. ; } ; ; /// Call the normal parse function. ; Inherit1::parse(arg) ; ; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991
https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991:33,Usability,clear,clearly,33,"Hi @lagarkane . Maybe I have not clearly understood what you want to achieve but what about something like the following:; ```cpp; void YourObject::parse( BaseObjectDescription* arg ); {; /// Initialize the possible list of options by parsing ""manually"" the list:; if (arg->getAttribute(""availableOptions"")){; /// vectorFromString is not existing...but this is just to give you the idea ; OptionGroup options(vectorFromString( arg->getAttribute(""availableOptions"") ))) ; ; d_myOptionGroup.setValue(options) ; . /// don't remove the availableOptions so that it is parsed as ""usual"" ; /// and it will be correctly saved. ; } ; ; /// Call the normal parse function. ; Inherit1::parse(arg) ; ; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991
https://github.com/sofa-framework/sofa/issues/363#issuecomment-322704865:181,Usability,simpl,simpler,181,"Hi @damienmarchal ,; Thanks for your reply!; Indeed, that is what I would like to do... I didn't know I could call parse() per component, instead of per data.. The solution is much simpler than I thought.. sorry!; I close the topic",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322704865
https://github.com/sofa-framework/sofa/pull/369#issuecomment-324314176:123,Usability,guid,guidelines,123,Hi @sergeiNikolaev . Respecting the existing gui rendering is not crucial in itself..but we should try to respect standard guidelines for GUIs. On that aspect it is more common to have QLabel & checkbox/textfield on the same line otherwise this look a bit weird and consume a lot of screen space for nothing. . EDIT: But if this is too much work I think we can live with that as runSofa should die :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324314176
https://github.com/sofa-framework/sofa/pull/369#issuecomment-324327683:39,Usability,guid,guidelines,39,"Well, runSofa was not really following guidelines on that :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324327683
https://github.com/sofa-framework/sofa/pull/369#issuecomment-329142955:156,Usability,simpl,simply,156,"SOFA-dev meeting report: @damienmarchal will merge this PR with #373 since their contents are related. Doing so, he will try to get rid of this box problem simply by removing all boxes (separating Datas with lines). To be continued...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-329142955
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1204,Modifiability,inherit,inherit,1204," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1408,Modifiability,inherit,inherit,1408," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1492,Modifiability,inherit,inheriting,1492," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1569,Modifiability,inherit,inheriting,1569," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:32,Usability,feedback,feedback,32,"Hi Thomas,. Many thanks for the feedback. ; I'm a bit confused because as far as I can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:987,Usability,UX,UX,987,"Hi Thomas,. Many thanks for the feedback. ; I'm a bit confused because as far as I can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1954,Usability,clear,clearly,1954," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:193,Modifiability,refactor,refactoring,193,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:786,Modifiability,refactor,refactoring,786,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:801,Safety,detect,detect,801,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:724,Testability,test,tests,724,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:861,Testability,test,tests,861,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631
https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:27,Usability,feedback,feedback,27,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631
https://github.com/sofa-framework/sofa/issues/375#issuecomment-324900504:203,Usability,clear,clear,203,"Ok.... so when a node does not have parent.... which I assume is the case of the root ...; then the getPathName() string is empty... and ; Which make the function CreateString to return ""@"". . I have no clear idea where to fix that... the current fix is in #377",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/375#issuecomment-324900504
https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289:88,Integrability,message,message,88,"Thank you Guillaume, ; I vote for fast-merge. But i think it is better to chain the two message like that:; ```console; msg_info() << ""Blahblah"" << msgendl; << ""Other thing"";; ```; Because it faster and if the two line are forming a single message it is more clear to have that:; ```console; INFO (MyComponent) : ""Blahblah"" ; ""OtherThing""; ```; Instead of: ; ```console; INFO (MyComponent) : ""Blahblah""; INFO (MyComponent) : ""OtherThing""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289
https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289:240,Integrability,message,message,240,"Thank you Guillaume, ; I vote for fast-merge. But i think it is better to chain the two message like that:; ```console; msg_info() << ""Blahblah"" << msgendl; << ""Other thing"";; ```; Because it faster and if the two line are forming a single message it is more clear to have that:; ```console; INFO (MyComponent) : ""Blahblah"" ; ""OtherThing""; ```; Instead of: ; ```console; INFO (MyComponent) : ""Blahblah""; INFO (MyComponent) : ""OtherThing""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289
https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289:259,Usability,clear,clear,259,"Thank you Guillaume, ; I vote for fast-merge. But i think it is better to chain the two message like that:; ```console; msg_info() << ""Blahblah"" << msgendl; << ""Other thing"";; ```; Because it faster and if the two line are forming a single message it is more clear to have that:; ```console; INFO (MyComponent) : ""Blahblah"" ; ""OtherThing""; ```; Instead of: ; ```console; INFO (MyComponent) : ""Blahblah""; INFO (MyComponent) : ""OtherThing""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289
https://github.com/sofa-framework/sofa/pull/384#issuecomment-327112983:81,Usability,simpl,simple,81,"Hi @vmagno, thank you for your PR!; This should be merged fast.; Could you add a simple description please?; [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/384#issuecomment-327112983
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663:455,Modifiability,plugin,plugins,455,"Thanks you all the for the feedback. . I appologize about the reviewing work. And you are right, this one is very hard. We can also be a bit more ""lazy"" in the reviewing, merging it, write a good changelog a tell people to send feedback if something goes wrong. . I'm pushing this one because we have a nice other PR waiting and this one have new cool features (from distance field modeling to tetrahedral meshing). . EDIT: actually moving from module to plugins without refactoring is much easier...but well... I was not able to prevent me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663:471,Modifiability,refactor,refactoring,471,"Thanks you all the for the feedback. . I appologize about the reviewing work. And you are right, this one is very hard. We can also be a bit more ""lazy"" in the reviewing, merging it, write a good changelog a tell people to send feedback if something goes wrong. . I'm pushing this one because we have a nice other PR waiting and this one have new cool features (from distance field modeling to tetrahedral meshing). . EDIT: actually moving from module to plugins without refactoring is much easier...but well... I was not able to prevent me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663:27,Usability,feedback,feedback,27,"Thanks you all the for the feedback. . I appologize about the reviewing work. And you are right, this one is very hard. We can also be a bit more ""lazy"" in the reviewing, merging it, write a good changelog a tell people to send feedback if something goes wrong. . I'm pushing this one because we have a nice other PR waiting and this one have new cool features (from distance field modeling to tetrahedral meshing). . EDIT: actually moving from module to plugins without refactoring is much easier...but well... I was not able to prevent me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663
https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663:228,Usability,feedback,feedback,228,"Thanks you all the for the feedback. . I appologize about the reviewing work. And you are right, this one is very hard. We can also be a bit more ""lazy"" in the reviewing, merging it, write a good changelog a tell people to send feedback if something goes wrong. . I'm pushing this one because we have a nice other PR waiting and this one have new cool features (from distance field modeling to tetrahedral meshing). . EDIT: actually moving from module to plugins without refactoring is much easier...but well... I was not able to prevent me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663
https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531:300,Testability,test,test,300,"Hi Raphael,. Many thank for your pull request. ; The feature sounds appealing and at first sight it looks ok. I have never used this component so if someone can give feedback it would be great. . EDIT: do you mind if I push some cleaning commit on this component in your PR. I would like to add some test cases for this component.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531
https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531:166,Usability,feedback,feedback,166,"Hi Raphael,. Many thank for your pull request. ; The feature sounds appealing and at first sight it looks ok. I have never used this component so if someone can give feedback it would be great. . EDIT: do you mind if I push some cleaning commit on this component in your PR. I would like to add some test cases for this component.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531
https://github.com/sofa-framework/sofa/pull/399#issuecomment-335735433:112,Availability,error,errors,112,"The function asin is defined in [-1,1].; The fix prevents NAN when the argument is slightly >1 due to numerical errors (1,000000000000001).; Hope it's clear enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-335735433
https://github.com/sofa-framework/sofa/pull/399#issuecomment-335735433:151,Usability,clear,clear,151,"The function asin is defined in [-1,1].; The fix prevents NAN when the argument is slightly >1 due to numerical errors (1,000000000000001).; Hope it's clear enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-335735433
https://github.com/sofa-framework/sofa/issues/400#issuecomment-330498906:8,Usability,simpl,simply,8,"You can simply start a python sofa scene using the main sofa executable, either through `File/Open` or from the command line. . A simple scene goes like this:. ```python; def createScene(node):; child = node.createChild('childname'); object = child.createObject('MechanicalObject', name = 'mobject', size = 1); ```. Please see the docs for more details.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-330498906
https://github.com/sofa-framework/sofa/issues/400#issuecomment-330498906:130,Usability,simpl,simple,130,"You can simply start a python sofa scene using the main sofa executable, either through `File/Open` or from the command line. . A simple scene goes like this:. ```python; def createScene(node):; child = node.createChild('childname'); object = child.createObject('MechanicalObject', name = 'mobject', size = 1); ```. Please see the docs for more details.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-330498906
https://github.com/sofa-framework/sofa/pull/407#issuecomment-330469848:74,Usability,simpl,simply,74,@guparan ; Actually there were not used at all in the sofa code base so I simply remove them. To you have a suggestion about that ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407#issuecomment-330469848
https://github.com/sofa-framework/sofa/pull/411#issuecomment-334453911:99,Usability,feedback,feedback,99,"Thank you @maxime-tournier and sorry for the delay; @damienmarchal @matthieu-nesme do you have any feedback regarding the PR, otherwise it should be merged. Thx guys",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-334453911
https://github.com/sofa-framework/sofa/issues/413#issuecomment-334468636:399,Usability,clear,clear,399,"@damienmarchal, splitting our sprint branch in 2 was not hard but like you I'd like to merge things correctly.; I agree with your proposal but I think we should also reopen a PR from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 to merge all sprint prerequisites first.; This way, the two PRs from our sprint will be very clear.; What do you think ? I am ready to do it ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334468636
https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:294,Availability,error,error,294,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780
https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:904,Integrability,interface,interface,904,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780
https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:327,Modifiability,plugin,plugin,327,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780
https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:1095,Usability,clear,clear,1095,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:1138,Integrability,depend,dependencies,1138,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:44,Testability,test,tests,44,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:101,Usability,simpl,simple,101,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:423,Usability,simpl,simpleapi,423,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:508,Usability,simpl,simpleapi,508,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:588,Usability,simpl,simpleapi,588,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:729,Usability,simpl,simpleapi,729,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:850,Usability,simpl,simpleapi,850,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:609,Availability,error,error,609,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:1283,Availability,error,error,1283,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:1320,Availability,error,error,1320,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:1289,Integrability,message,message,1289,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:557,Safety,avoid,avoid,557,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:76,Usability,simpl,simpleapi,76,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:402,Usability,simpl,simpleapi,402,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:1355,Usability,simpl,simpleapi,1355,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:218,Availability,recover,recovering,218,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143
https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:595,Integrability,depend,dependent,595,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143
https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:218,Safety,recover,recovering,218,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143
https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:120,Usability,simpl,simple,120,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143
https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:518,Usability,usab,usable,518,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:6,Modifiability,refactor,refactoring,6,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:60,Modifiability,plugin,plugin,60,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:209,Modifiability,plugin,plugin,209,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:237,Modifiability,plugin,plugins,237,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:420,Modifiability,refactor,refactoring,420,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:112,Testability,test,test,112,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:225,Usability,simpl,simply,225,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:28,Integrability,message,message,28,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:387,Integrability,message,message,387,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:710,Integrability,message,message,710,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:280,Modifiability,plugin,plugins,280,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:620,Modifiability,plugin,plugins,620,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:608,Performance,load,loading,608,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:170,Usability,simpl,simpleapi,170,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552:16,Modifiability,plugin,plugins,16,"@guparan in our plugins organization objects is there to hold c++ class that are not components while in general 'core' in sofa is for the base classes and infrastructure. Actually what we are putting in this objects directory is much closer in essence to what is actually in sofa/helper (ie utilitary classes). But ""objects"" is not a very clear name after all and core is maybe not better but not worse so if you like it...let's use it ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552:340,Usability,clear,clear,340,"@guparan in our plugins organization objects is there to hold c++ class that are not components while in general 'core' in sofa is for the base classes and infrastructure. Actually what we are putting in this objects directory is much closer in essence to what is actually in sofa/helper (ie utilitary classes). But ""objects"" is not a very clear name after all and core is maybe not better but not worse so if you like it...let's use it ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:121,Modifiability,plugin,plugin,121,"The problem with SceneCreator is discussed in #417. ; But to summary the problem SceneCreator (which is supposed to be a plugin) is including tons of ; includes because he prefer to create the objects using ::New<MyObject>() instead of using abstracted BaseObject through the factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:309,Usability,simpl,simple,309,"The problem with SceneCreator is discussed in #417. ; But to summary the problem SceneCreator (which is supposed to be a plugin) is including tons of ; includes because he prefer to create the objects using ::New<MyObject>() instead of using abstracted BaseObject through the factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:378,Usability,simpl,simpleapi,378,"The problem with SceneCreator is discussed in #417. ; But to summary the problem SceneCreator (which is supposed to be a plugin) is including tons of ; includes because he prefer to create the objects using ::New<MyObject>() instead of using abstracted BaseObject through the factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:1726,Usability,simpl,simpleapi,1726,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:1811,Usability,simpl,simpleapi,1811,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:1891,Usability,simpl,simpleapi,1891,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:2032,Usability,simpl,simpleapi,2032,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:2153,Usability,simpl,simpleapi,2153,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/pull/433#issuecomment-333822629:16,Usability,simpl,simple,16,"To keep history simple, I will push your commit manually and close this PR afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/433#issuecomment-333822629
https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790:329,Integrability,depend,dependency,329,"Great :-). Well, PIMPLs and forward declarations solve two orthogonal issues:. - forward declarations are (mostly) for types in the API defined by the class i.e. public methods; - PIMPLs are for when the implementation pulls off too many includes that are only needed by the implementation, or when you want/need to break source dependency. Typically forward declarations are best packed in a header for each plugin/module e.g. ; ```c++; #include <sofa/core/types.h>; #include <Compliant/types.h>; ```. which itself may pull forward decls from subfolders, like `#include <Compliant/mapping/types.h>`. . Of course we don't want to end up with yet another gigantic include graph, but forward includes are typically much smaller than actual includes so we should be fine io-wise. . Concerning PIMPLs, you'll need to put it behind a `std::unique_ptr` like so:. ```c++; class foo {; struct pimpl_type;; std::unique_ptr<pimpl_type> pimpl;. public:; foo();; ~foo();; };; ```; otherwise your class will have undefined `sizeof`, and you won't be able to instantiate it unless you include the PIMPL definition (which you don't want by construction). My feeling is that the general guideline should be about forward declarations: PIMPLs are seldom needed, and really put some burden on the programmer as you need to write the glue code between the pimpl and the actual class. On the contrary, forward decls are easy to setup and to implement, and *should* definitely improve build times.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790
https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790:409,Modifiability,plugin,plugin,409,"Great :-). Well, PIMPLs and forward declarations solve two orthogonal issues:. - forward declarations are (mostly) for types in the API defined by the class i.e. public methods; - PIMPLs are for when the implementation pulls off too many includes that are only needed by the implementation, or when you want/need to break source dependency. Typically forward declarations are best packed in a header for each plugin/module e.g. ; ```c++; #include <sofa/core/types.h>; #include <Compliant/types.h>; ```. which itself may pull forward decls from subfolders, like `#include <Compliant/mapping/types.h>`. . Of course we don't want to end up with yet another gigantic include graph, but forward includes are typically much smaller than actual includes so we should be fine io-wise. . Concerning PIMPLs, you'll need to put it behind a `std::unique_ptr` like so:. ```c++; class foo {; struct pimpl_type;; std::unique_ptr<pimpl_type> pimpl;. public:; foo();; ~foo();; };; ```; otherwise your class will have undefined `sizeof`, and you won't be able to instantiate it unless you include the PIMPL definition (which you don't want by construction). My feeling is that the general guideline should be about forward declarations: PIMPLs are seldom needed, and really put some burden on the programmer as you need to write the glue code between the pimpl and the actual class. On the contrary, forward decls are easy to setup and to implement, and *should* definitely improve build times.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790
https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790:1171,Usability,guid,guideline,1171,"Great :-). Well, PIMPLs and forward declarations solve two orthogonal issues:. - forward declarations are (mostly) for types in the API defined by the class i.e. public methods; - PIMPLs are for when the implementation pulls off too many includes that are only needed by the implementation, or when you want/need to break source dependency. Typically forward declarations are best packed in a header for each plugin/module e.g. ; ```c++; #include <sofa/core/types.h>; #include <Compliant/types.h>; ```. which itself may pull forward decls from subfolders, like `#include <Compliant/mapping/types.h>`. . Of course we don't want to end up with yet another gigantic include graph, but forward includes are typically much smaller than actual includes so we should be fine io-wise. . Concerning PIMPLs, you'll need to put it behind a `std::unique_ptr` like so:. ```c++; class foo {; struct pimpl_type;; std::unique_ptr<pimpl_type> pimpl;. public:; foo();; ~foo();; };; ```; otherwise your class will have undefined `sizeof`, and you won't be able to instantiate it unless you include the PIMPL definition (which you don't want by construction). My feeling is that the general guideline should be about forward declarations: PIMPLs are seldom needed, and really put some burden on the programmer as you need to write the glue code between the pimpl and the actual class. On the contrary, forward decls are easy to setup and to implement, and *should* definitely improve build times.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:2397,Deployability,configurat,configurationSetting,2397,"eAnimationLoop.h>; #include <sofa/core/visual/VisualLoop.h>; #include <sofa/core/collision/Pipeline.h>; #include <sofa/core/loader/BaseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:2397,Modifiability,config,configurationSetting,2397,"eAnimationLoop.h>; #include <sofa/core/visual/VisualLoop.h>; #include <sofa/core/collision/Pipeline.h>; #include <sofa/core/loader/BaseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:2829,Modifiability,maintainab,maintainability,2829,"aseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, @guparan , @ErwanDouaille ... if you have idea for a simpler and/or forward declaration friendly approach help would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:1222,Performance,load,loader,1222,ted to the order in which the compiler is doing template instanciation vs un-used code removal. . Now the big picture is that any link force in the .h force to include the full definition of the target object which is way to much. ; Eg: from Node.h (which is included in hundreds of compilation units); ```cpp; #include <sofa/core/behavior/ForceField.h>; #include <sofa/core/behavior/BaseInteractionForceField.h>; #include <sofa/core/behavior/Mass.h>; #include <sofa/core/behavior/BaseProjectiveConstraintSet.h>; #include <sofa/core/behavior/BaseConstraintSet.h>; #include <sofa/core/topology/Topology.h>; #include <sofa/core/topology/BaseTopologyObject.h>; #include <sofa/core/topology/BaseMeshTopology.h>; #include <sofa/core/behavior/LinearSolver.h>; #include <sofa/core/behavior/OdeSolver.h>; #include <sofa/core/behavior/ConstraintSolver.h>; #include <sofa/core/behavior/BaseAnimationLoop.h>; #include <sofa/core/visual/VisualLoop.h>; #include <sofa/core/collision/Pipeline.h>; #include <sofa/core/loader/BaseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:2978,Usability,simpl,simpler,2978,"aseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, @guparan , @ErwanDouaille ... if you have idea for a simpler and/or forward declaration friendly approach help would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:3151,Usability,simpl,simpler,3151,"aseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, @guparan , @ErwanDouaille ... if you have idea for a simpler and/or forward declaration friendly approach help would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:170,Modifiability,plugin,pluginizing,170,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:218,Modifiability,plugin,pluginization,218,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:885,Safety,risk,risk,885,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:355,Testability,test,tests,355,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:612,Testability,test,test,612,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:1132,Usability,feedback,feedback,1132,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963
https://github.com/sofa-framework/sofa/pull/459#issuecomment-363549848:19,Usability,feedback,feedback,19,"Thank you for your feedback Eulalie!; I guess some fixes / merges are required to fit the current master. To start with, let's [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-363549848
https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901:475,Modifiability,variab,variable,475,"Hello,. Thank for the PR. The added feature is nice and should be merged but the way it hack the command line by allowing ""-2"" is very confusing. . Why not doing: ; The standard way; ```runSofa -c 1```. Only for the init functions:; ```runSofa -b```; (as -i is already taken maybe -b to begin is a good choice). For the init function and for every second step:; ```runSofa -c 2 -b```. It would clearly separate the concerns instead of encoding different behavior in the same variable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901
https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901:394,Usability,clear,clearly,394,"Hello,. Thank for the PR. The added feature is nice and should be merged but the way it hack the command line by allowing ""-2"" is very confusing. . Why not doing: ; The standard way; ```runSofa -c 1```. Only for the init functions:; ```runSofa -b```; (as -i is already taken maybe -b to begin is a good choice). For the init function and for every second step:; ```runSofa -c 2 -b```. It would clearly separate the concerns instead of encoding different behavior in the same variable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901
https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799:160,Modifiability,coupling,coupling,160,One possible next-step could be to connect the BaseSimulationTest with the simpleapi work discussed with @maxime-tournier. So that we would have a fully loosed coupling equivalent to scenecreator and sofatest with good looking syntax.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799
https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799:75,Usability,simpl,simpleapi,75,One possible next-step could be to connect the BaseSimulationTest with the simpleapi work discussed with @maxime-tournier. So that we would have a fully loosed coupling equivalent to scenecreator and sofatest with good looking syntax.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:683,Availability,error,error,683,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1097,Availability,avail,available,1097,"ng a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:2485,Energy Efficiency,energy,energy,2485,"ese tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:127,Integrability,depend,depend,127,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1004,Integrability,depend,dependencies,1004,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1173,Integrability,depend,dependency,1173,"ng a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:788,Modifiability,coupling,coupling,788,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:99,Testability,test,tests,99,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:109,Testability,test,tests,109,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:168,Testability,test,tests,168,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:501,Testability,test,testing,501,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:552,Testability,test,tests,552,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:646,Testability,test,tests,646,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:772,Testability,test,tests,772,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:898,Testability,test,tests,898,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1052,Testability,test,test,1052,"ng a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1210,Testability,test,test,1210,"ng a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1274,Testability,test,tests,1274,"you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1362,Testability,test,tested,1362,"you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1376,Testability,test,tests,1376,"signed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1635,Testability,test,tests,1635,"se tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1689,Testability,test,tests,1689,"ese tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:2009,Testability,test,tests,2009,"ese tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:2386,Testability,test,tests,2386,"ese tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:2537,Testability,test,tests,2537,"ese tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:76,Usability,clear,clear,76,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1277,Availability,failure,failure,1277,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:771,Integrability,depend,dependencies,771,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1481,Integrability,depend,dependency,1481,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:681,Modifiability,inherit,inheriting,681,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:891,Modifiability,plugin,plugins,891,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1438,Modifiability,coupling,coupling,1438,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1595,Modifiability,plugin,plugins,1595,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1663,Modifiability,plugin,plugin,1663,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:903,Performance,load,loaded,903,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:171,Testability,test,tests,171,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:241,Testability,test,test,241,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:262,Testability,test,test,262,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:328,Testability,test,tests,328,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:367,Testability,test,tests,367,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:675,Testability,test,tests,675,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:789,Testability,test,test,789,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1116,Testability,test,tests,1116,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1242,Testability,test,test,1242,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1335,Testability,test,tests,1335,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1551,Testability,test,tests,1551,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1651,Testability,test,test,1651,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1191,Usability,clear,clear,1191,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1615,Usability,clear,clear,1615,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1715,Availability,failure,failure,1715,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1069,Deployability,install,install,1069,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1681,Deployability,integrat,integrate,1681,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:124,Integrability,depend,dependency,124,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:224,Integrability,depend,dependency,224,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:409,Integrability,depend,dependency,409,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:466,Integrability,depend,dependency,466,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:866,Integrability,depend,dependency,866,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1681,Integrability,integrat,integrate,1681,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:276,Modifiability,inherit,inheriting,276,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:576,Modifiability,coupling,coupling,576,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1033,Modifiability,inherit,inherit,1033,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1862,Modifiability,inherit,inheriting,1862,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:271,Testability,test,test,271,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:684,Testability,test,test,684,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:704,Testability,test,test,704,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1109,Testability,test,test,1109,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1825,Testability,test,tests,1825,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:159,Usability,clear,clear,159,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:654,Usability,clear,clear,654,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:64,Integrability,depend,dependencies,64,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:885,Integrability,message,message,885,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:607,Modifiability,refactor,refactored,607,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:244,Testability,test,tests,244,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:266,Testability,test,tests,266,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:485,Testability,test,tests,485,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:577,Testability,test,tests,577,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:785,Testability,test,tests,785,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:855,Testability,log,log,855,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:952,Testability,test,tests,952,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:1023,Testability,test,tests,1023,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:699,Usability,resume,resume,699,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-343516044:59,Usability,feedback,feedback,59,Maxime (@maxime-tournier); I would appreciate to have your feedback on this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343516044
https://github.com/sofa-framework/sofa/pull/471#issuecomment-343905851:48,Usability,feedback,feedback,48,@maxime-tournier I would alreay be happy with a feedback on the approach taken to cut the depdencies. I'm asking because I know the topic interests you.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343905851
https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275:119,Availability,fault,fault,119,"Hello Erwan,. Good idea to make a warning. . Now at the fundamental level to me all this part of Sofa is ""broken"". The fault is that there is no clear difference between the ""in editor"" camera (the ones use in the viewer/runSofa editor) and the ""in-scene"" camera. Making this distinction is important and I'm sure that for runSofa2 we will need to make that clear. . To be clear...think how Unity is doing... some panel are showing ""external"" view of the scene for editting..while one or multiple ""in-scene"" cameras are used in the ""game"" panel for the rendering. . Actually we also have the same problem with all the interaction.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275
https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275:145,Usability,clear,clear,145,"Hello Erwan,. Good idea to make a warning. . Now at the fundamental level to me all this part of Sofa is ""broken"". The fault is that there is no clear difference between the ""in editor"" camera (the ones use in the viewer/runSofa editor) and the ""in-scene"" camera. Making this distinction is important and I'm sure that for runSofa2 we will need to make that clear. . To be clear...think how Unity is doing... some panel are showing ""external"" view of the scene for editting..while one or multiple ""in-scene"" cameras are used in the ""game"" panel for the rendering. . Actually we also have the same problem with all the interaction.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275
https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275:358,Usability,clear,clear,358,"Hello Erwan,. Good idea to make a warning. . Now at the fundamental level to me all this part of Sofa is ""broken"". The fault is that there is no clear difference between the ""in editor"" camera (the ones use in the viewer/runSofa editor) and the ""in-scene"" camera. Making this distinction is important and I'm sure that for runSofa2 we will need to make that clear. . To be clear...think how Unity is doing... some panel are showing ""external"" view of the scene for editting..while one or multiple ""in-scene"" cameras are used in the ""game"" panel for the rendering. . Actually we also have the same problem with all the interaction.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275
https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275:373,Usability,clear,clear,373,"Hello Erwan,. Good idea to make a warning. . Now at the fundamental level to me all this part of Sofa is ""broken"". The fault is that there is no clear difference between the ""in editor"" camera (the ones use in the viewer/runSofa editor) and the ""in-scene"" camera. Making this distinction is important and I'm sure that for runSofa2 we will need to make that clear. . To be clear...think how Unity is doing... some panel are showing ""external"" view of the scene for editting..while one or multiple ""in-scene"" cameras are used in the ""game"" panel for the rendering. . Actually we also have the same problem with all the interaction.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275
https://github.com/sofa-framework/sofa/issues/482#issuecomment-338700994:1155,Modifiability,coupling,coupling,1155,"es of changes can be very painful for everyone looking at file histories and/or not working exclusively on master:""; You are totally correct. ""So I would like to know if those considerations were understood before doing this once again ?""; As you ask the question, yes, these considerations were understood and discussed. The problem we have is that when people taking part in discussions are sharing similar concern they can agree on changes that does not fit others needs. This is why we value and regularly ask your feedback (using @JeremieA or @fjourdes). Since we are on github nothing have been ever merged without a minimal shared approval (and this is a keystone for me to contribute to Sofa). So on my side I see no problem in withdrawing or updating the changes made of this is too cumbersome for your workflow. In our workflow we try to stay as close as possible to master and among all the problem we see in the current sofa code base (eg: no being able to deprecate things, too long compilation time because of code coupling, in-coherent and hard to understand file scheme organization) keeping a traceable file history, despite important, was set to a low priority. ""And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :""; Impossible, I'm totally opposed to ignoring people contributions (as I'm oposed about endless discussion :)). ; Step 1 and 2 actually fit our needs so we can do that (and actually contribute by PR to make this happens)... About step 3...I have a:; - rather positive opinion on having a SofaPlugin/SofaPluginDeprecated; - moderated opinion on SofaPluginGPL; - negative opinion about using SofaGeneral/SofaAdvanced/SofaMisc because it is extremely confusing. To explaine why...I bet a coffee that, if we take 100 sofa components and ask 10 developers where the component should be we will end up with totally different results (because what is advanced for someone is basic to another) so I fear that opening t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482#issuecomment-338700994
https://github.com/sofa-framework/sofa/issues/482#issuecomment-338700994:645,Usability,feedback,feedback,645,"Hello Jérémie,. Thank you for rising this issue and for making a proposition answering the questions asked in #346. ""These types of changes can be very painful for everyone looking at file histories and/or not working exclusively on master:""; You are totally correct. ""So I would like to know if those considerations were understood before doing this once again ?""; As you ask the question, yes, these considerations were understood and discussed. The problem we have is that when people taking part in discussions are sharing similar concern they can agree on changes that does not fit others needs. This is why we value and regularly ask your feedback (using @JeremieA or @fjourdes). Since we are on github nothing have been ever merged without a minimal shared approval (and this is a keystone for me to contribute to Sofa). So on my side I see no problem in withdrawing or updating the changes made of this is too cumbersome for your workflow. In our workflow we try to stay as close as possible to master and among all the problem we see in the current sofa code base (eg: no being able to deprecate things, too long compilation time because of code coupling, in-coherent and hard to understand file scheme organization) keeping a traceable file history, despite important, was set to a low priority. ""And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :""; Impossible, I'm totally opposed to ignoring people contributions (as I'm oposed about endless discussion :)). ; Step 1 and 2 actually fit our needs so we can do that (and actually contribute by PR to make this happens)... About step 3...I have a:; - rather positive opinion on having a SofaPlugin/SofaPluginDeprecated; - moderated opinion on SofaPluginGPL; - negative opinion about using SofaGeneral/SofaAdvanced/SofaMisc because it is extremely confusing. To explaine why...I bet a coffee that, if we take 100 sofa components and ask 10 developers where the component should be we w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482#issuecomment-338700994
https://github.com/sofa-framework/sofa/pull/484#issuecomment-339261044:45,Usability,feedback,feedback,45,@IPeterlik @courtecuisse please provide us a feedback on this PR. This would be valuable. Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484#issuecomment-339261044
https://github.com/sofa-framework/sofa/issues/495#issuecomment-339577323:188,Usability,simpl,simple,188,"To me, the real question is do we want to keep float+double at the same time?; I.e. do we want to be able to have double dofs mapped from float dofs themselves mapped from double dofs?. A simple typedef for SReal would be so easy... Otherwise the graal would rather be to keep only float everywhere, and having just a few double where it is really necessary for numerical precision.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-339577323
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191:64,Availability,down,downward,64,"I just did a quick test in a simple scene (horizontal beam with downward force at one end), and the Newton static solver does *not* converge with the TetrahedronFEMForceField in single precision, using a CGSolver in double precision. The problem may be with the addDforce function used by CG, but it would need some more investigating. So basically, we can't simply switch to single precision without checking everything that could be sensitive to numerical errors (but I agree that it would be better if we could use mostly single precision).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191:458,Availability,error,errors,458,"I just did a quick test in a simple scene (horizontal beam with downward force at one end), and the Newton static solver does *not* converge with the TetrahedronFEMForceField in single precision, using a CGSolver in double precision. The problem may be with the addDforce function used by CG, but it would need some more investigating. So basically, we can't simply switch to single precision without checking everything that could be sensitive to numerical errors (but I agree that it would be better if we could use mostly single precision).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191:19,Testability,test,test,19,"I just did a quick test in a simple scene (horizontal beam with downward force at one end), and the Newton static solver does *not* converge with the TetrahedronFEMForceField in single precision, using a CGSolver in double precision. The problem may be with the addDforce function used by CG, but it would need some more investigating. So basically, we can't simply switch to single precision without checking everything that could be sensitive to numerical errors (but I agree that it would be better if we could use mostly single precision).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191:29,Usability,simpl,simple,29,"I just did a quick test in a simple scene (horizontal beam with downward force at one end), and the Newton static solver does *not* converge with the TetrahedronFEMForceField in single precision, using a CGSolver in double precision. The problem may be with the addDforce function used by CG, but it would need some more investigating. So basically, we can't simply switch to single precision without checking everything that could be sensitive to numerical errors (but I agree that it would be better if we could use mostly single precision).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191:359,Usability,simpl,simply,359,"I just did a quick test in a simple scene (horizontal beam with downward force at one end), and the Newton static solver does *not* converge with the TetrahedronFEMForceField in single precision, using a CGSolver in double precision. The problem may be with the addDforce function used by CG, but it would need some more investigating. So basically, we can't simply switch to single precision without checking everything that could be sensitive to numerical errors (but I agree that it would be better if we could use mostly single precision).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191
https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342:106,Deployability,update,update,106,Maybe we should add in the object factory a way to detect the use of Vec3f and warn user that it needs to update its scene to use Vec3 instead. So we can start simplifying the code base ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342
https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342:51,Safety,detect,detect,51,Maybe we should add in the object factory a way to detect the use of Vec3f and warn user that it needs to update its scene to use Vec3 instead. So we can start simplifying the code base ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342
https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342:160,Usability,simpl,simplifying,160,Maybe we should add in the object factory a way to detect the use of Vec3f and warn user that it needs to update its scene to use Vec3 instead. So we can start simplifying the code base ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342
https://github.com/sofa-framework/sofa/issues/496#issuecomment-339449132:32,Usability,intuit,intuitive,32,"+1; Having a clean, generic and intuitive method for marchingCube would be awesome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339449132
https://github.com/sofa-framework/sofa/issues/496#issuecomment-339468578:15,Usability,feedback,feedback,15,"Thanks for the feedback Jean-Nicolas, . Could you provide examples of what would look like a generic/inituitive version in your view ? . On my side I'm thinking of something like:; ```xml; <CustomField name=""scalarfield"" source=""myfield.py"" evalFunctionName=""myImplicitFunction""/> ; <SurfaceMeshGenerationFromScalarField field=""@scalarfield"" output=""@topology""/>. <MetaBallField name=""scalarfield2"" radius=""0.5"" positions=""0 0 0""/> ; <SurfaceMeshGenerationFromScalarField field=""@scalarfield2"" output=""@topology2""/>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339468578
https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638:203,Modifiability,refactor,refactor,203,"This is pretty close to what I had in mind. Maybe call (or alias) the component with simply... ""MarchingCube"". It would become easy to find for everybody. Like you said, at the same time we could clean (refactor, delete) the other implementations of MarchingCube variations . Then a simple grep on the code from a new Sofa user would outline the ""MarchingCube"" component and welcome him in the community with joy :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638
https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638:85,Usability,simpl,simply,85,"This is pretty close to what I had in mind. Maybe call (or alias) the component with simply... ""MarchingCube"". It would become easy to find for everybody. Like you said, at the same time we could clean (refactor, delete) the other implementations of MarchingCube variations . Then a simple grep on the code from a new Sofa user would outline the ""MarchingCube"" component and welcome him in the community with joy :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638
https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638:283,Usability,simpl,simple,283,"This is pretty close to what I had in mind. Maybe call (or alias) the component with simply... ""MarchingCube"". It would become easy to find for everybody. Like you said, at the same time we could clean (refactor, delete) the other implementations of MarchingCube variations . Then a simple grep on the code from a new Sofa user would outline the ""MarchingCube"" component and welcome him in the community with joy :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134:446,Usability,undo,undocumented,446,"@guparan: ultimately what I wanted to achieve with this PR was to roll back to https://github.com/sofa-framework/sofa/commit/ca0402dbfb909c222f913cb7b8f03a522f71f9ad in terms of what the PluginRepository contains. I made a mistake when it came to the content of the PluginRepository except for the windows platform which is my most common development environment.; There have been multiple changes made to this file, most for no good, and mostly undocumented, reasons, this was working in the first place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342832090:12,Usability,clear,clear,12,"Ok it's all clear now, many thanks for your time :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342832090
https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522:145,Modifiability,refactor,refactor,145,"I didn't do anything right now. But I was thinking how we could change it. For the char length problem it's quite simple, but i think we need to refactor a lot of things in it. By example, one cool feature would be to be able to add arguments without changing main.cpp. Like adding a virtual function to BaseGUI and let subclasses having the ability to add options.; The main.cpp will still have basic arguments and will be able to list registered gui options. I don't like the (aGui only) comment ... :/. I can start working on it on my free time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522
https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522:114,Usability,simpl,simple,114,"I didn't do anything right now. But I was thinking how we could change it. For the char length problem it's quite simple, but i think we need to refactor a lot of things in it. By example, one cool feature would be to be able to add arguments without changing main.cpp. Like adding a virtual function to BaseGUI and let subclasses having the ability to add options.; The main.cpp will still have basic arguments and will be able to list registered gui options. I don't like the (aGui only) comment ... :/. I can start working on it on my free time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522
https://github.com/sofa-framework/sofa/pull/514#issuecomment-344212915:45,Usability,feedback,feedback,45,Let's wait the 7 days for potential remark / feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/514#issuecomment-344212915
https://github.com/sofa-framework/sofa/pull/524#issuecomment-358045787:52,Usability,feedback,feedback,52,"Hi @fredroy , @guparan , @hugtalbot . I got several feedback saying that the fix suggested as advice is not clear ; (i.e people don't understand it) and worse that add a bbox at the root node is not working.; Can someone give it a try.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-358045787
https://github.com/sofa-framework/sofa/pull/524#issuecomment-358045787:108,Usability,clear,clear,108,"Hi @fredroy , @guparan , @hugtalbot . I got several feedback saying that the fix suggested as advice is not clear ; (i.e people don't understand it) and worse that add a bbox at the root node is not working.; Can someone give it a try.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-358045787
https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951:131,Integrability,message,message,131,"Hello @bruno-marques . After some thinking about that I'm more convinced now that the best approach is to simply display a warning message like that:; ```cpp; if( isIntelraphics() ); {; msg_error(""runSofa"") << ""Intel drivers have a problem ...with ..... to runSofa you need to set your manually set an environment variable named 'MESA_GL_VERSION_OVERRIDE' with the value '3.0' to fix the problem."";; exit(-1);; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951
https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951:314,Modifiability,variab,variable,314,"Hello @bruno-marques . After some thinking about that I'm more convinced now that the best approach is to simply display a warning message like that:; ```cpp; if( isIntelraphics() ); {; msg_error(""runSofa"") << ""Intel drivers have a problem ...with ..... to runSofa you need to set your manually set an environment variable named 'MESA_GL_VERSION_OVERRIDE' with the value '3.0' to fix the problem."";; exit(-1);; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951
https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951:106,Usability,simpl,simply,106,"Hello @bruno-marques . After some thinking about that I'm more convinced now that the best approach is to simply display a warning message like that:; ```cpp; if( isIntelraphics() ); {; msg_error(""runSofa"") << ""Intel drivers have a problem ...with ..... to runSofa you need to set your manually set an environment variable named 'MESA_GL_VERSION_OVERRIDE' with the value '3.0' to fix the problem."";; exit(-1);; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951
https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:467,Modifiability,plugin,plugins,467,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851
https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:155,Safety,abort,aborts,155,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851
https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:199,Security,sanitiz,sanitizer,199,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851
https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:653,Usability,simpl,simple,653,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:4210,Availability,down,down,4210,"oadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and having this buffer overflow on my way is a distraction. While it's not hard to fix it locally, this thread shows that I am not the first bitten by it, and suggests I won't be the last. It will save everyone time and effort, if we fix trivialities. Let me know, what would be the next steps here. I will be glad to follow your guidance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:3774,Integrability,message,message,3774,"oadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and having this buffer overflow on my way is a distraction. While it's not hard to fix it locally, this thread shows that I am not the first bitten by it, and suggests I won't be the last. It will save everyone time and effort, if we fix trivialities. Let me know, what would be the next steps here. I will be glad to follow your guidance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:3269,Modifiability,variab,variable,3269,"de(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) DAGSimulati; on.cpp:78; #10 0x13a45aa79 in sofa::simulation::Node::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) Node.cpp:972 ; #11 0x14a8a7f43 in sofa::simulation::SceneLoaderPY::loadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and hav",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:2604,Performance,load,loadSceneWithArguments,2604,"ar, std::__1::char_traits<char>, std::__1::allocator<char> > const; &>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&&&) SPtr.h:57 ; #8 0x10f9118ec in sofa::core::objectmodel::New<sofa::simulation::graph::DAGNode>::New<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const; &>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&&&) SPtr.h:57 ; #9 0x10fa5fb10 in sofa::simulation::graph::DAGSimulation::createNewNode(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) DAGSimulati; on.cpp:78; #10 0x13a45aa79 in sofa::simulation::Node::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) Node.cpp:972 ; #11 0x14a8a7f43 in sofa::simulation::SceneLoaderPY::loadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:2988,Performance,load,load,2988,"ion::graph::DAGNode>::New<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const; &>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&&&) SPtr.h:57 ; #9 0x10fa5fb10 in sofa::simulation::graph::DAGSimulation::createNewNode(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) DAGSimulati; on.cpp:78; #10 0x13a45aa79 in sofa::simulation::Node::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) Node.cpp:972 ; #11 0x14a8a7f43 in sofa::simulation::SceneLoaderPY::loadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, no",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:3077,Performance,load,load,3077,"_1::allocator<char> > const; &>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&&&) SPtr.h:57 ; #9 0x10fa5fb10 in sofa::simulation::graph::DAGSimulation::createNewNode(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) DAGSimulati; on.cpp:78; #10 0x13a45aa79 in sofa::simulation::Node::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) Node.cpp:972 ; #11 0x14a8a7f43 in sofa::simulation::SceneLoaderPY::loadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:3956,Usability,simpl,simple,3956,"oadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and having this buffer overflow on my way is a distraction. While it's not hard to fix it locally, this thread shows that I am not the first bitten by it, and suggests I won't be the last. It will save everyone time and effort, if we fix trivialities. Let me know, what would be the next steps here. I will be glad to follow your guidance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:4596,Usability,guid,guidance,4596,"oadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and having this buffer overflow on my way is a distraction. While it's not hard to fix it locally, this thread shows that I am not the first bitten by it, and suggests I won't be the last. It will save everyone time and effort, if we fix trivialities. Let me know, what would be the next steps here. I will be glad to follow your guidance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497:866,Deployability,release,release,866,"My 2 cents... . Taking ""16 days to merge 20 lines of code is a waste of time"" is true...and this is the consequence that no-one ever took time to handle that properly. As usual no one's concerns tend to become everyone's waste of time. . My suggestion to fix that is:; - 0) make a style sheet that matches the Sofa guideline (or change the guideline to match an automated formatter style sheet which is much easier :)); - 1) apply an automated style sheet to format the whole code base. ; - 2) when making PR, everyone should apply the provided style sheet.; - 3) when merging a PR, the automated stylesheet should be applied again. . But ho wait ! ; Some told me here is already a stylesheet for astyle (to use in qtcreator) since years in the tools/astyle ; directory. ; This may be a good starting point for (0) and (1). . What about having 0 et 1 done for 17.16 release ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497:315,Usability,guid,guideline,315,"My 2 cents... . Taking ""16 days to merge 20 lines of code is a waste of time"" is true...and this is the consequence that no-one ever took time to handle that properly. As usual no one's concerns tend to become everyone's waste of time. . My suggestion to fix that is:; - 0) make a style sheet that matches the Sofa guideline (or change the guideline to match an automated formatter style sheet which is much easier :)); - 1) apply an automated style sheet to format the whole code base. ; - 2) when making PR, everyone should apply the provided style sheet.; - 3) when merging a PR, the automated stylesheet should be applied again. . But ho wait ! ; Some told me here is already a stylesheet for astyle (to use in qtcreator) since years in the tools/astyle ; directory. ; This may be a good starting point for (0) and (1). . What about having 0 et 1 done for 17.16 release ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497:340,Usability,guid,guideline,340,"My 2 cents... . Taking ""16 days to merge 20 lines of code is a waste of time"" is true...and this is the consequence that no-one ever took time to handle that properly. As usual no one's concerns tend to become everyone's waste of time. . My suggestion to fix that is:; - 0) make a style sheet that matches the Sofa guideline (or change the guideline to match an automated formatter style sheet which is much easier :)); - 1) apply an automated style sheet to format the whole code base. ; - 2) when making PR, everyone should apply the provided style sheet.; - 3) when merging a PR, the automated stylesheet should be applied again. . But ho wait ! ; Some told me here is already a stylesheet for astyle (to use in qtcreator) since years in the tools/astyle ; directory. ; This may be a good starting point for (0) and (1). . What about having 0 et 1 done for 17.16 release ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986:113,Deployability,update,updated,113,"To anyone (@guparan and @hugtalbot, @fredroy, @bcarrez ) Can you please check how the formatting sheet should be updated to stick the the sofa guidelines (or withdrawn some rule from the guidelines) so we have an up-to date sheet to use.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986:143,Usability,guid,guidelines,143,"To anyone (@guparan and @hugtalbot, @fredroy, @bcarrez ) Can you please check how the formatting sheet should be updated to stick the the sofa guidelines (or withdrawn some rule from the guidelines) so we have an up-to date sheet to use.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986:187,Usability,guid,guidelines,187,"To anyone (@guparan and @hugtalbot, @fredroy, @bcarrez ) Can you please check how the formatting sheet should be updated to stick the the sofa guidelines (or withdrawn some rule from the guidelines) so we have an up-to date sheet to use.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234:553,Usability,guid,guidelines,553,"I agree with the style checking + auto-formatting ideas, it has been regularly discussed for a long time now. Here is what I propose for the astyle sheet (based on the existing one):; ```bash; # Brace Style; --style=allman. # Indentation; --indent-switches; --indent=spaces=4; --indent-labels; --indent-col1-comments; --max-instatement-indent=100. # Padding; --pad-oper; --pad-comma; --align-pointer=type; --align-reference=type. # Formatting; --break-one-line-headers; --add-braces; --convert-tabs; ```; Tell me if this is breaking some of our [coding guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) but I think it is alright. My only doubt is about forcing or not braces around one line blocks (if, else, while, ...). I personally prefer when they are forced (particularly considering that SOFA devs are changing often and enjoy ""quick and dirty"" changes a lot) but the Google C++ Style Guide says the opposite [here](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md).; What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234
https://github.com/sofa-framework/sofa/issues/539#issuecomment-354131222:675,Availability,robust,robust,675,"Hi all, it appears that PR #521 breaks several scenes. ; I'm fixing that in PR: #548 . In some of the problematic scenes the mechanical object does not have a mass so it was simply fixed by adding one. . For examples/Components/forcefield/TetrahedronDiffusionFEMForceField.scn I'm not sure the zero mass is the cause of the problem. . @hugtalbot any idea ? . Now more fundamentally I'm puzzled by the ; ```; if( fabs(den)<f_smallDenominatorThreshold.getValue() && nb_iter > 1 ); ```. As there is a division by 'den' just after the condition so if den == 0 (which seems to happens in several cases) and first iteration then the scene explode with nan-nan everywhere. . A more robust & user friendly approach should be implemented.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/539#issuecomment-354131222
https://github.com/sofa-framework/sofa/issues/539#issuecomment-354131222:174,Usability,simpl,simply,174,"Hi all, it appears that PR #521 breaks several scenes. ; I'm fixing that in PR: #548 . In some of the problematic scenes the mechanical object does not have a mass so it was simply fixed by adding one. . For examples/Components/forcefield/TetrahedronDiffusionFEMForceField.scn I'm not sure the zero mass is the cause of the problem. . @hugtalbot any idea ? . Now more fundamentally I'm puzzled by the ; ```; if( fabs(den)<f_smallDenominatorThreshold.getValue() && nb_iter > 1 ); ```. As there is a division by 'den' just after the condition so if den == 0 (which seems to happens in several cases) and first iteration then the scene explode with nan-nan everywhere. . A more robust & user friendly approach should be implemented.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/539#issuecomment-354131222
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1510,Deployability,patch,patching,1510,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1858,Deployability,update,updated,1858,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1568,Energy Efficiency,reduce,reduce,1568,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1733,Integrability,depend,dependency,1733,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:510,Modifiability,refactor,refactoring,510,"Hello @StephaneCotin . I'm glad you are asking. . On my side I generate the following view to visualize & navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:720,Modifiability,refactor,refactoring,720,"Hello @StephaneCotin . I'm glad you are asking. . On my side I generate the following view to visualize & navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:984,Modifiability,plugin,plugins,984,"Hello @StephaneCotin . I'm glad you are asking. . On my side I generate the following view to visualize & navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1222,Modifiability,plugin,pluginization,1222,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1454,Modifiability,refactor,refactoring,1454,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1708,Modifiability,plugin,plugin,1708,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:500,Usability,guid,guide,500,"Hello @StephaneCotin . I'm glad you are asking. . On my side I generate the following view to visualize & navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:520,Availability,rollback,rollbacks,520,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:520,Deployability,rollback,rollbacks,520,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1298,Deployability,patch,patch,1298," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1452,Deployability,patch,patch,1452," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1952,Deployability,update,update,1952," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:2081,Deployability,patch,patch,2081," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:485,Energy Efficiency,adapt,adapt,485,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:612,Energy Efficiency,adapt,adapting,612,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1843,Energy Efficiency,adapt,adapt,1843," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:2018,Energy Efficiency,adapt,adapt,2018," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:153,Modifiability,refactor,refactoring,153,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:485,Modifiability,adapt,adapt,485,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:612,Modifiability,adapt,adapting,612,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:907,Modifiability,refactor,refactoring,907,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:971,Modifiability,refactor,refactor,971,"project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1005,Modifiability,refactor,refactoring,1005,"project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1089,Modifiability,refactor,refactoring,1089,"project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1176,Modifiability,refactor,refactoring,1176,"project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1757,Modifiability,refactor,refactoring,1757," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1843,Modifiability,adapt,adapt,1843," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:2018,Modifiability,adapt,adapt,2018," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:2223,Modifiability,refactor,refactoring,2223," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:443,Usability,feedback,feedback,443,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:2252,Usability,feedback,feedback,2252," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:682,Deployability,update,update,682,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:948,Deployability,patch,patch,948,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1035,Deployability,patch,patch,1035,",. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1242,Deployability,update,updates,1242," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1347,Deployability,update,updated,1347," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1449,Deployability,patch,patching,1449," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:272,Integrability,depend,dependencies,272,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1577,Integrability,depend,dependencies,1577," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1612,Integrability,depend,dependent,1612," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1680,Integrability,depend,dependencies,1680," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1540,Modifiability,plugin,plugins,1540," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1973,Modifiability,refactor,refactor,1973," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:333,Safety,avoid,avoid,333,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:604,Testability,test,test,604,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:259,Usability,simpl,simplify,259,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1671,Usability,simpl,simplify,1671," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1936,Usability,clear,clear,1936," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:2111,Usability,feedback,feedback,2111," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:109,Modifiability,config,config,109,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:432,Modifiability,refactor,refactoring,432,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:718,Modifiability,refactor,refactor,718,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:849,Modifiability,refactor,refactoring,849,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:943,Modifiability,refactor,refactoring,943,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:288,Performance,load,loaded,288,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:373,Performance,load,loaded,373,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:219,Usability,clear,clearly,219,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958:143,Testability,test,tests,143,Thanks for the feedback @untereiner maybe it is because in batch mode there is no opengl context. ; If I remember correctly this crash macos's tests that way. . Can you providing line/file that cause problem ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958:15,Usability,feedback,feedback,15,Thanks for the feedback @untereiner maybe it is because in batch mode there is no opengl context. ; If I remember correctly this crash macos's tests that way. . Can you providing line/file that cause problem ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958
https://github.com/sofa-framework/sofa/issues/552#issuecomment-367773729:17,Usability,simpl,simple,17,"Exactly, this is simple but it need to be discussed :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/552#issuecomment-367773729
https://github.com/sofa-framework/sofa/issues/552#issuecomment-372658667:92,Usability,feedback,feedback,92,Feel free to make PR when you think it is ready for you because this is the best way to get feedback.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/552#issuecomment-372658667
https://github.com/sofa-framework/sofa/pull/556#issuecomment-356127976:76,Usability,feedback,feedback,76,Your remarks are taken into account @IPeterlik :); let's see if any further feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556#issuecomment-356127976
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462:88,Usability,usab,usability,88,@sergeiNikolaev . I think your problem is interesting and is an important issue of Sofa usability. If you agree and other interested we could discuss here what ones can come up with possible solution (ie having more clear/simpler way to define component's properties).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462:216,Usability,clear,clear,216,@sergeiNikolaev . I think your problem is interesting and is an important issue of Sofa usability. If you agree and other interested we could discuss here what ones can come up with possible solution (ie having more clear/simpler way to define component's properties).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462:222,Usability,simpl,simpler,222,@sergeiNikolaev . I think your problem is interesting and is an important issue of Sofa usability. If you agree and other interested we could discuss here what ones can come up with possible solution (ie having more clear/simpler way to define component's properties).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812:366,Integrability,interface,interface,366,"A third solution, still in c++, to parse the added field into the function BoxROI::parse() and converts these fields values into the DataField used internally by BoxROI to do the computation. The good is that there is no performance cost. The drawback are the following:; - the parsed attribute are not visible in the GUI thus ppl cannot use them from the graphical interface and even worses, and when learning Sofa cannot discover they exists neither from the doc or from the GUI.; - the parsed attribute cannot be saved easily.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812:221,Performance,perform,performance,221,"A third solution, still in c++, to parse the added field into the function BoxROI::parse() and converts these fields values into the DataField used internally by BoxROI to do the computation. The good is that there is no performance cost. The drawback are the following:; - the parsed attribute are not visible in the GUI thus ppl cannot use them from the graphical interface and even worses, and when learning Sofa cannot discover they exists neither from the doc or from the GUI.; - the parsed attribute cannot be saved easily.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812:402,Usability,learn,learning,402,"A third solution, still in c++, to parse the added field into the function BoxROI::parse() and converts these fields values into the DataField used internally by BoxROI to do the computation. The good is that there is no performance cost. The drawback are the following:; - the parsed attribute are not visible in the GUI thus ppl cannot use them from the graphical interface and even worses, and when learning Sofa cannot discover they exists neither from the doc or from the GUI.; - the parsed attribute cannot be saved easily.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357642003:101,Usability,usab,usable,101,"And also I guess that for different people there are different ways to define the component the most usable way. So, I am afraid there won't be unique solution for this problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357642003
https://github.com/sofa-framework/sofa/pull/560#issuecomment-359809208:31,Usability,clear,clear,31,"Hello Serguei,. Thanks for the clear explaination. This may actually be part of the BoxROI documentation. ; Now back to your problem...what do you think about implementing a python function to convert from (position, orientation, size) would generates these 10 values ? Is it enough / not enough ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-359809208
https://github.com/sofa-framework/sofa/pull/567#issuecomment-358766000:585,Safety,avoid,avoid,585,"My 2 cents...; Eulalie is right, there is no 'formal' ambiguity as by just following the vector<> symbol the code editor jump to the 'using sofa::helper'. ; Guillaume is right in the fact that allowing using std::vector and using sofa::helper::vector in our code base it will generate a lot of ambiguity. . May I suggest two strategy: ; 1) 'using sofa::*' as much as you want unless it hides somethings from the stl. ; 2) 'using sofa::*' even for sofa::helper::vector etc. After all we are in sofa so it makes sense to get rid of as much as of the sofa::prefix for code simplicity. To avoid ambiguities, forbid the employement of using on external type eg no 'using std::vector' or 'using std::string'. . Strategy 2 would produce a very consistent and readable code making it obvious we we are using external object or lib;. EDIT: I forgot to say: :+1: Eulalie for the bugtracking, the fixing, cleaning and PRing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358766000
https://github.com/sofa-framework/sofa/pull/567#issuecomment-358766000:570,Usability,simpl,simplicity,570,"My 2 cents...; Eulalie is right, there is no 'formal' ambiguity as by just following the vector<> symbol the code editor jump to the 'using sofa::helper'. ; Guillaume is right in the fact that allowing using std::vector and using sofa::helper::vector in our code base it will generate a lot of ambiguity. . May I suggest two strategy: ; 1) 'using sofa::*' as much as you want unless it hides somethings from the stl. ; 2) 'using sofa::*' even for sofa::helper::vector etc. After all we are in sofa so it makes sense to get rid of as much as of the sofa::prefix for code simplicity. To avoid ambiguities, forbid the employement of using on external type eg no 'using std::vector' or 'using std::string'. . Strategy 2 would produce a very consistent and readable code making it obvious we we are using external object or lib;. EDIT: I forgot to say: :+1: Eulalie for the bugtracking, the fixing, cleaning and PRing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358766000
https://github.com/sofa-framework/sofa/pull/567#issuecomment-358917071:32,Usability,clear,clear,32,"Sounds good to me :) ; So to be clear I should remove all the `using std::*`.; And all the `using sofa::*`, including `sofa::helper::vector` are okay?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358917071
https://github.com/sofa-framework/sofa/issues/571#issuecomment-360534630:36,Usability,clear,clear,36,"Hi Sergei,; reset in SOFA might not clear with zeros some state values. That could be interesting to dig in the scene to see where does the problem come from. Could you investigate deeper ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/571#issuecomment-360534630
https://github.com/sofa-framework/sofa/issues/571#issuecomment-372656292:70,Usability,responsiv,responsiveness,70,"Hi @m4n4n . Thank you for considering this issue and sorry for my low responsiveness, I was away from the office for some days. Indeed, the problem disappeared since it was due to another issue : the PR #521 introduced a bug, fixed since the #556 ; This issue being linked to this issue should now be closed. Do not hesitate to consider any other issue ! :+1: . Best,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/571#issuecomment-372656292
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346:345,Availability,toler,tolerance,345,"Hi!; Here's a simple test scene showing the problem:; ```<?xml version=""1.0"" ?>; <Node name=""lroot"" gravity=""0 -9.81 0"" dt=""0.02"">; <Node name=""Liver"">; <EulerImplicitSolver name=""cg_odesolver"" rayleighStiffness=""0.1"" rayleighMass=""0.1"" />; <SparseLDLSolver saveMatrixToFile=""true""/>; <!-- <CGLinearSolver name=""linear solver"" iterations=""1000"" tolerance=""1e-09"" threshold=""1e-09"" /> -->; <MeshGmshLoader name=""meshLoader"" filename=""mesh/liver.msh"" />; <TetrahedronSetTopologyContainer name=""topo"" src=""@meshLoader"" />; <MechanicalObject name=""dofs"" src=""@meshLoader"" />; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; <DiagonalMass name=""computed using mass density"" massDensity=""1"" />; <TetrahedralCorotationalFEMForceField template=""Vec3d"" name=""FEM"" method=""large"" poissonRatio=""0.3"" youngModulus=""3000"" computeGlobalMatrix=""0"" />; <FixedConstraint name=""FixedConstraint"" indices=""3 39 64"" />; <Node name=""BUG"" >; <MechanicalObject name=""MO"" position=""1 1 1 2 2 2 3 3 3"" />; <Sphere radius=""1"" />; </Node>; </Node>; </Node>; ```. I have a very bad comprehension of these things, but apparently, Sofa concatenates the points in the mechanical object ""/dofs"" and ""/BUG/MO"", even though there is no mapping to link both objects.; If you replace the SparseLDLSolver by the CGLinearSolver, it will work, but that's because CG doesn't invert the matrix.; I am reporting @IPeterlik's explanations here, but Igor can undoubtedly explain better than me what's actually happening here.. :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346:21,Testability,test,test,21,"Hi!; Here's a simple test scene showing the problem:; ```<?xml version=""1.0"" ?>; <Node name=""lroot"" gravity=""0 -9.81 0"" dt=""0.02"">; <Node name=""Liver"">; <EulerImplicitSolver name=""cg_odesolver"" rayleighStiffness=""0.1"" rayleighMass=""0.1"" />; <SparseLDLSolver saveMatrixToFile=""true""/>; <!-- <CGLinearSolver name=""linear solver"" iterations=""1000"" tolerance=""1e-09"" threshold=""1e-09"" /> -->; <MeshGmshLoader name=""meshLoader"" filename=""mesh/liver.msh"" />; <TetrahedronSetTopologyContainer name=""topo"" src=""@meshLoader"" />; <MechanicalObject name=""dofs"" src=""@meshLoader"" />; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; <DiagonalMass name=""computed using mass density"" massDensity=""1"" />; <TetrahedralCorotationalFEMForceField template=""Vec3d"" name=""FEM"" method=""large"" poissonRatio=""0.3"" youngModulus=""3000"" computeGlobalMatrix=""0"" />; <FixedConstraint name=""FixedConstraint"" indices=""3 39 64"" />; <Node name=""BUG"" >; <MechanicalObject name=""MO"" position=""1 1 1 2 2 2 3 3 3"" />; <Sphere radius=""1"" />; </Node>; </Node>; </Node>; ```. I have a very bad comprehension of these things, but apparently, Sofa concatenates the points in the mechanical object ""/dofs"" and ""/BUG/MO"", even though there is no mapping to link both objects.; If you replace the SparseLDLSolver by the CGLinearSolver, it will work, but that's because CG doesn't invert the matrix.; I am reporting @IPeterlik's explanations here, but Igor can undoubtedly explain better than me what's actually happening here.. :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346:14,Usability,simpl,simple,14,"Hi!; Here's a simple test scene showing the problem:; ```<?xml version=""1.0"" ?>; <Node name=""lroot"" gravity=""0 -9.81 0"" dt=""0.02"">; <Node name=""Liver"">; <EulerImplicitSolver name=""cg_odesolver"" rayleighStiffness=""0.1"" rayleighMass=""0.1"" />; <SparseLDLSolver saveMatrixToFile=""true""/>; <!-- <CGLinearSolver name=""linear solver"" iterations=""1000"" tolerance=""1e-09"" threshold=""1e-09"" /> -->; <MeshGmshLoader name=""meshLoader"" filename=""mesh/liver.msh"" />; <TetrahedronSetTopologyContainer name=""topo"" src=""@meshLoader"" />; <MechanicalObject name=""dofs"" src=""@meshLoader"" />; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; <DiagonalMass name=""computed using mass density"" massDensity=""1"" />; <TetrahedralCorotationalFEMForceField template=""Vec3d"" name=""FEM"" method=""large"" poissonRatio=""0.3"" youngModulus=""3000"" computeGlobalMatrix=""0"" />; <FixedConstraint name=""FixedConstraint"" indices=""3 39 64"" />; <Node name=""BUG"" >; <MechanicalObject name=""MO"" position=""1 1 1 2 2 2 3 3 3"" />; <Sphere radius=""1"" />; </Node>; </Node>; </Node>; ```. I have a very bad comprehension of these things, but apparently, Sofa concatenates the points in the mechanical object ""/dofs"" and ""/BUG/MO"", even though there is no mapping to link both objects.; If you replace the SparseLDLSolver by the CGLinearSolver, it will work, but that's because CG doesn't invert the matrix.; I am reporting @IPeterlik's explanations here, but Igor can undoubtedly explain better than me what's actually happening here.. :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346:1437,Usability,undo,undoubtedly,1437,"Hi!; Here's a simple test scene showing the problem:; ```<?xml version=""1.0"" ?>; <Node name=""lroot"" gravity=""0 -9.81 0"" dt=""0.02"">; <Node name=""Liver"">; <EulerImplicitSolver name=""cg_odesolver"" rayleighStiffness=""0.1"" rayleighMass=""0.1"" />; <SparseLDLSolver saveMatrixToFile=""true""/>; <!-- <CGLinearSolver name=""linear solver"" iterations=""1000"" tolerance=""1e-09"" threshold=""1e-09"" /> -->; <MeshGmshLoader name=""meshLoader"" filename=""mesh/liver.msh"" />; <TetrahedronSetTopologyContainer name=""topo"" src=""@meshLoader"" />; <MechanicalObject name=""dofs"" src=""@meshLoader"" />; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; <DiagonalMass name=""computed using mass density"" massDensity=""1"" />; <TetrahedralCorotationalFEMForceField template=""Vec3d"" name=""FEM"" method=""large"" poissonRatio=""0.3"" youngModulus=""3000"" computeGlobalMatrix=""0"" />; <FixedConstraint name=""FixedConstraint"" indices=""3 39 64"" />; <Node name=""BUG"" >; <MechanicalObject name=""MO"" position=""1 1 1 2 2 2 3 3 3"" />; <Sphere radius=""1"" />; </Node>; </Node>; </Node>; ```. I have a very bad comprehension of these things, but apparently, Sofa concatenates the points in the mechanical object ""/dofs"" and ""/BUG/MO"", even though there is no mapping to link both objects.; If you replace the SparseLDLSolver by the CGLinearSolver, it will work, but that's because CG doesn't invert the matrix.; I am reporting @IPeterlik's explanations here, but Igor can undoubtedly explain better than me what's actually happening here.. :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:103,Availability,robust,robust,103,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:126,Availability,robust,robust,126,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:287,Availability,avail,available,287,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:540,Usability,simpl,simply,540,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:564,Usability,simpl,simple,564,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:601,Usability,clear,clear,601,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647:76,Usability,learn,learn,76,"And one more note -- with this scene, if using CG, it is even impossible to learn what is happening during the calculations. If you use a direct solver capable of exporting the matrix, you will learn that in the above scene, the size of the system matrix is 3*184 X 3*184. Thus mathematically speaking, the two mechanical systems were _concatenated_ (181 points in master node + 3 nodes in slave node) which is IMHO an absolute nonsense. But again, you'll never learn that directly from SOFA (only if you examine the matrix dumped by LDL before it crashes).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647:194,Usability,learn,learn,194,"And one more note -- with this scene, if using CG, it is even impossible to learn what is happening during the calculations. If you use a direct solver capable of exporting the matrix, you will learn that in the above scene, the size of the system matrix is 3*184 X 3*184. Thus mathematically speaking, the two mechanical systems were _concatenated_ (181 points in master node + 3 nodes in slave node) which is IMHO an absolute nonsense. But again, you'll never learn that directly from SOFA (only if you examine the matrix dumped by LDL before it crashes).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647:462,Usability,learn,learn,462,"And one more note -- with this scene, if using CG, it is even impossible to learn what is happening during the calculations. If you use a direct solver capable of exporting the matrix, you will learn that in the above scene, the size of the system matrix is 3*184 X 3*184. Thus mathematically speaking, the two mechanical systems were _concatenated_ (181 points in master node + 3 nodes in slave node) which is IMHO an absolute nonsense. But again, you'll never learn that directly from SOFA (only if you examine the matrix dumped by LDL before it crashes).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647
https://github.com/sofa-framework/sofa/pull/583#issuecomment-367666857:44,Usability,feedback,feedback,44,"Hi guys, I made the changes concerning your feedback and now the PR is ready for review from my side! . The main changes are:; - Created a basic example of usage; - Now uses a factory for data creation; - The use of both args and kwargs for I/O creation is possible; - No unnecessary changes in files / no geometries added, etc. (cleaning)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583#issuecomment-367666857
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:1055,Deployability,update,update,1055,"plicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_obj->*m_func)(data); \; } \; }. #define SOFAOR_ADD_CALLBACK(data, callback) \; addDataC",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:2332,Deployability,update,update,2332,"alue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_obj->*m_func)(data); \; } \; }. #define SOFAOR_ADD_CALLBACK(data, callback) \; addDataCallback(data, new Callback(this, callback)). #define SOFAOR_ADD_INPUT_CALLBACK(data, callback, trackOnly) \; addInput(data, trackOnly, new Callback(this, callback)); ```. When reinit is called on the component, all callbacks are called and the update class is called (maybe it's a mistake, maybe only the callbacks should be called..). Then outputs are set to dirty, and an IdleEvent visitor is propagated:; ```; void ImplicitDataEngine::reinit(); {; cleanTrackers();; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:2557,Deployability,update,update,2557,"ine SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_obj->*m_func)(data); \; } \; }. #define SOFAOR_ADD_CALLBACK(data, callback) \; addDataCallback(data, new Callback(this, callback)). #define SOFAOR_ADD_INPUT_CALLBACK(data, callback, trackOnly) \; addInput(data, trackOnly, new Callback(this, callback)); ```. When reinit is called on the component, all callbacks are called and the update class is called (maybe it's a mistake, maybe only the callbacks should be called..). Then outputs are set to dirty, and an IdleEvent visitor is propagated:; ```; void ImplicitDataEngine::reinit(); {; cleanTrackers();; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the vari",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:2939,Deployability,pipeline,pipeline,2939,"ck(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_obj->*m_func)(data); \; } \; }. #define SOFAOR_ADD_CALLBACK(data, callback) \; addDataCallback(data, new Callback(this, callback)). #define SOFAOR_ADD_INPUT_CALLBACK(data, callback, trackOnly) \; addInput(data, trackOnly, new Callback(this, callback)); ```. When reinit is called on the component, all callbacks are called and the update class is called (maybe it's a mistake, maybe only the callbacks should be called..). Then outputs are set to dirty, and an IdleEvent visitor is propagated:; ```; void ImplicitDataEngine::reinit(); {; cleanTrackers();; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the variable has been set. If it has been it doesn't do anything, but if it has:; a previous ImplicitDataEngine in the graph is searched for and if it contains a matching variable with a similar name, it binds them together by calling setParent() on the data. If not, the ne",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:3248,Modifiability,plugin,plugin,3248,"rackOnly, new Callback(this, callback)); ```. When reinit is called on the component, all callbacks are called and the update class is called (maybe it's a mistake, maybe only the callbacks should be called..). Then outputs are set to dirty, and an IdleEvent visitor is propagated:; ```; void ImplicitDataEngine::reinit(); {; cleanTrackers();; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the variable has been set. If it has been it doesn't do anything, but if it has:; a previous ImplicitDataEngine in the graph is searched for and if it contains a matching variable with a similar name, it binds them together by calling setParent() on the data. If not, the next engine is searched backwards and the same operation is done, recursively until reaching the first engine in the current node. If AUTOLINK is set to true, then a big fat msg_advice() is printed in the console, warning the user that this implicit binding can potentially do things they do not expect...; Limitations are, again, that:; - It ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:3602,Modifiability,variab,variable,3602,"; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the variable has been set. If it has been it doesn't do anything, but if it has:; a previous ImplicitDataEngine in the graph is searched for and if it contains a matching variable with a similar name, it binds them together by calling setParent() on the data. If not, the next engine is searched backwards and the same operation is done, recursively until reaching the first engine in the current node. If AUTOLINK is set to true, then a big fat msg_advice() is printed in the console, warning the user that this implicit binding can potentially do things they do not expect...; Limitations are, again, that:; - It is not possible to bind implicitely datas that aren't in the same node, or datas that are declared AFTER the current engine (regarding the scene graph); - The data field name has to be EXACTLY as expected (a input named ""points"" will only be bound to an output named EXACTLY ""points_out""... . So that's it, It's not perfect but does the job w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:3769,Modifiability,variab,variable,3769,"ore::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the variable has been set. If it has been it doesn't do anything, but if it has:; a previous ImplicitDataEngine in the graph is searched for and if it contains a matching variable with a similar name, it binds them together by calling setParent() on the data. If not, the next engine is searched backwards and the same operation is done, recursively until reaching the first engine in the current node. If AUTOLINK is set to true, then a big fat msg_advice() is printed in the console, warning the user that this implicit binding can potentially do things they do not expect...; Limitations are, again, that:; - It is not possible to bind implicitely datas that aren't in the same node, or datas that are declared AFTER the current engine (regarding the scene graph); - The data field name has to be EXACTLY as expected (a input named ""points"" will only be bound to an output named EXACTLY ""points_out""... . So that's it, It's not perfect but does the job with the way datas are handled in SOFA :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:3424,Safety,avoid,avoid,3424,"d..). Then outputs are set to dirty, and an IdleEvent visitor is propagated:; ```; void ImplicitDataEngine::reinit(); {; cleanTrackers();; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the variable has been set. If it has been it doesn't do anything, but if it has:; a previous ImplicitDataEngine in the graph is searched for and if it contains a matching variable with a similar name, it binds them together by calling setParent() on the data. If not, the next engine is searched backwards and the same operation is done, recursively until reaching the first engine in the current node. If AUTOLINK is set to true, then a big fat msg_advice() is printed in the console, warning the user that this implicit binding can potentially do things they do not expect...; Limitations are, again, that:; - It is not possible to bind implicitely datas that aren't in the same node, or datas that are declared AFTER the current engine (regarding the scene graph); - The data field name has to be EXACTLY as expected ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:15,Testability,test,test,15,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:613,Usability,simpl,simple,613,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:681,Usability,simpl,simple,681,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:1081,Modifiability,plugin,plugin,1081,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:1121,Security,expose,expose,1121,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:227,Usability,usab,usable,227,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:1169,Usability,usab,usable,1169,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908
https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827:4,Modifiability,plugin,plugin,4,The plugin is not finish at all but is already usable. ; I will improve it in future works but this PR start to be very old so it would be nice to review and push it to avoid propagating the changes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827
https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827:169,Safety,avoid,avoid,169,The plugin is not finish at all but is already usable. ; I will improve it in future works but this PR start to be very old so it would be nice to review and push it to avoid propagating the changes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827
https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827:47,Usability,usab,usable,47,The plugin is not finish at all but is already usable. ; I will improve it in future works but this PR start to be very old so it would be nice to review and push it to avoid propagating the changes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370488262:161,Availability,failure,failure,161,I just added a commit to clean the custom `EXPECT_ATLEASE_ONE_NONFATAL_FAILURE` macro. Tell me if I'm wrong but it would better be a macro expecting MORE than 1 failure to clearly distinct from `EXPECT_NONFATAL_FAILURE` (GTest one).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370488262
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370488262:172,Usability,clear,clearly,172,I just added a commit to clean the custom `EXPECT_ATLEASE_ONE_NONFATAL_FAILURE` macro. Tell me if I'm wrong but it would better be a macro expecting MORE than 1 failure to clearly distinct from `EXPECT_NONFATAL_FAILURE` (GTest one).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370488262
https://github.com/sofa-framework/sofa/pull/604#issuecomment-371135821:31,Usability,simpl,simple,31,I just replaced my commit by a simple typo fix.; Thank you for the clear explanations @damienmarchal,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-371135821
https://github.com/sofa-framework/sofa/pull/604#issuecomment-371135821:67,Usability,clear,clear,67,I just replaced my commit by a simple typo fix.; Thank you for the clear explanations @damienmarchal,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-371135821
https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:88,Testability,test,tests,88,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122
https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:496,Testability,test,tests,496,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122
https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:685,Testability,test,test,685,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122
https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:844,Testability,test,test,844,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122
https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:159,Usability,clear,clearer,159,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122
https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:993,Usability,clear,clear,993,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122
https://github.com/sofa-framework/sofa/pull/610#issuecomment-373062078:99,Usability,intuit,intuitive,99,Any reason to do this instead of adding a flag `--infinite-run` or similar ? `-1` is a bit counter-intuitive.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373062078
https://github.com/sofa-framework/sofa/pull/610#issuecomment-373443938:66,Usability,intuit,intuitive,66,"I kinda see what you went through. The argument parser isn't that intuitive TBO. I recently had to do a similar task, so if you still want the ""infinite"" flag, you can check this [line](https://github.com/tgaugry/sofa/commit/326f4f4c8fea61783e40225cb4abac648e569922#diff-5904f9a1380b53f6de2fdc644b6b1a48R112) and the `parseSkipOption` function in the same file. ; Maybe this would solve your problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373443938
https://github.com/sofa-framework/sofa/pull/613#issuecomment-375686179:29,Deployability,update,updated,29,"Hey @m4n4n,. Thanks for your updated PR!. Did you check this remark from @tgaugry on your previous PR?; > I kinda see what you went through. The argument parser isn't that intuitive TBO.; > ; > I recently had to do a similar task, so if you still want the ""infinite"" flag, you can check this [line](https://github.com/tgaugry/sofa/commit/326f4f4c8fea61783e40225cb4abac648e569922#diff-5904f9a1380b53f6de2fdc644b6b1a48R112) and the `parseSkipOption` function in the same file. ; > Maybe this would solve your problem ?. It would indeed be better to not allow a `-1` value to the `n` option but instead to create a new option like `-infinite`. It doesn't have to be a value of the `n` option ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-375686179
https://github.com/sofa-framework/sofa/pull/613#issuecomment-375686179:172,Usability,intuit,intuitive,172,"Hey @m4n4n,. Thanks for your updated PR!. Did you check this remark from @tgaugry on your previous PR?; > I kinda see what you went through. The argument parser isn't that intuitive TBO.; > ; > I recently had to do a similar task, so if you still want the ""infinite"" flag, you can check this [line](https://github.com/tgaugry/sofa/commit/326f4f4c8fea61783e40225cb4abac648e569922#diff-5904f9a1380b53f6de2fdc644b6b1a48R112) and the `parseSkipOption` function in the same file. ; > Maybe this would solve your problem ?. It would indeed be better to not allow a `-1` value to the `n` option but instead to create a new option like `-infinite`. It doesn't have to be a value of the `n` option ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-375686179
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490:121,Modifiability,plugin,plugin,121,But we want PSL.dll to be loaded as a path and not as a name.; I think we should replace the whole test by a simple `if (plugin.find(dotExt) != std::string::npos)`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490:26,Performance,load,loaded,26,But we want PSL.dll to be loaded as a path and not as a name.; I think we should replace the whole test by a simple `if (plugin.find(dotExt) != std::string::npos)`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490:99,Testability,test,test,99,But we want PSL.dll to be loaded as a path and not as a name.; I think we should replace the whole test by a simple `if (plugin.find(dotExt) != std::string::npos)`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490:109,Usability,simpl,simple,109,But we want PSL.dll to be loaded as a path and not as a name.; I think we should replace the whole test by a simple `if (plugin.find(dotExt) != std::string::npos)`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:38,Modifiability,plugin,plugin,38,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:111,Performance,load,load,111,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:135,Testability,test,test,135,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:13,Usability,simpl,simpler,13,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:29,Usability,clear,clearer,29,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613:2252,Deployability,update,update,2252,"ranslationTex; Vec2i | localRange; Vec3d | direction; Vec3f | scale3d; Vec3i | dataResolution; Vec4f | showColor; vector&lt;double> | compliance; vector&lt;Edge> | edges; vector&lt;fixed_array&lt;string,2>> | suffixMap; vector&lt;fixed_array&lt;unsigned int,4>> | highOrderEdgePositions; vector&lt;fixed_array&lt;unsigned int,5>> | highOrderTrianglePositions; vector&lt;fixed_array&lt;unsigned int,6>> | highOrderTetrahedronPositions; vector&lt;fixed_array&lt;unsigned int,8>> | highOrderHexahedronPositions; vector&lt;float> | projectionMatrix; vector&lt;Hexahedron> | hexahedra; vector&lt;int> | indices; vector&lt;Mat&lt;24,24,double>> | stiffnessMatrices; vector&lt;Pentahedron> | pentahedra; vector&lt;Pyramid> | pyramids; vector&lt;Quad> | quads; vector&lt;string> | pluginName; vector&lt;Tetrahedron> | tetrahedra; vector&lt;Triangle> | triangles; vector&lt;unknown> | groups; vector&lt;Vec2d> | uv; vector&lt;Vec3d> | reset_velocity; vector&lt;vector&lt;int>> | facets; vector&lt;vector&lt;unsigned int>> | polygons. Interesting to see that there are some ""unknown"" typenames in Sofa... Concerning the idea of reducing the syntax to its minimum when creating 1-instruction engines, I think that in terms of user experience, it would be ideal if an engine could be created by doing something like this:; ```; node.createObject('Component1', name=""1""); e = node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out""); e.addNewOutput('myIntOutput'); e.update = lambda e: e.myIntOutput = e.myIntVector[0]; node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. Or even better but I don't see any technical approach for it:; ```; node.createObject('Component1', name=""1""); node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out"", update=lambda magic:(magic.myIntOutput = magic.myIntVector[0]) ); node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. **EDIT: markdown didn't like the angle brackets.. now it shows all the types!**",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613:2563,Deployability,update,update,2563,"ranslationTex; Vec2i | localRange; Vec3d | direction; Vec3f | scale3d; Vec3i | dataResolution; Vec4f | showColor; vector&lt;double> | compliance; vector&lt;Edge> | edges; vector&lt;fixed_array&lt;string,2>> | suffixMap; vector&lt;fixed_array&lt;unsigned int,4>> | highOrderEdgePositions; vector&lt;fixed_array&lt;unsigned int,5>> | highOrderTrianglePositions; vector&lt;fixed_array&lt;unsigned int,6>> | highOrderTetrahedronPositions; vector&lt;fixed_array&lt;unsigned int,8>> | highOrderHexahedronPositions; vector&lt;float> | projectionMatrix; vector&lt;Hexahedron> | hexahedra; vector&lt;int> | indices; vector&lt;Mat&lt;24,24,double>> | stiffnessMatrices; vector&lt;Pentahedron> | pentahedra; vector&lt;Pyramid> | pyramids; vector&lt;Quad> | quads; vector&lt;string> | pluginName; vector&lt;Tetrahedron> | tetrahedra; vector&lt;Triangle> | triangles; vector&lt;unknown> | groups; vector&lt;Vec2d> | uv; vector&lt;Vec3d> | reset_velocity; vector&lt;vector&lt;int>> | facets; vector&lt;vector&lt;unsigned int>> | polygons. Interesting to see that there are some ""unknown"" typenames in Sofa... Concerning the idea of reducing the syntax to its minimum when creating 1-instruction engines, I think that in terms of user experience, it would be ideal if an engine could be created by doing something like this:; ```; node.createObject('Component1', name=""1""); e = node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out""); e.addNewOutput('myIntOutput'); e.update = lambda e: e.myIntOutput = e.myIntVector[0]; node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. Or even better but I don't see any technical approach for it:; ```; node.createObject('Component1', name=""1""); node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out"", update=lambda magic:(magic.myIntOutput = magic.myIntVector[0]) ); node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. **EDIT: markdown didn't like the angle brackets.. now it shows all the types!**",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613:1558,Modifiability,plugin,pluginName,1558,"I generated a list of all the uniques Data typenames present in the caduceus scene's components (on the left hand side, 1 example of datafield name matching to given typename:. **BaseData::getValueTypeInfo()->name()**|**BaseData::getName()**; -- | --; bool | listening; double | zFar; fixed_array&lt;Vec3d,2> | box; float | exponent; int | pivot; Mat4x4d | transformation; Quatd | orientation; ResizableExtVector&lt;Edge> | edges; ResizableExtVector&lt;int> | vertNormIdx; ResizableExtVector&lt;Quad> | quads; ResizableExtVector&lt;Triangle> | triangles; ResizableExtVector&lt;Vec2f> | texcoords; ResizableExtVector&lt;Vec3f> | bitangents; std::set&lt;int> | group; string | name; TagSet | tags; unknown | bbox; unsigned int | shadowTextureSize; unsigned short | textureUnit; Vec2f | translationTex; Vec2i | localRange; Vec3d | direction; Vec3f | scale3d; Vec3i | dataResolution; Vec4f | showColor; vector&lt;double> | compliance; vector&lt;Edge> | edges; vector&lt;fixed_array&lt;string,2>> | suffixMap; vector&lt;fixed_array&lt;unsigned int,4>> | highOrderEdgePositions; vector&lt;fixed_array&lt;unsigned int,5>> | highOrderTrianglePositions; vector&lt;fixed_array&lt;unsigned int,6>> | highOrderTetrahedronPositions; vector&lt;fixed_array&lt;unsigned int,8>> | highOrderHexahedronPositions; vector&lt;float> | projectionMatrix; vector&lt;Hexahedron> | hexahedra; vector&lt;int> | indices; vector&lt;Mat&lt;24,24,double>> | stiffnessMatrices; vector&lt;Pentahedron> | pentahedra; vector&lt;Pyramid> | pyramids; vector&lt;Quad> | quads; vector&lt;string> | pluginName; vector&lt;Tetrahedron> | tetrahedra; vector&lt;Triangle> | triangles; vector&lt;unknown> | groups; vector&lt;Vec2d> | uv; vector&lt;Vec3d> | reset_velocity; vector&lt;vector&lt;int>> | facets; vector&lt;vector&lt;unsigned int>> | polygons. Interesting to see that there are some ""unknown"" typenames in Sofa... Concerning the idea of reducing the syntax to its minimum when creating 1-instruction engines, I think that in terms of u",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613:2000,Usability,user experience,user experience,2000,"ranslationTex; Vec2i | localRange; Vec3d | direction; Vec3f | scale3d; Vec3i | dataResolution; Vec4f | showColor; vector&lt;double> | compliance; vector&lt;Edge> | edges; vector&lt;fixed_array&lt;string,2>> | suffixMap; vector&lt;fixed_array&lt;unsigned int,4>> | highOrderEdgePositions; vector&lt;fixed_array&lt;unsigned int,5>> | highOrderTrianglePositions; vector&lt;fixed_array&lt;unsigned int,6>> | highOrderTetrahedronPositions; vector&lt;fixed_array&lt;unsigned int,8>> | highOrderHexahedronPositions; vector&lt;float> | projectionMatrix; vector&lt;Hexahedron> | hexahedra; vector&lt;int> | indices; vector&lt;Mat&lt;24,24,double>> | stiffnessMatrices; vector&lt;Pentahedron> | pentahedra; vector&lt;Pyramid> | pyramids; vector&lt;Quad> | quads; vector&lt;string> | pluginName; vector&lt;Tetrahedron> | tetrahedra; vector&lt;Triangle> | triangles; vector&lt;unknown> | groups; vector&lt;Vec2d> | uv; vector&lt;Vec3d> | reset_velocity; vector&lt;vector&lt;int>> | facets; vector&lt;vector&lt;unsigned int>> | polygons. Interesting to see that there are some ""unknown"" typenames in Sofa... Concerning the idea of reducing the syntax to its minimum when creating 1-instruction engines, I think that in terms of user experience, it would be ideal if an engine could be created by doing something like this:; ```; node.createObject('Component1', name=""1""); e = node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out""); e.addNewOutput('myIntOutput'); e.update = lambda e: e.myIntOutput = e.myIntVector[0]; node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. Or even better but I don't see any technical approach for it:; ```; node.createObject('Component1', name=""1""); node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out"", update=lambda magic:(magic.myIntOutput = magic.myIntVector[0]) ); node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. **EDIT: markdown didn't like the angle brackets.. now it shows all the types!**",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380409414:77,Usability,clear,clearly,77,"Hi thank you for the list, this is very informative. In the current state we clearly cannot trust that to feed the factory. So to me we have to add in the data factory base types like:; - double, int, float, Vec3, Vec4, Quaternion, Index, string, Matrices, Vector, ; - vector<XXX>, set<XXX>, . So that we already have a valid convention for the create data that is 'rich' and usable explicitely from python. . Then, for the automatic type deduction...isn't it possible to create a ""clone"" of an existing data without having to even have to get a typename ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380409414
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380409414:376,Usability,usab,usable,376,"Hi thank you for the list, this is very informative. In the current state we clearly cannot trust that to feed the factory. So to me we have to add in the data factory base types like:; - double, int, float, Vec3, Vec4, Quaternion, Index, string, Matrices, Vector, ; - vector<XXX>, set<XXX>, . So that we already have a valid convention for the create data that is 'rich' and usable explicitely from python. . Then, for the automatic type deduction...isn't it possible to create a ""clone"" of an existing data without having to even have to get a typename ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380409414
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028:184,Deployability,update,update,184,"About the last syntax your are proposing, I think it shouldn't be hard to do. . You simply have to in the c++ construction of the PSDEMagic dedicated code that get the argument named 'update', then extract its parameters (is callable, param names), transform all that as input and generate the output.; Actually this is very similar the use of decorator except that with decorator this ""magic binding"" logic is implemented in python while in your case the ""binding"" logic is done in the c++ part. . I will continue digging in this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028:402,Testability,log,logic,402,"About the last syntax your are proposing, I think it shouldn't be hard to do. . You simply have to in the c++ construction of the PSDEMagic dedicated code that get the argument named 'update', then extract its parameters (is callable, param names), transform all that as input and generate the output.; Actually this is very similar the use of decorator except that with decorator this ""magic binding"" logic is implemented in python while in your case the ""binding"" logic is done in the c++ part. . I will continue digging in this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028:466,Testability,log,logic,466,"About the last syntax your are proposing, I think it shouldn't be hard to do. . You simply have to in the c++ construction of the PSDEMagic dedicated code that get the argument named 'update', then extract its parameters (is callable, param names), transform all that as input and generate the output.; Actually this is very similar the use of decorator except that with decorator this ""magic binding"" logic is implemented in python while in your case the ""binding"" logic is done in the c++ part. . I will continue digging in this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028:84,Usability,simpl,simply,84,"About the last syntax your are proposing, I think it shouldn't be hard to do. . You simply have to in the c++ construction of the PSDEMagic dedicated code that get the argument named 'update', then extract its parameters (is callable, param names), transform all that as input and generate the output.; Actually this is very similar the use of decorator except that with decorator this ""magic binding"" logic is implemented in python while in your case the ""binding"" logic is done in the c++ part. . I will continue digging in this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028
https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469:722,Modifiability,plugin,plugins,722,"Thanks @damienmarchal for this already really nice POC on how to make a really simple to use Python DataEngine!. Concerning the registration of typename creators in the factory, I was wondering if the PSDEDataFactory couldn't somehow be merged together with the PythonFactory, currently used to bind types to python?. It's very quickly going to be unmaintainable otherwise I think. with the most basic matrices, vectors, scalars, basicTopologicalElements and their vector<X> version alone, I already have 50creators to register in the PSDEFactory, all of which were already somehow registered in the PythonFactory, for a different purpose, sure, but I think it could be combined.; Plus I have my own python bindings in my plugins, & I wouldn't like having to register them in sofa's Binding_Base.cpp file. I'd already be more ok to have a way to do this directly from my plugin (like it's done using the SP_ADD_CLASS_IN_FACTORY macros from SofaPython.. but again, why not have this macro doing all the work by itself?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469
https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469:871,Modifiability,plugin,plugin,871,"Thanks @damienmarchal for this already really nice POC on how to make a really simple to use Python DataEngine!. Concerning the registration of typename creators in the factory, I was wondering if the PSDEDataFactory couldn't somehow be merged together with the PythonFactory, currently used to bind types to python?. It's very quickly going to be unmaintainable otherwise I think. with the most basic matrices, vectors, scalars, basicTopologicalElements and their vector<X> version alone, I already have 50creators to register in the PSDEFactory, all of which were already somehow registered in the PythonFactory, for a different purpose, sure, but I think it could be combined.; Plus I have my own python bindings in my plugins, & I wouldn't like having to register them in sofa's Binding_Base.cpp file. I'd already be more ok to have a way to do this directly from my plugin (like it's done using the SP_ADD_CLASS_IN_FACTORY macros from SofaPython.. but again, why not have this macro doing all the work by itself?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469
https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469:79,Usability,simpl,simple,79,"Thanks @damienmarchal for this already really nice POC on how to make a really simple to use Python DataEngine!. Concerning the registration of typename creators in the factory, I was wondering if the PSDEDataFactory couldn't somehow be merged together with the PythonFactory, currently used to bind types to python?. It's very quickly going to be unmaintainable otherwise I think. with the most basic matrices, vectors, scalars, basicTopologicalElements and their vector<X> version alone, I already have 50creators to register in the PSDEFactory, all of which were already somehow registered in the PythonFactory, for a different purpose, sure, but I think it could be combined.; Plus I have my own python bindings in my plugins, & I wouldn't like having to register them in sofa's Binding_Base.cpp file. I'd already be more ok to have a way to do this directly from my plugin (like it's done using the SP_ADD_CLASS_IN_FACTORY macros from SofaPython.. but again, why not have this macro doing all the work by itself?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499:330,Testability,test,test,330,"Hi guys!. Thanks again, Bruno, for your suggestions! I'm happy to read you find the PSDE useful. I especially like your extension to allow for for automatic derivation of the types for Inputs. This was also one of my top ideas to improve the PSDE, but I didn't have any more time to pursue this development. In the next days I'll test your Pull Request and try to give feedback on the different topics discussed here!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499:369,Usability,feedback,feedback,369,"Hi guys!. Thanks again, Bruno, for your suggestions! I'm happy to read you find the PSDE useful. I especially like your extension to allow for for automatic derivation of the types for Inputs. This was also one of my top ideas to improve the PSDE, but I didn't have any more time to pursue this development. In the next days I'll test your Pull Request and try to give feedback on the different topics discussed here!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:402,Availability,error,error,402,"Hey guys, . so, I checked the PR and I have the following comments:. - The examples of the original PSDE contribution get broken with these commits, so this should be fixed. If you want to provide new examples, that’s also ok! In the case of PSDEExamples/01-basic/ changing the type string in DataEngine.py from 'd' to 'int' already fixes the problem. For PSDEExamples/02-advanced/ I couldn’t find the error immediately. . - Regarding the question of linking and automatic deriving of data-types for Inputs my opinion is similar to Damien’s:. > Sure...what we want to do is to create a new data with the exact same type of the data pointed by a link. So making a clone of an existing data (to get its type) and then initialize its parent would do the trick without needed all the factory and datatypename things. . I also do think that the existing linking mechanism could be complemented by a cloning feature that creates a copy of a BaseData object. Probably just a clone()-function in BaseData. This would avoid the implementation of a “heavy-weight” factory, like Damien said. To add this data to the correct object (the PSDE) it is only necessary to set the owner, I think. Finally, linking is done by using setParent(). In this way the user can program freely in C++ without worrying about whether his newly defined compound type needs to be made available in the factory. - Regarding the question of linking and automatic deriving of data-types for Outputs my ideas are not as concrete, but maybe helpful. For me there exist two cases:. 1) The Output of the PSDE is connected to an Input of a sofa-object that has static datas, e.g., sofa-objects whose code is written in C++. An example for such an object would be MechanicalObject (MO) that always has the same data (position, velocity, force, …). 2) The Output of the PSDE is connected to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:1353,Availability,avail,available,1353,"ne.py from 'd' to 'int' already fixes the problem. For PSDEExamples/02-advanced/ I couldn’t find the error immediately. . - Regarding the question of linking and automatic deriving of data-types for Inputs my opinion is similar to Damien’s:. > Sure...what we want to do is to create a new data with the exact same type of the data pointed by a link. So making a clone of an existing data (to get its type) and then initialize its parent would do the trick without needed all the factory and datatypename things. . I also do think that the existing linking mechanism could be complemented by a cloning feature that creates a copy of a BaseData object. Probably just a clone()-function in BaseData. This would avoid the implementation of a “heavy-weight” factory, like Damien said. To add this data to the correct object (the PSDE) it is only necessary to set the owner, I think. Finally, linking is done by using setParent(). In this way the user can program freely in C++ without worrying about whether his newly defined compound type needs to be made available in the factory. - Regarding the question of linking and automatic deriving of data-types for Outputs my ideas are not as concrete, but maybe helpful. For me there exist two cases:. 1) The Output of the PSDE is connected to an Input of a sofa-object that has static datas, e.g., sofa-objects whose code is written in C++. An example for such an object would be MechanicalObject (MO) that always has the same data (position, velocity, force, …). 2) The Output of the PSDE is connected to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:2061,Modifiability,extend,extending,2061,"ect object (the PSDE) it is only necessary to set the owner, I think. Finally, linking is done by using setParent(). In this way the user can program freely in C++ without worrying about whether his newly defined compound type needs to be made available in the factory. - Regarding the question of linking and automatic deriving of data-types for Outputs my ideas are not as concrete, but maybe helpful. For me there exist two cases:. 1) The Output of the PSDE is connected to an Input of a sofa-object that has static datas, e.g., sofa-objects whose code is written in C++. An example for such an object would be MechanicalObject (MO) that always has the same data (position, velocity, force, …). 2) The Output of the PSDE is connected to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear (we have static sofa-object whose BaseData doesn’t change) one could at this time create the clone and replace the BaseData with vacant type at the PSDE with the desired one. After that, this BaseData for the Output is valid and can be linked to in a normal way. . I don’t think this is especially dangerous, because this would not be allowed after parsing(). This also handles the problem that the sofa-objects involved would need to be created before the PSDE is created. In this way they can be created after the PSDE. This doesn’t cause confusion for the user neither, because he is aware of the types of the datas. Yet, overall this solution is a little bit complicated because it relies on changing the behavior of linking. Linking has to be extended to detect whether the Output that is being linked ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:3051,Modifiability,extend,extended,3051," to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear (we have static sofa-object whose BaseData doesn’t change) one could at this time create the clone and replace the BaseData with vacant type at the PSDE with the desired one. After that, this BaseData for the Output is valid and can be linked to in a normal way. . I don’t think this is especially dangerous, because this would not be allowed after parsing(). This also handles the problem that the sofa-objects involved would need to be created before the PSDE is created. In this way they can be created after the PSDE. This doesn’t cause confusion for the user neither, because he is aware of the types of the datas. Yet, overall this solution is a little bit complicated because it relies on changing the behavior of linking. Linking has to be extended to detect whether the Output that is being linked to has a valid type or is vacant. Overall I’m not 100% confident this kind of approach would work. For case 2.:. In this case one kind of remains in the “python-world” and it is not necessary to have an exhaustive set of possible types, I think. It would be enough to have types such as string, int, float, array, matrix, etc. Here one could use the identifiers already used in python. Also, the user has to state the type he wants for the Output, since there is no way of inferring automatically when both ends are subject to the user’s choice. Therefore, this would be limited to declaring the desired type of an Output. The types for the Inputs should always be derived automagically, I think. I hope this ideas are useful!. Cheers!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:1009,Safety,avoid,avoid,1009," have the following comments:. - The examples of the original PSDE contribution get broken with these commits, so this should be fixed. If you want to provide new examples, that’s also ok! In the case of PSDEExamples/01-basic/ changing the type string in DataEngine.py from 'd' to 'int' already fixes the problem. For PSDEExamples/02-advanced/ I couldn’t find the error immediately. . - Regarding the question of linking and automatic deriving of data-types for Inputs my opinion is similar to Damien’s:. > Sure...what we want to do is to create a new data with the exact same type of the data pointed by a link. So making a clone of an existing data (to get its type) and then initialize its parent would do the trick without needed all the factory and datatypename things. . I also do think that the existing linking mechanism could be complemented by a cloning feature that creates a copy of a BaseData object. Probably just a clone()-function in BaseData. This would avoid the implementation of a “heavy-weight” factory, like Damien said. To add this data to the correct object (the PSDE) it is only necessary to set the owner, I think. Finally, linking is done by using setParent(). In this way the user can program freely in C++ without worrying about whether his newly defined compound type needs to be made available in the factory. - Regarding the question of linking and automatic deriving of data-types for Outputs my ideas are not as concrete, but maybe helpful. For me there exist two cases:. 1) The Output of the PSDE is connected to an Input of a sofa-object that has static datas, e.g., sofa-objects whose code is written in C++. An example for such an object would be MechanicalObject (MO) that always has the same data (position, velocity, force, …). 2) The Output of the PSDE is connected to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:3063,Safety,detect,detect,3063," to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear (we have static sofa-object whose BaseData doesn’t change) one could at this time create the clone and replace the BaseData with vacant type at the PSDE with the desired one. After that, this BaseData for the Output is valid and can be linked to in a normal way. . I don’t think this is especially dangerous, because this would not be allowed after parsing(). This also handles the problem that the sofa-objects involved would need to be created before the PSDE is created. In this way they can be created after the PSDE. This doesn’t cause confusion for the user neither, because he is aware of the types of the datas. Yet, overall this solution is a little bit complicated because it relies on changing the behavior of linking. Linking has to be extended to detect whether the Output that is being linked to has a valid type or is vacant. Overall I’m not 100% confident this kind of approach would work. For case 2.:. In this case one kind of remains in the “python-world” and it is not necessary to have an exhaustive set of possible types, I think. It would be enough to have types such as string, int, float, array, matrix, etc. Here one could use the identifiers already used in python. Also, the user has to state the type he wants for the Output, since there is no way of inferring automatically when both ends are subject to the user’s choice. Therefore, this would be limited to declaring the desired type of an Output. The types for the Inputs should always be derived automagically, I think. I hope this ideas are useful!. Cheers!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:2297,Usability,clear,clear,2297,"actory. - Regarding the question of linking and automatic deriving of data-types for Outputs my ideas are not as concrete, but maybe helpful. For me there exist two cases:. 1) The Output of the PSDE is connected to an Input of a sofa-object that has static datas, e.g., sofa-objects whose code is written in C++. An example for such an object would be MechanicalObject (MO) that always has the same data (position, velocity, force, …). 2) The Output of the PSDE is connected to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear (we have static sofa-object whose BaseData doesn’t change) one could at this time create the clone and replace the BaseData with vacant type at the PSDE with the desired one. After that, this BaseData for the Output is valid and can be linked to in a normal way. . I don’t think this is especially dangerous, because this would not be allowed after parsing(). This also handles the problem that the sofa-objects involved would need to be created before the PSDE is created. In this way they can be created after the PSDE. This doesn’t cause confusion for the user neither, because he is aware of the types of the datas. Yet, overall this solution is a little bit complicated because it relies on changing the behavior of linking. Linking has to be extended to detect whether the Output that is being linked to has a valid type or is vacant. Overall I’m not 100% confident this kind of approach would work. For case 2.:. In this case one kind of remains in the “python-world” and it is not necessary to have an exhaustive set of possible types, I think. It would be eno",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-400231695:157,Usability,intuit,intuitively,157,"I don't know if this still an adequate proposition, but I was thinking that it might be also a nice idea to change the name of the PSDE to something that is intuitively more graspable. Some suggestions could be (in order of preference): . PyScriptableComponent; PyFunctionBlock; PyComponent. I don't think that at this time we would be breaking to much code by changing the name.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-400231695
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:44,Deployability,update,updated,44,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:100,Deployability,update,update,100,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:174,Modifiability,inherit,inheritance,174,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:206,Modifiability,inherit,inherited,206,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:261,Modifiability,inherit,inheritance,261,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:294,Modifiability,inherit,inherited,294,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:382,Modifiability,inherit,inheritance,382,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:519,Usability,clear,clearly,519,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449:686,Availability,redundant,redundant,686,"Ok, great! I will check out the examples and give you feedback next week. Regarding the naming: This could end up being a lengthy discussion. My reasoning is that names like ""DataEngine"" have their origin in how things are implemented. I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior, which can be implemented in python. Of course there's the disadvantage of breaking the name consistency. If we keep the ""DataEngine"" name somehow, I vote for PythonDataEngine. Saying it is also ""Script"" is redundant.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449:686,Safety,redund,redundant,686,"Ok, great! I will check out the examples and give you feedback next week. Regarding the naming: This could end up being a lengthy discussion. My reasoning is that names like ""DataEngine"" have their origin in how things are implemented. I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior, which can be implemented in python. Of course there's the disadvantage of breaking the name consistency. If we keep the ""DataEngine"" name somehow, I vote for PythonDataEngine. Saying it is also ""Script"" is redundant.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449:54,Usability,feedback,feedback,54,"Ok, great! I will check out the examples and give you feedback next week. Regarding the naming: This could end up being a lengthy discussion. My reasoning is that names like ""DataEngine"" have their origin in how things are implemented. I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior, which can be implemented in python. Of course there's the disadvantage of breaking the name consistency. If we keep the ""DataEngine"" name somehow, I vote for PythonDataEngine. Saying it is also ""Script"" is redundant.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755:1094,Deployability,update,update,1094,"> I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior. This is not really correct actually:; The pythonScriptController is not really a component (i.e a Sofa class inheriting BaseObject) as it possesses extra features, such as the possibility to create the scene graph from scratch, send events to other controllers etc. It is not a purely simple 1to1 binding of its C++ methods in Python. In that way, I agree with you that calling it a PyController makes more sense than to call it a PyBaseObject for instance, or pyComponent, since it does more.; The current PSDE is actually as far from a Std sofa component (core::objectmodel::BaseObject) as the PythonScriptController: the PSDE is much closer in terms of behaviour to that of Sofa's DataEngine components: the key difference is that DataEngines, contrary to BaseObjects, is a call for action on the modification of one of its input datafield. The update method is not present in a BaseObject or in a PythonScriptController. In that way it completely mimics the behavior of the DataEngines in Sofa. Hence my suggestion :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755:355,Modifiability,inherit,inheriting,355,"> I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior. This is not really correct actually:; The pythonScriptController is not really a component (i.e a Sofa class inheriting BaseObject) as it possesses extra features, such as the possibility to create the scene graph from scratch, send events to other controllers etc. It is not a purely simple 1to1 binding of its C++ methods in Python. In that way, I agree with you that calling it a PyController makes more sense than to call it a PyBaseObject for instance, or pyComponent, since it does more.; The current PSDE is actually as far from a Std sofa component (core::objectmodel::BaseObject) as the PythonScriptController: the PSDE is much closer in terms of behaviour to that of Sofa's DataEngine components: the key difference is that DataEngines, contrary to BaseObjects, is a call for action on the modification of one of its input datafield. The update method is not present in a BaseObject or in a PythonScriptController. In that way it completely mimics the behavior of the DataEngines in Sofa. Hence my suggestion :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755:531,Usability,simpl,simple,531,"> I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior. This is not really correct actually:; The pythonScriptController is not really a component (i.e a Sofa class inheriting BaseObject) as it possesses extra features, such as the possibility to create the scene graph from scratch, send events to other controllers etc. It is not a purely simple 1to1 binding of its C++ methods in Python. In that way, I agree with you that calling it a PyController makes more sense than to call it a PyBaseObject for instance, or pyComponent, since it does more.; The current PSDE is actually as far from a Std sofa component (core::objectmodel::BaseObject) as the PythonScriptController: the PSDE is much closer in terms of behaviour to that of Sofa's DataEngine components: the key difference is that DataEngines, contrary to BaseObjects, is a call for action on the modification of one of its input datafield. The update method is not present in a BaseObject or in a PythonScriptController. In that way it completely mimics the behavior of the DataEngines in Sofa. Hence my suggestion :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406614649:354,Deployability,update,updated,354,"Aha! Well, just to be clear, my suggestion would have been PythonScriptDataEngine-> PyComponent and PythonScriptController -> PyController. I understand that in terms of implementation, even conceptually, a DataEngine is different from a BaseObject. But, this information is of no use to the user in my opinion. When he sees the PSDE he expects it to be updated when the Datas have changed. If I'm new to Sofa and I see a component that is called ""PythonScriptDataEngine"" I figure that it must be something very specific, related to an engine of some sorts. If I see ""PyComponent"" I understand immediately that this is a component in my scene whose behavior I can implement in python. But granted, it doesn't take much to explain in a documentation that what is hidden behind the name ""PythonScriptDataEngine"" is just that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406614649
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406614649:22,Usability,clear,clear,22,"Aha! Well, just to be clear, my suggestion would have been PythonScriptDataEngine-> PyComponent and PythonScriptController -> PyController. I understand that in terms of implementation, even conceptually, a DataEngine is different from a BaseObject. But, this information is of no use to the user in my opinion. When he sees the PSDE he expects it to be updated when the Datas have changed. If I'm new to Sofa and I see a component that is called ""PythonScriptDataEngine"" I figure that it must be something very specific, related to an engine of some sorts. If I see ""PyComponent"" I understand immediately that this is a component in my scene whose behavior I can implement in python. But granted, it doesn't take much to explain in a documentation that what is hidden behind the name ""PythonScriptDataEngine"" is just that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406614649
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802:1114,Deployability,update,update,1114,"I think the problem you are raising here is a more general issue in Sofa. ""Engine components"" should be used seamlessly in Sofa, without the need for a distinction. After all, as you said, they are nothing but ""components"" in the sense that they are put in your python scene just like the others, with a createObject, and are visible in the scene graph, just like the others.; Sadly, DataEngines in Sofa needs to be manipulated with care, because their behavior changes drastically from their BaseObject counterpart: They do not respect the classical execution order of the scene graph, they can be called multiple times per animation steps (or not at all), etc. If their use in Sofa wasn't so different from the rest of the Sofa components, I would also vote for a simpler name, such as PyComponent vs PyScript for the current PythonScriptController. Newcomers in Sofa tend to mix up DataEngines with standard components, ending up with behaviors that they do not understand, as their code in not executed when they expect it to be for instance.; But I guess the subject is drifting a little bit towards the Data-update topic on gitter ;); Maybe for now it's not so important to rename anything, and we should maybe wait to see how things evolve with the animation loop and usages of DDGNodes in Sofa...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802:1240,Modifiability,evolve,evolve,1240,"I think the problem you are raising here is a more general issue in Sofa. ""Engine components"" should be used seamlessly in Sofa, without the need for a distinction. After all, as you said, they are nothing but ""components"" in the sense that they are put in your python scene just like the others, with a createObject, and are visible in the scene graph, just like the others.; Sadly, DataEngines in Sofa needs to be manipulated with care, because their behavior changes drastically from their BaseObject counterpart: They do not respect the classical execution order of the scene graph, they can be called multiple times per animation steps (or not at all), etc. If their use in Sofa wasn't so different from the rest of the Sofa components, I would also vote for a simpler name, such as PyComponent vs PyScript for the current PythonScriptController. Newcomers in Sofa tend to mix up DataEngines with standard components, ending up with behaviors that they do not understand, as their code in not executed when they expect it to be for instance.; But I guess the subject is drifting a little bit towards the Data-update topic on gitter ;); Maybe for now it's not so important to rename anything, and we should maybe wait to see how things evolve with the animation loop and usages of DDGNodes in Sofa...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802:766,Usability,simpl,simpler,766,"I think the problem you are raising here is a more general issue in Sofa. ""Engine components"" should be used seamlessly in Sofa, without the need for a distinction. After all, as you said, they are nothing but ""components"" in the sense that they are put in your python scene just like the others, with a createObject, and are visible in the scene graph, just like the others.; Sadly, DataEngines in Sofa needs to be manipulated with care, because their behavior changes drastically from their BaseObject counterpart: They do not respect the classical execution order of the scene graph, they can be called multiple times per animation steps (or not at all), etc. If their use in Sofa wasn't so different from the rest of the Sofa components, I would also vote for a simpler name, such as PyComponent vs PyScript for the current PythonScriptController. Newcomers in Sofa tend to mix up DataEngines with standard components, ending up with behaviors that they do not understand, as their code in not executed when they expect it to be for instance.; But I guess the subject is drifting a little bit towards the Data-update topic on gitter ;); Maybe for now it's not so important to rename anything, and we should maybe wait to see how things evolve with the animation loop and usages of DDGNodes in Sofa...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:899,Availability,redundant,redundant,899,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:365,Deployability,update,update,365,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:397,Deployability,update,update,397,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:585,Deployability,update,update,585,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:798,Deployability,update,update,798,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:954,Deployability,update,update,954,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:1186,Deployability,update,update,1186,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:1387,Deployability,update,update,1387,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:1551,Deployability,update,update,1551,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:1595,Integrability,depend,dependency,1595,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:648,Modifiability,inherit,inherits,648,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:758,Modifiability,inherit,inherits,758,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:899,Safety,redund,redundant,899,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:388,Usability,clear,clearly,388,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294:447,Availability,error,error,447,"@sescaida as a reply to you previous comment:. - I think we should indeed remove the call to update from handleEvent, in the dataEngine. Although there are some twisted cases where it is necessary, it is not how it was designed initially I believe. I'd like @damienmarchal 's input on that, though.; Concerning the default value in addNewOutput, I totally agree with you. The only reason I kept it is because it would have even more impact on the error handling codebase in Sofa, which currently forces the existence of a ""value"" field to guarantee that the datatype can be deduced (which we are bypassing for outputs..); Overall, I think there's a decent amount of cleaning to do in this PR before it can be merged, including removing all the warnings that appear because we're working our way around the ""standard"" way to build datafields.; - I also agree with you that we need some reviews on this PR, and maybe also split it in multiple PRs for simpler reviewing. Things are getting mixed up now, between; - Populating the PSDE factory; - Deriving inputs / outputs; - passing datafields through createObject; - ...; I'll pass the PR to to_review and we can take a look at it on monday ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294:93,Deployability,update,update,93,"@sescaida as a reply to you previous comment:. - I think we should indeed remove the call to update from handleEvent, in the dataEngine. Although there are some twisted cases where it is necessary, it is not how it was designed initially I believe. I'd like @damienmarchal 's input on that, though.; Concerning the default value in addNewOutput, I totally agree with you. The only reason I kept it is because it would have even more impact on the error handling codebase in Sofa, which currently forces the existence of a ""value"" field to guarantee that the datatype can be deduced (which we are bypassing for outputs..); Overall, I think there's a decent amount of cleaning to do in this PR before it can be merged, including removing all the warnings that appear because we're working our way around the ""standard"" way to build datafields.; - I also agree with you that we need some reviews on this PR, and maybe also split it in multiple PRs for simpler reviewing. Things are getting mixed up now, between; - Populating the PSDE factory; - Deriving inputs / outputs; - passing datafields through createObject; - ...; I'll pass the PR to to_review and we can take a look at it on monday ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294:949,Usability,simpl,simpler,949,"@sescaida as a reply to you previous comment:. - I think we should indeed remove the call to update from handleEvent, in the dataEngine. Although there are some twisted cases where it is necessary, it is not how it was designed initially I believe. I'd like @damienmarchal 's input on that, though.; Concerning the default value in addNewOutput, I totally agree with you. The only reason I kept it is because it would have even more impact on the error handling codebase in Sofa, which currently forces the existence of a ""value"" field to guarantee that the datatype can be deduced (which we are bypassing for outputs..); Overall, I think there's a decent amount of cleaning to do in this PR before it can be merged, including removing all the warnings that appear because we're working our way around the ""standard"" way to build datafields.; - I also agree with you that we need some reviews on this PR, and maybe also split it in multiple PRs for simpler reviewing. Things are getting mixed up now, between; - Populating the PSDE factory; - Deriving inputs / outputs; - passing datafields through createObject; - ...; I'll pass the PR to to_review and we can take a look at it on monday ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294
https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881:169,Availability,avail,available,169,"Note for @sofa-framework/reviewers ; The PR now builds and tests run.; This PR might be really breaking, and your careful review and feedback is more than welcome. I am available for any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881
https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881:59,Testability,test,tests,59,"Note for @sofa-framework/reviewers ; The PR now builds and tests run.; This PR might be really breaking, and your careful review and feedback is more than welcome. I am available for any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881
https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881:133,Usability,feedback,feedback,133,"Note for @sofa-framework/reviewers ; The PR now builds and tests run.; This PR might be really breaking, and your careful review and feedback is more than welcome. I am available for any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881
https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199306:107,Usability,feedback,feedback,107,@olivier-goury and @EulalieCoevoet this PR can be severly breaking so don't hesitate to review it and give feedback to Hugo.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199306
https://github.com/sofa-framework/sofa/pull/637#issuecomment-395357378:48,Usability,feedback,feedback,48,"Ok so it seems to be ready, let's just wait the feedback from @damienmarchal regarding the current incompatibility problem at Defrost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-395357378
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967:169,Integrability,message,messages,169,"Thanks for your PR @gaurab4163 :+1: . I'm not sure about the place (file and namespace) this function should be. @damienmarchal you have a clearer vision of logging and messages in SOFA, what do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967:157,Testability,log,logging,157,"Thanks for your PR @gaurab4163 :+1: . I'm not sure about the place (file and namespace) this function should be. @damienmarchal you have a clearer vision of logging and messages in SOFA, what do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967:139,Usability,clear,clearer,139,"Thanks for your PR @gaurab4163 :+1: . I'm not sure about the place (file and namespace) this function should be. @damienmarchal you have a clearer vision of logging and messages in SOFA, what do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967
https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339:92,Modifiability,variab,variables,92,"Well, I guess this isn't thread safe. . One solution could be to simply remove these static variables and create one loopup table per object created (using a good old private class member). It will duplicate the lookup table for each class instance, but seriously, how many `DefaultStyleMessageFormatter` objects can be created in your typical simulation :-P",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339
https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339:32,Safety,safe,safe,32,"Well, I guess this isn't thread safe. . One solution could be to simply remove these static variables and create one loopup table per object created (using a good old private class member). It will duplicate the lookup table for each class instance, but seriously, how many `DefaultStyleMessageFormatter` objects can be created in your typical simulation :-P",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339
https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339:65,Usability,simpl,simply,65,"Well, I guess this isn't thread safe. . One solution could be to simply remove these static variables and create one loopup table per object created (using a good old private class member). It will duplicate the lookup table for each class instance, but seriously, how many `DefaultStyleMessageFormatter` objects can be created in your typical simulation :-P",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339
https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616:263,Availability,error,error,263,"Hi Quentin !; Thanks for the notice !. @untereiner I recall that you recently had a look at the VTKLoader in SOFA. Am I correct?; Did you face these warnings ?. Since the file is well loaded, we would simply need to update the loader to have only Warning (and no error msg) when facing these new metadata.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616
https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616:216,Deployability,update,update,216,"Hi Quentin !; Thanks for the notice !. @untereiner I recall that you recently had a look at the VTKLoader in SOFA. Am I correct?; Did you face these warnings ?. Since the file is well loaded, we would simply need to update the loader to have only Warning (and no error msg) when facing these new metadata.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616
https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616:184,Performance,load,loaded,184,"Hi Quentin !; Thanks for the notice !. @untereiner I recall that you recently had a look at the VTKLoader in SOFA. Am I correct?; Did you face these warnings ?. Since the file is well loaded, we would simply need to update the loader to have only Warning (and no error msg) when facing these new metadata.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616
https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616:227,Performance,load,loader,227,"Hi Quentin !; Thanks for the notice !. @untereiner I recall that you recently had a look at the VTKLoader in SOFA. Am I correct?; Did you face these warnings ?. Since the file is well loaded, we would simply need to update the loader to have only Warning (and no error msg) when facing these new metadata.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616
https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616:201,Usability,simpl,simply,201,"Hi Quentin !; Thanks for the notice !. @untereiner I recall that you recently had a look at the VTKLoader in SOFA. Am I correct?; Did you face these warnings ?. Since the file is well loaded, we would simply need to update the loader to have only Warning (and no error msg) when facing these new metadata.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155660392:16,Usability,feedback,feedback,16,"Thanks for your feedback @hugtalbot!. So I understand everything is on tracks on this bug then. I guess you have a lot of job to do guys with all the issues that you have to treat, and you are doing such a great job with SOFA framework!; I am discovering it since a few days now, and I really enjoy the journey :). Is there any chance that this issue will be treated in the near future?. Anyway, I found a work around:; - I read the `.vtk` file with the `meshio` python library.; - Then I export the mesh in `.mesh` format.; - I finally import the `.mesh` file into the gmsh python API, and export it in `.msh` format, which is readable by the `MeshGmshLoader`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155660392
https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626:524,Modifiability,plugin,plugin,524,To me it is important to clarify (a one more ambiguity) about sofa where the same code is used for both editing scenes and for final scene rendering in a simulator application. . To me these two are different concerns which should be clearly separated in our code base. ; Currently the same code is use for both concerns which make things very confusing while it may be organized that way:; - The 'final scene' rendering code should be externalized from the objects (from the draw/drawVisual function) and put in a specific plugin. The plugin may contain a complete rendering stack using whatever API. Of course ones that do not want not to use this code can just don't use it and if nobody wants it nobody implement it. . - The 'in-editor' rendering is a bit different as we need it for at least to implement runSofa/runSofa2 editing features. So I think this rendering code will still need to be provided (probably as part of runSofa more than of Sofa). . One my side one big difference between the 'in-editor' and 'scene' rendering is that ; the 'in-editor' rendering code shouldn't appears in the scenegraph.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626
https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626:536,Modifiability,plugin,plugin,536,To me it is important to clarify (a one more ambiguity) about sofa where the same code is used for both editing scenes and for final scene rendering in a simulator application. . To me these two are different concerns which should be clearly separated in our code base. ; Currently the same code is use for both concerns which make things very confusing while it may be organized that way:; - The 'final scene' rendering code should be externalized from the objects (from the draw/drawVisual function) and put in a specific plugin. The plugin may contain a complete rendering stack using whatever API. Of course ones that do not want not to use this code can just don't use it and if nobody wants it nobody implement it. . - The 'in-editor' rendering is a bit different as we need it for at least to implement runSofa/runSofa2 editing features. So I think this rendering code will still need to be provided (probably as part of runSofa more than of Sofa). . One my side one big difference between the 'in-editor' and 'scene' rendering is that ; the 'in-editor' rendering code shouldn't appears in the scenegraph.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626
https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626:234,Usability,clear,clearly,234,To me it is important to clarify (a one more ambiguity) about sofa where the same code is used for both editing scenes and for final scene rendering in a simulator application. . To me these two are different concerns which should be clearly separated in our code base. ; Currently the same code is use for both concerns which make things very confusing while it may be organized that way:; - The 'final scene' rendering code should be externalized from the objects (from the draw/drawVisual function) and put in a specific plugin. The plugin may contain a complete rendering stack using whatever API. Of course ones that do not want not to use this code can just don't use it and if nobody wants it nobody implement it. . - The 'in-editor' rendering is a bit different as we need it for at least to implement runSofa/runSofa2 editing features. So I think this rendering code will still need to be provided (probably as part of runSofa more than of Sofa). . One my side one big difference between the 'in-editor' and 'scene' rendering is that ; the 'in-editor' rendering code shouldn't appears in the scenegraph.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626
https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057:172,Modifiability,plugin,plugin,172,"and about the process, I think this PR is a very good test case for everyone to give it a try.; Regarding the feedback we should be able to package it together as a public plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057
https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057:54,Testability,test,test,54,"and about the process, I think this PR is a very good test case for everyone to give it a try.; Regarding the feedback we should be able to package it together as a public plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057
https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057:110,Usability,feedback,feedback,110,"and about the process, I think this PR is a very good test case for everyone to give it a try.; Regarding the feedback we should be able to package it together as a public plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819:614,Testability,test,testing,614,"Hi @untereiner . From my experience you will have more feedback if you provide more information on the PR description to give other some envy to try it. . Given the complexity of the PR here is what people passing by may need:; - what the PR does precisely ? ; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ? ; - how this PR handle the problem, ; - use CGOGN library... what is this CGOGN library ? ; - argument on why the PR is it useful/mandatory/improvement,; - trying to convince people why they should spend time testing it,; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819:55,Usability,feedback,feedback,55,"Hi @untereiner . From my experience you will have more feedback if you provide more information on the PR description to give other some envy to try it. . Given the complexity of the PR here is what people passing by may need:; - what the PR does precisely ? ; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ? ; - how this PR handle the problem, ; - use CGOGN library... what is this CGOGN library ? ; - argument on why the PR is it useful/mandatory/improvement,; - trying to convince people why they should spend time testing it,; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819
https://github.com/sofa-framework/sofa/pull/707#issuecomment-403004833:68,Usability,feedback,feedback,68,Thanks you very much for this interesting PR. ; I hope we will have feedback on the NG direction.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707#issuecomment-403004833
https://github.com/sofa-framework/sofa/pull/707#issuecomment-404174229:60,Usability,feedback,feedback,60,"Hello, . Since you made this PR @untereiner do you have any feedback on the NG proposal ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707#issuecomment-404174229
https://github.com/sofa-framework/sofa/issues/724#issuecomment-406516354:16,Usability,feedback,feedbacks,16,"Thanks for your feedbacks,; I've encountered the problem with the Fontain.scn scene in sofa python examples. I don't think there's a mechanical state controller there though",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/724#issuecomment-406516354
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:331,Integrability,interface,interface,331,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:175,Modifiability,plugin,plugin,175,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:323,Modifiability,plugin,plugin,323,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:452,Modifiability,plugin,plugins,452,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:477,Modifiability,config,config,477,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:498,Modifiability,plugin,plugins,498,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:695,Modifiability,plugin,plugins,695,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:821,Modifiability,plugin,plugins,821,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:167,Performance,load,loading,167,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:509,Performance,load,load,509,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:593,Usability,simpl,simple,593,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:601,Availability,error,error,601,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:718,Availability,redundant,redundant,718,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:1625,Availability,error,error,1625,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:659,Performance,perform,performed,659,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:718,Safety,redund,redundant,718,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:1313,Safety,avoid,avoid,1313,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:482,Usability,simpl,simple,482,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420:253,Availability,fail-safe,fail-safe,253,"@damienmarchal @tgaugry @jnbrunet, what do you think of @sescaida 's comment?. I agree that it makes it a bit tricky to look into the inner mechanisms of the creation of datafields from the createObject method.; I tried to make it as clear / explicit / fail-safe as possible though: ; - datafields passed through the createObject() function MUST be inputs fields referenced in the `args` dictionnary present in the Python class and there is a nice warning showing up when you try to pass an argument that doesn't exist in the args `dictionary` to createObject; - The user needs to explicitely use the decorator function in the SofaPython module on the parse() method, so he kinda has to know what the decorator does; - The syntax is as close as possible to the syntaxt of normal sofa::core::DataEngines created in python:; ```node.createObject('TransformEngine', input_position='@component.data', translation='0 0 0')```; would translate into; ```node.createObject('PythonScriptDataEngine', input_position='@component.data', translation='0 0 0', filename=__file__, classname='PyTransformEngine')```. I personnally believe it's a must-have feature, because, let's say you have a python scene in which you have to create 5 times the same PSDE component, a custom TransformEngine for instance:; - Without this PR, you would have to create 5 separated classes, with the exact same implementation, just a different value in the addNewInput() in parse(). This is very redundant. ; - Passing the inputs values through createObject allows you to create a component only once, and use it as many times as you want in your scene afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420
https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420:1462,Availability,redundant,redundant,1462,"@damienmarchal @tgaugry @jnbrunet, what do you think of @sescaida 's comment?. I agree that it makes it a bit tricky to look into the inner mechanisms of the creation of datafields from the createObject method.; I tried to make it as clear / explicit / fail-safe as possible though: ; - datafields passed through the createObject() function MUST be inputs fields referenced in the `args` dictionnary present in the Python class and there is a nice warning showing up when you try to pass an argument that doesn't exist in the args `dictionary` to createObject; - The user needs to explicitely use the decorator function in the SofaPython module on the parse() method, so he kinda has to know what the decorator does; - The syntax is as close as possible to the syntaxt of normal sofa::core::DataEngines created in python:; ```node.createObject('TransformEngine', input_position='@component.data', translation='0 0 0')```; would translate into; ```node.createObject('PythonScriptDataEngine', input_position='@component.data', translation='0 0 0', filename=__file__, classname='PyTransformEngine')```. I personnally believe it's a must-have feature, because, let's say you have a python scene in which you have to create 5 times the same PSDE component, a custom TransformEngine for instance:; - Without this PR, you would have to create 5 separated classes, with the exact same implementation, just a different value in the addNewInput() in parse(). This is very redundant. ; - Passing the inputs values through createObject allows you to create a component only once, and use it as many times as you want in your scene afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420
https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420:258,Safety,safe,safe,258,"@damienmarchal @tgaugry @jnbrunet, what do you think of @sescaida 's comment?. I agree that it makes it a bit tricky to look into the inner mechanisms of the creation of datafields from the createObject method.; I tried to make it as clear / explicit / fail-safe as possible though: ; - datafields passed through the createObject() function MUST be inputs fields referenced in the `args` dictionnary present in the Python class and there is a nice warning showing up when you try to pass an argument that doesn't exist in the args `dictionary` to createObject; - The user needs to explicitely use the decorator function in the SofaPython module on the parse() method, so he kinda has to know what the decorator does; - The syntax is as close as possible to the syntaxt of normal sofa::core::DataEngines created in python:; ```node.createObject('TransformEngine', input_position='@component.data', translation='0 0 0')```; would translate into; ```node.createObject('PythonScriptDataEngine', input_position='@component.data', translation='0 0 0', filename=__file__, classname='PyTransformEngine')```. I personnally believe it's a must-have feature, because, let's say you have a python scene in which you have to create 5 times the same PSDE component, a custom TransformEngine for instance:; - Without this PR, you would have to create 5 separated classes, with the exact same implementation, just a different value in the addNewInput() in parse(). This is very redundant. ; - Passing the inputs values through createObject allows you to create a component only once, and use it as many times as you want in your scene afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420
https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420:1462,Safety,redund,redundant,1462,"@damienmarchal @tgaugry @jnbrunet, what do you think of @sescaida 's comment?. I agree that it makes it a bit tricky to look into the inner mechanisms of the creation of datafields from the createObject method.; I tried to make it as clear / explicit / fail-safe as possible though: ; - datafields passed through the createObject() function MUST be inputs fields referenced in the `args` dictionnary present in the Python class and there is a nice warning showing up when you try to pass an argument that doesn't exist in the args `dictionary` to createObject; - The user needs to explicitely use the decorator function in the SofaPython module on the parse() method, so he kinda has to know what the decorator does; - The syntax is as close as possible to the syntaxt of normal sofa::core::DataEngines created in python:; ```node.createObject('TransformEngine', input_position='@component.data', translation='0 0 0')```; would translate into; ```node.createObject('PythonScriptDataEngine', input_position='@component.data', translation='0 0 0', filename=__file__, classname='PyTransformEngine')```. I personnally believe it's a must-have feature, because, let's say you have a python scene in which you have to create 5 times the same PSDE component, a custom TransformEngine for instance:; - Without this PR, you would have to create 5 separated classes, with the exact same implementation, just a different value in the addNewInput() in parse(). This is very redundant. ; - Passing the inputs values through createObject allows you to create a component only once, and use it as many times as you want in your scene afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420
https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420:234,Usability,clear,clear,234,"@damienmarchal @tgaugry @jnbrunet, what do you think of @sescaida 's comment?. I agree that it makes it a bit tricky to look into the inner mechanisms of the creation of datafields from the createObject method.; I tried to make it as clear / explicit / fail-safe as possible though: ; - datafields passed through the createObject() function MUST be inputs fields referenced in the `args` dictionnary present in the Python class and there is a nice warning showing up when you try to pass an argument that doesn't exist in the args `dictionary` to createObject; - The user needs to explicitely use the decorator function in the SofaPython module on the parse() method, so he kinda has to know what the decorator does; - The syntax is as close as possible to the syntaxt of normal sofa::core::DataEngines created in python:; ```node.createObject('TransformEngine', input_position='@component.data', translation='0 0 0')```; would translate into; ```node.createObject('PythonScriptDataEngine', input_position='@component.data', translation='0 0 0', filename=__file__, classname='PyTransformEngine')```. I personnally believe it's a must-have feature, because, let's say you have a python scene in which you have to create 5 times the same PSDE component, a custom TransformEngine for instance:; - Without this PR, you would have to create 5 separated classes, with the exact same implementation, just a different value in the addNewInput() in parse(). This is very redundant. ; - Passing the inputs values through createObject allows you to create a component only once, and use it as many times as you want in your scene afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420
https://github.com/sofa-framework/sofa/pull/743#issuecomment-416164790:190,Usability,intuit,intuitiveness,190,"@marques-bruno you're right! You had already mentioned that this would improve the reusability of PSDE-Python-Code written by the user. In that case I am in favor of this feature. About the intuitiveness: do you (and the others) think it would make sense to have an additional argument in createObject() that explicitly has to be set to use this feature of ""inline"" PSDE I/O creation?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-416164790
https://github.com/sofa-framework/sofa/pull/743#issuecomment-416264093:729,Usability,clear,clear,729,"> It would be FALSE by default and wouldn't need to be specified if ""inline"" I/O-creation is not used. Actually, I didn't think of it immediately when you said it, but this is already what the current implementation does (kind of, the implementation is different but the concept is the same):. if the decorator `@sp.ParseInputs` is not set on the parse method, the passing of arguments through the createObject() is disabled, and the input argument will be ignored.; setting @sp.ParseInputs is kind of the equivalent to a boolean flag in the class allowing ""inline"" definitions. The only difference is that it's made at the declaration step and not during the instantiation of the class. the name (ParseInputs) is maybe not very clear. it could be called differently. ""fwd_inline_args"" or ""allow_inlines""..?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-416264093
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1620,Availability,error,error-prone,1620,"self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```. I'll work on that in the following days :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:471,Deployability,update,update,471,"@sescaida, I just discovered a syntax, that exists since, well ... ever, and makes this whole PR completely useless....:. ```py; import Sofa; import os. class PyEng(Sofa.PythonScriptDataEngine):; def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene gra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:795,Performance,load,loader,795,"@sescaida, I just discovered a syntax, that exists since, well ... ever, and makes this whole PR completely useless....:. ```py; import Sofa; import os. class PyEng(Sofa.PythonScriptDataEngine):; def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene gra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:849,Performance,load,loader,849,"@sescaida, I just discovered a syntax, that exists since, well ... ever, and makes this whole PR completely useless....:. ```py; import Sofa; import os. class PyEng(Sofa.PythonScriptDataEngine):; def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene gra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:932,Performance,load,loader,932,"@sescaida, I just discovered a syntax, that exists since, well ... ever, and makes this whole PR completely useless....:. ```py; import Sofa; import os. class PyEng(Sofa.PythonScriptDataEngine):; def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene gra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1045,Performance,load,loader,1045,"discovered a syntax, that exists since, well ... ever, and makes this whole PR completely useless....:. ```py; import Sofa; import os. class PyEng(Sofa.PythonScriptDataEngine):; def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my o",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1207,Performance,load,loader,1207," def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1769,Performance,perform,performed,1769,"self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```. I'll work on that in the following days :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1940,Performance,perform,performed,1940,"self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```. I'll work on that in the following days :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:2148,Performance,load,loader,2148,"self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```. I'll work on that in the following days :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:336,Testability,test,test,336,"@sescaida, I just discovered a syntax, that exists since, well ... ever, and makes this whole PR completely useless....:. ```py; import Sofa; import os. class PyEng(Sofa.PythonScriptDataEngine):; def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene gra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1522,Usability,simpl,simple,1522,"self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```. I'll work on that in the following days :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930:886,Safety,detect,detect,886,"According to @jnbrunet 's feedback I would say that the right approach to fix this is to stop using implicit and hidden link between objects. In defrost we are doing this kind of pattern (in pseudo code) this: ; ```cpp; class MyObject {; ....; SingleLink<Topology> topologyLink;; }; MyObject::init(){; /// Check if the link is explicitely set, ; if( !topologyLink.isSet() ){; /// If this is not the case so fallback to get the first topology in the context (buisness as usual) topologyLink.setLinkTo( getTopology() );; }. /// Here we use linked object. ; }; ```. Such an approach:; - is compatible with our existing scene base (when no link is specified then automatically retrieve something from the context) . But it brings the following: ; - As there is systematically a SingleLink for each getContext query, users can see in the GUI which object is actually linked to and so he can detect more easily what is wrong. . - With the SingleLink it become possible for the user to specify object should be used instead of the one retrived from the context (eg when you want the second object instead of the first one). . So to me we juste need to generalize this way of doing to all sofa objects. ; Any suggestion and feedback welcome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930
https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930:26,Usability,feedback,feedback,26,"According to @jnbrunet 's feedback I would say that the right approach to fix this is to stop using implicit and hidden link between objects. In defrost we are doing this kind of pattern (in pseudo code) this: ; ```cpp; class MyObject {; ....; SingleLink<Topology> topologyLink;; }; MyObject::init(){; /// Check if the link is explicitely set, ; if( !topologyLink.isSet() ){; /// If this is not the case so fallback to get the first topology in the context (buisness as usual) topologyLink.setLinkTo( getTopology() );; }. /// Here we use linked object. ; }; ```. Such an approach:; - is compatible with our existing scene base (when no link is specified then automatically retrieve something from the context) . But it brings the following: ; - As there is systematically a SingleLink for each getContext query, users can see in the GUI which object is actually linked to and so he can detect more easily what is wrong. . - With the SingleLink it become possible for the user to specify object should be used instead of the one retrived from the context (eg when you want the second object instead of the first one). . So to me we juste need to generalize this way of doing to all sofa objects. ; Any suggestion and feedback welcome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930
https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930:1216,Usability,feedback,feedback,1216,"According to @jnbrunet 's feedback I would say that the right approach to fix this is to stop using implicit and hidden link between objects. In defrost we are doing this kind of pattern (in pseudo code) this: ; ```cpp; class MyObject {; ....; SingleLink<Topology> topologyLink;; }; MyObject::init(){; /// Check if the link is explicitely set, ; if( !topologyLink.isSet() ){; /// If this is not the case so fallback to get the first topology in the context (buisness as usual) topologyLink.setLinkTo( getTopology() );; }. /// Here we use linked object. ; }; ```. Such an approach:; - is compatible with our existing scene base (when no link is specified then automatically retrieve something from the context) . But it brings the following: ; - As there is systematically a SingleLink for each getContext query, users can see in the GUI which object is actually linked to and so he can detect more easily what is wrong. . - With the SingleLink it become possible for the user to specify object should be used instead of the one retrived from the context (eg when you want the second object instead of the first one). . So to me we juste need to generalize this way of doing to all sofa objects. ; Any suggestion and feedback welcome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:216,Integrability,depend,dependency,216,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:134,Modifiability,inherit,inheriting,134,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:567,Security,expose,expose,567,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:1321,Security,expose,exposed,1321,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:384,Testability,test,test,384,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:820,Usability,usab,usable,820,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:1394,Usability,clear,clear,1394,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/issues/749#issuecomment-488587368:76,Usability,feedback,feedback,76,"Hi @ChristianDuriez, @fjourdes, @EulalieCoevoet, . It would be nice to have feedback on this possible issue because this is related to your PR. If it is not an issue we can close it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/749#issuecomment-488587368
https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007:191,Deployability,update,updated,191,"Indeed, it can be cumbersome to change simple values in the data inspector. Good point the video ;) but YouTube does not show it, is it private ?; When you change the data value, the data is updated as soon as the mouse moves left&right, correct ? I am no expert in UX, but it this the best way to do it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007
https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007:39,Usability,simpl,simple,39,"Indeed, it can be cumbersome to change simple values in the data inspector. Good point the video ;) but YouTube does not show it, is it private ?; When you change the data value, the data is updated as soon as the mouse moves left&right, correct ? I am no expert in UX, but it this the best way to do it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007
https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007:266,Usability,UX,UX,266,"Indeed, it can be cumbersome to change simple values in the data inspector. Good point the video ;) but YouTube does not show it, is it private ?; When you change the data value, the data is updated as soon as the mouse moves left&right, correct ? I am no expert in UX, but it this the best way to do it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007
https://github.com/sofa-framework/sofa/pull/750#issuecomment-413547350:47,Usability,UX,UX,47,"My bad for the video...it is now public. About UX, I'm not sure there exists something like ""the best way"" to do something :) ; So I can only answer that sliding left/right is a very common and appreciated way in software like Blender or Unity3D.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413547350
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:140,Deployability,update,update-on-demand,140,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:501,Deployability,update,update-on-demand,501,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:471,Modifiability,maintainab,maintainability,471,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:409,Usability,simpl,simplicity,409,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:254,Availability,redundant,redundant,254,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:215,Deployability,update,update,215,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:291,Deployability,update,update,291,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:733,Deployability,update,update,733,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:661,Performance,perform,performed,661,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:254,Safety,redund,redundant,254,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:947,Safety,avoid,avoid,947,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:415,Security,access,accessed,415,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:1070,Usability,simpl,simplifying,1070,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:1136,Usability,simpl,simplifying,1136,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:1229,Usability,feedback,feedback,1229,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348:281,Deployability,update,update,281,"@damienmarchal @epernod, Taking @sescaida's comment into account, I tried to create an example showing the undesirable behavior related to the cleanDirty() call, unsuccessfully.; The comments for the sofa::core::DataEngine class in Sofa are very clear about the order in which the update() method should be implemented: first call update / getValue / updateIfDirty on your *inputs*, then call cleanDirty, then call setValue on your outputs. I have had issues in the past related to this specific cleanDirty() method, but for some reason I can't reproduce it. ; Does any of you understood the problem enough to create a small example causing the issue? I'll keep digging on my side.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348
https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348:331,Deployability,update,update,331,"@damienmarchal @epernod, Taking @sescaida's comment into account, I tried to create an example showing the undesirable behavior related to the cleanDirty() call, unsuccessfully.; The comments for the sofa::core::DataEngine class in Sofa are very clear about the order in which the update() method should be implemented: first call update / getValue / updateIfDirty on your *inputs*, then call cleanDirty, then call setValue on your outputs. I have had issues in the past related to this specific cleanDirty() method, but for some reason I can't reproduce it. ; Does any of you understood the problem enough to create a small example causing the issue? I'll keep digging on my side.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348
https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348:351,Deployability,update,updateIfDirty,351,"@damienmarchal @epernod, Taking @sescaida's comment into account, I tried to create an example showing the undesirable behavior related to the cleanDirty() call, unsuccessfully.; The comments for the sofa::core::DataEngine class in Sofa are very clear about the order in which the update() method should be implemented: first call update / getValue / updateIfDirty on your *inputs*, then call cleanDirty, then call setValue on your outputs. I have had issues in the past related to this specific cleanDirty() method, but for some reason I can't reproduce it. ; Does any of you understood the problem enough to create a small example causing the issue? I'll keep digging on my side.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348
https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348:246,Usability,clear,clear,246,"@damienmarchal @epernod, Taking @sescaida's comment into account, I tried to create an example showing the undesirable behavior related to the cleanDirty() call, unsuccessfully.; The comments for the sofa::core::DataEngine class in Sofa are very clear about the order in which the update() method should be implemented: first call update / getValue / updateIfDirty on your *inputs*, then call cleanDirty, then call setValue on your outputs. I have had issues in the past related to this specific cleanDirty() method, but for some reason I can't reproduce it. ; Does any of you understood the problem enough to create a small example causing the issue? I'll keep digging on my side.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:1699,Deployability,integrat,integration,1699,"ration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation because I was too lazy; /// to implement it using C-Python API. So the function is really implemented partially with python ; /// and partially with c++ :) ; if( Data_ass_subscript(o,key,value) ); return 0;; ; /// after that it is a lot of ugly c-python api code. ; ....; ```. And the corresponding cython code (in Binding_DataArray.pyx); ```python; def sliceToRange(c, end):; start = 0; stop = end; if c.start != None:; start = c.start; if c.stop != None:; stop = c.stop; return xrange(start, stop) . cdef public bool Data_ass_sub",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:217,Integrability,rout,routines,217,"Hello Bruno,. Functional programming is very standard and part of the language:; http://book.pythontips.com/en/latest/map_filter.html ; as well as part of libraries:; https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.functional.html. So functional programming is a must (and cheap thing) to have but to be honest the syntax:; ```py; m.position[OnDiagonal] = 0.0; ```; was just there for fun and to see if it was possible (actually I see it as a generalization of the slice syntax array[2:1] that is part of the language where instead of iterating between the slice interval you can provide funny iteration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value);",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:1677,Integrability,protocol,protocol,1677,"ration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation because I was too lazy; /// to implement it using C-Python API. So the function is really implemented partially with python ; /// and partially with c++ :) ; if( Data_ass_subscript(o,key,value) ); return 0;; ; /// after that it is a lot of ugly c-python api code. ; ....; ```. And the corresponding cython code (in Binding_DataArray.pyx); ```python; def sliceToRange(c, end):; start = 0; stop = end; if c.start != None:; start = c.start; if c.stop != None:; stop = c.stop; return xrange(start, stop) . cdef public bool Data_ass_sub",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:1699,Integrability,integrat,integration,1699,"ration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation because I was too lazy; /// to implement it using C-Python API. So the function is really implemented partially with python ; /// and partially with c++ :) ; if( Data_ass_subscript(o,key,value) ); return 0;; ; /// after that it is a lot of ugly c-python api code. ; ....; ```. And the corresponding cython code (in Binding_DataArray.pyx); ```python; def sliceToRange(c, end):; start = 0; stop = end; if c.start != None:; start = c.start; if c.stop != None:; stop = c.stop; return xrange(start, stop) . cdef public bool Data_ass_sub",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:1052,Security,expose,exposed,1052,"e:; http://book.pythontips.com/en/latest/map_filter.html ; as well as part of libraries:; https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.functional.html. So functional programming is a must (and cheap thing) to have but to be honest the syntax:; ```py; m.position[OnDiagonal] = 0.0; ```; was just there for fun and to see if it was possible (actually I see it as a generalization of the slice syntax array[2:1] that is part of the language where instead of iterating between the slice interval you can provide funny iteration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:1105,Security,expose,exposed,1105,"e:; http://book.pythontips.com/en/latest/map_filter.html ; as well as part of libraries:; https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.functional.html. So functional programming is a must (and cheap thing) to have but to be honest the syntax:; ```py; m.position[OnDiagonal] = 0.0; ```; was just there for fun and to see if it was possible (actually I see it as a generalization of the slice syntax array[2:1] that is part of the language where instead of iterating between the slice interval you can provide funny iteration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:963,Usability,simpl,simple,963,"Hello Bruno,. Functional programming is very standard and part of the language:; http://book.pythontips.com/en/latest/map_filter.html ; as well as part of libraries:; https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.functional.html. So functional programming is a must (and cheap thing) to have but to be honest the syntax:; ```py; m.position[OnDiagonal] = 0.0; ```; was just there for fun and to see if it was possible (actually I see it as a generalization of the slice syntax array[2:1] that is part of the language where instead of iterating between the slice interval you can provide funny iteration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value);",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:3178,Usability,clear,clearly,3178,"ld be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation because I was too lazy; /// to implement it using C-Python API. So the function is really implemented partially with python ; /// and partially with c++ :) ; if( Data_ass_subscript(o,key,value) ); return 0;; ; /// after that it is a lot of ugly c-python api code. ; ....; ```. And the corresponding cython code (in Binding_DataArray.pyx); ```python; def sliceToRange(c, end):; start = 0; stop = end; if c.start != None:; start = c.start; if c.stop != None:; stop = c.stop; return xrange(start, stop) . cdef public bool Data_ass_subscript(o,key,value):; if isinstance(key, slice):; start, stop, step = key.start, key.stop, key.step; for i in xrange(start,stop):; Data_helper(o, i, value); return True; elif callable(key):; g = key(o) ; for i in g:; Data_helper(o, i, value); return True; elif isinstance(key, tuple):; if isinstance(key[0], slice) and isinstance(key[1], slice):; igen = sliceToRange(key[0], o.shape[0]); jgen = sliceToRange(key[1], o.shape[1]); for i in igen:; for j in jgen:; Data_helper(o,(i,j),value) ; return True ; return False; ```. Mixing code to implement a single function is clearly not the way to go. But i found that implementing complete complex function using the C-python api in cython is way more easier than writing them in C.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059:93,Availability,error,error,93,"Thank Eulalie for this report. After discussion with Erik, STL was remove on purpose but the error message is not clear on that and on how to fix the Scene. We will fix that this friday. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059
https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059:99,Integrability,message,message,99,"Thank Eulalie for this report. After discussion with Erik, STL was remove on purpose but the error message is not clear on that and on how to fix the Scene. We will fix that this friday. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059
https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059:114,Usability,clear,clear,114,"Thank Eulalie for this report. After discussion with Erik, STL was remove on purpose but the error message is not clear on that and on how to fix the Scene. We will fix that this friday. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059
https://github.com/sofa-framework/sofa/pull/772#issuecomment-422772768:40,Usability,clear,clearing,40,"Olivier's point me that in his code the clearing of the links is really ""perfectible"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-422772768
https://github.com/sofa-framework/sofa/pull/772#issuecomment-422810617:42,Usability,clear,clearing,42,"> Olivier's point me that in his code the clearing of the links is really ""perfectible"". It was improved with the last commit, thank you!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-422810617
https://github.com/sofa-framework/sofa/pull/772#issuecomment-424997626:107,Usability,clear,clear,107,"Hi @olivier-goury ; The info is in the sofa-dev meeting report but has not been copied here.; --> wip, use clear() instead of removeAt(0) on l_forceField link. @guparan will work on it, no worries",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-424997626
https://github.com/sofa-framework/sofa/pull/772#issuecomment-424999993:112,Usability,clear,clear,112,"> Hi @olivier-goury; > The info is in the sofa-dev meeting report but has not been copied here.; > --> wip, use clear() instead of removeAt(0) on l_forceField link; > ; > @guparan will work on it, no worries. Ok thanks for the info!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-424999993
https://github.com/sofa-framework/sofa/pull/772#issuecomment-425903565:21,Usability,clear,clear,21,Actually there is no clear() method for Links.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-425903565
https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644:40,Testability,test,test,40,it doesn't on mac.... I pushed a simple test on EdgeSetTopologyAlgorithm.; Feel free to do some tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644
https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644:96,Testability,test,tests,96,it doesn't on mac.... I pushed a simple test on EdgeSetTopologyAlgorithm.; Feel free to do some tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644
https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644:33,Usability,simpl,simple,33,it doesn't on mac.... I pushed a simple test on EdgeSetTopologyAlgorithm.; Feel free to do some tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:205,Availability,avail,available,205,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:842,Deployability,update,updated,842,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:272,Modifiability,refactor,refactored,272,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:608,Modifiability,refactor,refactor,608,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:803,Modifiability,variab,variables,803,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:889,Modifiability,refactor,refactor,889,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:28,Performance,optimiz,optimize,28,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:186,Performance,optimiz,optimization,186,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:720,Performance,optimiz,optimize,720,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:137,Safety,avoid,avoid,137,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:98,Usability,clear,clear,98,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/798#issuecomment-443732934:48,Usability,feedback,feedback,48,"Hi all,. I think Eulalie's work is done. . Your feedback & review are welcome because it is a big PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-443732934
https://github.com/sofa-framework/sofa/pull/827#issuecomment-439025656:16,Usability,feedback,feedback,16,"Thanks for your feedback @jnbrunet @damienmarchal . Meanwhile, this PR is ready, and I suggest reviewing it as a fast-merge since it's not much and fixes a compile-time issue for quite a few people.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827#issuecomment-439025656
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:138,Availability,error,error,138,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:101,Testability,test,test,101,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:282,Testability,test,test,282,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:256,Usability,simpl,simpler,256,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:270,Usability,simpl,simply,270,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295
https://github.com/sofa-framework/sofa/issues/879#issuecomment-486572133:114,Deployability,install,installation,114,"Hi @Neustradamus,; Shipping Python with SOFA binaries is not a priority for now but I will definitely improve the installation instructions to make it very clear that users have to set their Python env by themselves and how to do it.; But actually I may have closed this one too quickly, the solution you proposed should be implemented. Let's re-open and put a more generic title. No promise on when I will tackle this though.; Do not hesitate to help in any way :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-486572133
https://github.com/sofa-framework/sofa/issues/879#issuecomment-486572133:156,Usability,clear,clear,156,"Hi @Neustradamus,; Shipping Python with SOFA binaries is not a priority for now but I will definitely improve the installation instructions to make it very clear that users have to set their Python env by themselves and how to do it.; But actually I may have closed this one too quickly, the solution you proposed should be implemented. Let's re-open and put a more generic title. No promise on when I will tackle this though.; Do not hesitate to help in any way :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-486572133
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9002,Availability,redundant,redundant-expression,9002,Test.html) | [misc-misplaced-const](https://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-const.html) |; | [clang-analyzer-core.CallAndMessage](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.CallAndMessage.html) | [misc-misplaced-widening-cast](https://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-widening-cast.html) |; | [clang-analyzer-core.DivideZero](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DivideZero.html) | [misc-new-delete-overloads](https://clang.llvm.org/extra/clang-tidy/checks/misc-new-delete-overloads.html) |; | [clang-analyzer-core.DynamicTypePropagation](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DynamicTypePropagation.html) | [misc-non-copyable-objects](https://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9076,Availability,redundant,redundant-expression,9076,g/extra/clang-tidy/checks/misc-misplaced-const.html) |; | [clang-analyzer-core.CallAndMessage](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.CallAndMessage.html) | [misc-misplaced-widening-cast](https://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-widening-cast.html) |; | [clang-analyzer-core.DivideZero](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DivideZero.html) | [misc-new-delete-overloads](https://clang.llvm.org/extra/clang-tidy/checks/misc-new-delete-overloads.html) |; | [clang-analyzer-core.DynamicTypePropagation](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DynamicTypePropagation.html) | [misc-non-copyable-objects](https://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-compare.htm,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15892,Availability,redundant,redundant-void-arg,15892,[modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15969,Availability,redundant,redundant-void-arg,15969,idy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modern,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23587,Availability,down,downcast,23587,-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/check,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23683,Availability,down,downcast,23683,lang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-memb,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28229,Availability,redundant,redundant-control-flow,28229,](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readabi,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28312,Availability,redundant,redundant-control-flow,28312,ading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-ti,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28492,Availability,redundant,redundant-declaration,28492,dex](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [re,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28574,Availability,redundant,redundant-declaration,28574,isplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/cla,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28627,Availability,redundant,redundant-smartptr-get,28627,-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [googl,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28717,Availability,redundant,redundant-smartptr-get,28717,ity-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28761,Availability,redundant,redundant-function-ptr-dereference,28761,ps://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://cl,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28856,Availability,redundant,redundant-function-ptr-dereference,28856,|; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29020,Availability,redundant,redundant-member-init,29020,tra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/ex,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29102,Availability,redundant,redundant-member-init,29102,[google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; ,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29243,Availability,redundant,redundant-smartptr-get,29243,](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [re,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29326,Availability,redundant,redundant-smartptr-get,29326,dant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29510,Availability,redundant,redundant-string-cstr,29510,ps://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uni,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29592,Availability,redundant,redundant-string-cstr,29592,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29743,Availability,redundant,redundant-string-init,29743,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29825,Availability,redundant,redundant-string-init,29825,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:12881,Deployability,release,release,12881,dy/checks/misc-swapped-arguments.html) |; | [clang-analyzer-core.uninitialized.UndefReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.uninitialized.UndefReturn.html) | [misc-throw-by-value-catch-by-reference](https://clang.llvm.org/extra/clang-tidy/checks/misc-throw-by-value-catch-by-reference.html) |; | [clang-analyzer-cplusplus.NewDelete](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-cplusplus.NewDelete.html) | [misc-unconventional-assign-operator](https://clang.llvm.org/extra/clang-tidy/checks/misc-unconventional-assign-operator.html) |; | [clang-analyzer-cplusplus.NewDeleteLeaks](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-cplusplus.NewDeleteLeaks.html) | [misc-undelegated-constructor](https://clang.llvm.org/extra/clang-tidy/checks/misc-undelegated-constructor.html) |; | [clang-analyzer-cplusplus.SelfAssignment](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-cplusplus.SelfAssignment.html) | [misc-uniqueptr-reset-release](https://clang.llvm.org/extra/clang-tidy/checks/misc-uniqueptr-reset-release.html) |; | [clang-analyzer-deadcode.DeadStores](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-deadcode.DeadStores.html) | [misc-unused-alias-decls](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-alias-decls.html) |; | [clang-analyzer-llvm.Conventions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-llvm.Conventions.html) | [misc-unused-parameters](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-parameters.html) |; | [clang-analyzer-nullability.NullPassedToNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullPassedToNonnull.html) | [misc-unused-raii](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-raii.html) |; | [clang-analyzer-nullability.NullReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullReturnedFromNonnull.html) | [misc-unused-using-decls](https://c,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:12958,Deployability,release,release,12958,core.uninitialized.UndefReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.uninitialized.UndefReturn.html) | [misc-throw-by-value-catch-by-reference](https://clang.llvm.org/extra/clang-tidy/checks/misc-throw-by-value-catch-by-reference.html) |; | [clang-analyzer-cplusplus.NewDelete](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-cplusplus.NewDelete.html) | [misc-unconventional-assign-operator](https://clang.llvm.org/extra/clang-tidy/checks/misc-unconventional-assign-operator.html) |; | [clang-analyzer-cplusplus.NewDeleteLeaks](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-cplusplus.NewDeleteLeaks.html) | [misc-undelegated-constructor](https://clang.llvm.org/extra/clang-tidy/checks/misc-undelegated-constructor.html) |; | [clang-analyzer-cplusplus.SelfAssignment](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-cplusplus.SelfAssignment.html) | [misc-uniqueptr-reset-release](https://clang.llvm.org/extra/clang-tidy/checks/misc-uniqueptr-reset-release.html) |; | [clang-analyzer-deadcode.DeadStores](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-deadcode.DeadStores.html) | [misc-unused-alias-decls](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-alias-decls.html) |; | [clang-analyzer-llvm.Conventions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-llvm.Conventions.html) | [misc-unused-parameters](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-parameters.html) |; | [clang-analyzer-nullability.NullPassedToNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullPassedToNonnull.html) | [misc-unused-raii](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-raii.html) |; | [clang-analyzer-nullability.NullReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullReturnedFromNonnull.html) | [misc-unused-using-decls](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-using-decl,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:30447,Deployability,release,release,30447,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:30532,Deployability,release,release,30532,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20910,Integrability,interface,interfaces-global-init,20910,a/clang-tidy/checks/modernize-use-using.html) |; | [clang-analyzer-valist.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-boun,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20999,Integrability,interface,interfaces-global-init,20999,.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cp,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15507,Modifiability,portab,portability,15507,llableReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableReturnedFromNonnull.html) | [modernize-loop-convert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-loop-convert.html) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replac,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15596,Modifiability,portab,portability,15596,nullability.NullableReturnedFromNonnull.html) | [modernize-loop-convert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-loop-convert.html) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:25405,Modifiability,inherit,inheritance,25405,cing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tidy/checks/readability-container-size-empty.html) |; | [fuchsia-virtual-inheritance](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-virtual-inheritance.html) | [readability-delete-null-pointer](https://clang.llvm.org/extra/clang-tidy/checks/readability-delete-null-pointer.html) |; | [google-build-explicit-make-pair](https://clang.llvm.org/extra/clang-tidy/checks/google-build-explicit-make-pair.html) | [readability-deleted-default](https://clang.llvm.org/extra/clang-tidy/checks/readability-deleted-default.html) |; | [google-build-namespaces](https://clang.llvm.org/extra/clang-tidy/checks/google-build-namespaces.html) | [readability-else-after-return](https://clang.llvm.org/extra/clang-tidy/checks/readability-else-after-return.html) |; | [google-build-using-namespace](https://clang.llvm.org/extra/clang-tidy/checks/google-build-using-namespace.html) | [readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/readability-function-size.html) |; | [google-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/google-default-ar,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:25481,Modifiability,inherit,inheritance,25481,uidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tidy/checks/readability-container-size-empty.html) |; | [fuchsia-virtual-inheritance](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-virtual-inheritance.html) | [readability-delete-null-pointer](https://clang.llvm.org/extra/clang-tidy/checks/readability-delete-null-pointer.html) |; | [google-build-explicit-make-pair](https://clang.llvm.org/extra/clang-tidy/checks/google-build-explicit-make-pair.html) | [readability-deleted-default](https://clang.llvm.org/extra/clang-tidy/checks/readability-deleted-default.html) |; | [google-build-namespaces](https://clang.llvm.org/extra/clang-tidy/checks/google-build-namespaces.html) | [readability-else-after-return](https://clang.llvm.org/extra/clang-tidy/checks/readability-else-after-return.html) |; | [google-build-using-namespace](https://clang.llvm.org/extra/clang-tidy/checks/google-build-using-namespace.html) | [readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/readability-function-size.html) |; | [google-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/google-default-arguments.html) | [readability-identifier-naming](https://clan,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:27352,Modifiability,variab,variable-declaration,27352,.llvm.org/extra/clang-tidy/checks/google-default-arguments.html) | [readability-identifier-naming](https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html) |; | [google-explicit-constructor](https://clang.llvm.org/extra/clang-tidy/checks/google-explicit-constructor.html) | [readability-implicit-bool-conversion](https://clang.llvm.org/extra/clang-tidy/checks/readability-implicit-bool-conversion.html) |; | [google-global-names-in-headers](https://clang.llvm.org/extra/clang-tidy/checks/google-global-names-in-headers.html) | [readability-inconsistent-declaration-parameter-name](https://clang.llvm.org/extra/clang-tidy/checks/readability-inconsistent-declaration-parameter-name.html) |; | [google-objc-avoid-throwing-exception](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-avoid-throwing-exception.html) | [readability-misleading-indentation](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-r,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:27440,Modifiability,variab,variable-declaration,27440,bility-identifier-naming](https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html) |; | [google-explicit-constructor](https://clang.llvm.org/extra/clang-tidy/checks/google-explicit-constructor.html) | [readability-implicit-bool-conversion](https://clang.llvm.org/extra/clang-tidy/checks/readability-implicit-bool-conversion.html) |; | [google-global-names-in-headers](https://clang.llvm.org/extra/clang-tidy/checks/google-global-names-in-headers.html) | [readability-inconsistent-declaration-parameter-name](https://clang.llvm.org/extra/clang-tidy/checks/readability-inconsistent-declaration-parameter-name.html) |; | [google-objc-avoid-throwing-exception](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-avoid-throwing-exception.html) | [readability-misleading-indentation](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/c,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15260,Performance,perform,performance,15260,/clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullablePassedToNonnull.html) | [modernize-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/modernize-deprecated-headers.html) |; | [clang-analyzer-nullability.NullableReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableReturnedFromNonnull.html) | [modernize-loop-convert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-loop-convert.html) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.htm,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15349,Performance,perform,performance,15349,l.html) | [modernize-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/modernize-deprecated-headers.html) |; | [clang-analyzer-nullability.NullableReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableReturnedFromNonnull.html) | [modernize-loop-convert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-loop-convert.html) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-ti,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:21491,Performance,perform,performance-faster-string-find,21491,ist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:21570,Performance,perform,performance-faster-string-find,21570,ng.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:21774,Performance,perform,performance-for-range-copy,21774, [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](ht,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:21849,Performance,perform,performance-for-range-copy,21849,tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidel,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22045,Performance,perform,performance-implicit-conversion-in-loop,22045,lang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](ht,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22133,Performance,perform,performance-implicit-conversion-in-loop,22133,|; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22338,Performance,perform,performance-inefficient-algorithm,22338,html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tid,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22420,Performance,perform,performance-inefficient-algorithm,22420,rg/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [per,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22599,Performance,perform,performance-inefficient-string-concatenation,22599,elines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22692,Performance,perform,performance-inefficient-string-concatenation,22692,-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22884,Performance,perform,performance-inefficient-vector-operation,22884,ro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/c,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22973,Performance,perform,performance-inefficient-vector-operation,22973,checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [perfor,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23161,Performance,perform,performance-move-const-arg,23161,) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clan,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23236,Performance,perform,performance-move-const-arg,23236,ttps://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [p,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23420,Performance,perform,performance-move-constructor-init,23420,ent-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/c,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23502,Performance,perform,performance-move-constructor-init,23502,https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-u,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23701,Performance,perform,performance-noexcept-move-constructor,23701,concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreg,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23787,Performance,perform,performance-noexcept-move-constructor,23787,ps://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-p,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23974,Performance,perform,performance-type-promotion-in-math-fn,23974,-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24060,Performance,perform,performance-type-promotion-in-math-fn,24060,(https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://cla,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24235,Performance,perform,performance-unnecessary-copy-initialization,24235,rg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) ,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24327,Performance,perform,performance-unnecessary-copy-initialization,24327,lvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tid,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24492,Performance,perform,performance-unnecessary-value-param,24492,-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tidy/checks/readability-container-size-empty.html) |; | [fuchsia-virtual-inheritance](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-virtual-inheritance.html) | [readability,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24576,Performance,perform,performance-unnecessary-value-param,24576,c-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tidy/checks/readability-container-size-empty.html) |; | [fuchsia-virtual-inheritance](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-virtual-inheritance.html) | [readability-delete-null-pointer](https://clang.llvm.org/extra/clang-tidy/check,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9002,Safety,redund,redundant-expression,9002,Test.html) | [misc-misplaced-const](https://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-const.html) |; | [clang-analyzer-core.CallAndMessage](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.CallAndMessage.html) | [misc-misplaced-widening-cast](https://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-widening-cast.html) |; | [clang-analyzer-core.DivideZero](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DivideZero.html) | [misc-new-delete-overloads](https://clang.llvm.org/extra/clang-tidy/checks/misc-new-delete-overloads.html) |; | [clang-analyzer-core.DynamicTypePropagation](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DynamicTypePropagation.html) | [misc-non-copyable-objects](https://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9076,Safety,redund,redundant-expression,9076,g/extra/clang-tidy/checks/misc-misplaced-const.html) |; | [clang-analyzer-core.CallAndMessage](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.CallAndMessage.html) | [misc-misplaced-widening-cast](https://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-widening-cast.html) |; | [clang-analyzer-core.DivideZero](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DivideZero.html) | [misc-new-delete-overloads](https://clang.llvm.org/extra/clang-tidy/checks/misc-new-delete-overloads.html) |; | [clang-analyzer-core.DynamicTypePropagation](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DynamicTypePropagation.html) | [misc-non-copyable-objects](https://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-compare.htm,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:14115,Safety,avoid,avoid-bind,14115,lias-decls](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-alias-decls.html) |; | [clang-analyzer-llvm.Conventions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-llvm.Conventions.html) | [misc-unused-parameters](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-parameters.html) |; | [clang-analyzer-nullability.NullPassedToNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullPassedToNonnull.html) | [misc-unused-raii](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-raii.html) |; | [clang-analyzer-nullability.NullReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullReturnedFromNonnull.html) | [misc-unused-using-decls](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-using-decls.html) |; | [clang-analyzer-nullability.NullableDereferenced](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableDereferenced.html) | [modernize-avoid-bind](https://clang.llvm.org/extra/clang-tidy/checks/modernize-avoid-bind.html) |; | [clang-analyzer-nullability.NullablePassedToNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullablePassedToNonnull.html) | [modernize-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/modernize-deprecated-headers.html) |; | [clang-analyzer-nullability.NullableReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableReturnedFromNonnull.html) | [modernize-loop-convert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-loop-convert.html) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-C,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:14184,Safety,avoid,avoid-bind,14184,checks/misc-unused-alias-decls.html) |; | [clang-analyzer-llvm.Conventions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-llvm.Conventions.html) | [misc-unused-parameters](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-parameters.html) |; | [clang-analyzer-nullability.NullPassedToNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullPassedToNonnull.html) | [misc-unused-raii](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-raii.html) |; | [clang-analyzer-nullability.NullReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullReturnedFromNonnull.html) | [misc-unused-using-decls](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-using-decls.html) |; | [clang-analyzer-nullability.NullableDereferenced](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableDereferenced.html) | [modernize-avoid-bind](https://clang.llvm.org/extra/clang-tidy/checks/modernize-avoid-bind.html) |; | [clang-analyzer-nullability.NullablePassedToNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullablePassedToNonnull.html) | [modernize-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/modernize-deprecated-headers.html) |; | [clang-analyzer-nullability.NullableReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableReturnedFromNonnull.html) | [modernize-loop-convert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-loop-convert.html) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15892,Safety,redund,redundant-void-arg,15892,[modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15969,Safety,redund,redundant-void-arg,15969,idy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modern,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20540,Safety,avoid,avoid-nserror-init,20540,y/checks/clang-analyzer-unix.cstring.BadSizeArg.html) | [modernize-use-transparent-functors](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-transparent-functors.html) |; | [clang-analyzer-unix.cstring.NullArg](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.cstring.NullArg.html) | [modernize-use-using](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-using.html) |; | [clang-analyzer-valist.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20612,Safety,avoid,avoid-nserror-init,20612, [modernize-use-transparent-functors](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-transparent-functors.html) |; | [clang-analyzer-unix.cstring.NullArg](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.cstring.NullArg.html) | [modernize-use-using](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-using.html) |; | [clang-analyzer-valist.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20797,Safety,avoid,avoid-spinlock,20797,ang-tidy/checks/clang-analyzer-unix.cstring.NullArg.html) | [modernize-use-using](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-using.html) |; | [clang-analyzer-valist.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](htt,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20865,Safety,avoid,avoid-spinlock,20865,.html) | [modernize-use-using](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-using.html) |; | [clang-analyzer-valist.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/perform,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24779,Safety,avoid,avoid-const-params-in-decls,24779,formance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tidy/checks/readability-container-size-empty.html) |; | [fuchsia-virtual-inheritance](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-virtual-inheritance.html) | [readability-delete-null-pointer](https://clang.llvm.org/extra/clang-tidy/checks/readability-delete-null-pointer.html) |; | [google-build-explicit-make-pair](https://clang.llvm.org/extra/clang-tidy/checks/google-build-explicit-make-pair.html) | [readability-deleted-default](https://clang.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24867,Safety,avoid,avoid-const-params-in-decls,24867,pe-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tidy/checks/readability-container-size-empty.html) |; | [fuchsia-virtual-inheritance](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-virtual-inheritance.html) | [readability-delete-null-pointer](https://clang.llvm.org/extra/clang-tidy/checks/readability-delete-null-pointer.html) |; | [google-build-explicit-make-pair](https://clang.llvm.org/extra/clang-tidy/checks/google-build-explicit-make-pair.html) | [readability-deleted-default](https://clang.llvm.org/extra/clang-tidy/checks/readability-deleted-default.html) |; |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:27084,Safety,avoid,avoid-throwing-exception,27084,le-build-using-namespace](https://clang.llvm.org/extra/clang-tidy/checks/google-build-using-namespace.html) | [readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/readability-function-size.html) |; | [google-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/google-default-arguments.html) | [readability-identifier-naming](https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html) |; | [google-explicit-constructor](https://clang.llvm.org/extra/clang-tidy/checks/google-explicit-constructor.html) | [readability-implicit-bool-conversion](https://clang.llvm.org/extra/clang-tidy/checks/readability-implicit-bool-conversion.html) |; | [google-global-names-in-headers](https://clang.llvm.org/extra/clang-tidy/checks/google-global-names-in-headers.html) | [readability-inconsistent-declaration-parameter-name](https://clang.llvm.org/extra/clang-tidy/checks/readability-inconsistent-declaration-parameter-name.html) |; | [google-objc-avoid-throwing-exception](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-avoid-throwing-exception.html) | [readability-misleading-indentation](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:27169,Safety,avoid,avoid-throwing-exception,27169,cks/google-build-using-namespace.html) | [readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/readability-function-size.html) |; | [google-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/google-default-arguments.html) | [readability-identifier-naming](https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html) |; | [google-explicit-constructor](https://clang.llvm.org/extra/clang-tidy/checks/google-explicit-constructor.html) | [readability-implicit-bool-conversion](https://clang.llvm.org/extra/clang-tidy/checks/readability-implicit-bool-conversion.html) |; | [google-global-names-in-headers](https://clang.llvm.org/extra/clang-tidy/checks/google-global-names-in-headers.html) | [readability-inconsistent-declaration-parameter-name](https://clang.llvm.org/extra/clang-tidy/checks/readability-inconsistent-declaration-parameter-name.html) |; | [google-objc-avoid-throwing-exception](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-avoid-throwing-exception.html) | [readability-misleading-indentation](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28229,Safety,redund,redundant-control-flow,28229,](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readabi,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28312,Safety,redund,redundant-control-flow,28312,ading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-ti,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28492,Safety,redund,redundant-declaration,28492,dex](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [re,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28574,Safety,redund,redundant-declaration,28574,isplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/cla,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28627,Safety,redund,redundant-smartptr-get,28627,-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [googl,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28717,Safety,redund,redundant-smartptr-get,28717,ity-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28761,Safety,redund,redundant-function-ptr-dereference,28761,ps://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://cl,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28856,Safety,redund,redundant-function-ptr-dereference,28856,|; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29020,Safety,redund,redundant-member-init,29020,tra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/ex,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29102,Safety,redund,redundant-member-init,29102,[google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; ,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29243,Safety,redund,redundant-smartptr-get,29243,](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [re,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29326,Safety,redund,redundant-smartptr-get,29326,dant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29510,Safety,redund,redundant-string-cstr,29510,ps://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uni,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29592,Safety,redund,redundant-string-cstr,29592,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29743,Safety,redund,redundant-string-init,29743,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29825,Safety,redund,redundant-string-init,29825,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:1672,Security,access,access-moved,1672,llvm.org/extra/clang-tidy/checks/bugprone-argument-comment.html) | [hicpp-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-deprecated-headers.html) |; | [bugprone-assert-side-effect](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-assert-side-effect.html) | [hicpp-exception-baseclass](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-exception-baseclass.html) |; | [bugprone-bool-pointer-implicit-conversion](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-bool-pointer-implicit-conversion.html) | [hicpp-explicit-conversions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-explicit-conversions.html) |; | [bugprone-copy-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-copy-constructor-init.html) | [hicpp-function-size](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-function-size.html) |; | [bugprone-dangling-handle](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-dangling-handle.html) | [hicpp-invalid-access-moved](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-invalid-access-moved.html) |; | [bugprone-fold-init-type](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-fold-init-type.html) | [hicpp-member-init](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-member-init.html) |; | [bugprone-forward-declaration-namespace](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-forward-declaration-namespace.html) | [hicpp-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-move-const-arg.html) |; | [bugprone-inaccurate-erase](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-inaccurate-erase.html) | [hicpp-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-named-parameter.html) |; | [bugprone-integer-division](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-integer-division.html) | [hicpp-new-delete-operators](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-new-delete-operators.html) |; | [bugprone-misplaced-operator-i,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:1747,Security,access,access-moved,1747,.html) | [hicpp-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-deprecated-headers.html) |; | [bugprone-assert-side-effect](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-assert-side-effect.html) | [hicpp-exception-baseclass](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-exception-baseclass.html) |; | [bugprone-bool-pointer-implicit-conversion](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-bool-pointer-implicit-conversion.html) | [hicpp-explicit-conversions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-explicit-conversions.html) |; | [bugprone-copy-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-copy-constructor-init.html) | [hicpp-function-size](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-function-size.html) |; | [bugprone-dangling-handle](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-dangling-handle.html) | [hicpp-invalid-access-moved](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-invalid-access-moved.html) |; | [bugprone-fold-init-type](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-fold-init-type.html) | [hicpp-member-init](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-member-init.html) |; | [bugprone-forward-declaration-namespace](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-forward-declaration-namespace.html) | [hicpp-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-move-const-arg.html) |; | [bugprone-inaccurate-erase](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-inaccurate-erase.html) | [hicpp-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-named-parameter.html) |; | [bugprone-integer-division](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-integer-division.html) | [hicpp-new-delete-operators](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-new-delete-operators.html) |; | [bugprone-misplaced-operator-in-strlen-in-alloc](https://clang.llvm.org/extra/clang-tidy,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15758,Security,secur,security,15758,) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clan,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15847,Security,secur,security,15847,clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-securi,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16015,Security,secur,security,16015,ang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16115,Security,secur,security,16115,lyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16290,Security,secur,security,16290,https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/check,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16380,Security,secur,security,16380,dding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.ra,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16557,Security,secur,security,16557,rg/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-aut,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16646,Security,secur,security,16646,rnize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16824,Security,secur,security,16824,lang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) ,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16916,Security,secur,security,16916,nt-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17077,Security,secur,security,17077,lvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-me,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17168,Security,secur,security,17168,.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-t,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17340,Security,secur,security,17340,.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](http,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17429,Security,secur,security,17429, | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [mo,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17577,Security,secur,security,17577,secureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [modernize-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html) |; | [clang-analyzer-unix.MallocSizeof](https:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17668,Security,secur,security,17668,ity.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [modernize-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html) |; | [clang-analyzer-unix.MallocSizeof](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.MallocSizeof.html) | [,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17836,Security,secur,security,17836,urity.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [modernize-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html) |; | [clang-analyzer-unix.MallocSizeof](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.MallocSizeof.html) | [modernize-use-equals-delete](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-delete.html) |; | [clang-analyzer-unix.MismatchedDeallocator](https://clang.llv,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17926,Security,secur,security,17926,alyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [modernize-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html) |; | [clang-analyzer-unix.MallocSizeof](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.MallocSizeof.html) | [modernize-use-equals-delete](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-delete.html) |; | [clang-analyzer-unix.MismatchedDeallocator](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.MismatchedDeallocator.html) | [m,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23870,Security,access,access,23870,type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/read,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23958,Security,access,access,23958,://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-argument,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:30117,Security,access,accessed-through-instance,30117,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:30210,Security,access,accessed-through-instance,30210,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:861,Testability,assert,assert-side-effect,861,Now is the good time to suggest any other clang-tidy run among:. | _ | _ |; |------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|; | [boost-use-to-string](https://clang.llvm.org/extra/clang-tidy/checks/boost-use-to-string.html) | [hicpp-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-braces-around-statements.html) |; | [bugprone-argument-comment](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-argument-comment.html) | [hicpp-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-deprecated-headers.html) |; | [bugprone-assert-side-effect](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-assert-side-effect.html) | [hicpp-exception-baseclass](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-exception-baseclass.html) |; | [bugprone-bool-pointer-implicit-conversion](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-bool-pointer-implicit-conversion.html) | [hicpp-explicit-conversions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-explicit-conversions.html) |; | [bugprone-copy-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-copy-constructor-init.html) | [hicpp-function-size](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-function-size.html) |; | [bugprone-dangling-handle](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-dangling-handle.html) | [hicpp-invalid-access-moved](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-invalid-access-moved.html) |; | [bugprone-fold-init-type](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-fold-init-type.html) | [hicpp-member-init](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-member-init.html) |; | [bugprone-forward-declaration,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:937,Testability,assert,assert-side-effect,937,Now is the good time to suggest any other clang-tidy run among:. | _ | _ |; |------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|; | [boost-use-to-string](https://clang.llvm.org/extra/clang-tidy/checks/boost-use-to-string.html) | [hicpp-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-braces-around-statements.html) |; | [bugprone-argument-comment](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-argument-comment.html) | [hicpp-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-deprecated-headers.html) |; | [bugprone-assert-side-effect](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-assert-side-effect.html) | [hicpp-exception-baseclass](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-exception-baseclass.html) |; | [bugprone-bool-pointer-implicit-conversion](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-bool-pointer-implicit-conversion.html) | [hicpp-explicit-conversions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-explicit-conversions.html) |; | [bugprone-copy-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-copy-constructor-init.html) | [hicpp-function-size](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-function-size.html) |; | [bugprone-dangling-handle](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-dangling-handle.html) | [hicpp-invalid-access-moved](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-invalid-access-moved.html) |; | [bugprone-fold-init-type](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-fold-init-type.html) | [hicpp-member-init](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-member-init.html) |; | [bugprone-forward-declaration,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:4154,Testability,assert,assert,4154,cro](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-multiple-statement-macro.html) | [hicpp-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-no-malloc.html) |; | [bugprone-string-constructor](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-string-constructor.html) | [hicpp-noexcept-move](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-noexcept-move.html) |; | [bugprone-suspicious-memset-usage](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-suspicious-memset-usage.html) | [hicpp-signed-bitwise](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-signed-bitwise.html) |; | [bugprone-undefined-memory-manipulation](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-undefined-memory-manipulation.html) | [hicpp-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-special-member-functions.html) |; | [bugprone-use-after-move](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-use-after-move.html) | [hicpp-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-static-assert.html) |; | [bugprone-virtual-near-miss](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-virtual-near-miss.html) | [hicpp-undelegated-constructor](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-undelegated-constructor.html) |; | [cert-dcl03-c](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl03-c.html) | [hicpp-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-auto.html) |; | [cert-dcl21-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl21-cpp.html) | [hicpp-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-emplace.html) |; | [cert-dcl50-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl50-cpp.html) | [hicpp-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-equals-default.html) |; | [cert-dcl54-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl54-cpp.html) | [hicpp-use-equals-delete](https://clang.llv,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:4222,Testability,assert,assert,4222,/bugprone-multiple-statement-macro.html) | [hicpp-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-no-malloc.html) |; | [bugprone-string-constructor](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-string-constructor.html) | [hicpp-noexcept-move](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-noexcept-move.html) |; | [bugprone-suspicious-memset-usage](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-suspicious-memset-usage.html) | [hicpp-signed-bitwise](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-signed-bitwise.html) |; | [bugprone-undefined-memory-manipulation](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-undefined-memory-manipulation.html) | [hicpp-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-special-member-functions.html) |; | [bugprone-use-after-move](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-use-after-move.html) | [hicpp-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-static-assert.html) |; | [bugprone-virtual-near-miss](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-virtual-near-miss.html) | [hicpp-undelegated-constructor](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-undelegated-constructor.html) |; | [cert-dcl03-c](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl03-c.html) | [hicpp-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-auto.html) |; | [cert-dcl21-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl21-cpp.html) | [hicpp-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-emplace.html) |; | [cert-dcl50-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl50-cpp.html) | [hicpp-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-equals-default.html) |; | [cert-dcl54-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl54-cpp.html) | [hicpp-use-equals-delete](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-equals-dele,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9736,Testability,assert,assert,9736,on.html) | [misc-non-copyable-objects](https://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-compare.html) |; | [clang-analyzer-core.VLASize](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.VLASize.html) | [misc-string-integer-assignment](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-integer-assignment.html) |; | [clang-analyzer-core.builtin.BuiltinFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.BuiltinFunctions.html) | [misc-string-literal-with-embedded-nul](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-literal-with-embedded-nul.html) |; | [clang-analyzer-core.builtin.NoReturnFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.NoReturnFunctions.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9803,Testability,assert,assert,9803,ng.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-compare.html) |; | [clang-analyzer-core.VLASize](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.VLASize.html) | [misc-string-integer-assignment](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-integer-assignment.html) |; | [clang-analyzer-core.builtin.BuiltinFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.BuiltinFunctions.html) | [misc-string-literal-with-embedded-nul](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-literal-with-embedded-nul.html) |; | [clang-analyzer-core.builtin.NoReturnFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.NoReturnFunctions.html) | [misc-suspicious-enum-usage](https://clang,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17228,Testability,assert,assert,17228,-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17306,Testability,assert,assert,17306,lyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-empla,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29980,Usability,simpl,simplify-boolean-expr,29980,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:30062,Usability,simpl,simplify-boolean-expr,30062,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354:43,Testability,test,tests,43,"> Looks fine now.; > [ci-build][with-scene-tests]. Yeah... Although we simply moved the definitions of the problematic operator overloads back into the .h... so problem half solved... if anyone has an idea how to make it build on windows... I'm curious. Otherwise, let's just merge... :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354
https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354:71,Usability,simpl,simply,71,"> Looks fine now.; > [ci-build][with-scene-tests]. Yeah... Although we simply moved the definitions of the problematic operator overloads back into the .h... so problem half solved... if anyone has an idea how to make it build on windows... I'm curious. Otherwise, let's just merge... :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354
https://github.com/sofa-framework/sofa/pull/915#issuecomment-460066859:26,Usability,feedback,feedback,26,"Hi Erik, . Thanks for the feedback. I reorder the SofaGUI Cmake inclusion order to have it compiling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460066859
https://github.com/sofa-framework/sofa/pull/917#issuecomment-461186420:119,Energy Efficiency,efficient,efficient,119,"Thanks Bruno,. To me the pro in this PR:; - the design seems clearer with the use of final and the delegates. ; - more efficient (no listener in each Nodes, no need to maintaint).; - more consistent with begin/end notifications. . The bad:; - no backward compatibility (can one be implemented ?), but this listener are not used so much (only in GUI).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-461186420
https://github.com/sofa-framework/sofa/pull/917#issuecomment-461186420:61,Usability,clear,clearer,61,"Thanks Bruno,. To me the pro in this PR:; - the design seems clearer with the use of final and the delegates. ; - more efficient (no listener in each Nodes, no need to maintaint).; - more consistent with begin/end notifications. . The bad:; - no backward compatibility (can one be implemented ?), but this listener are not used so much (only in GUI).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-461186420
https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581:107,Deployability,integrat,integration,107,"Hi @hdeling,; Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581
https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581:107,Integrability,integrat,integration,107,"Hi @hdeling,; Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581
https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581:151,Usability,simpl,simplify,151,"Hi @hdeling,; Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:433,Availability,mainten,maintenance,433,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:95,Deployability,integrat,integration,95,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:213,Deployability,integrat,integration,213,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:590,Deployability,integrat,integration,590,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:1109,Deployability,integrat,integration,1109,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:95,Integrability,integrat,integration,95,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:213,Integrability,integrat,integration,213,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:590,Integrability,integrat,integration,590,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:1109,Integrability,integrat,integration,1109,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:534,Modifiability,plugin,plugin,534,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:691,Modifiability,extend,extended,691,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:1064,Modifiability,inherit,inheritance,1064,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:856,Usability,simpl,simplify,856,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/issues/940#issuecomment-467077243:5,Usability,simpl,simply,5,"It's simply an average found between the two points (in position/velocity/acc); What do you mean by ""aforementioned dynamic constraint fix"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/940#issuecomment-467077243
https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:191,Deployability,release,releaseAddContact,191,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645
https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:459,Deployability,release,releaseGetContact,459,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645
https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:258,Safety,detect,detectionOutput,258,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645
https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:48,Usability,clear,clear,48,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645
https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265:183,Performance,load,loader,183,"@guparan In fact, calling `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` (line 89 of SceneLoaderPY.cpp) causes an inconvenient limitation: The python scene loader cannot be used correctly when using a different parser than `sofa::helper::ArgumentParser`. . And in SofaQtQuick, we precisely would like to use the class `SceneLoaderPY` but using `QCommandLineParser` (`sofa::helper::ArgumentParser` is not used at all in SofaQtQuick). In the suggested commit, I simply move the call of `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` into more high-level methods. But this change induces to add a second input parameter for `SceneLoaderPY::doLoad`, in order to forward sceneArgs. Knowing that `doLoad` is originally a pure virtual method defined in class SceneLoader (see file SceneLoaderFactory.h), the multiple method overrides of this one (so in each scene loader) have to take into account the sceneArgs parameter even if it does nothing with it, that's why I made the parameter optional (NULL by default).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265
https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265:911,Performance,load,loader,911,"@guparan In fact, calling `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` (line 89 of SceneLoaderPY.cpp) causes an inconvenient limitation: The python scene loader cannot be used correctly when using a different parser than `sofa::helper::ArgumentParser`. . And in SofaQtQuick, we precisely would like to use the class `SceneLoaderPY` but using `QCommandLineParser` (`sofa::helper::ArgumentParser` is not used at all in SofaQtQuick). In the suggested commit, I simply move the call of `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` into more high-level methods. But this change induces to add a second input parameter for `SceneLoaderPY::doLoad`, in order to forward sceneArgs. Knowing that `doLoad` is originally a pure virtual method defined in class SceneLoader (see file SceneLoaderFactory.h), the multiple method overrides of this one (so in each scene loader) have to take into account the sceneArgs parameter even if it does nothing with it, that's why I made the parameter optional (NULL by default).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265
https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265:487,Usability,simpl,simply,487,"@guparan In fact, calling `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` (line 89 of SceneLoaderPY.cpp) causes an inconvenient limitation: The python scene loader cannot be used correctly when using a different parser than `sofa::helper::ArgumentParser`. . And in SofaQtQuick, we precisely would like to use the class `SceneLoaderPY` but using `QCommandLineParser` (`sofa::helper::ArgumentParser` is not used at all in SofaQtQuick). In the suggested commit, I simply move the call of `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` into more high-level methods. But this change induces to add a second input parameter for `SceneLoaderPY::doLoad`, in order to forward sceneArgs. Knowing that `doLoad` is originally a pure virtual method defined in class SceneLoader (see file SceneLoaderFactory.h), the multiple method overrides of this one (so in each scene loader) have to take into account the sceneArgs parameter even if it does nothing with it, that's why I made the parameter optional (NULL by default).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265
https://github.com/sofa-framework/sofa/pull/1008#issuecomment-487111948:230,Usability,clear,clear,230,"Hi,; I don't actually want to use them, it's just that it was crashing! I created the mesh in Gmsh but exported it in vtk. Exporting it in the msh format does not lead to a crash indeed.; I can understand that my fix is not super clear! ; Essentially, in the code when it starts using the edges and something goes wrong, I move on to the option like if no edges had been given (For example in the function createEdgesInTetrahedronArray() with the if (hasEdges) ). I hope it clarifies a little bit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1008#issuecomment-487111948
https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388:752,Security,access,access,752,"Alright after digging a bit into the code, I noticed that the XML parser for SOFA has a builtin handling of (forcefully set to) empty strings in name, which has not been ported to SofaPython:. Basically the XML parser stores a map of instantiated components (typename, idx), uses the `shortname` of the component concatenated with the idx of the new instantiation.; For instance 2 MechanicalObjects would be called ""mObject1"" and ""mObject2"". I implemented the same mechanism in the bindings to stay coherent. This mechanism is not perfect though, as one could still easily trick it by creating any component and give it the name ""mObject1"".. but then who would purposely do that... For nodes, It's better handled because at the node's creation, I have access to the node's parent and can thus check the names of components / nodes in the parent to prevent duplications. Still, moving the node post-creation could still result in name duplications, of course. Also in the bindings I have no structure in which to put this map... meaning that It will not be resetted until the whole program restarts, which is kind of ugly (reloading the scene from the UI would not reset the map so the names would change from one execution to another (yuck). I'll remind you that the initial purpose of this code is to prevent creation of nodes/objects with an empty string as a name, not to prevent code duplication (which is a different issue and should be checked using the SceneChecker instead IMHO) Duplicated names can result in undefined behaviors, but empty names can lead to crashes (the component's pathname becomes corrupted). Looking fwd to your feedbacks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388
https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388:1641,Usability,feedback,feedbacks,1641,"Alright after digging a bit into the code, I noticed that the XML parser for SOFA has a builtin handling of (forcefully set to) empty strings in name, which has not been ported to SofaPython:. Basically the XML parser stores a map of instantiated components (typename, idx), uses the `shortname` of the component concatenated with the idx of the new instantiation.; For instance 2 MechanicalObjects would be called ""mObject1"" and ""mObject2"". I implemented the same mechanism in the bindings to stay coherent. This mechanism is not perfect though, as one could still easily trick it by creating any component and give it the name ""mObject1"".. but then who would purposely do that... For nodes, It's better handled because at the node's creation, I have access to the node's parent and can thus check the names of components / nodes in the parent to prevent duplications. Still, moving the node post-creation could still result in name duplications, of course. Also in the bindings I have no structure in which to put this map... meaning that It will not be resetted until the whole program restarts, which is kind of ugly (reloading the scene from the UI would not reset the map so the names would change from one execution to another (yuck). I'll remind you that the initial purpose of this code is to prevent creation of nodes/objects with an empty string as a name, not to prevent code duplication (which is a different issue and should be checked using the SceneChecker instead IMHO) Duplicated names can result in undefined behaviors, but empty names can lead to crashes (the component's pathname becomes corrupted). Looking fwd to your feedbacks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388
https://github.com/sofa-framework/sofa/pull/1012#issuecomment-489031815:42,Usability,clear,clear,42,"Ok thanks for the movie, the goal is more clear now.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1012#issuecomment-489031815
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:521,Availability,error,error,521,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:685,Availability,down,down,685,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:733,Energy Efficiency,reduce,reduced,733,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:527,Integrability,message,message,527,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657
https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:261,Usability,clear,clear,261,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657
https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721:2,Deployability,integrat,integrated,2,I integrated most of your changes @fredroy but changes in Data field of OmniDriver and others is really bigger work. I would like to keep the PR simple and do this in another PR later,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721
https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721:2,Integrability,integrat,integrated,2,I integrated most of your changes @fredroy but changes in Data field of OmniDriver and others is really bigger work. I would like to keep the PR simple and do this in another PR later,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721
https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721:145,Usability,simpl,simple,145,I integrated most of your changes @fredroy but changes in Data field of OmniDriver and others is really bigger work. I would like to keep the PR simple and do this in another PR later,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721
https://github.com/sofa-framework/sofa/pull/1028#issuecomment-499424270:82,Usability,feedback,feedback,82,"you are welcomed, I did it as well as I need it.; Do not hesitate to send me some feedback if you see bugs or potential improvement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1028#issuecomment-499424270
https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496422349:270,Usability,simpl,simplicity,270,"Hello @etagliabue ; Thanks for your contribution. However, as @damienmarchal said, I don't see a use case where you would want this behavior instead of the engine behavior.; For the other proposals, I believe it should be done in another PR, just for the sake coherency/simplicity.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496422349
https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496454265:37,Usability,feedback,feedback,37,"Right, thank you guys for your quick feedback.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496454265
https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392089:158,Usability,guid,guidelines,158,"It is a good idea to finally remove the flag sofa_have_glew (it would be cool to remove it entirely in Sofa by the way), and I don't see anything wrong (code guidelines like prefixes etc, is not the point of this PR).; I dont know if we should flag this PR as ¨breaking¨ as some data have been removed (useVBO and isToPrint) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392089
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955:765,Integrability,depend,dependency,765,"@fredroy The choice is given. User can simply change the value of `EIGEN_ROOT` to use another Eigen. @epernod I was also thinking about a submodule solution but I need time to decide between multiple possibilities:; 1. Use our own [custom external project mechanism](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaMacros.cmake#L164-L257) (already used for HighOrder plugin and Regression project). Some changes may be required to limit the fetching process (for now, it fetches at every configure as long as `SOFA_FETCH_XXXX=ON`).; 2. Use (correctly) the standard [CMake external project mechanism](https://cmake.org/cmake/help/latest/module/ExternalProject.html). As far as I understand, this should be used only when building the dependency, so Eigen is not concerned. But should we use it for others?; 3. Use [CMake FetchContent mechanism](https://cmake.org/cmake/help/v3.11/module/FetchContent.html), limited to CMake >= 3.11 (30 Nov 2018). As I'm writing this, I think solution 1 is the best but needs some rework at least to improve the fetching process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955:399,Modifiability,plugin,plugin,399,"@fredroy The choice is given. User can simply change the value of `EIGEN_ROOT` to use another Eigen. @epernod I was also thinking about a submodule solution but I need time to decide between multiple possibilities:; 1. Use our own [custom external project mechanism](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaMacros.cmake#L164-L257) (already used for HighOrder plugin and Regression project). Some changes may be required to limit the fetching process (for now, it fetches at every configure as long as `SOFA_FETCH_XXXX=ON`).; 2. Use (correctly) the standard [CMake external project mechanism](https://cmake.org/cmake/help/latest/module/ExternalProject.html). As far as I understand, this should be used only when building the dependency, so Eigen is not concerned. But should we use it for others?; 3. Use [CMake FetchContent mechanism](https://cmake.org/cmake/help/v3.11/module/FetchContent.html), limited to CMake >= 3.11 (30 Nov 2018). As I'm writing this, I think solution 1 is the best but needs some rework at least to improve the fetching process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955:520,Modifiability,config,configure,520,"@fredroy The choice is given. User can simply change the value of `EIGEN_ROOT` to use another Eigen. @epernod I was also thinking about a submodule solution but I need time to decide between multiple possibilities:; 1. Use our own [custom external project mechanism](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaMacros.cmake#L164-L257) (already used for HighOrder plugin and Regression project). Some changes may be required to limit the fetching process (for now, it fetches at every configure as long as `SOFA_FETCH_XXXX=ON`).; 2. Use (correctly) the standard [CMake external project mechanism](https://cmake.org/cmake/help/latest/module/ExternalProject.html). As far as I understand, this should be used only when building the dependency, so Eigen is not concerned. But should we use it for others?; 3. Use [CMake FetchContent mechanism](https://cmake.org/cmake/help/v3.11/module/FetchContent.html), limited to CMake >= 3.11 (30 Nov 2018). As I'm writing this, I think solution 1 is the best but needs some rework at least to improve the fetching process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955
https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955:39,Usability,simpl,simply,39,"@fredroy The choice is given. User can simply change the value of `EIGEN_ROOT` to use another Eigen. @epernod I was also thinking about a submodule solution but I need time to decide between multiple possibilities:; 1. Use our own [custom external project mechanism](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaMacros.cmake#L164-L257) (already used for HighOrder plugin and Regression project). Some changes may be required to limit the fetching process (for now, it fetches at every configure as long as `SOFA_FETCH_XXXX=ON`).; 2. Use (correctly) the standard [CMake external project mechanism](https://cmake.org/cmake/help/latest/module/ExternalProject.html). As far as I understand, this should be used only when building the dependency, so Eigen is not concerned. But should we use it for others?; 3. Use [CMake FetchContent mechanism](https://cmake.org/cmake/help/v3.11/module/FetchContent.html), limited to CMake >= 3.11 (30 Nov 2018). As I'm writing this, I think solution 1 is the best but needs some rework at least to improve the fetching process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955
https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513245249:39,Usability,feedback,feedback,39,"Hi Didier @dweckmann ; thanks for your feedback! we actually had very recently a discussion about better supporting the latest version of libraries required for SOFA like CMake.; Are you using the master branch? because the TARGET parameter seems to be defined. Whatever, happy to see you back in the game!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513245249
https://github.com/sofa-framework/sofa/pull/1107#issuecomment-515002596:23,Usability,guid,guidelines,23,Changes DONE following guidelines of SOFA dev meeting.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1107#issuecomment-515002596
https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526506834:170,Deployability,update,updateIfDirty,170,"it's not compiling on the CI due to incompatibility of gcc 5.4 with C++17; otherwise I would appreciate a feedback from @epernod and @marques-bruno, especially about the updateIfDirty (and no clean dirty) thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526506834
https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526506834:106,Usability,feedback,feedback,106,"it's not compiling on the CI due to incompatibility of gcc 5.4 with C++17; otherwise I would appreciate a feedback from @epernod and @marques-bruno, especially about the updateIfDirty (and no clean dirty) thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526506834
https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267:246,Modifiability,plugin,plugins,246,"Hi @maddin200 ; Thanks for the notice, I will test it within the week. But it clearly appears uninitialized.; I put here the [link to ImageTypes.h](https://github.com/sofa-framework/sofa/blob/d1434b2eaaf2b8ef516a428544f9c0d65ed3d4df/applications/plugins/image/ImageTypes.h#L303)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267
https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267:46,Testability,test,test,46,"Hi @maddin200 ; Thanks for the notice, I will test it within the week. But it clearly appears uninitialized.; I put here the [link to ImageTypes.h](https://github.com/sofa-framework/sofa/blob/d1434b2eaaf2b8ef516a428544f9c0d65ed3d4df/applications/plugins/image/ImageTypes.h#L303)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267
https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267:78,Usability,clear,clearly,78,"Hi @maddin200 ; Thanks for the notice, I will test it within the week. But it clearly appears uninitialized.; I put here the [link to ImageTypes.h](https://github.com/sofa-framework/sofa/blob/d1434b2eaaf2b8ef516a428544f9c0d65ed3d4df/applications/plugins/image/ImageTypes.h#L303)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267
https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540453199:144,Usability,simpl,simply,144,"To be honest, I don't think this INI file should be in the Sofa API, but more on the application side (GUI, python or whatever). The API should simply be giving the FFMPEG path by the application.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540453199
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203:195,Deployability,install,installing,195,"Well spotted @jnbrunet :+1: . This is due to the fact that SofaSimulationCore is part of the SofaFramework package and NOT the SofaSimulation package.; I think I wanted to make things simpler by installing SofaSimulationCore under SofaSimulation but I forgot to set the target_include_directories accordingly (as you saw by yourself). I think the most consistent solution is to install SofaSimulationCore back in SofaFramework by setting, in sofa/simulation/CMakeLists.txt, `sofa_install_targets(SofaFramework ${PROJECT_NAME} ""SofaFramework/sofa/simulation"")`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203:378,Deployability,install,install,378,"Well spotted @jnbrunet :+1: . This is due to the fact that SofaSimulationCore is part of the SofaFramework package and NOT the SofaSimulation package.; I think I wanted to make things simpler by installing SofaSimulationCore under SofaSimulation but I forgot to set the target_include_directories accordingly (as you saw by yourself). I think the most consistent solution is to install SofaSimulationCore back in SofaFramework by setting, in sofa/simulation/CMakeLists.txt, `sofa_install_targets(SofaFramework ${PROJECT_NAME} ""SofaFramework/sofa/simulation"")`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203:184,Usability,simpl,simpler,184,"Well spotted @jnbrunet :+1: . This is due to the fact that SofaSimulationCore is part of the SofaFramework package and NOT the SofaSimulation package.; I think I wanted to make things simpler by installing SofaSimulationCore under SofaSimulation but I forgot to set the target_include_directories accordingly (as you saw by yourself). I think the most consistent solution is to install SofaSimulationCore back in SofaFramework by setting, in sofa/simulation/CMakeLists.txt, `sofa_install_targets(SofaFramework ${PROJECT_NAME} ""SofaFramework/sofa/simulation"")`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:548,Availability,error,error,548,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:472,Deployability,install,install,472,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:22,Modifiability,config,config,22,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:571,Modifiability,config,config,571,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:639,Modifiability,config,config,639,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:70,Usability,simpl,simply,70,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903:4,Modifiability,config,config,4,The config.h here clearly seems to be used within SofaSimulation modules. I guess the clean solution here is to remove the inclusion of this file in SofaFramework.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903
https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903:18,Usability,clear,clearly,18,The config.h here clearly seems to be used within SofaSimulation modules. I guess the clean solution here is to remove the inclusion of this file in SofaFramework.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903
https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540592456:31,Deployability,patch,patch,31,non je refuse un award pour un patch sur un design de qtwidget aussi compliqué! Alors qu'il y a tellement moyen de faire simple avec qt....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540592456
https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540592456:121,Usability,simpl,simple,121,non je refuse un award pour un patch sur un design de qtwidget aussi compliqué! Alors qu'il y a tellement moyen de faire simple avec qt....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540592456
https://github.com/sofa-framework/sofa/pull/1183#issuecomment-542794168:43,Usability,clear,clearer,43,Review done. Amazing PR it will be so much clearer in a few months !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1183#issuecomment-542794168
https://github.com/sofa-framework/sofa/pull/1217#issuecomment-558076674:156,Deployability,update,update,156,"@fjourdes if you have 2 sec, could you please give your feedback on the 2 lines change in the FreeAnimationLoop. ; It was done to fix a problem of position update between the mapped tool and the geomagic driver. See #1148 ; I don't have the knowledge to say if it is a real fix or if it will bring side effects. ; Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1217#issuecomment-558076674
https://github.com/sofa-framework/sofa/pull/1217#issuecomment-558076674:56,Usability,feedback,feedback,56,"@fjourdes if you have 2 sec, could you please give your feedback on the 2 lines change in the FreeAnimationLoop. ; It was done to fix a problem of position update between the mapped tool and the geomagic driver. See #1148 ; I don't have the knowledge to say if it is a real fix or if it will bring side effects. ; Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1217#issuecomment-558076674
https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417:37,Availability,error,error,37,"Is there any scene to reproduce this error? ; Either already in the plugin SofaDistanceGrid, or if you could submit a simple scene to illustrate the problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417
https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417:68,Modifiability,plugin,plugin,68,"Is there any scene to reproduce this error? ; Either already in the plugin SofaDistanceGrid, or if you could submit a simple scene to illustrate the problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417
https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417:118,Usability,simpl,simple,118,"Is there any scene to reproduce this error? ; Either already in the plugin SofaDistanceGrid, or if you could submit a simple scene to illustrate the problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417
https://github.com/sofa-framework/sofa/pull/1225#issuecomment-559400580:73,Usability,clear,clearly,73,"Hey @hugtalbot , the double flag was on purpose actually.. :D; The PR is clearly WIP (NOT to be merged) but I wanted it to be discussed today at the SOFA meeting",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1225#issuecomment-559400580
https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561074421:61,Availability,robust,robustness,61,"Hey @marques-bruno !. I think this will help us a lot to add robustness to our components. With this PR, do you see any reason why one would use `BaseLink`s in his component instead of a `BaseDDGLink`s?. Also, maybe instead of have a new `InitDDGLink` function in BaseClass, we could simply overload the `initLink` with; `initLink(BaseDDGLink* owner, std::string name, std::string help, std::string group = """")` ?. Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561074421
https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561074421:284,Usability,simpl,simply,284,"Hey @marques-bruno !. I think this will help us a lot to add robustness to our components. With this PR, do you see any reason why one would use `BaseLink`s in his component instead of a `BaseDDGLink`s?. Also, maybe instead of have a new `InitDDGLink` function in BaseClass, we could simply overload the `initLink` with; `initLink(BaseDDGLink* owner, std::string name, std::string help, std::string group = """")` ?. Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561074421
https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561309194:69,Availability,robust,robustness,69,"> Hey @marques-bruno !; > ; > I think this will help us a lot to add robustness to our components.; > ; > With this PR, do you see any reason why one would use `BaseLink`s in his component instead of a `BaseDDGLink`s?; > ; > Also, maybe instead of have a new `InitDDGLink` function in BaseClass, we could simply overload the `initLink` with; > `initLink(BaseDDGLink* owner, std::string name, std::string help, std::string group = """")` ?; > ; > Thanks !. Thanks @jnbrunet for your review, I'll do the changes tomorrow.; Regarding using BaseLink instead of BaseDdgLink, BaseLinks are actually used internally in DDGNodes (for input/outputs). So they have their use. What I want to replace with DDGLink, are the SingleLink entries in sofa components.; We'll discuss it at the sofa meeting if you're there tomorrow ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561309194
https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561309194:305,Usability,simpl,simply,305,"> Hey @marques-bruno !; > ; > I think this will help us a lot to add robustness to our components.; > ; > With this PR, do you see any reason why one would use `BaseLink`s in his component instead of a `BaseDDGLink`s?; > ; > Also, maybe instead of have a new `InitDDGLink` function in BaseClass, we could simply overload the `initLink` with; > `initLink(BaseDDGLink* owner, std::string name, std::string help, std::string group = """")` ?; > ; > Thanks !. Thanks @jnbrunet for your review, I'll do the changes tomorrow.; Regarding using BaseLink instead of BaseDdgLink, BaseLinks are actually used internally in DDGNodes (for input/outputs). So they have their use. What I want to replace with DDGLink, are the SingleLink entries in sofa components.; We'll discuss it at the sofa meeting if you're there tomorrow ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561309194
https://github.com/sofa-framework/sofa/pull/1248#issuecomment-579771707:122,Usability,clear,clear,122,I've also mark const the source arguments from both `baseVector2MultiVector` and `multiVectorPeqBaseVector` so that it is clear that the source will never be changed by those two functions.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1248#issuecomment-579771707
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:46,Availability,error,error,46,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:146,Availability,error,error,146,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:375,Deployability,release,release,375,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:72,Modifiability,plugin,plugins,72,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418
https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:6,Usability,clear,clear,6,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418
https://github.com/sofa-framework/sofa/pull/1253#issuecomment-610312311:20,Usability,feedback,feedback,20,Why there is not CI feedback ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1253#issuecomment-610312311
https://github.com/sofa-framework/sofa/pull/1258#issuecomment-592465740:133,Usability,feedback,feedback,133,Do you have questions guys? From the last SOFA meeting report: . #1258 [SofaKernel] Who hates warnings?; → still to review: wait for feedback from jnbrunet regarding the copy of constructor. @hugtalbot,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1258#issuecomment-592465740
https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851:173,Integrability,interface,interface,173,"I just gave it a look and it seems easy to move up the whole code at CollisionModel level... so please do so, code will be cleaner, shorter and will offer a more consistent interface to users. . In addition I see no problem in breaking code that does not follows Sofa guidelines. So renaming activated() into isActive() and other stuff like that would be welcome to :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851
https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851:268,Usability,guid,guidelines,268,"I just gave it a look and it seems easy to move up the whole code at CollisionModel level... so please do so, code will be cleaner, shorter and will offer a more consistent interface to users. . In addition I see no problem in breaking code that does not follows Sofa guidelines. So renaming activated() into isActive() and other stuff like that would be welcome to :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:57,Performance,optimiz,optimization,57,"I think the `CGLinearSolver` has a good example on such ""optimization"". Let's look at the following un-optimized code:. **Version 1**; ```; x.peq(p,alpha); // x = x + alpha p; r.peq(q,-alpha); // r = r - alpha q; ```. which can be seen as:. ```; VOp op1 = ""x = x + alpha p"";; Visitor(op1);. VOp op2 = ""r = r - alpha q"";; Visitor(op2);; ```. and its optimized version:. **Version 2**; ```; VMultiOp ops;; ops.resize(2);; ops[0].first = (MultiVecDerivId)x;; ops[0].second.push_back(std::make_pair((MultiVecDerivId)x,1.0));; ops[0].second.push_back(std::make_pair((MultiVecDerivId)p,alpha));; ops[1].first = (MultiVecDerivId)r;; ops[1].second.push_back(std::make_pair((MultiVecDerivId)r,1.0));; ops[1].second.push_back(std::make_pair((MultiVecDerivId)q,-alpha));; this->executeVisitor(simulation::MechanicalVMultiOpVisitor(params, ops));; ```. which can be seen as:. ```; VMultiOp ops;; ops[0] = ""x = x + alpha p""; ops[1] = ""r = r - alpha q""; Visitor(ops);; ```. Finally, imagine we have the following scenario:. ```; CGLinearSolver; |; +-------------+--------------; | |; +--------+-----------+ +----------+---------+; | MO1 | | MO2 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xn]| |x: [x0, x1, ..., xm]|; |p: [p0, p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4*",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:103,Performance,optimiz,optimized,103,"I think the `CGLinearSolver` has a good example on such ""optimization"". Let's look at the following un-optimized code:. **Version 1**; ```; x.peq(p,alpha); // x = x + alpha p; r.peq(q,-alpha); // r = r - alpha q; ```. which can be seen as:. ```; VOp op1 = ""x = x + alpha p"";; Visitor(op1);. VOp op2 = ""r = r - alpha q"";; Visitor(op2);; ```. and its optimized version:. **Version 2**; ```; VMultiOp ops;; ops.resize(2);; ops[0].first = (MultiVecDerivId)x;; ops[0].second.push_back(std::make_pair((MultiVecDerivId)x,1.0));; ops[0].second.push_back(std::make_pair((MultiVecDerivId)p,alpha));; ops[1].first = (MultiVecDerivId)r;; ops[1].second.push_back(std::make_pair((MultiVecDerivId)r,1.0));; ops[1].second.push_back(std::make_pair((MultiVecDerivId)q,-alpha));; this->executeVisitor(simulation::MechanicalVMultiOpVisitor(params, ops));; ```. which can be seen as:. ```; VMultiOp ops;; ops[0] = ""x = x + alpha p""; ops[1] = ""r = r - alpha q""; Visitor(ops);; ```. Finally, imagine we have the following scenario:. ```; CGLinearSolver; |; +-------------+--------------; | |; +--------+-----------+ +----------+---------+; | MO1 | | MO2 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xn]| |x: [x0, x1, ..., xm]|; |p: [p0, p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4*",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:349,Performance,optimiz,optimized,349,"I think the `CGLinearSolver` has a good example on such ""optimization"". Let's look at the following un-optimized code:. **Version 1**; ```; x.peq(p,alpha); // x = x + alpha p; r.peq(q,-alpha); // r = r - alpha q; ```. which can be seen as:. ```; VOp op1 = ""x = x + alpha p"";; Visitor(op1);. VOp op2 = ""r = r - alpha q"";; Visitor(op2);; ```. and its optimized version:. **Version 2**; ```; VMultiOp ops;; ops.resize(2);; ops[0].first = (MultiVecDerivId)x;; ops[0].second.push_back(std::make_pair((MultiVecDerivId)x,1.0));; ops[0].second.push_back(std::make_pair((MultiVecDerivId)p,alpha));; ops[1].first = (MultiVecDerivId)r;; ops[1].second.push_back(std::make_pair((MultiVecDerivId)r,1.0));; ops[1].second.push_back(std::make_pair((MultiVecDerivId)q,-alpha));; this->executeVisitor(simulation::MechanicalVMultiOpVisitor(params, ops));; ```. which can be seen as:. ```; VMultiOp ops;; ops[0] = ""x = x + alpha p""; ops[1] = ""r = r - alpha q""; Visitor(ops);; ```. Finally, imagine we have the following scenario:. ```; CGLinearSolver; |; +-------------+--------------; | |; +--------+-----------+ +----------+---------+; | MO1 | | MO2 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xn]| |x: [x0, x1, ..., xm]|; |p: [p0, p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4*",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:2478,Performance,optimiz,optimized,2478," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:2573,Performance,optimiz,optimize,2573," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:3029,Performance,optimiz,optimized,3029," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:3183,Performance,optimiz,optimization,3183," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:2921,Testability,benchmark,benchmark,2921," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:2723,Usability,simpl,simply,2723," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317:69,Testability,test,tests,69,Thanks @jnbrunet for the interesting feedback indeed.; I can run the tests!. Agreed @damienmarchal ; What is this DISPLAY_TIME!?! wtf!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317
https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317:37,Usability,feedback,feedback,37,Thanks @jnbrunet for the interesting feedback indeed.; I can run the tests!. Agreed @damienmarchal ; What is this DISPLAY_TIME!?! wtf!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317
https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603891481:15,Usability,feedback,feedback,15,Thanks for the feedback...actually this is what is done:; https://github.com/sofa-framework/sofa/pull/1269/files#diff-5b014f309073c89dc456a09768028992. But having hunderds of thousand of warnings for using deprecation method give me the envy to fix all the visible calling points.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603891481
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:631,Deployability,update,update,631,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:1005,Deployability,update,updates,1005,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:162,Integrability,interface,interface,162,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:583,Safety,avoid,avoid,583,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:1065,Safety,avoid,avoid,1065,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981
https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:257,Usability,feedback,feedback,257,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981
https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514:378,Deployability,install,install,378,"Sure, I am including that file. My point is that to be able to include that file correctly I need to find the SofaBase package and then link against SofaBaseTopology. ; If I dont link against that target, I still can include; ```; #include <SofaBase/SofaBaseTopology/MeshTopology>; ```; which looks completely okay but it fails in a inner include; This happens because when you install SOFA in usr/local/ you get the following directory `usr/local/SofaBase/SofaBaseTopology/`; If you for example install something else in usr/local, lets say CGAL, you get the following directory `usr/local/include/CGAL` and when linking against `CGAL::CGAL` target, you get the following include dir: `usr/local/include`. ; Since you get that include, it looks like you could include `SofaBase/SofaBaseTopology/MeshTopology.h`, but this fails as in reality you should include `SofaBaseTopology/MeshTopology.h`. If you are going to create extra directories in usr/include when installed, I would suggest naming them in lowercase, as for example Eigen does. When you install Eigen it creates the following structure `usr/local/eigen3/Eigen` so even if you add `usr/include` to you include dirs, you still know that you shouldn't include `eigen3/Eigen/Dense.h`. . Also, its hard to know in which cmake package and in which target each file is. I would suggest creating, for example, some global targets:; Sofa::Sofa would link against everything; SofaBase::SofaBase would link against everything in SofaBase package; SofaBase::SofaBaseTopology would link only against the SofaBaseTopology; Probably this would simplify linking against SOFA in general",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514
https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514:496,Deployability,install,install,496,"Sure, I am including that file. My point is that to be able to include that file correctly I need to find the SofaBase package and then link against SofaBaseTopology. ; If I dont link against that target, I still can include; ```; #include <SofaBase/SofaBaseTopology/MeshTopology>; ```; which looks completely okay but it fails in a inner include; This happens because when you install SOFA in usr/local/ you get the following directory `usr/local/SofaBase/SofaBaseTopology/`; If you for example install something else in usr/local, lets say CGAL, you get the following directory `usr/local/include/CGAL` and when linking against `CGAL::CGAL` target, you get the following include dir: `usr/local/include`. ; Since you get that include, it looks like you could include `SofaBase/SofaBaseTopology/MeshTopology.h`, but this fails as in reality you should include `SofaBaseTopology/MeshTopology.h`. If you are going to create extra directories in usr/include when installed, I would suggest naming them in lowercase, as for example Eigen does. When you install Eigen it creates the following structure `usr/local/eigen3/Eigen` so even if you add `usr/include` to you include dirs, you still know that you shouldn't include `eigen3/Eigen/Dense.h`. . Also, its hard to know in which cmake package and in which target each file is. I would suggest creating, for example, some global targets:; Sofa::Sofa would link against everything; SofaBase::SofaBase would link against everything in SofaBase package; SofaBase::SofaBaseTopology would link only against the SofaBaseTopology; Probably this would simplify linking against SOFA in general",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514
https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514:961,Deployability,install,installed,961,"Sure, I am including that file. My point is that to be able to include that file correctly I need to find the SofaBase package and then link against SofaBaseTopology. ; If I dont link against that target, I still can include; ```; #include <SofaBase/SofaBaseTopology/MeshTopology>; ```; which looks completely okay but it fails in a inner include; This happens because when you install SOFA in usr/local/ you get the following directory `usr/local/SofaBase/SofaBaseTopology/`; If you for example install something else in usr/local, lets say CGAL, you get the following directory `usr/local/include/CGAL` and when linking against `CGAL::CGAL` target, you get the following include dir: `usr/local/include`. ; Since you get that include, it looks like you could include `SofaBase/SofaBaseTopology/MeshTopology.h`, but this fails as in reality you should include `SofaBaseTopology/MeshTopology.h`. If you are going to create extra directories in usr/include when installed, I would suggest naming them in lowercase, as for example Eigen does. When you install Eigen it creates the following structure `usr/local/eigen3/Eigen` so even if you add `usr/include` to you include dirs, you still know that you shouldn't include `eigen3/Eigen/Dense.h`. . Also, its hard to know in which cmake package and in which target each file is. I would suggest creating, for example, some global targets:; Sofa::Sofa would link against everything; SofaBase::SofaBase would link against everything in SofaBase package; SofaBase::SofaBaseTopology would link only against the SofaBaseTopology; Probably this would simplify linking against SOFA in general",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514
https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514:1050,Deployability,install,install,1050,"Sure, I am including that file. My point is that to be able to include that file correctly I need to find the SofaBase package and then link against SofaBaseTopology. ; If I dont link against that target, I still can include; ```; #include <SofaBase/SofaBaseTopology/MeshTopology>; ```; which looks completely okay but it fails in a inner include; This happens because when you install SOFA in usr/local/ you get the following directory `usr/local/SofaBase/SofaBaseTopology/`; If you for example install something else in usr/local, lets say CGAL, you get the following directory `usr/local/include/CGAL` and when linking against `CGAL::CGAL` target, you get the following include dir: `usr/local/include`. ; Since you get that include, it looks like you could include `SofaBase/SofaBaseTopology/MeshTopology.h`, but this fails as in reality you should include `SofaBaseTopology/MeshTopology.h`. If you are going to create extra directories in usr/include when installed, I would suggest naming them in lowercase, as for example Eigen does. When you install Eigen it creates the following structure `usr/local/eigen3/Eigen` so even if you add `usr/include` to you include dirs, you still know that you shouldn't include `eigen3/Eigen/Dense.h`. . Also, its hard to know in which cmake package and in which target each file is. I would suggest creating, for example, some global targets:; Sofa::Sofa would link against everything; SofaBase::SofaBase would link against everything in SofaBase package; SofaBase::SofaBaseTopology would link only against the SofaBaseTopology; Probably this would simplify linking against SOFA in general",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514
https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514:1592,Usability,simpl,simplify,1592,"Sure, I am including that file. My point is that to be able to include that file correctly I need to find the SofaBase package and then link against SofaBaseTopology. ; If I dont link against that target, I still can include; ```; #include <SofaBase/SofaBaseTopology/MeshTopology>; ```; which looks completely okay but it fails in a inner include; This happens because when you install SOFA in usr/local/ you get the following directory `usr/local/SofaBase/SofaBaseTopology/`; If you for example install something else in usr/local, lets say CGAL, you get the following directory `usr/local/include/CGAL` and when linking against `CGAL::CGAL` target, you get the following include dir: `usr/local/include`. ; Since you get that include, it looks like you could include `SofaBase/SofaBaseTopology/MeshTopology.h`, but this fails as in reality you should include `SofaBaseTopology/MeshTopology.h`. If you are going to create extra directories in usr/include when installed, I would suggest naming them in lowercase, as for example Eigen does. When you install Eigen it creates the following structure `usr/local/eigen3/Eigen` so even if you add `usr/include` to you include dirs, you still know that you shouldn't include `eigen3/Eigen/Dense.h`. . Also, its hard to know in which cmake package and in which target each file is. I would suggest creating, for example, some global targets:; Sofa::Sofa would link against everything; SofaBase::SofaBase would link against everything in SofaBase package; SofaBase::SofaBaseTopology would link only against the SofaBaseTopology; Probably this would simplify linking against SOFA in general",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514
https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605882145:233,Usability,simpl,simply,233,"Hey @epernod ,. Look at both methods, they are exactly the same. In #744 , we are talking about how such methods should not be used, which I agree completely. But here, `getMeshTopologyLink` is not giving us an answer to this, it is simply an alias to `getMeshTopology`, which is quite confusing as we can find both of them in the source code, and it seems they are used for the same exact reason, find the first mesh topology in the current context (which is probably wrong since we can have more than one in the context).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605882145
https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605887979:223,Usability,simpl,simply,223,"I understand completely. Here, we are not talking about bringing back `getMeshTopology`. We are saying that both `getMeshTopologyLink` and `getMeshTopology` are the same. Following #744, both should be removed. Here we are simply talking about removing the duplicated one, even if at some point it should be also be removed and replaced by either a link or a new **getTopologies()** (plural) method that makes it clear we can have more than one topology in the context.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605887979
https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605887979:413,Usability,clear,clear,413,"I understand completely. Here, we are not talking about bringing back `getMeshTopology`. We are saying that both `getMeshTopologyLink` and `getMeshTopology` are the same. Following #744, both should be removed. Here we are simply talking about removing the duplicated one, even if at some point it should be also be removed and replaced by either a link or a new **getTopologies()** (plural) method that makes it clear we can have more than one topology in the context.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605887979
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:496,Deployability,install,install,496,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:742,Deployability,install,install,742,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:764,Deployability,install,install,764,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:114,Integrability,depend,dependencies,114,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:188,Integrability,depend,dependencies,188,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:171,Modifiability,plugin,plugin,171,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:291,Modifiability,config,config,291,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:310,Modifiability,plugin,plugin,310,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:725,Modifiability,variab,variable,725,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:679,Safety,avoid,avoid,679,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:1046,Testability,test,test,1046,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:1143,Usability,feedback,feedback,1143,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910
https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614500540:20,Usability,simpl,simple,20,I quickly applied a simple formatter online and finished manually. This file was a mess.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614500540
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616515264:113,Usability,guid,guidelines,113,"Amazing work @sergeiNikolaev !; However, as it seems you want into SofaCommon, we have to be a bit strict on the guidelines 👍 ; So could you: ; - remove all useless commented code?; - set prefix for Data<> (d_) and member (m_) ?; - remove serr with msg_error; - maybe uncomment all the msg_info (as it is not print if you dont enable printLog); - would be cool to use pragma once instead of the preprocessor guards (ifdef); Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616515264
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620039061:117,Usability,guid,guidelines,117,"> Amazing work @sergeiNikolaev !; > However, as it seems you want into SofaCommon, we have to be a bit strict on the guidelines ; > So could you:; > ; > * remove all useless commented code?; > * set prefix for Data<> (d_) and member (m_) ?; > * remove serr with msg_error; > * maybe uncomment all the msg_info (as it is not print if you dont enable printLog); > * would be cool to use pragma once instead of the preprocessor guards (ifdef); > Thanks !. @fredroy ; I have submitted the correction to the code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620039061
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261:35,Performance,latency,latency,35,"Hi @sergeiNikolaev ; Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; By the way do you have any latex file for the polynomial equations?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261:58,Testability,test,tests,58,"Hi @sergeiNikolaev ; Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; By the way do you have any latex file for the polynomial equations?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261:96,Usability,simpl,simple,96,"Hi @sergeiNikolaev ; Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; By the way do you have any latex file for the polynomial equations?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065:38,Performance,latency,latency,38,"> Hi @sergeiNikolaev; > Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; > By the way do you have any latex file for the polynomial equations?. Thank you for your answer @hugtalbot.; Regarding your question, I do not, sorry.; I wrote these equations since for me it is easier to process the stuff like this with a ""writing memory"". And then I decided that it will be enough just to scan them and send to you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065:61,Testability,test,tests,61,"> Hi @sergeiNikolaev; > Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; > By the way do you have any latex file for the polynomial equations?. Thank you for your answer @hugtalbot.; Regarding your question, I do not, sorry.; I wrote these equations since for me it is easier to process the stuff like this with a ""writing memory"". And then I decided that it will be enough just to scan them and send to you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065:99,Usability,simpl,simple,99,"> Hi @sergeiNikolaev; > Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; > By the way do you have any latex file for the polynomial equations?. Thank you for your answer @hugtalbot.; Regarding your question, I do not, sorry.; I wrote these equations since for me it is easier to process the stuff like this with a ""writing memory"". And then I decided that it will be enough just to scan them and send to you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065
https://github.com/sofa-framework/sofa/pull/1342#issuecomment-644877800:38,Usability,simpl,simple,38,@sergeiNikolaev would you also have a simple example scene ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-644877800
https://github.com/sofa-framework/sofa/pull/1360#issuecomment-640559850:73,Usability,simpl,simple,73,The FindAssimp you use does not seem to handle versions so let's keep it simple.; ```cmake; find_package(Assimp NO_MODULE QUIET; PATHS /usr/lib/${CMAKE_LIBRARY_ARCHITECTURE}/cmake; ); ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-640559850
https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639434209:136,Deployability,update,updated,136,"> You may add a consistency check if the given path is actually a dir when it is supposed to be. I'm ok with the rest of the code. I've updated the code to check for path types according to isDirectory.; I also propagated the mechanism to DataFileNameVectors (if one of the paths in the vector is not of the right type, I simply set it to """". Dunno if thats the right way but it seems right)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639434209
https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639434209:322,Usability,simpl,simply,322,"> You may add a consistency check if the given path is actually a dir when it is supposed to be. I'm ok with the rest of the code. I've updated the code to check for path types according to isDirectory.; I also propagated the mechanism to DataFileNameVectors (if one of the paths in the vector is not of the right type, I simply set it to """". Dunno if thats the right way but it seems right)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639434209
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:724,Integrability,depend,depending,724,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:913,Integrability,depend,dependent,913,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:1282,Integrability,depend,depending,1282,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:24,Testability,test,test,24,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:71,Testability,test,test,71,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:190,Testability,test,tests,190,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:1176,Testability,test,test,1176,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:1410,Testability,test,test,1410,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:1086,Usability,simpl,simple,1086,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820
https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154:191,Integrability,interface,interface,191,"> What does it mean : ""child crossing"" ?. Improve UX / Usability....; Yeah, not necessarily the clearest gitmoji. RGBAColor mainly improves UX, whether it is used from C++, Python, or a user interface.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154
https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154:50,Usability,UX,UX,50,"> What does it mean : ""child crossing"" ?. Improve UX / Usability....; Yeah, not necessarily the clearest gitmoji. RGBAColor mainly improves UX, whether it is used from C++, Python, or a user interface.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154
https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154:96,Usability,clear,clearest,96,"> What does it mean : ""child crossing"" ?. Improve UX / Usability....; Yeah, not necessarily the clearest gitmoji. RGBAColor mainly improves UX, whether it is used from C++, Python, or a user interface.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154
https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154:140,Usability,UX,UX,140,"> What does it mean : ""child crossing"" ?. Improve UX / Usability....; Yeah, not necessarily the clearest gitmoji. RGBAColor mainly improves UX, whether it is used from C++, Python, or a user interface.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154
https://github.com/sofa-framework/sofa/issues/1476#issuecomment-693513752:22,Usability,feedback,feedback,22,"Great, thanks for the feedback JuanJo.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1476#issuecomment-693513752
https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891:422,Modifiability,refactor,refactored,422,"Hi @coolteemf . Thanks for your PR. The change of name for ""topology"" is legitimate and unify this component with the convention used in other component. You also did great by using the parse method to provide user feedback. . In Refine2mesh you commented a lot of code, could you explain a bit ? ; Because the general coding guidelines is that either the code is broken/invalid/deprecated and should be really removed or refactored or it is valid then it should be keept.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891
https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891:215,Usability,feedback,feedback,215,"Hi @coolteemf . Thanks for your PR. The change of name for ""topology"" is legitimate and unify this component with the convention used in other component. You also did great by using the parse method to provide user feedback. . In Refine2mesh you commented a lot of code, could you explain a bit ? ; Because the general coding guidelines is that either the code is broken/invalid/deprecated and should be really removed or refactored or it is valid then it should be keept.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891
https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891:326,Usability,guid,guidelines,326,"Hi @coolteemf . Thanks for your PR. The change of name for ""topology"" is legitimate and unify this component with the convention used in other component. You also did great by using the parse method to provide user feedback. . In Refine2mesh you commented a lot of code, could you explain a bit ? ; Because the general coding guidelines is that either the code is broken/invalid/deprecated and should be really removed or refactored or it is valid then it should be keept.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891
https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694678251:249,Usability,feedback,feedback,249,Hello @damienmarchal It seems this file was included by mistake.; The code was commented because it didn't compile but I didn't mean to put it in the pull request.; Only the commits about SofaGeneralEngine should have been there.; Thank you for the feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694678251
https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694692149:260,Usability,undo,undo,260,"good job @coolteemf ; All you have to do is, go on your branch and revert your commit:; ```; # Make sure you are on the right branch; git checkout Improve_MeshBarycentricMapperEngine. # Undo the desired commit; git revert 130a13d. # Update the remote with the undo of the code; git push origin Improve_MeshBarycentricMapperEngine; ```; Cheers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694692149
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696242423:192,Availability,error,error,192,The changes have not been propagated everywhere @epernod ; ```bash; /builds/workspace/sofa-framework/PR-1495/mac_clang-3.5_options_release/src/modules/SofaGeneralLoader/SphereLoader.cpp:81:5: error: use of undeclared identifier 'radius'; did you mean 'd_radius'?; radius.beginEdit()->clear();; ^~~~~~; d_radius; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696242423
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696242423:284,Usability,clear,clear,284,The changes have not been propagated everywhere @epernod ; ```bash; /builds/workspace/sofa-framework/PR-1495/mac_clang-3.5_options_release/src/modules/SofaGeneralLoader/SphereLoader.cpp:81:5: error: use of undeclared identifier 'radius'; did you mean 'd_radius'?; radius.beginEdit()->clear();; ^~~~~~; d_radius; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696242423
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696641121:210,Availability,error,error,210,> ; > ; > The changes have not been propagated everywhere @epernod; > ; > ```shell; > /builds/workspace/sofa-framework/PR-1495/mac_clang-3.5_options_release/src/modules/SofaGeneralLoader/SphereLoader.cpp:81:5: error: use of undeclared identifier 'radius'; did you mean 'd_radius'?; > radius.beginEdit()->clear();; > ^~~~~~; > d_radius; > ```. I don't see what you are speaking about...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696641121
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696641121:304,Usability,clear,clear,304,> ; > ; > The changes have not been propagated everywhere @epernod; > ; > ```shell; > /builds/workspace/sofa-framework/PR-1495/mac_clang-3.5_options_release/src/modules/SofaGeneralLoader/SphereLoader.cpp:81:5: error: use of undeclared identifier 'radius'; did you mean 'd_radius'?; > radius.beginEdit()->clear();; > ^~~~~~; > d_radius; > ```. I don't see what you are speaking about...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696641121
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553:89,Testability,test,test,89,@epernod I just simplified the code and added some readyOnly properties; Maybe you could test before merge.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553
https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553:16,Usability,simpl,simplified,16,@epernod I just simplified the code and added some readyOnly properties; Maybe you could test before merge.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022:2132,Testability,test,test,2132,"en::Dynamic ? 1 : 0); ; ; /// 1 if the constructor is equivalent to setting memory to 0; static constexpr auto ZeroConstructor = (std::is_base_of_v<Eigen::SparseMatrixBase<Derived>, Derived> ? 1 : 0);; ; /// 1 if copying the data can be done with a memcpy; static constexpr auto SimpleCopy = 0; ; ; /// 1 if the layout in memory is simply N values of the same base type; static constexpr auto SimpleLayout = 0;; ; /// 1 if this type uses integer values; static constexpr auto Integer = std::is_integral_v<Derived::Scalar>;; ; /// 1 if this type uses scalar values; static constexpr auto Scalar = std::is_floating_point_v<Derived::Scalar>;; ; /// 1 if this type uses text values; static constexpr auto Text = 0;; ; /// 1 if this type uses copy-on-write -> it seems to be THE important; static constexpr auto CopyOnWrite = 0;; ; /// 1 if this type is a container; static constexpr auto Container = 1;; ; /// largest known fixed size for this type, as returned by size(); static constexpr auto Size = (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime);; ; /// Number of elements in the container, or the 2nd dimension for arrays; static size_t size() { ; return (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime); ; }; ; /// Size of the smalest single element in the container; static size_t byteSize() { ; return sizeof(Derived::Scalar); ; }; ; /// Total number of elements; static size_t size(const DataType & data) {; return data.rows();; }; ; static bool setSize(DataType & data, size_t size) { ; if constexpr (Derived::ColsAtCompileTime == Eigen::Dynamic) {; return data.resize(size, data.cols);; } else {; return false; ; }; }; ; // (...); }; ```. And test it with a couple of matrix types, for example:; ```c++; data<Eigen::Matrix<double, Eigen::Dynamic, 3>> data_1;; data<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>> data_2;; data<Eigen::Matrix<double, 8, 3>> data_3;; data<Eigen::Map<Eigen::Matrix<double, 8, 3>>> data_4;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022:751,Usability,simpl,simply,751," unfortunately. Eigen matrices have a nice compile-time introspection. Hence it would be possible to do something like:. ```c++; template <Derived>; struct EigenMatrixTypeInfo {; /// 1 if this type has valid infos; static constexpr auto ValidInfo = 1; ; ; /// 1 if this type has a fixed size -> always 1 single pair of vec3; static constexpr auto FixedSize = (Derived::RowsAtCompileTime != Eigen::Dynamic ? 1 : 0); ; ; /// 1 if the constructor is equivalent to setting memory to 0; static constexpr auto ZeroConstructor = (std::is_base_of_v<Eigen::SparseMatrixBase<Derived>, Derived> ? 1 : 0);; ; /// 1 if copying the data can be done with a memcpy; static constexpr auto SimpleCopy = 0; ; ; /// 1 if the layout in memory is simply N values of the same base type; static constexpr auto SimpleLayout = 0;; ; /// 1 if this type uses integer values; static constexpr auto Integer = std::is_integral_v<Derived::Scalar>;; ; /// 1 if this type uses scalar values; static constexpr auto Scalar = std::is_floating_point_v<Derived::Scalar>;; ; /// 1 if this type uses text values; static constexpr auto Text = 0;; ; /// 1 if this type uses copy-on-write -> it seems to be THE important; static constexpr auto CopyOnWrite = 0;; ; /// 1 if this type is a container; static constexpr auto Container = 1;; ; /// largest known fixed size for this type, as returned by size(); static constexpr auto Size = (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime);; ; /// Number of elements in the container, or the 2nd dimension for arrays; static size_t size() { ; return (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime); ; }; ; /// Size of the smalest single element in the container; static size_t byteSize() { ; return sizeof(Derived::Scalar); ; }; ; /// Total number of elements; static size_t size(const DataType & data) {; return data.rows();; }; ; static bool setSize(DataType & data, size_t size) { ; if constexpr (Derived::ColsAtCompileTime == Eigen::D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819:147,Deployability,integrat,integrate,147,"@Younesssss do you think:; - you still need to have Data<EigenMatrix> ? (it was not clear in our last sofa devmeeting); - if yes, could be nice to integrate what @jnbrunet said",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819:147,Integrability,integrat,integrate,147,"@Younesssss do you think:; - you still need to have Data<EigenMatrix> ? (it was not clear in our last sofa devmeeting); - if yes, could be nice to integrate what @jnbrunet said",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819
https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819:84,Usability,clear,clear,84,"@Younesssss do you think:; - you still need to have Data<EigenMatrix> ? (it was not clear in our last sofa devmeeting); - if yes, could be nice to integrate what @jnbrunet said",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819
https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717:286,Modifiability,refactor,refactoring,286,"Hello @hugtalbot . thanks for feedback, and you are right and it would really help. Considering that I already documented the things in previous issues, in PRs, I systematically answer questions on github and I regularly gives the whole picture in our weekly meeting in addition to the refactoring work...well... a bit of help and involvement would be appreciated. And As usual, I welcome anyone willing to spend some time on project tracking or writing meeting notes and If you consider yourself a non expert on Data/Link, it is even better, do come in, this is a super opportunity for you to level-up and become an expert. . It is also very surprising to me that if things are not clear no-ones ask specific question in PR description. This is very annoying because if I don't know what you don't know how should I write a PR description to fill the gap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717
https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717:30,Usability,feedback,feedback,30,"Hello @hugtalbot . thanks for feedback, and you are right and it would really help. Considering that I already documented the things in previous issues, in PRs, I systematically answer questions on github and I regularly gives the whole picture in our weekly meeting in addition to the refactoring work...well... a bit of help and involvement would be appreciated. And As usual, I welcome anyone willing to spend some time on project tracking or writing meeting notes and If you consider yourself a non expert on Data/Link, it is even better, do come in, this is a super opportunity for you to level-up and become an expert. . It is also very surprising to me that if things are not clear no-ones ask specific question in PR description. This is very annoying because if I don't know what you don't know how should I write a PR description to fill the gap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717
https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717:683,Usability,clear,clear,683,"Hello @hugtalbot . thanks for feedback, and you are right and it would really help. Considering that I already documented the things in previous issues, in PRs, I systematically answer questions on github and I regularly gives the whole picture in our weekly meeting in addition to the refactoring work...well... a bit of help and involvement would be appreciated. And As usual, I welcome anyone willing to spend some time on project tracking or writing meeting notes and If you consider yourself a non expert on Data/Link, it is even better, do come in, this is a super opportunity for you to level-up and become an expert. . It is also very surprising to me that if things are not clear no-ones ask specific question in PR description. This is very annoying because if I don't know what you don't know how should I write a PR description to fill the gap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:1748,Security,validat,validate,1748,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:975,Testability,log,logError,975,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:1090,Testability,log,logError,1090,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:1474,Testability,log,logError,1474,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:214,Usability,simpl,simply,214,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:812,Usability,simpl,simply,812,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048:267,Deployability,update,update,267,"@jnbrunet thanks for the code. I'm wondering if canCreate is the right stage to do that because if the link can't be resolved, your FF will not be created at all. But in a ideal SOFA world, if the component is set to invalid because the link is not working you could update it in your gui, solve the link which will act like a Data and update the component. I'm also wondering if the mstate link is set in your scene, is it already usable in the ForceField constructor ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048:336,Deployability,update,update,336,"@jnbrunet thanks for the code. I'm wondering if canCreate is the right stage to do that because if the link can't be resolved, your FF will not be created at all. But in a ideal SOFA world, if the component is set to invalid because the link is not working you could update it in your gui, solve the link which will act like a Data and update the component. I'm also wondering if the mstate link is set in your scene, is it already usable in the ForceField constructor ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048:432,Usability,usab,usable,432,"@jnbrunet thanks for the code. I'm wondering if canCreate is the right stage to do that because if the link can't be resolved, your FF will not be created at all. But in a ideal SOFA world, if the component is set to invalid because the link is not working you could update it in your gui, solve the link which will act like a Data and update the component. I'm also wondering if the mstate link is set in your scene, is it already usable in the ForceField constructor ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:372,Modifiability,refactor,refactor,372,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:476,Modifiability,refactor,refactored,476,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:586,Modifiability,refactor,refactored,586,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:630,Modifiability,plugin,plugin,630,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360
https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:20,Usability,clear,clear,20,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360
https://github.com/sofa-framework/sofa/pull/1509#issuecomment-703541126:24,Usability,feedback,feedback,24,I would be glad to have feedback on this one...especially the switch from sofa::simulation::Node::Sptr to sofa::core::sptr<>,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-703541126
https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704844429:117,Usability,simpl,simplification,117,"This PR seems to include several major changes (ptr / include vs typedef). All directly or indirectly related to the simplification of the headers. Could you also explain if we earn something by the change on typedef (perf, etc) or is this in prevision for c++20 modules? is this lightening the compilation?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704844429
https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701435773:592,Usability,clear,clear,592,"Hello @olivier-goury,. Thank you for the PR. ; I have added some comments (mostly about coding-style). . As I'm the author of some of the code you propose in the PR...could you add my name in a contributors section after the license header. In general I do the following.; ```cpp; /******************************************************************************; * Contributors: ; * - damien.marchal@univ-lille.fr ; * - olivier.goury@inria.fr ; ******************************************************************************; ```. I know @hugtalbot and @guparan complains...but to me this is a clear demonstration that relying on git to track authors ship (and thus copyright credit) is misleading...and thus having a per-file contributors sections.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701435773
https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701479584:630,Usability,clear,clear,630,"> Hello @olivier-goury,; > ; > Thank you for the PR.; > I have added some comments (mostly about coding-style).; > ; > As I'm the author of some of the code you propose in the PR...could you add my name in a contributors section after the license header. In general I do the following.; > ; > ```c++; > /******************************************************************************; > * Contributors: ; > * - damien.marchal@univ-lille.fr ; > * - olivier.goury@inria.fr ; > ******************************************************************************; > ```; > ; > I know @hugtalbot and @guparan complains...but to me this is a clear demonstration that relying on git to track authors ship (and thus copyright credit) is misleading...and thus having a per-file contributors sections. Hey thanks for all the comments, yes I can do that, no problem!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701479584
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606:41,Testability,test,test,41,"VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606:107,Usability,clear,clearly,107,"VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002:481,Modifiability,extend,extend,481,"> VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA. Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one. Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002:43,Testability,test,test,43,"> VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA. Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one. Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002:440,Testability,test,testing,440,"> VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA. Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one. Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002:109,Usability,clear,clearly,109,"> VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA. Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one. Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548:496,Modifiability,extend,extend,496,"> > VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA; > ; > Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one.; > ; > Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started. Definitly a must have...but not in the same PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548:45,Testability,test,test,45,"> > VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA; > ; > Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one.; > ; > Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started. Definitly a must have...but not in the same PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548:455,Testability,test,testing,455,"> > VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA; > ; > Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one.; > ; > Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started. Definitly a must have...but not in the same PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548
https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548:111,Usability,clear,clearly,111,"> > VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA; > ; > Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one.; > ; > Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started. Definitly a must have...but not in the same PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:179,Availability,failure,failures,179,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:553,Energy Efficiency,reduce,reduced,553,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:544,Performance,load,loaders,544,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:676,Performance,load,loading,676,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:459,Security,access,access,459,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804
https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:52,Usability,clear,clearing,52,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804
https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270:95,Usability,guid,guidelines,95,"- PoissonContainer/StiffnessContainer are already present in SofaSimpleFem; - It should follow guidelines from PluginExample (name, folder, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270
https://github.com/sofa-framework/sofa/issues/1636#issuecomment-780706656:14,Usability,simpl,simplify,14,Can't wait to simplify all this !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1636#issuecomment-780706656
https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485:90,Availability,error,error,90,"@jnbrunet, @fredroy I updated the PR, . can you give me feedback on the implementation of error/warning promotion (in config.in.h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485
https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485:22,Deployability,update,updated,22,"@jnbrunet, @fredroy I updated the PR, . can you give me feedback on the implementation of error/warning promotion (in config.in.h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485
https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485:118,Modifiability,config,config,118,"@jnbrunet, @fredroy I updated the PR, . can you give me feedback on the implementation of error/warning promotion (in config.in.h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485
https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485:56,Usability,feedback,feedback,56,"@jnbrunet, @fredroy I updated the PR, . can you give me feedback on the implementation of error/warning promotion (in config.in.h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485
https://github.com/sofa-framework/sofa/pull/1652#issuecomment-742387960:94,Usability,usab,usable,94,"The suggested change is much better, thank @jnbrunet for all the pr helping to make sofa more usable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1652#issuecomment-742387960
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754520239:553,Performance,load,load,553,"Hello Eulalie,. Hello @EulalieCoevoet and thanks for the suggestion. . I'm not sure isSet() could be used for this task. ; Because there are cases:; - where a Data field has a default value and that this default value is used.; - there are cases where a Data field has a default value and that this default value is not used (ie. it is optional as in your example). Let's see for the other flags... There is the isDisplayed() flag. This flag can control if we show the data is showed all. The side effect of using it for hiding means that if not set at load time then it cannot be changed anymore later. . There is also the isRequired() flag. It is not used a lot and was primarely designed to indicate that need to be setted (mandatory)...which sound a bit like the reverse of ""optional"". Currently in Sofa component most of the data are not set to required (despite I bet that a lot of them are) and there is not graphical feedback related to this flag. So I will think a bit about this one to see if we can something out of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754520239
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754520239:925,Usability,feedback,feedback,925,"Hello Eulalie,. Hello @EulalieCoevoet and thanks for the suggestion. . I'm not sure isSet() could be used for this task. ; Because there are cases:; - where a Data field has a default value and that this default value is used.; - there are cases where a Data field has a default value and that this default value is not used (ie. it is optional as in your example). Let's see for the other flags... There is the isDisplayed() flag. This flag can control if we show the data is showed all. The side effect of using it for hiding means that if not set at load time then it cannot be changed anymore later. . There is also the isRequired() flag. It is not used a lot and was primarely designed to indicate that need to be setted (mandatory)...which sound a bit like the reverse of ""optional"". Currently in Sofa component most of the data are not set to required (despite I bet that a lot of them are) and there is not graphical feedback related to this flag. So I will think a bit about this one to see if we can something out of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754520239
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754525924:417,Usability,clear,clearly,417,Another alternative that could make sense would be to use std::optional that is part of the c++ language (see: https://en.cppreference.com/w/cpp/utility/optional). So in CableActuator it would look like:; ```; Data<float> m_actuatorValue; Data<std::optional<float>> m_actuatorMinValue;; Data<std::optional<float>> m_actuatorMaxValue;; ```. Of course it make things more verbose...but the good side of that is that it clearly indicate at every use of actuatorMinValue/MaxValue that these values are optional. So optionality is no more a runSofa widget issue but a structural property of the contained data. . DM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754525924
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:158,Availability,redundant,redundant,158,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:225,Modifiability,refactor,refactoring,225,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:158,Safety,redund,redundant,158,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:73,Usability,simpl,simpler,73,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707
https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:322,Usability,clear,clear,322,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:482,Deployability,continuous,continuous,482,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:493,Deployability,integrat,integration,493,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:493,Integrability,integrat,integration,493,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:360,Testability,test,tests,360,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:370,Testability,test,testing,370,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:469,Testability,test,test,469,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:86,Usability,feedback,feedback,86,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:1849,Availability,avail,available,1849,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:496,Deployability,continuous,continuous,496,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:507,Deployability,integrat,integration,507,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:507,Integrability,integrat,integration,507,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:374,Testability,test,tests,374,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:384,Testability,test,testing,384,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:483,Testability,test,test,483,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:89,Usability,feedback,feedback,89,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:593,Energy Efficiency,power,power,593,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:311,Modifiability,plugin,plugin,311,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:816,Security,validat,validation,816,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:452,Testability,test,test,452,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:647,Testability,test,test,647,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:678,Testability,test,test,678,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:772,Testability,test,test,772,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:548,Usability,simpl,simply,548,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:603,Energy Efficiency,power,power,603,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:321,Modifiability,plugin,plugin,321,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:828,Security,validat,validation,828,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:462,Testability,test,test,462,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:663,Testability,test,test,663,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:694,Testability,test,test,694,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:784,Testability,test,test,784,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:1244,Testability,test,test,1244,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:1315,Testability,test,testing,1315,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:558,Usability,simpl,simply,558,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:1375,Usability,guid,guidance,1375,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:661,Modifiability,plugin,plugins,661,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:289,Testability,test,test,289,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:424,Testability,test,test,424,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:541,Testability,test,tests,541,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:591,Testability,test,test,591,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:858,Testability,test,test,858,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:780,Usability,clear,clear,780,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301
https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772399008:167,Usability,guid,guidelines,167,"PR looks fine, but we absolutely need to define the convention about \_doXXX\_ or \_isXXXX\_; This should be definitely generalized within the whole code base AND the guidelines of SOFA.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772399008
https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772637003:159,Usability,clear,clearly,159,"Appart from that, I did a quick search in the sofa code base, I didn't paid attention to how much of the doXXXX stuff are with a public visibility... which is clearly not what the design pattern suggested initially.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772637003
https://github.com/sofa-framework/sofa/pull/1758#issuecomment-772368085:1143,Usability,clear,clear,1143,"> ; > ; > > I also changed the code in GLBackend.cpp to remove the ""background is moving when I resize the window"" effect.; > > ```c++; > > double coordWidth = int(screenWidth / w) + 1;; > > double coordHeight = int(screenHeight / h) + 1;; > > ; > > glColor3f(1.0f, 1.0f, 1.0f);; > > glBegin(GL_QUADS);; > > glTexCoord2d(0.0, 0.0); glVertex3d( -w*coordWidth, -h*coordHeight, 0.0 );; > > glTexCoord2d(coordWidth*2.0, 0.0); glVertex3d( w*coordWidth, -h*coordHeight, 0.0 );; > > glTexCoord2d(coordWidth*2.0, coordHeight*2.0); glVertex3d( w*coordWidth, h*coordHeight, 0.0 );; > > glTexCoord2d(0.0, coordHeight*2.0); glVertex3d( -w*coordWidth, h*coordHeight, 0.0 );; > > glEnd();; > > ```; > > ; > > ; > > @fredroy could you review this before I push it in the PR please ?; > ; > `double coordWidth = int(screenWidth / w) + 1;`; > will give warning conversion and why +1 ?. +1 because we want to know how many entire textures we have to display to cover **at least** screenWidth and screenHeight. Thus we do an integer division and add 1 to handle all the cases where `screenWidth % w != 0` (almost all the cases actually).; Not sure this was very clear :eyes:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1758#issuecomment-772368085
https://github.com/sofa-framework/sofa/pull/1761#issuecomment-770078796:36,Usability,feedback,feedback,36,Looks ok to me. Any one for a quick feedback on reviewing this fast-merge PR ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1761#issuecomment-770078796
https://github.com/sofa-framework/sofa/pull/1788#issuecomment-776623903:64,Usability,simpl,simple,64,I've just fixed the broken history for the PR so we can see the simple two commits which concern this PR. Hope we can discuss it next week.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1788#issuecomment-776623903
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:608,Availability,error,error,608,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:886,Availability,error,error,886,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2616,Availability,error,error,2616,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1263,Deployability,release,release,1263,"ce.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. I",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1287,Deployability,release,release,1287,"&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1964,Deployability,release,release,1964,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1988,Deployability,release,release,1988,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:259,Integrability,interface,interface,259,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:649,Integrability,interface,interface,649,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1217,Integrability,message,message,1217,"d to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2133,Integrability,message,message,2133,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1375,Modifiability,config,config,1375,"&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2271,Modifiability,config,config,2271,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:235,Usability,simpl,simple,235,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:338,Usability,usab,usable,338,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:725,Usability,usab,usable,725,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1787,Usability,usab,usable,1787,"nce `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it ha",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2127,Usability,clear,clear,2127,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2716,Usability,usab,usable,2716,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417:973,Usability,clear,clearly,973,"> When I see a Doxygen comment at a non-Doxygen-standard place, I always wonder ""Why is this here? Does Doxygen now support this?"".; > How can it be more useful to use `///` than `//` ?. I understand your point and here is a summary to boostrap discussion. . Currently in our code base we never esthablish specific rules on the use of doxygen comments and we are in fact mixing two different approaches. Let's name them ""code centric"" and ""doxygen centric"". . In the code centric approach: ; - /// or ///< is used to state that this the comment *is part of the documentation*. ; - // is for any other *non-documenting* comment (eg: commented code). ; With this approach the main focus is that the documentation parts should be easily visible from the source code and that documentation is composed of declaration parts related part (that must fullfill doxygen rules) as well as internal details. ; The added value of using /// or ///< is that developper when they see them clearly knows ""this is part of the documentation"". This aproach is a super-set of doxygen but is not limiting the documentation to only what doxygen understand (the underlying assumption is that we need to document much more than just declaration/api). . The doxygen centric approach is slighly different: ; - // should be used for internal-documentation as well as non-documentating comments; - /// or ///< should be used only for documentation what can be understood by Doxgen to generate html pages. ; Te main focus with this approach is to make very clear what will be use by Doxygen what it will use to auto-generate its public documentation, the counter part I see is that it mix comments and what should be considered as internal documentation. . It is important is of course to have doxygen friendly declaration centric (the public API) documentation ...but it is equally important to have proper documentation for the internal details. ; If would probably do something like that in a new project:; - always use /** */ f",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417
https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417:1527,Usability,clear,clear,1527,"he use of doxygen comments and we are in fact mixing two different approaches. Let's name them ""code centric"" and ""doxygen centric"". . In the code centric approach: ; - /// or ///< is used to state that this the comment *is part of the documentation*. ; - // is for any other *non-documenting* comment (eg: commented code). ; With this approach the main focus is that the documentation parts should be easily visible from the source code and that documentation is composed of declaration parts related part (that must fullfill doxygen rules) as well as internal details. ; The added value of using /// or ///< is that developper when they see them clearly knows ""this is part of the documentation"". This aproach is a super-set of doxygen but is not limiting the documentation to only what doxygen understand (the underlying assumption is that we need to document much more than just declaration/api). . The doxygen centric approach is slighly different: ; - // should be used for internal-documentation as well as non-documentating comments; - /// or ///< should be used only for documentation what can be understood by Doxgen to generate html pages. ; Te main focus with this approach is to make very clear what will be use by Doxygen what it will use to auto-generate its public documentation, the counter part I see is that it mix comments and what should be considered as internal documentation. . It is important is of course to have doxygen friendly declaration centric (the public API) documentation ...but it is equally important to have proper documentation for the internal details. ; If would probably do something like that in a new project:; - always use /** */ for documenting public API (what should and must be visible in doxygen, mostly the comment close to declaration) ; - always use /// or ///< for internal details (no requirement that it must be close to declaration) ; - use // or /* */ for other usages. . But given our code base ... I'm not sure which direction we should go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417
https://github.com/sofa-framework/sofa/pull/1813#issuecomment-778080835:75,Usability,responsiv,responsive,75,"Hi @EulalieCoevoet @ChristianDuriez ; Good to see you two super active and responsive on GitHub!! The SOFA GitHub is on :fire: . Just FYI pull-requests without a flag ""fast-merge"" are supposed to be let open 7 days for people to see it and review it.; But when @ChristianDuriez agrees, I guess we do as well :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1813#issuecomment-778080835
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801:4,Deployability,update,update,4,Any update on your side @EulalieCoevoet?; Or could you just share a simple scene for us to test and reproduce the problem?; Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801:91,Testability,test,test,91,Any update on your side @EulalieCoevoet?; Or could you just share a simple scene for us to test and reproduce the problem?; Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801
https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801:68,Usability,simpl,simple,68,Any update on your side @EulalieCoevoet?; Or could you just share a simple scene for us to test and reproduce the problem?; Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801
https://github.com/sofa-framework/sofa/pull/1868#issuecomment-786919775:47,Safety,avoid,avoid,47,Hello @maddin200 . Thanks for your PR. The fix avoid a crash with 7 char input string (that are invallid input for color code). ; It would be an improvement in usability if instead of silently ignoring these 7 char long strings something was reported as invalid to the user by setting the fail bits.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1868#issuecomment-786919775
https://github.com/sofa-framework/sofa/pull/1868#issuecomment-786919775:160,Usability,usab,usability,160,Hello @maddin200 . Thanks for your PR. The fix avoid a crash with 7 char input string (that are invallid input for color code). ; It would be an improvement in usability if instead of silently ignoring these 7 char long strings something was reported as invalid to the user by setting the fail bits.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1868#issuecomment-786919775
https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261:1304,Modifiability,refactor,refactoring,1304,"Hello Hugo,. Thank for your will to change that. because I I fully agree that our naming are bad. . I see three different possible patterns:; (1) defaultX, genericXXX but they are vague (actually we could also rename the DefaultContactManager :)). ; (2) Penality or LagrangeMultiplier that are the name of numerical/mathematical method. ; (3) frictionalContact or stick that are the names of physical phenomenons/model. . To me (1) are totally non informative names and we should ban them everywhere. ; Now between (2) and (3) the choice is more terse. My thinking is that using a phenomenon base name is the best thing to do.; So we focus on what the method does (eg: provide a zero geometric intersection) instead of how this is done (with penality method or lagrange mutliplier). . It is possible that for on phenomena there is multiple method implemented to solve it. In that case I think that adding a second option field to specify the method name would be the clearest approach. ; This would results in something like:; ```xml; <CollisionManager response=""geometricIntersection"" method=""penality""/>; <CollisionManager response=""stickyContact"" method=""lagrangeMultiplier""/>; <CollisionManager response=""frictionalContact"" method=""lagrangeMultiplier""/>; ```; Of course doing so is probably a bigger refactoring than what you were thinking about. Maybe if and only if there is multiple methods for the same physical phenomenon adding the method name as a postfix could solve the issue.; This could look like: ; ```xml; <CollisionManager response=""geometricIntersectionWithPenality""/>; <CollisionManager response=""geometricIntersectionWithLagrangeMultiplier""/> (distanceLMConstraint ?); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261
https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261:967,Usability,clear,clearest,967,"Hello Hugo,. Thank for your will to change that. because I I fully agree that our naming are bad. . I see three different possible patterns:; (1) defaultX, genericXXX but they are vague (actually we could also rename the DefaultContactManager :)). ; (2) Penality or LagrangeMultiplier that are the name of numerical/mathematical method. ; (3) frictionalContact or stick that are the names of physical phenomenons/model. . To me (1) are totally non informative names and we should ban them everywhere. ; Now between (2) and (3) the choice is more terse. My thinking is that using a phenomenon base name is the best thing to do.; So we focus on what the method does (eg: provide a zero geometric intersection) instead of how this is done (with penality method or lagrange mutliplier). . It is possible that for on phenomena there is multiple method implemented to solve it. In that case I think that adding a second option field to specify the method name would be the clearest approach. ; This would results in something like:; ```xml; <CollisionManager response=""geometricIntersection"" method=""penality""/>; <CollisionManager response=""stickyContact"" method=""lagrangeMultiplier""/>; <CollisionManager response=""frictionalContact"" method=""lagrangeMultiplier""/>; ```; Of course doing so is probably a bigger refactoring than what you were thinking about. Maybe if and only if there is multiple methods for the same physical phenomenon adding the method name as a postfix could solve the issue.; This could look like: ; ```xml; <CollisionManager response=""geometricIntersectionWithPenality""/>; <CollisionManager response=""geometricIntersectionWithLagrangeMultiplier""/> (distanceLMConstraint ?); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261
https://github.com/sofa-framework/sofa/pull/1888#issuecomment-790721996:24,Usability,feedback,feedback,24,"@guparan thanks for the feedback, I will change all the #ifdef XXX_HAVE_SOFA_GL then",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1888#issuecomment-790721996
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:199,Deployability,integrat,integrator,199,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:1116,Energy Efficiency,efficient,efficiently,1116,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:199,Integrability,integrat,integrator,199,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:1265,Modifiability,refactor,refactor,1265,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:618,Performance,optimiz,optimizedForDiagonalMatrix,618,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:1339,Safety,detect,detect,1339,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:252,Usability,simpl,simply,252,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:920,Usability,simpl,simply,920,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:207,Deployability,integrat,integrator,207,"> > However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?; > ; > This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:1142,Energy Efficiency,efficient,efficiently,1142,"tion should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mass is diagonal. If we do that, we can assume in this PR that Mass::isDiagonal must not be removed. If you all agree with this list of task",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:1855,Energy Efficiency,adapt,adapted,1855,"l in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mass is diagonal. If we do that, we can assume in this PR that Mass::isDiagonal must not be removed. If you all agree with this list of tasks, I can open the issues.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:207,Integrability,integrat,integrator,207,"> > However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?; > ; > This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:1302,Modifiability,refactor,refactor,1302,"l in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mass is diagonal. If we do that, we can assume in this PR that Mass::isDiagonal must not be removed. If you all agree with this list of tasks, I can open the issues.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:1855,Modifiability,adapt,adapted,1855,"l in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mass is diagonal. If we do that, we can assume in this PR that Mass::isDiagonal must not be removed. If you all agree with this list of tasks, I can open the issues.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:632,Performance,optimiz,optimizedForDiagonalMatrix,632,"> > However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?; > ; > This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:1383,Safety,detect,detect,1383,"l in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mass is diagonal. If we do that, we can assume in this PR that Mass::isDiagonal must not be removed. If you all agree with this list of tasks, I can open the issues.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:260,Usability,simpl,simply,260,"> > However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?; > ; > This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:940,Usability,simpl,simply,940,"> > However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?; > ; > This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:1020,Availability,down,down,1020,"ere the different steps of the solving process for a dynamic solver. Hopefully this could be useful at some point. I have described this further in the documentation of Caribou's backward Euler solver [here](https://caribou.jnbrunet.com/classSofaCaribou_1_1ode_1_1BackwardEulerODESolver.html). The last two equations are the one that will be fully assembled, given any solver other than the SOFA's [un-preconditioned] conjugate gradient (this one doesn't assemble any matrices). We can simplify them for the case of only one Newton iteration, which is the same as the SOFA's EulerImplicit component:. ```; [(1+h r_m)M + hB + h(h+r_k)K] da = [r_mM + B + r_k K] v + [F - T]; (1) (2) (3); ```; where `h = dt`, `F` is the internal force vector computed by the elastic forcefields, and `T` is the external force vector computed by pressure fields, gravitational fields, collisions, etc. Here is what happens during the solve:. (1) A = [(1+h r_m)M + hB + h(h+r_k)K]. Building step:; Here we go down on the current context sub-graph and call :; 1. `ff->addKToMatrix(&A)` and `f->addBToMatrix(&A)` for every force field ""ff"" found.; 2. `pc->applyConstraint(&A)` for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves ca",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:1918,Availability,down,down,1918,"(h+r_k)K]. Building step:; Here we go down on the current context sub-graph and call :; 1. `ff->addKToMatrix(&A)` and `f->addBToMatrix(&A)` for every force field ""ff"" found.; 2. `pc->applyConstraint(&A)` for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per ti",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:2368,Availability,down,down,2368,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:2200,Integrability,depend,dependent,2200,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:2570,Integrability,depend,dependent,2570,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:2782,Performance,optimiz,optimize,2782,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:518,Usability,simpl,simplify,518,"Hey @alxbilger,. I'll describe here the different steps of the solving process for a dynamic solver. Hopefully this could be useful at some point. I have described this further in the documentation of Caribou's backward Euler solver [here](https://caribou.jnbrunet.com/classSofaCaribou_1_1ode_1_1BackwardEulerODESolver.html). The last two equations are the one that will be fully assembled, given any solver other than the SOFA's [un-preconditioned] conjugate gradient (this one doesn't assemble any matrices). We can simplify them for the case of only one Newton iteration, which is the same as the SOFA's EulerImplicit component:. ```; [(1+h r_m)M + hB + h(h+r_k)K] da = [r_mM + B + r_k K] v + [F - T]; (1) (2) (3); ```; where `h = dt`, `F` is the internal force vector computed by the elastic forcefields, and `T` is the external force vector computed by pressure fields, gravitational fields, collisions, etc. Here is what happens during the solve:. (1) A = [(1+h r_m)M + hB + h(h+r_k)K]. Building step:; Here we go down on the current context sub-graph and call :; 1. `ff->addKToMatrix(&A)` and `f->addBToMatrix(&A)` for every force field ""ff"" found.; 2. `pc->applyConstraint(&A)` for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:3026,Usability,clear,clear,3026,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:3054,Usability,intuit,intuitive,3054,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263
https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797:573,Modifiability,plugin,plugins,573,"> ; > ; > > Can we take the opportunity to renaming it `d_useRestPosition` ?; > ; > I'm not sure it's a good idea to transform a fix into a breaking change. Waiting for @fredroy insight 🔍. Exactly my thoughts.; Wondering the fact that indeed this is badly needed BUT it will be breaking. Arguments for renaming:; - does not follow the guideline and the other Data<> in BarycentricMapping are following it,; - referenced only **ONCE** in the whole sofa code base; - does not breaking anything scene-wise (the stringName wont change). Arguments for not renaming:; - breaking plugins using this Data<> directly. Conclusion: ; My opinion would be to rename it indeed 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797
https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797:335,Usability,guid,guideline,335,"> ; > ; > > Can we take the opportunity to renaming it `d_useRestPosition` ?; > ; > I'm not sure it's a good idea to transform a fix into a breaking change. Waiting for @fredroy insight 🔍. Exactly my thoughts.; Wondering the fact that indeed this is badly needed BUT it will be breaking. Arguments for renaming:; - does not follow the guideline and the other Data<> in BarycentricMapping are following it,; - referenced only **ONCE** in the whole sofa code base; - does not breaking anything scene-wise (the stringName wont change). Arguments for not renaming:; - breaking plugins using this Data<> directly. Conclusion: ; My opinion would be to rename it indeed 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797
https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803896279:198,Usability,guid,guidelines,198,"Actually this is not really true, the problem is that the other things with a 'd_' are NOT data 🤪, they are Link and thus should be prefixed with 'l_' . ; So this class is not following the correct guidelines 😬 (and members not having 'm_' etc...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803896279
https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803903671:70,Deployability,update,update,70,ok... I think we should do an afternoon of brainless coding sprint to update all those components with the good guidelines... ; so this one is ready to go I guess. ; LGTM !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803903671
https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803903671:112,Usability,guid,guidelines,112,ok... I think we should do an afternoon of brainless coding sprint to update all those components with the good guidelines... ; so this one is ready to go I guess. ; LGTM !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803903671
https://github.com/sofa-framework/sofa/pull/1941#issuecomment-806039493:58,Usability,clear,clearer,58,Great @guparan keeping one macro will make things so much clearer!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1941#issuecomment-806039493
https://github.com/sofa-framework/sofa/pull/1956#issuecomment-808329941:9,Usability,simpl,simple,9,Nice and simple :ok_hand:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1956#issuecomment-808329941
https://github.com/sofa-framework/sofa/issues/1967#issuecomment-811885973:54,Usability,simpl,simply,54,"Indeed @alxbilger , not compiled for 6 years. I would simply remove it.; You fixes are always welcome @maddin200 :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1967#issuecomment-811885973
https://github.com/sofa-framework/sofa/issues/1974#issuecomment-834199786:89,Usability,clear,clear,89,"This issue will be closed as SparseGrid is working as intended (even if it is not really clear); Excerpt [SparseGridTopology.h](https://github.com/sofa-framework/sofa/blob/c05ff12d4540a7b0f62052583f318090bfe91c31/SofaKernel/modules/SofaBaseTopology/src/SofaBaseTopology/SparseGridTopology.h#L44) :; ```; A sparse grid topology. Like a sparse FFD building from the bounding box of the object. Starting from a RegularGrid, only valid cells containing matter (ie intersecting the original surface mesh or totally inside the object) are considered.; * Valid cells are tagged by a Type BOUNDARY or INSIDE; ```; Closing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1974#issuecomment-834199786
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734:150,Modifiability,config,config,150,"I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; ```c++; #include <MultiThreading/config.h>; ...; #include <MultiThreading/Tasks.h>; ```. it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734:244,Modifiability,plugin,plugin,244,"I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; ```c++; #include <MultiThreading/config.h>; ...; #include <MultiThreading/Tasks.h>; ```. it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734:351,Usability,usab,usable,351,"I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; ```c++; #include <MultiThreading/config.h>; ...; #include <MultiThreading/Tasks.h>; ```. it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584:160,Modifiability,config,config,160,"> I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > ; > ```c++; > #include <MultiThreading/config.h>; > ...; > #include <MultiThreading/Tasks.h>; > ```; > ; > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face. How can it compile?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584:266,Modifiability,plugin,plugin,266,"> I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > ; > ```c++; > #include <MultiThreading/config.h>; > ...; > #include <MultiThreading/Tasks.h>; > ```; > ; > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face. How can it compile?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584:373,Usability,usab,usable,373,"> I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > ; > ```c++; > #include <MultiThreading/config.h>; > ...; > #include <MultiThreading/Tasks.h>; > ```; > ; > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face. How can it compile?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503:170,Modifiability,config,config,170,"> ; > ; > > I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > > ```c++; > > #include <MultiThreading/config.h>; > > ...; > > #include <MultiThreading/Tasks.h>; > > ```; > > ; > > ; > > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face; > ; > How can it compile?. If it is not included, it is not compiled.; My guess is that this file was included in Multithreading, or is included in a private plugin using Multithreading (thus enabling `-I/path/to/Multithreading`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503:292,Modifiability,plugin,plugin,292,"> ; > ; > > I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > > ```c++; > > #include <MultiThreading/config.h>; > > ...; > > #include <MultiThreading/Tasks.h>; > > ```; > > ; > > ; > > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face; > ; > How can it compile?. If it is not included, it is not compiled.; My guess is that this file was included in Multithreading, or is included in a private plugin using Multithreading (thus enabling `-I/path/to/Multithreading`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503:588,Modifiability,plugin,plugin,588,"> ; > ; > > I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > > ```c++; > > #include <MultiThreading/config.h>; > > ...; > > #include <MultiThreading/Tasks.h>; > > ```; > > ; > > ; > > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face; > ; > How can it compile?. If it is not included, it is not compiled.; My guess is that this file was included in Multithreading, or is included in a private plugin using Multithreading (thus enabling `-I/path/to/Multithreading`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503
https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503:399,Usability,usab,usable,399,"> ; > ; > > I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > > ```c++; > > #include <MultiThreading/config.h>; > > ...; > > #include <MultiThreading/Tasks.h>; > > ```; > > ; > > ; > > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face; > ; > How can it compile?. If it is not included, it is not compiled.; My guess is that this file was included in Multithreading, or is included in a private plugin using Multithreading (thus enabling `-I/path/to/Multithreading`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503
https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067:431,Modifiability,plugin,plugin,431,"About the UX, we have different possibilities to use multithreaded algorithms:. # Traditional components using usual DataTypes. They can have some Datas to enable/disable the use of multithreading.; - `FreeMotionAnimationLoop`; - `d_parallelCollisionDetectionAndFreeMotion`; - `d_parallelODESolving`; - `GenericConstraintSolver`; - `d_multithreading`; - `MechanicalMatrixMapper`; - `d_parallelTasks`. # Component in MultiThreading plugin starting with Parallel; Again using the regular DataTypes; - `ParallelBruteForceBroadPhase`; - `ParallelBVHNarrowPhase`; - `ParallelHexahedronFEMForceField`. # In the MultiThreading plugin, there is also these components:; - `BeamLinearMapping_mt`; - `AnimationLoopParallelScheduler`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067
https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067:620,Modifiability,plugin,plugin,620,"About the UX, we have different possibilities to use multithreaded algorithms:. # Traditional components using usual DataTypes. They can have some Datas to enable/disable the use of multithreading.; - `FreeMotionAnimationLoop`; - `d_parallelCollisionDetectionAndFreeMotion`; - `d_parallelODESolving`; - `GenericConstraintSolver`; - `d_multithreading`; - `MechanicalMatrixMapper`; - `d_parallelTasks`. # Component in MultiThreading plugin starting with Parallel; Again using the regular DataTypes; - `ParallelBruteForceBroadPhase`; - `ParallelBVHNarrowPhase`; - `ParallelHexahedronFEMForceField`. # In the MultiThreading plugin, there is also these components:; - `BeamLinearMapping_mt`; - `AnimationLoopParallelScheduler`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067
https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067:10,Usability,UX,UX,10,"About the UX, we have different possibilities to use multithreaded algorithms:. # Traditional components using usual DataTypes. They can have some Datas to enable/disable the use of multithreading.; - `FreeMotionAnimationLoop`; - `d_parallelCollisionDetectionAndFreeMotion`; - `d_parallelODESolving`; - `GenericConstraintSolver`; - `d_multithreading`; - `MechanicalMatrixMapper`; - `d_parallelTasks`. # Component in MultiThreading plugin starting with Parallel; Again using the regular DataTypes; - `ParallelBruteForceBroadPhase`; - `ParallelBVHNarrowPhase`; - `ParallelHexahedronFEMForceField`. # In the MultiThreading plugin, there is also these components:; - `BeamLinearMapping_mt`; - `AnimationLoopParallelScheduler`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067
https://github.com/sofa-framework/sofa/pull/2050#issuecomment-839603263:111,Usability,clear,clear,111,"Seems OK, could you just rebase/merge with master to remove the failed CUDA/whatever scenes? Just to be in the clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-839603263
https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967:30,Integrability,message,messages,30,Thanks @jnbrunet. I made some messages clearer. Some of them was meant to facilitate debugging (it helped me) and are not necessarily meant for the user. I converted them to developers messages (but still made them clearer).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967
https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967:185,Integrability,message,messages,185,Thanks @jnbrunet. I made some messages clearer. Some of them was meant to facilitate debugging (it helped me) and are not necessarily meant for the user. I converted them to developers messages (but still made them clearer).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967
https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967:39,Usability,clear,clearer,39,Thanks @jnbrunet. I made some messages clearer. Some of them was meant to facilitate debugging (it helped me) and are not necessarily meant for the user. I converted them to developers messages (but still made them clearer).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967
https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967:215,Usability,clear,clearer,215,Thanks @jnbrunet. I made some messages clearer. Some of them was meant to facilitate debugging (it helped me) and are not necessarily meant for the user. I converted them to developers messages (but still made them clearer).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967
https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842965195:30,Energy Efficiency,monitor,monitor,30,"> EDIT: I ran the performance monitor of VS and indeed it takes a lot of time in the resize() function of MechanicalObject. Indeed, this looks like a nice bug :sunglasses: . However, I'm not sure this is impacting the _simulation_ time. The same multivectors are used (x_rest, x, v, etc.) and the newly (and very wrongly) created vectors are simply, well, created... But we must definitely fix this bug :grin:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842965195
https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842965195:18,Performance,perform,performance,18,"> EDIT: I ran the performance monitor of VS and indeed it takes a lot of time in the resize() function of MechanicalObject. Indeed, this looks like a nice bug :sunglasses: . However, I'm not sure this is impacting the _simulation_ time. The same multivectors are used (x_rest, x, v, etc.) and the newly (and very wrongly) created vectors are simply, well, created... But we must definitely fix this bug :grin:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842965195
https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842965195:342,Usability,simpl,simply,342,"> EDIT: I ran the performance monitor of VS and indeed it takes a lot of time in the resize() function of MechanicalObject. Indeed, this looks like a nice bug :sunglasses: . However, I'm not sure this is impacting the _simulation_ time. The same multivectors are used (x_rest, x, v, etc.) and the newly (and very wrongly) created vectors are simply, well, created... But we must definitely fix this bug :grin:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842965195
https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842970198:40,Energy Efficiency,monitor,monitor,40,"> ; > ; > > EDIT: I ran the performance monitor of VS and indeed it takes a lot of time in the resize() function of MechanicalObject; > ; > Indeed, this looks like a nice bug 😎; > ; > However, I'm not sure this is impacting the _simulation_ time. The same multivectors are used (x_rest, x, v, etc.) and the newly (and very wrongly) created vectors are simply, well, created...; > ; > But we must definitely fix this bug 😁. Agreed for the simulation time itself, but the created vectors are not only created; in the resize function, it tried to resize ALL the vectors every time step, so after a thousand steps for example, it tried to resize like 2000 vectors... Interestingly, the useless vectors are all V_DERIV so something related to the velocities?; ![Capture_collis2](https://user-images.githubusercontent.com/11028016/118618533-03ca6180-b7c4-11eb-9332-0ce4c316fc23.PNG)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842970198
https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842970198:28,Performance,perform,performance,28,"> ; > ; > > EDIT: I ran the performance monitor of VS and indeed it takes a lot of time in the resize() function of MechanicalObject; > ; > Indeed, this looks like a nice bug 😎; > ; > However, I'm not sure this is impacting the _simulation_ time. The same multivectors are used (x_rest, x, v, etc.) and the newly (and very wrongly) created vectors are simply, well, created...; > ; > But we must definitely fix this bug 😁. Agreed for the simulation time itself, but the created vectors are not only created; in the resize function, it tried to resize ALL the vectors every time step, so after a thousand steps for example, it tried to resize like 2000 vectors... Interestingly, the useless vectors are all V_DERIV so something related to the velocities?; ![Capture_collis2](https://user-images.githubusercontent.com/11028016/118618533-03ca6180-b7c4-11eb-9332-0ce4c316fc23.PNG)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842970198
https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842970198:352,Usability,simpl,simply,352,"> ; > ; > > EDIT: I ran the performance monitor of VS and indeed it takes a lot of time in the resize() function of MechanicalObject; > ; > Indeed, this looks like a nice bug 😎; > ; > However, I'm not sure this is impacting the _simulation_ time. The same multivectors are used (x_rest, x, v, etc.) and the newly (and very wrongly) created vectors are simply, well, created...; > ; > But we must definitely fix this bug 😁. Agreed for the simulation time itself, but the created vectors are not only created; in the resize function, it tried to resize ALL the vectors every time step, so after a thousand steps for example, it tried to resize like 2000 vectors... Interestingly, the useless vectors are all V_DERIV so something related to the velocities?; ![Capture_collis2](https://user-images.githubusercontent.com/11028016/118618533-03ca6180-b7c4-11eb-9332-0ce4c316fc23.PNG)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842970198
https://github.com/sofa-framework/sofa/pull/2115#issuecomment-853025370:80,Modifiability,plugin,plugin,80,rebase (to clear the previous failing scenes) +; ignore scene from the Geomatic plugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2115#issuecomment-853025370
https://github.com/sofa-framework/sofa/pull/2115#issuecomment-853025370:11,Usability,clear,clear,11,rebase (to clear the previous failing scenes) +; ignore scene from the Geomatic plugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2115#issuecomment-853025370
https://github.com/sofa-framework/sofa/issues/2142#issuecomment-853001162:266,Performance,optimiz,optimizing,266,"To be clear, the simulation is not slower. The measured durations don't have overhead. The time consuming part due to the GUI is not measured. So, you are right, the percentages are accurate, but the durations also. It just takes time to display them.; I agree that optimizing this tool is not a priority. This issue is to keep it in mind.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2142#issuecomment-853001162
https://github.com/sofa-framework/sofa/issues/2142#issuecomment-853001162:6,Usability,clear,clear,6,"To be clear, the simulation is not slower. The measured durations don't have overhead. The time consuming part due to the GUI is not measured. So, you are right, the percentages are accurate, but the durations also. It just takes time to display them.; I agree that optimizing this tool is not a priority. This issue is to keep it in mind.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2142#issuecomment-853001162
https://github.com/sofa-framework/sofa/issues/2150#issuecomment-971431358:140,Usability,usab,usable,140,"@alxbilger you are right, only NewMat* things are not moved/done but this will deprecated ASAP (as well as the LULinearSolver which is only usable with those matrices)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2150#issuecomment-971431358
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855629658:251,Deployability,integrat,integrator,251,"> 1. We could probably rename the ""**EulerSolver.h**"" and ""**EulerSolver.cpp**"" files to ""**EulerExplicitSolver.h**"" and ""**EulerExplicitSolver.cpp**"" to follow the name of the class.; > ; > 2. Maybe we could factor the sympletic option as a new time integrator class? I think it would be much clearer to have, for example,; > ; > ; > ```; > <EulerExplicitSolver />; > <EulerImplicitSolver />; > <EulerSemiImplicitSolver />; > ```; > ; > and might speak to more people. I definitively agree with both your suggestions.; I also thought about your second suggestion, and it was my plan to talk about it during the next dev meeting. The problem I see is that `EulerExplicitSolver` is by default symplectic. So, applying your suggestion would change the ODE solver when the user write `<EulerExplicitSolver />`. Let's discuss it on Wednesday.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855629658
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855629658:251,Integrability,integrat,integrator,251,"> 1. We could probably rename the ""**EulerSolver.h**"" and ""**EulerSolver.cpp**"" files to ""**EulerExplicitSolver.h**"" and ""**EulerExplicitSolver.cpp**"" to follow the name of the class.; > ; > 2. Maybe we could factor the sympletic option as a new time integrator class? I think it would be much clearer to have, for example,; > ; > ; > ```; > <EulerExplicitSolver />; > <EulerImplicitSolver />; > <EulerSemiImplicitSolver />; > ```; > ; > and might speak to more people. I definitively agree with both your suggestions.; I also thought about your second suggestion, and it was my plan to talk about it during the next dev meeting. The problem I see is that `EulerExplicitSolver` is by default symplectic. So, applying your suggestion would change the ODE solver when the user write `<EulerExplicitSolver />`. Let's discuss it on Wednesday.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855629658
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855629658:294,Usability,clear,clearer,294,"> 1. We could probably rename the ""**EulerSolver.h**"" and ""**EulerSolver.cpp**"" files to ""**EulerExplicitSolver.h**"" and ""**EulerExplicitSolver.cpp**"" to follow the name of the class.; > ; > 2. Maybe we could factor the sympletic option as a new time integrator class? I think it would be much clearer to have, for example,; > ; > ; > ```; > <EulerExplicitSolver />; > <EulerImplicitSolver />; > <EulerSemiImplicitSolver />; > ```; > ; > and might speak to more people. I definitively agree with both your suggestions.; I also thought about your second suggestion, and it was my plan to talk about it during the next dev meeting. The problem I see is that `EulerExplicitSolver` is by default symplectic. So, applying your suggestion would change the ODE solver when the user write `<EulerExplicitSolver />`. Let's discuss it on Wednesday.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855629658
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855748841:266,Deployability,integrat,integrator,266,"> > ```; > > 1. We could probably rename the ""**EulerSolver.h**"" and ""**EulerSolver.cpp**"" files to ""**EulerExplicitSolver.h**"" and ""**EulerExplicitSolver.cpp**"" to follow the name of the class.; > > ; > > 2. Maybe we could factor the sympletic option as a new time integrator class? I think it would be much clearer to have, for example,; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ```; > > <EulerExplicitSolver />; > > <EulerImplicitSolver />; > > <EulerSemiImplicitSolver />; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > and might speak to more people.; > ; > I definitively agree with both your suggestions.; > I also thought about your second suggestion, and it was my plan to talk about it during the next dev meeting. The problem I see is that `EulerExplicitSolver` is by default symplectic. So, applying your suggestion would change the ODE solver when the user write `<EulerExplicitSolver />`. Let's discuss it on Wednesday. Unfortunately, I'm not sure I will be able to join this Wednesday and the next. Could we do something like this?. 1. If `EulerExplicitSolver` is used with default parameters or with explicit `sympletic=True`, then warn the user that he should use `EulerSemiImplicitSolver` instead, and create this new component automatically for him (this is the part where I'm not sure it's feasible..); 2. Else, the user manually specified `sympletic=False`, warn him that this option no longer exists and that he can remove it from its scene file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855748841
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855748841:266,Integrability,integrat,integrator,266,"> > ```; > > 1. We could probably rename the ""**EulerSolver.h**"" and ""**EulerSolver.cpp**"" files to ""**EulerExplicitSolver.h**"" and ""**EulerExplicitSolver.cpp**"" to follow the name of the class.; > > ; > > 2. Maybe we could factor the sympletic option as a new time integrator class? I think it would be much clearer to have, for example,; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ```; > > <EulerExplicitSolver />; > > <EulerImplicitSolver />; > > <EulerSemiImplicitSolver />; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > and might speak to more people.; > ; > I definitively agree with both your suggestions.; > I also thought about your second suggestion, and it was my plan to talk about it during the next dev meeting. The problem I see is that `EulerExplicitSolver` is by default symplectic. So, applying your suggestion would change the ODE solver when the user write `<EulerExplicitSolver />`. Let's discuss it on Wednesday. Unfortunately, I'm not sure I will be able to join this Wednesday and the next. Could we do something like this?. 1. If `EulerExplicitSolver` is used with default parameters or with explicit `sympletic=True`, then warn the user that he should use `EulerSemiImplicitSolver` instead, and create this new component automatically for him (this is the part where I'm not sure it's feasible..); 2. Else, the user manually specified `sympletic=False`, warn him that this option no longer exists and that he can remove it from its scene file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855748841
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855748841:309,Usability,clear,clearer,309,"> > ```; > > 1. We could probably rename the ""**EulerSolver.h**"" and ""**EulerSolver.cpp**"" files to ""**EulerExplicitSolver.h**"" and ""**EulerExplicitSolver.cpp**"" to follow the name of the class.; > > ; > > 2. Maybe we could factor the sympletic option as a new time integrator class? I think it would be much clearer to have, for example,; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ```; > > <EulerExplicitSolver />; > > <EulerImplicitSolver />; > > <EulerSemiImplicitSolver />; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > and might speak to more people.; > ; > I definitively agree with both your suggestions.; > I also thought about your second suggestion, and it was my plan to talk about it during the next dev meeting. The problem I see is that `EulerExplicitSolver` is by default symplectic. So, applying your suggestion would change the ODE solver when the user write `<EulerExplicitSolver />`. Let's discuss it on Wednesday. Unfortunately, I'm not sure I will be able to join this Wednesday and the next. Could we do something like this?. 1. If `EulerExplicitSolver` is used with default parameters or with explicit `sympletic=True`, then warn the user that he should use `EulerSemiImplicitSolver` instead, and create this new component automatically for him (this is the part where I'm not sure it's feasible..); 2. Else, the user manually specified `sympletic=False`, warn him that this option no longer exists and that he can remove it from its scene file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855748841
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:233,Deployability,update,update,233,"@jnbrunet To be clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:35,Performance,optimiz,optimizations,35,"@jnbrunet To be clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:68,Performance,optimiz,optimization,68,"@jnbrunet To be clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:113,Performance,optimiz,optimization,113,"@jnbrunet To be clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:164,Performance,optimiz,optimized,164,"@jnbrunet To be clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:247,Performance,optimiz,optimized,247,"@jnbrunet To be clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:277,Performance,optimiz,optimized,277,"@jnbrunet To be clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:1080,Performance,optimiz,optimized,1080," clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:1399,Performance,optimiz,optimized,1399," clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:1548,Performance,optimiz,optimized,1548," clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:1583,Performance,optimiz,optimized,1583," clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:1601,Performance,optimiz,optimized,1601," clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866
https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:16,Usability,clear,clear,16,"@jnbrunet To be clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866
https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951:148,Deployability,update,update,148,"Conclusion of several .. years of discussion with @damienmarchal :. such circular dependencies should be handled by defining clear input data which update output data.; For instance for a Mass:; - input data: `d_inputMassDensity` and `d_inputTotalMass` (input prefix would make it clear that a circular dependency is avoided); - actual data used in computations (outputs): `d_massDensity` and `d_totalMass`. When `d_inputMassDensity` is modified, it triggers a callback like:; ``` cpp; addUpdateCallback(""updateFromTotalMass"", {&d_inputTotalMass}, [this](const core::DataTracker& ); {; .. /// do the computation; return sofa::core::objectmodel::ComponentState::Valid;; }, {&d_massDensity, &d_totalMass});; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951
https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951:505,Deployability,update,updateFromTotalMass,505,"Conclusion of several .. years of discussion with @damienmarchal :. such circular dependencies should be handled by defining clear input data which update output data.; For instance for a Mass:; - input data: `d_inputMassDensity` and `d_inputTotalMass` (input prefix would make it clear that a circular dependency is avoided); - actual data used in computations (outputs): `d_massDensity` and `d_totalMass`. When `d_inputMassDensity` is modified, it triggers a callback like:; ``` cpp; addUpdateCallback(""updateFromTotalMass"", {&d_inputTotalMass}, [this](const core::DataTracker& ); {; .. /// do the computation; return sofa::core::objectmodel::ComponentState::Valid;; }, {&d_massDensity, &d_totalMass});; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951
https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951:82,Integrability,depend,dependencies,82,"Conclusion of several .. years of discussion with @damienmarchal :. such circular dependencies should be handled by defining clear input data which update output data.; For instance for a Mass:; - input data: `d_inputMassDensity` and `d_inputTotalMass` (input prefix would make it clear that a circular dependency is avoided); - actual data used in computations (outputs): `d_massDensity` and `d_totalMass`. When `d_inputMassDensity` is modified, it triggers a callback like:; ``` cpp; addUpdateCallback(""updateFromTotalMass"", {&d_inputTotalMass}, [this](const core::DataTracker& ); {; .. /// do the computation; return sofa::core::objectmodel::ComponentState::Valid;; }, {&d_massDensity, &d_totalMass});; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951
https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951:303,Integrability,depend,dependency,303,"Conclusion of several .. years of discussion with @damienmarchal :. such circular dependencies should be handled by defining clear input data which update output data.; For instance for a Mass:; - input data: `d_inputMassDensity` and `d_inputTotalMass` (input prefix would make it clear that a circular dependency is avoided); - actual data used in computations (outputs): `d_massDensity` and `d_totalMass`. When `d_inputMassDensity` is modified, it triggers a callback like:; ``` cpp; addUpdateCallback(""updateFromTotalMass"", {&d_inputTotalMass}, [this](const core::DataTracker& ); {; .. /// do the computation; return sofa::core::objectmodel::ComponentState::Valid;; }, {&d_massDensity, &d_totalMass});; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951
https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951:317,Safety,avoid,avoided,317,"Conclusion of several .. years of discussion with @damienmarchal :. such circular dependencies should be handled by defining clear input data which update output data.; For instance for a Mass:; - input data: `d_inputMassDensity` and `d_inputTotalMass` (input prefix would make it clear that a circular dependency is avoided); - actual data used in computations (outputs): `d_massDensity` and `d_totalMass`. When `d_inputMassDensity` is modified, it triggers a callback like:; ``` cpp; addUpdateCallback(""updateFromTotalMass"", {&d_inputTotalMass}, [this](const core::DataTracker& ); {; .. /// do the computation; return sofa::core::objectmodel::ComponentState::Valid;; }, {&d_massDensity, &d_totalMass});; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951
https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951:125,Usability,clear,clear,125,"Conclusion of several .. years of discussion with @damienmarchal :. such circular dependencies should be handled by defining clear input data which update output data.; For instance for a Mass:; - input data: `d_inputMassDensity` and `d_inputTotalMass` (input prefix would make it clear that a circular dependency is avoided); - actual data used in computations (outputs): `d_massDensity` and `d_totalMass`. When `d_inputMassDensity` is modified, it triggers a callback like:; ``` cpp; addUpdateCallback(""updateFromTotalMass"", {&d_inputTotalMass}, [this](const core::DataTracker& ); {; .. /// do the computation; return sofa::core::objectmodel::ComponentState::Valid;; }, {&d_massDensity, &d_totalMass});; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951
https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951:281,Usability,clear,clear,281,"Conclusion of several .. years of discussion with @damienmarchal :. such circular dependencies should be handled by defining clear input data which update output data.; For instance for a Mass:; - input data: `d_inputMassDensity` and `d_inputTotalMass` (input prefix would make it clear that a circular dependency is avoided); - actual data used in computations (outputs): `d_massDensity` and `d_totalMass`. When `d_inputMassDensity` is modified, it triggers a callback like:; ``` cpp; addUpdateCallback(""updateFromTotalMass"", {&d_inputTotalMass}, [this](const core::DataTracker& ); {; .. /// do the computation; return sofa::core::objectmodel::ComponentState::Valid;; }, {&d_massDensity, &d_totalMass});; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951
https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655:59,Modifiability,plugin,plugin,59,> ; > ; > Did you try with an out-of-tree compilation of a plugin (e.g Python3) ? just in case. Yes but with a simpler plugin (MyAwesomeComponents). `find_package(SofaFramework)` passed 👌,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655
https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655:119,Modifiability,plugin,plugin,119,> ; > ; > Did you try with an out-of-tree compilation of a plugin (e.g Python3) ? just in case. Yes but with a simpler plugin (MyAwesomeComponents). `find_package(SofaFramework)` passed 👌,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655
https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655:111,Usability,simpl,simpler,111,> ; > ; > Did you try with an out-of-tree compilation of a plugin (e.g Python3) ? just in case. Yes but with a simpler plugin (MyAwesomeComponents). `find_package(SofaFramework)` passed 👌,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655
https://github.com/sofa-framework/sofa/pull/2185#issuecomment-863919176:306,Usability,simpl,simple,306,"> ; > ; > Not that I want to that guy, but the code is quite copy-pasted from TetrahedronFEMForcefield (even the data name starts with '_' ) 🧐 . Wont it be possible to factorize the code with TetrahedronFEMForcefield or anything like that ?. of curse the answer is ""Yes, but..."" ; Like that is it not that simple because they have a totally different way to store the data. I see 2 methods that could be factorized.; - the computeVonMises which could take the data as parameter, but I don't know where it should be placed.; - the draw method, but it is too specific to be put in the drawTools. is there a ForceField toolkit or helper somewhere?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2185#issuecomment-863919176
https://github.com/sofa-framework/sofa/pull/2185#issuecomment-875964434:626,Usability,simpl,simply,626,"> ; > ; > For now, I would say we could introduce a file into the SofaSimpleFEM module (the first module introducing the FEM in SOFA), with a name like FEMUtils.h (I am not good with names...). Inside you can put the functions (or a class with static functions) factorizing the code (I would say something like computeVonMisesFromElement() and drawVonMisesElements()). In fact TetrahedronFEMForceField and TetrahedralCorotationalFEMForceField should be merged. Historically the Tetrahedral is only a copy past with topological changes support. Now that topological changes are done using callbacks, the merge could be done by simply adding an option that will or won't registered the call back.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2185#issuecomment-875964434
https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643:271,Deployability,update,update,271,"Hi @alxbilger @courtecuisse . We understand what this function was used for in BaseFF. However, the API for topological changes introduced by @epernod more than a year ago now uses callbacks. Such callbacks appear to me like the appropriate way to implement an optimized update of the local stiffness (only on the updated elements). This PR proposed to remove a function, which had no implementation in the core. No feature in the code base, so it was polluting the code base and making it harder for new developers to read the API. @alxbilger had explicitly asked for feedback, and the above discussion led to the confirmation of this deletion.; However, you make a point: SOFA should indeed include examples (scenes and code) of 3D cutting and such contributions are most expected. Such PRs and topics are (and were in this case) discussed weekly at the [SOFA dev meeting](https://sympa.inria.fr/sympa/subscribe/sofa-dev). . Two solutions I see: ; - pulled-request a revert of the PR introducing the feature in the core of SOFA; - use the new API and updates existing FF in SOFA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643
https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643:314,Deployability,update,updated,314,"Hi @alxbilger @courtecuisse . We understand what this function was used for in BaseFF. However, the API for topological changes introduced by @epernod more than a year ago now uses callbacks. Such callbacks appear to me like the appropriate way to implement an optimized update of the local stiffness (only on the updated elements). This PR proposed to remove a function, which had no implementation in the core. No feature in the code base, so it was polluting the code base and making it harder for new developers to read the API. @alxbilger had explicitly asked for feedback, and the above discussion led to the confirmation of this deletion.; However, you make a point: SOFA should indeed include examples (scenes and code) of 3D cutting and such contributions are most expected. Such PRs and topics are (and were in this case) discussed weekly at the [SOFA dev meeting](https://sympa.inria.fr/sympa/subscribe/sofa-dev). . Two solutions I see: ; - pulled-request a revert of the PR introducing the feature in the core of SOFA; - use the new API and updates existing FF in SOFA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643
https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643:1053,Deployability,update,updates,1053,"Hi @alxbilger @courtecuisse . We understand what this function was used for in BaseFF. However, the API for topological changes introduced by @epernod more than a year ago now uses callbacks. Such callbacks appear to me like the appropriate way to implement an optimized update of the local stiffness (only on the updated elements). This PR proposed to remove a function, which had no implementation in the core. No feature in the code base, so it was polluting the code base and making it harder for new developers to read the API. @alxbilger had explicitly asked for feedback, and the above discussion led to the confirmation of this deletion.; However, you make a point: SOFA should indeed include examples (scenes and code) of 3D cutting and such contributions are most expected. Such PRs and topics are (and were in this case) discussed weekly at the [SOFA dev meeting](https://sympa.inria.fr/sympa/subscribe/sofa-dev). . Two solutions I see: ; - pulled-request a revert of the PR introducing the feature in the core of SOFA; - use the new API and updates existing FF in SOFA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643
https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643:261,Performance,optimiz,optimized,261,"Hi @alxbilger @courtecuisse . We understand what this function was used for in BaseFF. However, the API for topological changes introduced by @epernod more than a year ago now uses callbacks. Such callbacks appear to me like the appropriate way to implement an optimized update of the local stiffness (only on the updated elements). This PR proposed to remove a function, which had no implementation in the core. No feature in the code base, so it was polluting the code base and making it harder for new developers to read the API. @alxbilger had explicitly asked for feedback, and the above discussion led to the confirmation of this deletion.; However, you make a point: SOFA should indeed include examples (scenes and code) of 3D cutting and such contributions are most expected. Such PRs and topics are (and were in this case) discussed weekly at the [SOFA dev meeting](https://sympa.inria.fr/sympa/subscribe/sofa-dev). . Two solutions I see: ; - pulled-request a revert of the PR introducing the feature in the core of SOFA; - use the new API and updates existing FF in SOFA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643
https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643:569,Usability,feedback,feedback,569,"Hi @alxbilger @courtecuisse . We understand what this function was used for in BaseFF. However, the API for topological changes introduced by @epernod more than a year ago now uses callbacks. Such callbacks appear to me like the appropriate way to implement an optimized update of the local stiffness (only on the updated elements). This PR proposed to remove a function, which had no implementation in the core. No feature in the code base, so it was polluting the code base and making it harder for new developers to read the API. @alxbilger had explicitly asked for feedback, and the above discussion led to the confirmation of this deletion.; However, you make a point: SOFA should indeed include examples (scenes and code) of 3D cutting and such contributions are most expected. Such PRs and topics are (and were in this case) discussed weekly at the [SOFA dev meeting](https://sympa.inria.fr/sympa/subscribe/sofa-dev). . Two solutions I see: ; - pulled-request a revert of the PR introducing the feature in the core of SOFA; - use the new API and updates existing FF in SOFA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643
https://github.com/sofa-framework/sofa/pull/2259#issuecomment-885610982:87,Usability,learn,learnt,87,Lots of weird stuff happening with those *_API (dllimport/dllexport) thingies 🥴; TIL I learnt that you cannot put it after the type if it is a reference (I suppose the `&` bothers the compilation); Seems better to put it always before the type.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2259#issuecomment-885610982
https://github.com/sofa-framework/sofa/pull/2265#issuecomment-886453383:44,Availability,error,error,44,"@EulalieCoevoet Thank you for reporting the error (too bad it skipped the reviews 😕); By any chance, would have a simple scene to submit as a test? thanks ! 😙",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-886453383
https://github.com/sofa-framework/sofa/pull/2265#issuecomment-886453383:142,Testability,test,test,142,"@EulalieCoevoet Thank you for reporting the error (too bad it skipped the reviews 😕); By any chance, would have a simple scene to submit as a test? thanks ! 😙",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-886453383
https://github.com/sofa-framework/sofa/pull/2265#issuecomment-886453383:114,Usability,simpl,simple,114,"@EulalieCoevoet Thank you for reporting the error (too bad it skipped the reviews 😕); By any chance, would have a simple scene to submit as a test? thanks ! 😙",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-886453383
https://github.com/sofa-framework/sofa/pull/2265#issuecomment-887544609:293,Usability,clear,clearing,293,"I confirm this version works in my scenes:; > Note that I prefer the range-based for loop. It would look like:; > ; > ```c++; > for(auto*& constraintsResolution : constraintsResolutions); > {; > delete constraintsResolution;; > constraintsResolution = nullptr;; > }; > ```; The alternative of clearing the vector after the loop also seems to work well:; ```C++; for (auto*& constraintsResolution : constraintsResolutions); {; delete constraintsResolution;; }; constraintsResolutions.clear();; ```; It is a pretty important bug to fix, half of my scenes are also crashing.; Thanks for finding the bug and the solution ideas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-887544609
https://github.com/sofa-framework/sofa/pull/2265#issuecomment-887544609:483,Usability,clear,clear,483,"I confirm this version works in my scenes:; > Note that I prefer the range-based for loop. It would look like:; > ; > ```c++; > for(auto*& constraintsResolution : constraintsResolutions); > {; > delete constraintsResolution;; > constraintsResolution = nullptr;; > }; > ```; The alternative of clearing the vector after the loop also seems to work well:; ```C++; for (auto*& constraintsResolution : constraintsResolutions); {; delete constraintsResolution;; }; constraintsResolutions.clear();; ```; It is a pretty important bug to fix, half of my scenes are also crashing.; Thanks for finding the bug and the solution ideas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-887544609
https://github.com/sofa-framework/sofa/pull/2275#issuecomment-1068911072:44,Usability,feedback,feedback,44,"Thank you @Camille-K and @jnbrunet for your feedback and explanation. . **As highlighted, we will keep the Lagrangian formulation and use the rest area to keep consistency with the others FEM implementation**. . - Regarding the triangle Thickness, it is not used anymore and will be removed when TriangleFEMForceField and TriangularFEMForceField will be merged to keep the code as simple as possible.; - Comparing the results with FEBio or Fenics is a very good idea. Which one do you recommend ? Considering starting from 0 with not much time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-1068911072
https://github.com/sofa-framework/sofa/pull/2275#issuecomment-1068911072:381,Usability,simpl,simple,381,"Thank you @Camille-K and @jnbrunet for your feedback and explanation. . **As highlighted, we will keep the Lagrangian formulation and use the rest area to keep consistency with the others FEM implementation**. . - Regarding the triangle Thickness, it is not used anymore and will be removed when TriangleFEMForceField and TriangularFEMForceField will be merged to keep the code as simple as possible.; - Comparing the results with FEBio or Fenics is a very good idea. Which one do you recommend ? Considering starting from 0 with not much time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-1068911072
https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:2768,Deployability,integrat,integrating,2768,", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_f (VecDeriv(mo->getSize(), {0, 0, 0}));; DataVecDeriv d_f_dia (VecDeriv(mo->getSize(), {0, 0, 0}));. sofa_mass->addForce(&mechanical_parameters, d_f_sofa, mo->x, mo->v);; sofa_mass_diagonal->addForce(&mechanical_parameters, d_f_sofa_dia, mo->x, mo->v);. // Map residual vectors with Eigen to facilitate norm computations; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f ((d_f.getValue().data()->data()), mo->getSize(), 3);; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f_dia ((d_f_dia.getValue().data()->data()), mo->getSize(), 3);. // Compare the norms; EXPECT_DOUBLE_EQ(f.norm(), f_dia.norm());; }; ```. > Maybe the used topology doesn't have edges?. An edge topology should not change anything here. We are integrating the mass density times g over the volumetric domain (tetra). If you are adding edges, then you are integrating a second time the region of an edge (the edge is a part of the tetra's volume). Let me know if something isn't clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585
https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:2879,Deployability,integrat,integrating,2879,", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_f (VecDeriv(mo->getSize(), {0, 0, 0}));; DataVecDeriv d_f_dia (VecDeriv(mo->getSize(), {0, 0, 0}));. sofa_mass->addForce(&mechanical_parameters, d_f_sofa, mo->x, mo->v);; sofa_mass_diagonal->addForce(&mechanical_parameters, d_f_sofa_dia, mo->x, mo->v);. // Map residual vectors with Eigen to facilitate norm computations; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f ((d_f.getValue().data()->data()), mo->getSize(), 3);; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f_dia ((d_f_dia.getValue().data()->data()), mo->getSize(), 3);. // Compare the norms; EXPECT_DOUBLE_EQ(f.norm(), f_dia.norm());; }; ```. > Maybe the used topology doesn't have edges?. An edge topology should not change anything here. We are integrating the mass density times g over the volumetric domain (tetra). If you are adding edges, then you are integrating a second time the region of an edge (the edge is a part of the tetra's volume). Let me know if something isn't clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585
https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:2768,Integrability,integrat,integrating,2768,", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_f (VecDeriv(mo->getSize(), {0, 0, 0}));; DataVecDeriv d_f_dia (VecDeriv(mo->getSize(), {0, 0, 0}));. sofa_mass->addForce(&mechanical_parameters, d_f_sofa, mo->x, mo->v);; sofa_mass_diagonal->addForce(&mechanical_parameters, d_f_sofa_dia, mo->x, mo->v);. // Map residual vectors with Eigen to facilitate norm computations; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f ((d_f.getValue().data()->data()), mo->getSize(), 3);; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f_dia ((d_f_dia.getValue().data()->data()), mo->getSize(), 3);. // Compare the norms; EXPECT_DOUBLE_EQ(f.norm(), f_dia.norm());; }; ```. > Maybe the used topology doesn't have edges?. An edge topology should not change anything here. We are integrating the mass density times g over the volumetric domain (tetra). If you are adding edges, then you are integrating a second time the region of an edge (the edge is a part of the tetra's volume). Let me know if something isn't clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585
https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:2879,Integrability,integrat,integrating,2879,", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_f (VecDeriv(mo->getSize(), {0, 0, 0}));; DataVecDeriv d_f_dia (VecDeriv(mo->getSize(), {0, 0, 0}));. sofa_mass->addForce(&mechanical_parameters, d_f_sofa, mo->x, mo->v);; sofa_mass_diagonal->addForce(&mechanical_parameters, d_f_sofa_dia, mo->x, mo->v);. // Map residual vectors with Eigen to facilitate norm computations; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f ((d_f.getValue().data()->data()), mo->getSize(), 3);; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f_dia ((d_f_dia.getValue().data()->data()), mo->getSize(), 3);. // Compare the norms; EXPECT_DOUBLE_EQ(f.norm(), f_dia.norm());; }; ```. > Maybe the used topology doesn't have edges?. An edge topology should not change anything here. We are integrating the mass density times g over the volumetric domain (tetra). If you are adding edges, then you are integrating a second time the region of an edge (the edge is a part of the tetra's volume). Let me know if something isn't clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585
https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:658,Modifiability,plugin,pluginName,658,"Hey @epernod . Yeah sorry, I'll give a bit more details. The force vector (built from addForce) should be the same (or very close), either you are using a lumped mass matrix or a (full) mass matrix. This was the case before, but isn't anymore. Here a quick unittest that could help:. ```c++; using sofa::helper::system::PluginManager ;; using namespace sofa::simulation;; using namespace sofa::simpleapi;. TEST(MeshMatrixMass, addForce) {; using namespace sofa::core::objectmodel;; setSimulation(new sofa::simulation::graph::DAGSimulation());. // Create the scene; auto root = getSimulation()->createNewNode(""root"");; createObject(root, ""RequiredPlugin"", {{""pluginName"", ""SofaBoundaryCondition SofaEngine SofaTopologyMapping""}});; createObject(root, ""RegularGridTopology"", {{""name"", ""grid""}, {""min"", ""-7.5 -7.5 0""}, {""max"", ""7.5 7.5 80""}, {""n"", ""3 3 9""}});; auto mo = dynamic_cast<sofa::component::container::MechanicalObject<sofa::defaulttype::Vec3Types> *>(; createObject(root, ""MechanicalObject"", {{""name"", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585
https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:394,Usability,simpl,simpleapi,394,"Hey @epernod . Yeah sorry, I'll give a bit more details. The force vector (built from addForce) should be the same (or very close), either you are using a lumped mass matrix or a (full) mass matrix. This was the case before, but isn't anymore. Here a quick unittest that could help:. ```c++; using sofa::helper::system::PluginManager ;; using namespace sofa::simulation;; using namespace sofa::simpleapi;. TEST(MeshMatrixMass, addForce) {; using namespace sofa::core::objectmodel;; setSimulation(new sofa::simulation::graph::DAGSimulation());. // Create the scene; auto root = getSimulation()->createNewNode(""root"");; createObject(root, ""RequiredPlugin"", {{""pluginName"", ""SofaBoundaryCondition SofaEngine SofaTopologyMapping""}});; createObject(root, ""RegularGridTopology"", {{""name"", ""grid""}, {""min"", ""-7.5 -7.5 0""}, {""max"", ""7.5 7.5 80""}, {""n"", ""3 3 9""}});; auto mo = dynamic_cast<sofa::component::container::MechanicalObject<sofa::defaulttype::Vec3Types> *>(; createObject(root, ""MechanicalObject"", {{""name"", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585
https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:3002,Usability,clear,clear,3002,", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_f (VecDeriv(mo->getSize(), {0, 0, 0}));; DataVecDeriv d_f_dia (VecDeriv(mo->getSize(), {0, 0, 0}));. sofa_mass->addForce(&mechanical_parameters, d_f_sofa, mo->x, mo->v);; sofa_mass_diagonal->addForce(&mechanical_parameters, d_f_sofa_dia, mo->x, mo->v);. // Map residual vectors with Eigen to facilitate norm computations; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f ((d_f.getValue().data()->data()), mo->getSize(), 3);; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f_dia ((d_f_dia.getValue().data()->data()), mo->getSize(), 3);. // Compare the norms; EXPECT_DOUBLE_EQ(f.norm(), f_dia.norm());; }; ```. > Maybe the used topology doesn't have edges?. An edge topology should not change anything here. We are integrating the mass density times g over the volumetric domain (tetra). If you are adding edges, then you are integrating a second time the region of an edge (the edge is a part of the tetra's volume). Let me know if something isn't clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585
https://github.com/sofa-framework/sofa/pull/2322#issuecomment-912582014:306,Usability,simpl,simple,306,"> That's cool 👍 especially with scenes with dozens of falling things.... (and penalty contacts 😆); > Just a thought: the 'collapse all' will obviously always show only root, maybe the 'collapse all' should show the first node (i.e root) still expanded ?. Yes, I also thought about it. I decided to keep it simple, but I don't mind doing your suggestion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2322#issuecomment-912582014
https://github.com/sofa-framework/sofa/pull/2322#issuecomment-912583213:324,Usability,simpl,simple,324,"> ; > ; > > That's cool 👍 especially with scenes with dozens of falling things.... (and penalty contacts 😆); > > Just a thought: the 'collapse all' will obviously always show only root, maybe the 'collapse all' should show the first node (i.e root) still expanded ?; > ; > Yes, I also thought about it. I decided to keep it simple, but I don't mind doing your suggestion. Lets see what the other guys will say",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2322#issuecomment-912583213
https://github.com/sofa-framework/sofa/pull/2333#issuecomment-916716382:354,Testability,test,test,354,"> * @fredroy: What should we do with NonUniformHexahedronFEMForceFieldDensity? Its reference is commented in the CMakeLists. I did not touch it.; > . IMO:; - nobody complained about its absence in the project since... ?; - no relevant commits since a loooooooong time; - no example; - almost no doc (although a paper citation is present); - obviously no test; - it needs a kind of file (density volume), but we dont even know the format/standard, and if there is one in the repo already... I would simply delete it 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2333#issuecomment-916716382
https://github.com/sofa-framework/sofa/pull/2333#issuecomment-916716382:498,Usability,simpl,simply,498,"> * @fredroy: What should we do with NonUniformHexahedronFEMForceFieldDensity? Its reference is commented in the CMakeLists. I did not touch it.; > . IMO:; - nobody complained about its absence in the project since... ?; - no relevant commits since a loooooooong time; - no example; - almost no doc (although a paper citation is present); - obviously no test; - it needs a kind of file (density volume), but we dont even know the format/standard, and if there is one in the repo already... I would simply delete it 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2333#issuecomment-916716382
https://github.com/sofa-framework/sofa/pull/2356#issuecomment-925453020:5,Usability,UX,UX,5,"Wow, UX improvements are always so impressive. Especially when it comes with a demo :). +1, the scene graph is so much more readable with this change.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2356#issuecomment-925453020
https://github.com/sofa-framework/sofa/pull/2356#issuecomment-929326581:8,Usability,UX,UX,8,The new UX demo is so clean that it's hard to look again at the old one.; That's what I call perfect work.; Thanks @alxbilger :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2356#issuecomment-929326581
https://github.com/sofa-framework/sofa/issues/2402#issuecomment-1569836914:17,Usability,guid,guide,17,Is this issue to guide devs @fredroy ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2402#issuecomment-1569836914
https://github.com/sofa-framework/sofa/issues/2402#issuecomment-1571110655:72,Usability,guid,guide,72,Let's say it is a target (one would say a dream) to achieve more than a guide 😅,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2402#issuecomment-1571110655
https://github.com/sofa-framework/sofa/pull/2416#issuecomment-981686033:45,Usability,feedback,feedback,45,Thanks for the screenshot @alxbilger and the feedback.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2416#issuecomment-981686033
https://github.com/sofa-framework/sofa/pull/2427#issuecomment-948583464:21,Usability,feedback,feedback,21,thanks a lot for the feedback @alxbilger ; you are perfectly right!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2427#issuecomment-948583464
https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116:45,Integrability,interface,interface,45,"> is it not a problem to add a new class (an interface) to inherit from? does it not make the inheritance tree heavier? This second point is just a remark but obviously not blocking at all. @hugtalbot the answer is not simple (see https://stackoverflow.com/questions/7210412/what-is-the-cost-of-inheritance for example). However, in our case, I think the cost (if any) is negligible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116
https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116:59,Modifiability,inherit,inherit,59,"> is it not a problem to add a new class (an interface) to inherit from? does it not make the inheritance tree heavier? This second point is just a remark but obviously not blocking at all. @hugtalbot the answer is not simple (see https://stackoverflow.com/questions/7210412/what-is-the-cost-of-inheritance for example). However, in our case, I think the cost (if any) is negligible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116
https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116:94,Modifiability,inherit,inheritance,94,"> is it not a problem to add a new class (an interface) to inherit from? does it not make the inheritance tree heavier? This second point is just a remark but obviously not blocking at all. @hugtalbot the answer is not simple (see https://stackoverflow.com/questions/7210412/what-is-the-cost-of-inheritance for example). However, in our case, I think the cost (if any) is negligible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116
https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116:295,Modifiability,inherit,inheritance,295,"> is it not a problem to add a new class (an interface) to inherit from? does it not make the inheritance tree heavier? This second point is just a remark but obviously not blocking at all. @hugtalbot the answer is not simple (see https://stackoverflow.com/questions/7210412/what-is-the-cost-of-inheritance for example). However, in our case, I think the cost (if any) is negligible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116
https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116:219,Usability,simpl,simple,219,"> is it not a problem to add a new class (an interface) to inherit from? does it not make the inheritance tree heavier? This second point is just a remark but obviously not blocking at all. @hugtalbot the answer is not simple (see https://stackoverflow.com/questions/7210412/what-is-the-cost-of-inheritance for example). However, in our case, I think the cost (if any) is negligible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116
https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168:13,Testability,test,test,13,"> Indeed. No test nor scene where impacted?. I tested simple scenes and it seems the simulations run and are plausible, with or without the mistake. I don't think this function is actually tested.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168
https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168:47,Testability,test,tested,47,"> Indeed. No test nor scene where impacted?. I tested simple scenes and it seems the simulations run and are plausible, with or without the mistake. I don't think this function is actually tested.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168
https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168:189,Testability,test,tested,189,"> Indeed. No test nor scene where impacted?. I tested simple scenes and it seems the simulations run and are plausible, with or without the mistake. I don't think this function is actually tested.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168
https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168:54,Usability,simpl,simple,54,"> Indeed. No test nor scene where impacted?. I tested simple scenes and it seems the simulations run and are plausible, with or without the mistake. I don't think this function is actually tested.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168
https://github.com/sofa-framework/sofa/pull/2458#issuecomment-967174468:48,Testability,test,test,48,"I am vsync-limited on my setup so cannot really test.; Lets simply revert this PR, I will see later",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2458#issuecomment-967174468
https://github.com/sofa-framework/sofa/pull/2458#issuecomment-967174468:60,Usability,simpl,simply,60,"I am vsync-limited on my setup so cannot really test.; Lets simply revert this PR, I will see later",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2458#issuecomment-967174468
https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531:97,Availability,error,error,97,"@rgao15 Thanks a lot for the feedback!. I tried to reproduce your issue. On my end, I do have an error message:; ```; [ERROR] [MouseOperation] ConstraintAttachBody performer cannot be created with the picked model.; ```; Let us know if you have the same error message. I am also on Windows. Anyway, I tried to understand what's happening. Why ConstraintAttachBody cannot be created?; It is supposed to be added in a factory here : https://github.com/sofa-framework/sofa/blob/323e20e4168e1ab5b67352f4621d4f1b3fa39be9/modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp#L38; Registration in the factory works BUT not in the right factory.; The factory in `modules/SofaGuiCommon/src/sofa/gui/MouseOperations.cpp` and in `modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp` are different. The factory is a singleton but there are 2 different instances. I confirmed it by printing the factory address. I suspect it's because they are used in different libraries. The question is: how to solve it? And is it the same story for other factories? @fredroy @damienmarchal I would need your help",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531
https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531:254,Availability,error,error,254,"@rgao15 Thanks a lot for the feedback!. I tried to reproduce your issue. On my end, I do have an error message:; ```; [ERROR] [MouseOperation] ConstraintAttachBody performer cannot be created with the picked model.; ```; Let us know if you have the same error message. I am also on Windows. Anyway, I tried to understand what's happening. Why ConstraintAttachBody cannot be created?; It is supposed to be added in a factory here : https://github.com/sofa-framework/sofa/blob/323e20e4168e1ab5b67352f4621d4f1b3fa39be9/modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp#L38; Registration in the factory works BUT not in the right factory.; The factory in `modules/SofaGuiCommon/src/sofa/gui/MouseOperations.cpp` and in `modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp` are different. The factory is a singleton but there are 2 different instances. I confirmed it by printing the factory address. I suspect it's because they are used in different libraries. The question is: how to solve it? And is it the same story for other factories? @fredroy @damienmarchal I would need your help",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531
https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531:103,Integrability,message,message,103,"@rgao15 Thanks a lot for the feedback!. I tried to reproduce your issue. On my end, I do have an error message:; ```; [ERROR] [MouseOperation] ConstraintAttachBody performer cannot be created with the picked model.; ```; Let us know if you have the same error message. I am also on Windows. Anyway, I tried to understand what's happening. Why ConstraintAttachBody cannot be created?; It is supposed to be added in a factory here : https://github.com/sofa-framework/sofa/blob/323e20e4168e1ab5b67352f4621d4f1b3fa39be9/modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp#L38; Registration in the factory works BUT not in the right factory.; The factory in `modules/SofaGuiCommon/src/sofa/gui/MouseOperations.cpp` and in `modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp` are different. The factory is a singleton but there are 2 different instances. I confirmed it by printing the factory address. I suspect it's because they are used in different libraries. The question is: how to solve it? And is it the same story for other factories? @fredroy @damienmarchal I would need your help",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531
https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531:260,Integrability,message,message,260,"@rgao15 Thanks a lot for the feedback!. I tried to reproduce your issue. On my end, I do have an error message:; ```; [ERROR] [MouseOperation] ConstraintAttachBody performer cannot be created with the picked model.; ```; Let us know if you have the same error message. I am also on Windows. Anyway, I tried to understand what's happening. Why ConstraintAttachBody cannot be created?; It is supposed to be added in a factory here : https://github.com/sofa-framework/sofa/blob/323e20e4168e1ab5b67352f4621d4f1b3fa39be9/modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp#L38; Registration in the factory works BUT not in the right factory.; The factory in `modules/SofaGuiCommon/src/sofa/gui/MouseOperations.cpp` and in `modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp` are different. The factory is a singleton but there are 2 different instances. I confirmed it by printing the factory address. I suspect it's because they are used in different libraries. The question is: how to solve it? And is it the same story for other factories? @fredroy @damienmarchal I would need your help",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531
https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531:164,Performance,perform,performer,164,"@rgao15 Thanks a lot for the feedback!. I tried to reproduce your issue. On my end, I do have an error message:; ```; [ERROR] [MouseOperation] ConstraintAttachBody performer cannot be created with the picked model.; ```; Let us know if you have the same error message. I am also on Windows. Anyway, I tried to understand what's happening. Why ConstraintAttachBody cannot be created?; It is supposed to be added in a factory here : https://github.com/sofa-framework/sofa/blob/323e20e4168e1ab5b67352f4621d4f1b3fa39be9/modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp#L38; Registration in the factory works BUT not in the right factory.; The factory in `modules/SofaGuiCommon/src/sofa/gui/MouseOperations.cpp` and in `modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp` are different. The factory is a singleton but there are 2 different instances. I confirmed it by printing the factory address. I suspect it's because they are used in different libraries. The question is: how to solve it? And is it the same story for other factories? @fredroy @damienmarchal I would need your help",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531
https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531:29,Usability,feedback,feedback,29,"@rgao15 Thanks a lot for the feedback!. I tried to reproduce your issue. On my end, I do have an error message:; ```; [ERROR] [MouseOperation] ConstraintAttachBody performer cannot be created with the picked model.; ```; Let us know if you have the same error message. I am also on Windows. Anyway, I tried to understand what's happening. Why ConstraintAttachBody cannot be created?; It is supposed to be added in a factory here : https://github.com/sofa-framework/sofa/blob/323e20e4168e1ab5b67352f4621d4f1b3fa39be9/modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp#L38; Registration in the factory works BUT not in the right factory.; The factory in `modules/SofaGuiCommon/src/sofa/gui/MouseOperations.cpp` and in `modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp` are different. The factory is a singleton but there are 2 different instances. I confirmed it by printing the factory address. I suspect it's because they are used in different libraries. The question is: how to solve it? And is it the same story for other factories? @fredroy @damienmarchal I would need your help",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531
https://github.com/sofa-framework/sofa/pull/2512#issuecomment-981677782:270,Deployability,update,update,270,"I all,. I have improved the whole mecanism so now it is off by default and we can activate it selectively (progressively) ; per component during their registration in the factory. I also added a mecanism to handle in a smooth way the deprecation of aliases as well as a update the SceneCheckUsingAlias checker. . I don't see a lot of drawback for all this work, while I see a lot of benefits, so feedback welcome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-981677782
https://github.com/sofa-framework/sofa/pull/2512#issuecomment-981677782:396,Usability,feedback,feedback,396,"I all,. I have improved the whole mecanism so now it is off by default and we can activate it selectively (progressively) ; per component during their registration in the factory. I also added a mecanism to handle in a smooth way the deprecation of aliases as well as a update the SceneCheckUsingAlias checker. . I don't see a lot of drawback for all this work, while I see a lot of benefits, so feedback welcome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-981677782
https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:56,Deployability,integrat,integrate,56,"Hello @alxbilger,. Thank for the careful review, I will integrate that if the feature is considered worth for inclusion. . About the ""addTargetName"" question. . The initial version proposed was using automatic registration of the target name and I can revert back to this one. ; But I proposed a second, explicit, approach for two reasons:; - the automatic mecanism force the deployement of the new approach for all the sofa code components at once... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder i",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615
https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:376,Deployability,deploy,deployement,376,"Hello @alxbilger,. Thank for the careful review, I will integrate that if the feature is considered worth for inclusion. . About the ""addTargetName"" question. . The initial version proposed was using automatic registration of the target name and I can revert back to this one. ; But I proposed a second, explicit, approach for two reasons:; - the automatic mecanism force the deployement of the new approach for all the sofa code components at once... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder i",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615
https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:56,Integrability,integrat,integrate,56,"Hello @alxbilger,. Thank for the careful review, I will integrate that if the feature is considered worth for inclusion. . About the ""addTargetName"" question. . The initial version proposed was using automatic registration of the target name and I can revert back to this one. ; But I proposed a second, explicit, approach for two reasons:; - the automatic mecanism force the deployement of the new approach for all the sofa code components at once... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder i",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615
https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:1210,Modifiability,config,config,1210," automatic registration of the target name and I can revert back to this one. ; But I proposed a second, explicit, approach for two reasons:; - the automatic mecanism force the deployement of the new approach for all the sofa code components at once... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder if going for things like ; ```cpp; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; .addTargetName(""SofaOpenglVisual""); ``` ; or even:; ```cp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615
https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:1599,Modifiability,config,config,1599,"e... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder if going for things like ; ```cpp; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; .addTargetName(""SofaOpenglVisual""); ``` ; or even:; ```cpp; int DataDisplayClass = core::RegisterObject(); .setClassName(""DataDisplay""), ; .setTargetName(""SofaOpenglVisual""), ; .setDocString(""Rendering of meshes colored by data""); .addCreator<DataDisplay>();; ``` ; Would not make things much more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615
https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:1671,Modifiability,config,config,1671,"e... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder if going for things like ; ```cpp; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; .addTargetName(""SofaOpenglVisual""); ``` ; or even:; ```cpp; int DataDisplayClass = core::RegisterObject(); .setClassName(""DataDisplay""), ; .setTargetName(""SofaOpenglVisual""), ; .setDocString(""Rendering of meshes colored by data""); .addCreator<DataDisplay>();; ``` ; Would not make things much more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615
https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:1792,Modifiability,config,config,1792,"e... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder if going for things like ; ```cpp; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; .addTargetName(""SofaOpenglVisual""); ``` ; or even:; ```cpp; int DataDisplayClass = core::RegisterObject(); .setClassName(""DataDisplay""), ; .setTargetName(""SofaOpenglVisual""), ; .setDocString(""Rendering of meshes colored by data""); .addCreator<DataDisplay>();; ``` ; Would not make things much more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615
https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:2441,Usability,clear,clear,2441,"e... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder if going for things like ; ```cpp; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; .addTargetName(""SofaOpenglVisual""); ``` ; or even:; ```cpp; int DataDisplayClass = core::RegisterObject(); .setClassName(""DataDisplay""), ; .setTargetName(""SofaOpenglVisual""), ; .setDocString(""Rendering of meshes colored by data""); .addCreator<DataDisplay>();; ``` ; Would not make things much more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615
https://github.com/sofa-framework/sofa/pull/2512#issuecomment-994673970:57,Testability,test,tested,57,"TODO: Component must have an S (components), and must be tested first; Add to guidelines: vector data must include an “s” to specify that there is several info",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-994673970
https://github.com/sofa-framework/sofa/pull/2512#issuecomment-994673970:78,Usability,guid,guidelines,78,"TODO: Component must have an S (components), and must be tested first; Add to guidelines: vector data must include an “s” to specify that there is several info",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-994673970
https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1534342157:26,Usability,simpl,simplify,26,This PR was considered to simplify the dev of #2777 but it is no longer required.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1534342157
https://github.com/sofa-framework/sofa/pull/2613#issuecomment-1023300619:154,Usability,simpl,simple,154,"Following the discussions of dev meeting, it is possible to add custom filters to Doxygen to parse initData as a member comment. Tested successfully on a simple example :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2613#issuecomment-1023300619
https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1048622163:39,Usability,feedback,feedback,39,On this pull-request we would need the feedback of @Younesssss and @ChristianDuriez about how to sort the mapping components in SOFA? How should be differentiated the different kind of mappings?. Your input is important to us for NG.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1048622163
https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1054038880:41,Usability,feedback,feedback,41,"> On this pull-request we would need the feedback of @Younesssss and @ChristianDuriez about how to sort the mapping components in SOFA? How should be differentiated the different kind of mappings?; > ; > Your input is important to us for NG. I can organize a meeting with @ChristianDuriez, @guparan, @fredroy around this subject. Maybe it's better that way?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1054038880
https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1054042237:43,Usability,feedback,feedback,43,"> > On this pull-request we would need the feedback of @Younesssss and @ChristianDuriez about how to sort the mapping components in SOFA? How should be differentiated the different kind of mappings?; > > Your input is important to us for NG.; > ; > I can organize a meeting with @ChristianDuriez, @guparan, @fredroy around this subject. Maybe it's better that way?. It would be great yes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1054042237
https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028148021:131,Availability,error,error,131,"Seems VS2017 is not happy ; ```; j:\0\src\sofakernel\modules\sofabasemechanics\src\sofabasemechanics\diagonalmass.inl(573) : fatal error C1001: An internal error has occurred in the compiler.; (compiler file 'd:\agent\_work\1\s\src\vctools\compiler\utc\src\p2\main.c', line 187); To work around this problem, try simplifying or changing the program near the locations listed above.; Please choose the Technical Support command on the Visual C++ ; Help menu, or open the Technical Support help file for more information; ```; but we are ditching vs2017, right ? 😗. Or it could be that the CI is on a VM, maybe the vCPU is also at fault here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028148021
https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028148021:156,Availability,error,error,156,"Seems VS2017 is not happy ; ```; j:\0\src\sofakernel\modules\sofabasemechanics\src\sofabasemechanics\diagonalmass.inl(573) : fatal error C1001: An internal error has occurred in the compiler.; (compiler file 'd:\agent\_work\1\s\src\vctools\compiler\utc\src\p2\main.c', line 187); To work around this problem, try simplifying or changing the program near the locations listed above.; Please choose the Technical Support command on the Visual C++ ; Help menu, or open the Technical Support help file for more information; ```; but we are ditching vs2017, right ? 😗. Or it could be that the CI is on a VM, maybe the vCPU is also at fault here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028148021
https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028148021:629,Availability,fault,fault,629,"Seems VS2017 is not happy ; ```; j:\0\src\sofakernel\modules\sofabasemechanics\src\sofabasemechanics\diagonalmass.inl(573) : fatal error C1001: An internal error has occurred in the compiler.; (compiler file 'd:\agent\_work\1\s\src\vctools\compiler\utc\src\p2\main.c', line 187); To work around this problem, try simplifying or changing the program near the locations listed above.; Please choose the Technical Support command on the Visual C++ ; Help menu, or open the Technical Support help file for more information; ```; but we are ditching vs2017, right ? 😗. Or it could be that the CI is on a VM, maybe the vCPU is also at fault here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028148021
https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028148021:313,Usability,simpl,simplifying,313,"Seems VS2017 is not happy ; ```; j:\0\src\sofakernel\modules\sofabasemechanics\src\sofabasemechanics\diagonalmass.inl(573) : fatal error C1001: An internal error has occurred in the compiler.; (compiler file 'd:\agent\_work\1\s\src\vctools\compiler\utc\src\p2\main.c', line 187); To work around this problem, try simplifying or changing the program near the locations listed above.; Please choose the Technical Support command on the Visual C++ ; Help menu, or open the Technical Support help file for more information; ```; but we are ditching vs2017, right ? 😗. Or it could be that the CI is on a VM, maybe the vCPU is also at fault here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028148021
https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936:238,Modifiability,plugin,plugins,238,"Thanks for the PR @alxbilger ; I notify here @courtecuisse since he could have valuable feedback / review on this simple parallelization of the LDL factorization. Feedback could also be nice to factorize things and make sure some private plugins can rely on this solver. By the way, it also follows the design proposed several years ago (4!) by @damienmarchal in this branch: https://github.com/SofaDefrost/sofa/tree/pluginSofaCoreAsync",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936
https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936:417,Modifiability,plugin,pluginSofaCoreAsync,417,"Thanks for the PR @alxbilger ; I notify here @courtecuisse since he could have valuable feedback / review on this simple parallelization of the LDL factorization. Feedback could also be nice to factorize things and make sure some private plugins can rely on this solver. By the way, it also follows the design proposed several years ago (4!) by @damienmarchal in this branch: https://github.com/SofaDefrost/sofa/tree/pluginSofaCoreAsync",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936
https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936:88,Usability,feedback,feedback,88,"Thanks for the PR @alxbilger ; I notify here @courtecuisse since he could have valuable feedback / review on this simple parallelization of the LDL factorization. Feedback could also be nice to factorize things and make sure some private plugins can rely on this solver. By the way, it also follows the design proposed several years ago (4!) by @damienmarchal in this branch: https://github.com/SofaDefrost/sofa/tree/pluginSofaCoreAsync",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936
https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936:114,Usability,simpl,simple,114,"Thanks for the PR @alxbilger ; I notify here @courtecuisse since he could have valuable feedback / review on this simple parallelization of the LDL factorization. Feedback could also be nice to factorize things and make sure some private plugins can rely on this solver. By the way, it also follows the design proposed several years ago (4!) by @damienmarchal in this branch: https://github.com/SofaDefrost/sofa/tree/pluginSofaCoreAsync",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936
https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056667710:263,Modifiability,plugin,plugin,263,thanks a lot all for your feedback all!; @EulalieCoevoet would be great to have that example added.; @ChristianDuriez definitely a big thumb up :+1: for the URDF support. Maud Marchal stressed out the importance of this aspect as well !. Let's create a dedicated plugin @fredroy as you proposed,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056667710
https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056667710:26,Usability,feedback,feedback,26,thanks a lot all for your feedback all!; @EulalieCoevoet would be great to have that example added.; @ChristianDuriez definitely a big thumb up :+1: for the URDF support. Maud Marchal stressed out the importance of this aspect as well !. Let's create a dedicated plugin @fredroy as you proposed,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056667710
https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818:58,Integrability,depend,dependency,58,"Hi Fred, . The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. ; Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818
https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818:147,Integrability,depend,dependency,147,"Hi Fred, . The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. ; Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818
https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818:95,Testability,test,testing,95,"Hi Fred, . The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. ; Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818
https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818:214,Testability,test,testing,214,"Hi Fred, . The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. ; Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818
https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818:182,Usability,simpl,simpleapi,182,"Hi Fred, . The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. ; Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818
https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403:65,Integrability,depend,dependency,65,"> Hi Fred,; > ; > The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator. I have to admit that I did not see that the DataEngineTestCreation.h file was using scenecreator itself, and this is a good idea to do it while sofang'ing. But I would prefer to do that in a further PR to not block my other sofang PRs 😗.; Except if it is trivial to remove/replace 🙃",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403
https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403:152,Integrability,depend,dependency,152,"> Hi Fred,; > ; > The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator. I have to admit that I did not see that the DataEngineTestCreation.h file was using scenecreator itself, and this is a good idea to do it while sofang'ing. But I would prefer to do that in a further PR to not block my other sofang PRs 😗.; Except if it is trivial to remove/replace 🙃",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403
https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403:102,Testability,test,testing,102,"> Hi Fred,; > ; > The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator. I have to admit that I did not see that the DataEngineTestCreation.h file was using scenecreator itself, and this is a good idea to do it while sofang'ing. But I would prefer to do that in a further PR to not block my other sofang PRs 😗.; Except if it is trivial to remove/replace 🙃",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403
https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403:219,Testability,test,testing,219,"> Hi Fred,; > ; > The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator. I have to admit that I did not see that the DataEngineTestCreation.h file was using scenecreator itself, and this is a good idea to do it while sofang'ing. But I would prefer to do that in a further PR to not block my other sofang PRs 😗.; Except if it is trivial to remove/replace 🙃",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403
https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403:187,Usability,simpl,simpleapi,187,"> Hi Fred,; > ; > The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator. I have to admit that I did not see that the DataEngineTestCreation.h file was using scenecreator itself, and this is a good idea to do it while sofang'ing. But I would prefer to do that in a further PR to not block my other sofang PRs 😗.; Except if it is trivial to remove/replace 🙃",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403
https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056739968:20,Usability,feedback,feedback,20,@TheGreatLudini any feedback ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056739968
https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056847653:1344,Deployability,update,updated,1344,",. I just had a look in the code and the associated paper ([link](https://hal.inria.fr/file/index/docid/394480/filename/NPF05.pdf)). @alxbilger, there are two `computeStress` methods in TriangularFEMForceField, with the following signatures :; ```; void computeStress(type::Vec<3,Real> &stress, Index elementIndex);; ```; and; ```; void computeStress(type::Vec<3,Real> &stress, const MaterialStiffness &K, const type::Vec<3,Real> &strain);; ```; Only the first one seems to use the same pattern as in `computeForce` (with the call to `computeStrainDisplacement` conditioned by `_anisotropicMaterial`), in case of small deformation, which is - as you pointed out - incoherent with what is in `computeForce`.; However this `computeStress` method with this signature is apparently used only in ; ```; void computeStressAlongDirection(Real &stress_along_dir, Index elementIndex, const Coord &direction);; ```; which itself is used only in both `computeStressAcrossDirection` methods, and (finally) these are apparently not called anywhere.; So, _bottomline_: even though the code in `computeStress` is incoherent with the code in `computeForce`, it's actually not used and - I guess - should be cleaned rather than made coherent. Regarding the initial issue, what I understand from the paper is that the strain-displacement matrix **should be updated at each time step** in case of large deformations. It seems to be clearly stated in the introduction, and demonstrated later in the text (section 2.3). I have a doubt if this is necessary in case of small displacement (for me the paper focuses on large deformation), but even in this case, the current implementation is not coherent (the update should be made in case of large displacement and could be saved in case of small displacement).; I think it's worth highlighting that it was actually the case at first, but it seems to have been changed in this [commit](https://github.com/sofa-framework/sofa/commit/b7d68ef394f703957e7a00037f88d7abeed82d24).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056847653
https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056847653:1690,Deployability,update,update,1690,",. I just had a look in the code and the associated paper ([link](https://hal.inria.fr/file/index/docid/394480/filename/NPF05.pdf)). @alxbilger, there are two `computeStress` methods in TriangularFEMForceField, with the following signatures :; ```; void computeStress(type::Vec<3,Real> &stress, Index elementIndex);; ```; and; ```; void computeStress(type::Vec<3,Real> &stress, const MaterialStiffness &K, const type::Vec<3,Real> &strain);; ```; Only the first one seems to use the same pattern as in `computeForce` (with the call to `computeStrainDisplacement` conditioned by `_anisotropicMaterial`), in case of small deformation, which is - as you pointed out - incoherent with what is in `computeForce`.; However this `computeStress` method with this signature is apparently used only in ; ```; void computeStressAlongDirection(Real &stress_along_dir, Index elementIndex, const Coord &direction);; ```; which itself is used only in both `computeStressAcrossDirection` methods, and (finally) these are apparently not called anywhere.; So, _bottomline_: even though the code in `computeStress` is incoherent with the code in `computeForce`, it's actually not used and - I guess - should be cleaned rather than made coherent. Regarding the initial issue, what I understand from the paper is that the strain-displacement matrix **should be updated at each time step** in case of large deformations. It seems to be clearly stated in the introduction, and demonstrated later in the text (section 2.3). I have a doubt if this is necessary in case of small displacement (for me the paper focuses on large deformation), but even in this case, the current implementation is not coherent (the update should be made in case of large displacement and could be saved in case of small displacement).; I think it's worth highlighting that it was actually the case at first, but it seems to have been changed in this [commit](https://github.com/sofa-framework/sofa/commit/b7d68ef394f703957e7a00037f88d7abeed82d24).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056847653
https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056847653:1418,Usability,clear,clearly,1418,",. I just had a look in the code and the associated paper ([link](https://hal.inria.fr/file/index/docid/394480/filename/NPF05.pdf)). @alxbilger, there are two `computeStress` methods in TriangularFEMForceField, with the following signatures :; ```; void computeStress(type::Vec<3,Real> &stress, Index elementIndex);; ```; and; ```; void computeStress(type::Vec<3,Real> &stress, const MaterialStiffness &K, const type::Vec<3,Real> &strain);; ```; Only the first one seems to use the same pattern as in `computeForce` (with the call to `computeStrainDisplacement` conditioned by `_anisotropicMaterial`), in case of small deformation, which is - as you pointed out - incoherent with what is in `computeForce`.; However this `computeStress` method with this signature is apparently used only in ; ```; void computeStressAlongDirection(Real &stress_along_dir, Index elementIndex, const Coord &direction);; ```; which itself is used only in both `computeStressAcrossDirection` methods, and (finally) these are apparently not called anywhere.; So, _bottomline_: even though the code in `computeStress` is incoherent with the code in `computeForce`, it's actually not used and - I guess - should be cleaned rather than made coherent. Regarding the initial issue, what I understand from the paper is that the strain-displacement matrix **should be updated at each time step** in case of large deformations. It seems to be clearly stated in the introduction, and demonstrated later in the text (section 2.3). I have a doubt if this is necessary in case of small displacement (for me the paper focuses on large deformation), but even in this case, the current implementation is not coherent (the update should be made in case of large displacement and could be saved in case of small displacement).; I think it's worth highlighting that it was actually the case at first, but it seems to have been changed in this [commit](https://github.com/sofa-framework/sofa/commit/b7d68ef394f703957e7a00037f88d7abeed82d24).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056847653
https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1057066085:35,Usability,clear,clearly,35,"`computeStressAcrossDirection` was clearly for tearing, are you using it yourself @epernod?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1057066085
https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1060361474:160,Deployability,update,updated,160,"Hi everyone, sorry for taking so long to further explain my PR. I fully agree with @Camille-K, the referenced paper states it clearly that the matrix should be updated at each time step.; Thanks for merging my PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1060361474
https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1060361474:126,Usability,clear,clearly,126,"Hi everyone, sorry for taking so long to further explain my PR. I fully agree with @Camille-K, the referenced paper states it clearly that the matrix should be updated at each time step.; Thanks for merging my PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1060361474
https://github.com/sofa-framework/sofa/pull/2712#issuecomment-1054507393:480,Usability,clear,clearly,480,"@hugtalbot ; - it is not related to #1087, ; - it is more to prepare the evolution from the class that mix in a single object a static/singleton part of the object and a part that shouldn't be one. It was often said in discussion that such design was highly questionnable. ; - i prefer to have such move before implementing the import/namespace in the factory demonstrated in https://github.com/sofa-framework/sofa/pull/2512; ; About the use of the ""future"" namespace I use it to clearly show that there is two ""ObjectFactory"". The one with the old API (and it fully backward compatible) and the one with the new API. I could of course have mixed everything (the old and the new API) in a single one object but I found it quite convenient to clearly see the objects future::ObjectFatory and ObjectFactoryInstance in their final state and well separated from the ""compatbility"" layer in ObjectFactory. ; I could have use a different class name for future::ObjectFactory like NewObjectFactory but this is would have been behaving exactly like having a namespace glued to the class name (actually I see this a namespace hidden in the classname so people don't notice it is one ;)); I also consider using the approach of SofaNG to make deprecation but this only work if we move the new version of the object to be in a different namespace that the one we want to deprecate. In the present case I wasn't sure we really want to move sofa::core;;ObjectFactory somewhere less, if you find an appropriate suggestion i would be very welcome as I would found that easier than using the ""extra"" namespace. ; In NG we often do such a thing but this is done like that:; 1) move the new API to a new namespace (eg: sofa::type::); 2) make a deprecation layer (eg: sofa::defaulttypes::); In the ObjectFactory cas I'm not sure there is a need to have the new api moved in a new namespace (I see no problem in having it in sofa::core) . EDIT: and ""future"" this is nothing related to master branch. As being in master bra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2712#issuecomment-1054507393
https://github.com/sofa-framework/sofa/pull/2712#issuecomment-1054507393:742,Usability,clear,clearly,742,"@hugtalbot ; - it is not related to #1087, ; - it is more to prepare the evolution from the class that mix in a single object a static/singleton part of the object and a part that shouldn't be one. It was often said in discussion that such design was highly questionnable. ; - i prefer to have such move before implementing the import/namespace in the factory demonstrated in https://github.com/sofa-framework/sofa/pull/2512; ; About the use of the ""future"" namespace I use it to clearly show that there is two ""ObjectFactory"". The one with the old API (and it fully backward compatible) and the one with the new API. I could of course have mixed everything (the old and the new API) in a single one object but I found it quite convenient to clearly see the objects future::ObjectFatory and ObjectFactoryInstance in their final state and well separated from the ""compatbility"" layer in ObjectFactory. ; I could have use a different class name for future::ObjectFactory like NewObjectFactory but this is would have been behaving exactly like having a namespace glued to the class name (actually I see this a namespace hidden in the classname so people don't notice it is one ;)); I also consider using the approach of SofaNG to make deprecation but this only work if we move the new version of the object to be in a different namespace that the one we want to deprecate. In the present case I wasn't sure we really want to move sofa::core;;ObjectFactory somewhere less, if you find an appropriate suggestion i would be very welcome as I would found that easier than using the ""extra"" namespace. ; In NG we often do such a thing but this is done like that:; 1) move the new API to a new namespace (eg: sofa::type::); 2) make a deprecation layer (eg: sofa::defaulttypes::); In the ObjectFactory cas I'm not sure there is a need to have the new api moved in a new namespace (I see no problem in having it in sofa::core) . EDIT: and ""future"" this is nothing related to master branch. As being in master bra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2712#issuecomment-1054507393
https://github.com/sofa-framework/sofa/pull/2742#issuecomment-1081495442:266,Usability,pause,pause,266,> 1. Is `iterationCounter` reset when you press the reset button?; > ; It is reset to 0 in method: void RealGUI::resetScene(). > 2. What's the difference between `iterationCounter` and `frameCounter`?. the only diff I see is that frameCounter is reset to 0 when you pause/play the scene. I assume it is just used as counter for the FPS calculation. You could remove this reset to 0 and use it instead of the new iterationCounter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2742#issuecomment-1081495442
https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1063030017:1661,Modifiability,plugin,pluginName,1661,"void handleEvent(sofa::core::objectmodel::Event* event); {; using namespace sofa::helper;; using namespace sofa::core::objectmodel;; using namespace sofa::core::behavior;. if (simulation::AnimateBeginEvent::checkEventType(event)); {; std::cout << ""onAnimateBeginEvent"" << std::endl;; auto moValue = sofa::helper::getWriteAccessor(*m_mo->write(core::VecCoordId::position()));; std::cout << moValue[0] << std::endl;; moValue[0] = moValue[0] + type::Vec3{ 1.0, 2.0, 3.0 };; std::cout << moValue[0] << std::endl;; }. if (simulation::AnimateEndEvent::checkEventType(event)); {; std::cout << ""onAnimateEndEvent"" << std::endl;; auto moValue = sofa::helper::getReadAccessor(*m_mo->read(core::VecCoordId::position()));; std::cout << moValue[0] << std::endl;; }; }. };; ```. ```c++; Simulation::SPtr simu = createSimulation(""DAG"");; Node::SPtr root = createRootNode(simu, ""root"");; sofa::component::initSofaBaseUtils();. simpleapi::createObject(root, ""RequiredPlugin"", { { ""pluginName"", ""SofaBaseMechanics""} });; simpleapi::createObject(root, ""RequiredPlugin"", { { ""pluginName"", ""PluginExample""} });. auto meca = createObject(root, ""MechanicalObject"", {; {""name"", ""MO""},; {""template"", ""Vec3d""},; {""position"", ""1 0 0""}; });; ; using MechaObjVec3 = sofa::component::container::MechanicalObject<defaulttype::Vec3Types>;; MechaObjVec3* mecaobj = dynamic_cast<MechaObjVec3*>(meca.get());; ; auto tcom = createObject(root, ""MyTestComponent"", {; {""position"", ""@MO.position""},; });. //auto cont = createObject(root, ""MyTestController"", {; // {""MO"", ""@MO""},; // }); . sofa::component::behaviormodel::MyTestController::SPtr cont = sofa::core::objectmodel::New<sofa::component::behaviormodel::MyTestController>(mecaobj);; root->addObject(cont);; ; sofa::simulation::getSimulation()->init(root.get());. sofa::simulation::getSimulation()->animate(root.get(), 0.01);; ```. ```; onAnimateBeginEvent; 1 0 0; 2 2 3; onAnimateEndEvent; 2 2 3; ```. (the controller just adding {1,2,3} to the mecha.position[0]). With both cases (",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1063030017
https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1063030017:1753,Modifiability,plugin,pluginName,1753,"void handleEvent(sofa::core::objectmodel::Event* event); {; using namespace sofa::helper;; using namespace sofa::core::objectmodel;; using namespace sofa::core::behavior;. if (simulation::AnimateBeginEvent::checkEventType(event)); {; std::cout << ""onAnimateBeginEvent"" << std::endl;; auto moValue = sofa::helper::getWriteAccessor(*m_mo->write(core::VecCoordId::position()));; std::cout << moValue[0] << std::endl;; moValue[0] = moValue[0] + type::Vec3{ 1.0, 2.0, 3.0 };; std::cout << moValue[0] << std::endl;; }. if (simulation::AnimateEndEvent::checkEventType(event)); {; std::cout << ""onAnimateEndEvent"" << std::endl;; auto moValue = sofa::helper::getReadAccessor(*m_mo->read(core::VecCoordId::position()));; std::cout << moValue[0] << std::endl;; }; }. };; ```. ```c++; Simulation::SPtr simu = createSimulation(""DAG"");; Node::SPtr root = createRootNode(simu, ""root"");; sofa::component::initSofaBaseUtils();. simpleapi::createObject(root, ""RequiredPlugin"", { { ""pluginName"", ""SofaBaseMechanics""} });; simpleapi::createObject(root, ""RequiredPlugin"", { { ""pluginName"", ""PluginExample""} });. auto meca = createObject(root, ""MechanicalObject"", {; {""name"", ""MO""},; {""template"", ""Vec3d""},; {""position"", ""1 0 0""}; });; ; using MechaObjVec3 = sofa::component::container::MechanicalObject<defaulttype::Vec3Types>;; MechaObjVec3* mecaobj = dynamic_cast<MechaObjVec3*>(meca.get());; ; auto tcom = createObject(root, ""MyTestComponent"", {; {""position"", ""@MO.position""},; });. //auto cont = createObject(root, ""MyTestController"", {; // {""MO"", ""@MO""},; // }); . sofa::component::behaviormodel::MyTestController::SPtr cont = sofa::core::objectmodel::New<sofa::component::behaviormodel::MyTestController>(mecaobj);; root->addObject(cont);; ; sofa::simulation::getSimulation()->init(root.get());. sofa::simulation::getSimulation()->animate(root.get(), 0.01);; ```. ```; onAnimateBeginEvent; 1 0 0; 2 2 3; onAnimateEndEvent; 2 2 3; ```. (the controller just adding {1,2,3} to the mecha.position[0]). With both cases (",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1063030017
https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1063030017:1608,Usability,simpl,simpleapi,1608,"void handleEvent(sofa::core::objectmodel::Event* event); {; using namespace sofa::helper;; using namespace sofa::core::objectmodel;; using namespace sofa::core::behavior;. if (simulation::AnimateBeginEvent::checkEventType(event)); {; std::cout << ""onAnimateBeginEvent"" << std::endl;; auto moValue = sofa::helper::getWriteAccessor(*m_mo->write(core::VecCoordId::position()));; std::cout << moValue[0] << std::endl;; moValue[0] = moValue[0] + type::Vec3{ 1.0, 2.0, 3.0 };; std::cout << moValue[0] << std::endl;; }. if (simulation::AnimateEndEvent::checkEventType(event)); {; std::cout << ""onAnimateEndEvent"" << std::endl;; auto moValue = sofa::helper::getReadAccessor(*m_mo->read(core::VecCoordId::position()));; std::cout << moValue[0] << std::endl;; }; }. };; ```. ```c++; Simulation::SPtr simu = createSimulation(""DAG"");; Node::SPtr root = createRootNode(simu, ""root"");; sofa::component::initSofaBaseUtils();. simpleapi::createObject(root, ""RequiredPlugin"", { { ""pluginName"", ""SofaBaseMechanics""} });; simpleapi::createObject(root, ""RequiredPlugin"", { { ""pluginName"", ""PluginExample""} });. auto meca = createObject(root, ""MechanicalObject"", {; {""name"", ""MO""},; {""template"", ""Vec3d""},; {""position"", ""1 0 0""}; });; ; using MechaObjVec3 = sofa::component::container::MechanicalObject<defaulttype::Vec3Types>;; MechaObjVec3* mecaobj = dynamic_cast<MechaObjVec3*>(meca.get());; ; auto tcom = createObject(root, ""MyTestComponent"", {; {""position"", ""@MO.position""},; });. //auto cont = createObject(root, ""MyTestController"", {; // {""MO"", ""@MO""},; // }); . sofa::component::behaviormodel::MyTestController::SPtr cont = sofa::core::objectmodel::New<sofa::component::behaviormodel::MyTestController>(mecaobj);; root->addObject(cont);; ; sofa::simulation::getSimulation()->init(root.get());. sofa::simulation::getSimulation()->animate(root.get(), 0.01);; ```. ```; onAnimateBeginEvent; 1 0 0; 2 2 3; onAnimateEndEvent; 2 2 3; ```. (the controller just adding {1,2,3} to the mecha.position[0]). With both cases (",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1063030017
https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1063030017:1700,Usability,simpl,simpleapi,1700,"void handleEvent(sofa::core::objectmodel::Event* event); {; using namespace sofa::helper;; using namespace sofa::core::objectmodel;; using namespace sofa::core::behavior;. if (simulation::AnimateBeginEvent::checkEventType(event)); {; std::cout << ""onAnimateBeginEvent"" << std::endl;; auto moValue = sofa::helper::getWriteAccessor(*m_mo->write(core::VecCoordId::position()));; std::cout << moValue[0] << std::endl;; moValue[0] = moValue[0] + type::Vec3{ 1.0, 2.0, 3.0 };; std::cout << moValue[0] << std::endl;; }. if (simulation::AnimateEndEvent::checkEventType(event)); {; std::cout << ""onAnimateEndEvent"" << std::endl;; auto moValue = sofa::helper::getReadAccessor(*m_mo->read(core::VecCoordId::position()));; std::cout << moValue[0] << std::endl;; }; }. };; ```. ```c++; Simulation::SPtr simu = createSimulation(""DAG"");; Node::SPtr root = createRootNode(simu, ""root"");; sofa::component::initSofaBaseUtils();. simpleapi::createObject(root, ""RequiredPlugin"", { { ""pluginName"", ""SofaBaseMechanics""} });; simpleapi::createObject(root, ""RequiredPlugin"", { { ""pluginName"", ""PluginExample""} });. auto meca = createObject(root, ""MechanicalObject"", {; {""name"", ""MO""},; {""template"", ""Vec3d""},; {""position"", ""1 0 0""}; });; ; using MechaObjVec3 = sofa::component::container::MechanicalObject<defaulttype::Vec3Types>;; MechaObjVec3* mecaobj = dynamic_cast<MechaObjVec3*>(meca.get());; ; auto tcom = createObject(root, ""MyTestComponent"", {; {""position"", ""@MO.position""},; });. //auto cont = createObject(root, ""MyTestController"", {; // {""MO"", ""@MO""},; // }); . sofa::component::behaviormodel::MyTestController::SPtr cont = sofa::core::objectmodel::New<sofa::component::behaviormodel::MyTestController>(mecaobj);; root->addObject(cont);; ; sofa::simulation::getSimulation()->init(root.get());. sofa::simulation::getSimulation()->animate(root.get(), 0.01);; ```. ```; onAnimateBeginEvent; 1 0 0; 2 2 3; onAnimateEndEvent; 2 2 3; ```. (the controller just adding {1,2,3} to the mecha.position[0]). With both cases (",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1063030017
https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432007612:90,Usability,feedback,feedback,90,Excellent ! Just make sure that you have an assembled matrix in the scene. Thanks for the feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432007612
https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1469608892:17,Testability,test,tested,17,"Hi all, . It was tested two weeks ago at Defrost, @EulalieCoevoet try our tutorials/tripods and it works like a charm. @TanguyNav found a bug that was reported. To us, it is going in the right direction and we support the merge of this work. . We hope the rest of the community will provide feedback asap.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1469608892
https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1469608892:291,Usability,feedback,feedback,291,"Hi all, . It was tested two weeks ago at Defrost, @EulalieCoevoet try our tutorials/tripods and it works like a charm. @TanguyNav found a bug that was reported. To us, it is going in the right direction and we support the merge of this work. . We hope the rest of the community will provide feedback asap.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1469608892
https://github.com/sofa-framework/sofa/pull/2787#issuecomment-1067804077:15,Usability,feedback,feedback,15,Thanks for the feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2787#issuecomment-1067804077
https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418:36,Modifiability,coupling,coupling,36,"Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418
https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418:15,Safety,avoid,avoid,15,"Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418
https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418:100,Usability,simpl,simpleapi,100,"Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418
https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174:38,Modifiability,coupling,coupling,38,"> Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app. I wanted to keep the direct usage of the components and direct linking with lib, for eventual people who would want to manipulate the components directly (because why not). This PR comes from the discussion https://github.com/sofa-framework/sofa/discussions/2785 which pointed to a (really) deprecated piece of code [in the doc.](https://www.sofa-framework.org/community/doc/programming-with-sofa/create-your-scene-in-cpp/) I took the initiative to clean this project to use it directly into this page after merging. But indeed, the second step was to create the exact same project with the simpleapi API, to illustrate the 2 use-cases (runtime dep vs compile/link-time dep). And create a page about simpleapi in the documentation as well, as there is none (or I did not see)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174
https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174:17,Safety,avoid,avoid,17,"> Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app. I wanted to keep the direct usage of the components and direct linking with lib, for eventual people who would want to manipulate the components directly (because why not). This PR comes from the discussion https://github.com/sofa-framework/sofa/discussions/2785 which pointed to a (really) deprecated piece of code [in the doc.](https://www.sofa-framework.org/community/doc/programming-with-sofa/create-your-scene-in-cpp/) I took the initiative to clean this project to use it directly into this page after merging. But indeed, the second step was to create the exact same project with the simpleapi API, to illustrate the 2 use-cases (runtime dep vs compile/link-time dep). And create a page about simpleapi in the documentation as well, as there is none (or I did not see)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174
https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174:102,Usability,simpl,simpleapi,102,"> Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app. I wanted to keep the direct usage of the components and direct linking with lib, for eventual people who would want to manipulate the components directly (because why not). This PR comes from the discussion https://github.com/sofa-framework/sofa/discussions/2785 which pointed to a (really) deprecated piece of code [in the doc.](https://www.sofa-framework.org/community/doc/programming-with-sofa/create-your-scene-in-cpp/) I took the initiative to clean this project to use it directly into this page after merging. But indeed, the second step was to create the exact same project with the simpleapi API, to illustrate the 2 use-cases (runtime dep vs compile/link-time dep). And create a page about simpleapi in the documentation as well, as there is none (or I did not see)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174
https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174:777,Usability,simpl,simpleapi,777,"> Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app. I wanted to keep the direct usage of the components and direct linking with lib, for eventual people who would want to manipulate the components directly (because why not). This PR comes from the discussion https://github.com/sofa-framework/sofa/discussions/2785 which pointed to a (really) deprecated piece of code [in the doc.](https://www.sofa-framework.org/community/doc/programming-with-sofa/create-your-scene-in-cpp/) I took the initiative to clean this project to use it directly into this page after merging. But indeed, the second step was to create the exact same project with the simpleapi API, to illustrate the 2 use-cases (runtime dep vs compile/link-time dep). And create a page about simpleapi in the documentation as well, as there is none (or I did not see)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174
https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174:886,Usability,simpl,simpleapi,886,"> Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app. I wanted to keep the direct usage of the components and direct linking with lib, for eventual people who would want to manipulate the components directly (because why not). This PR comes from the discussion https://github.com/sofa-framework/sofa/discussions/2785 which pointed to a (really) deprecated piece of code [in the doc.](https://www.sofa-framework.org/community/doc/programming-with-sofa/create-your-scene-in-cpp/) I took the initiative to clean this project to use it directly into this page after merging. But indeed, the second step was to create the exact same project with the simpleapi API, to illustrate the 2 use-cases (runtime dep vs compile/link-time dep). And create a page about simpleapi in the documentation as well, as there is none (or I did not see)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174
https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1079011710:121,Usability,simpl,simplify,121,"I've just cleaned the repo, removed unused mesh files.; It's 1.7MB of stl files now. Is it still too much ? I could also simplify the meshes but, yeah... it won't be as ""pretty"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1079011710
https://github.com/sofa-framework/sofa/pull/2812#issuecomment-1106528695:174,Usability,feedback,feedback,174,"Update of my suggestion:; - Analyze; - Process; - Mesh; - Rigid (possibly to merge into Process); - Select; - Transform. It ""merges"" your proposals more or less. If no other feedback Fred will do the changes and ... :arrow_down: merge !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2812#issuecomment-1106528695
https://github.com/sofa-framework/sofa/pull/2838#issuecomment-1088812518:274,Usability,clear,clearly,274,"@alxbilger sure. . Actually I'm looking at Subsettopology for your PR (#2825) and my eyes saw its draw function. Don't :) ; When I saw it, I think we have so much duplicated code in every components and that this propagate to the Data<d_showBlablab>. But doing such work is clearly something to do small step by step during our dev session or for a coding sprint during STC (@hugtalbot) with pizza's.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2838#issuecomment-1088812518
https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1117461438:126,Modifiability,plugin,plugins,126,Can I still ask a small question ? :-) . Why keeping the Framework directory? Would something like this be simpler?:. ```; /; plugins; BeamAdapter; ...; Sofa; Compat; Config; Core; DefaultType; Geometry; ...; Component; Collision; ...; scripts; tools; ...; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1117461438
https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1117461438:107,Usability,simpl,simpler,107,Can I still ask a small question ? :-) . Why keeping the Framework directory? Would something like this be simpler?:. ```; /; plugins; BeamAdapter; ...; Sofa; Compat; Config; Core; DefaultType; Geometry; ...; Component; Collision; ...; scripts; tools; ...; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1117461438
https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1119312670:143,Modifiability,plugin,plugins,143,"> Can I still ask a small question ? :-); > ; > Why keeping the Framework directory? Would something like this be simpler?:; > ; > ```; > /; > plugins; > BeamAdapter; > ...; > Sofa; > Compat; > Config; > Core; > DefaultType; > Geometry; > ...; > Component; > Collision; > ...; > scripts; > tools; > ...; > ```. like @hugtalbot said, it is to keep the sepearation framework (i.e APIs & stuff) and components (implementations).; Ideally like @guparan we should have made a framework dir/namespace structure but we decided not to break the framework code (so we still have sofa::core, sofa::helper....)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1119312670
https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1119312670:114,Usability,simpl,simpler,114,"> Can I still ask a small question ? :-); > ; > Why keeping the Framework directory? Would something like this be simpler?:; > ; > ```; > /; > plugins; > BeamAdapter; > ...; > Sofa; > Compat; > Config; > Core; > DefaultType; > Geometry; > ...; > Component; > Collision; > ...; > scripts; > tools; > ...; > ```. like @hugtalbot said, it is to keep the sepearation framework (i.e APIs & stuff) and components (implementations).; Ideally like @guparan we should have made a framework dir/namespace structure but we decided not to break the framework code (so we still have sofa::core, sofa::helper....)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1119312670
https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034:98,Deployability,configurat,configuration,98,"> Thanks @marques-bruno ! Could you confirm that your clang-format file complies with [the astyle configuration](https://github.com/sofa-framework/sofa/blob/master/tools/astyle/sofa.astyle)?. Almost... I went through each of the options in the style sheet to make sure, but:; * *--indent-labels*: this is not supported by clang-format. This astyle option indents C-style labels (goto labels) as if it were a normal instruction in its scope. clang-format offers an option `IndentGotoLabels` but it will either align it with the root of its scope (true,) or align them at the first column in the file. for more info on this option:; [StackOverflow post](https://stackoverflow.com/a/66511380/1376968). But to me, it seems like a bad idea to indent labels the way astyle does. clang-format's makes more sense to me. * *--add-braces*: This one is more problematic: clang-format supports this option since its latest version (clang-format-15.0.0), BUT, here's what they say in the doc:. _**Warning**_. _**Setting this option to true could lead to incorrect code formatting due to clang-format’s lack of complete semantic information. As such, extra care should be taken to review code changes made by this option.**_. Linter tools, like clang-tidy, let you do that also...; Most importantly, clang-format's default package version on ubuntu is v10.0.0. v12 can be found in ubuntu's default package manager, but for v15 you gotta look for the package in external repos or compile it yourself. So I'd rather leave this option out, and keep it more as a general guideline in SOFA's documentation. Other than that my last commit updated the file to adopt the other astyle options :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034
https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034:1619,Deployability,update,updated,1619,"> Thanks @marques-bruno ! Could you confirm that your clang-format file complies with [the astyle configuration](https://github.com/sofa-framework/sofa/blob/master/tools/astyle/sofa.astyle)?. Almost... I went through each of the options in the style sheet to make sure, but:; * *--indent-labels*: this is not supported by clang-format. This astyle option indents C-style labels (goto labels) as if it were a normal instruction in its scope. clang-format offers an option `IndentGotoLabels` but it will either align it with the root of its scope (true,) or align them at the first column in the file. for more info on this option:; [StackOverflow post](https://stackoverflow.com/a/66511380/1376968). But to me, it seems like a bad idea to indent labels the way astyle does. clang-format's makes more sense to me. * *--add-braces*: This one is more problematic: clang-format supports this option since its latest version (clang-format-15.0.0), BUT, here's what they say in the doc:. _**Warning**_. _**Setting this option to true could lead to incorrect code formatting due to clang-format’s lack of complete semantic information. As such, extra care should be taken to review code changes made by this option.**_. Linter tools, like clang-tidy, let you do that also...; Most importantly, clang-format's default package version on ubuntu is v10.0.0. v12 can be found in ubuntu's default package manager, but for v15 you gotta look for the package in external repos or compile it yourself. So I'd rather leave this option out, and keep it more as a general guideline in SOFA's documentation. Other than that my last commit updated the file to adopt the other astyle options :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034
https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034:98,Modifiability,config,configuration,98,"> Thanks @marques-bruno ! Could you confirm that your clang-format file complies with [the astyle configuration](https://github.com/sofa-framework/sofa/blob/master/tools/astyle/sofa.astyle)?. Almost... I went through each of the options in the style sheet to make sure, but:; * *--indent-labels*: this is not supported by clang-format. This astyle option indents C-style labels (goto labels) as if it were a normal instruction in its scope. clang-format offers an option `IndentGotoLabels` but it will either align it with the root of its scope (true,) or align them at the first column in the file. for more info on this option:; [StackOverflow post](https://stackoverflow.com/a/66511380/1376968). But to me, it seems like a bad idea to indent labels the way astyle does. clang-format's makes more sense to me. * *--add-braces*: This one is more problematic: clang-format supports this option since its latest version (clang-format-15.0.0), BUT, here's what they say in the doc:. _**Warning**_. _**Setting this option to true could lead to incorrect code formatting due to clang-format’s lack of complete semantic information. As such, extra care should be taken to review code changes made by this option.**_. Linter tools, like clang-tidy, let you do that also...; Most importantly, clang-format's default package version on ubuntu is v10.0.0. v12 can be found in ubuntu's default package manager, but for v15 you gotta look for the package in external repos or compile it yourself. So I'd rather leave this option out, and keep it more as a general guideline in SOFA's documentation. Other than that my last commit updated the file to adopt the other astyle options :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034
https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034:1553,Usability,guid,guideline,1553,"> Thanks @marques-bruno ! Could you confirm that your clang-format file complies with [the astyle configuration](https://github.com/sofa-framework/sofa/blob/master/tools/astyle/sofa.astyle)?. Almost... I went through each of the options in the style sheet to make sure, but:; * *--indent-labels*: this is not supported by clang-format. This astyle option indents C-style labels (goto labels) as if it were a normal instruction in its scope. clang-format offers an option `IndentGotoLabels` but it will either align it with the root of its scope (true,) or align them at the first column in the file. for more info on this option:; [StackOverflow post](https://stackoverflow.com/a/66511380/1376968). But to me, it seems like a bad idea to indent labels the way astyle does. clang-format's makes more sense to me. * *--add-braces*: This one is more problematic: clang-format supports this option since its latest version (clang-format-15.0.0), BUT, here's what they say in the doc:. _**Warning**_. _**Setting this option to true could lead to incorrect code formatting due to clang-format’s lack of complete semantic information. As such, extra care should be taken to review code changes made by this option.**_. Linter tools, like clang-tidy, let you do that also...; Most importantly, clang-format's default package version on ubuntu is v10.0.0. v12 can be found in ubuntu's default package manager, but for v15 you gotta look for the package in external repos or compile it yourself. So I'd rather leave this option out, and keep it more as a general guideline in SOFA's documentation. Other than that my last commit updated the file to adopt the other astyle options :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034
https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825:161,Deployability,update,update,161,@fredroy This is a very good question and definitely worth investigation. . To me this is related to a systematic problem we have regarding the mix between Data update through DDG or updates using toModel and fromModel. As far as can think about it is that BarycentricMapping should stop using the to and from model to compute barycentric topologies Maybe it should be refactored to be part of the Data depenency graph by adding few data field.; - control_rest_position // The vector of positions that are the control points of the interpolation space. ; - target_rest_position // The vector of positions that are embeded into interpolation space.; ; With these two it is clear that a change in the contrl_rest_position or target_rest_position should trigger the recomputation of barycentric coordinates.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825
https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825:183,Deployability,update,updates,183,@fredroy This is a very good question and definitely worth investigation. . To me this is related to a systematic problem we have regarding the mix between Data update through DDG or updates using toModel and fromModel. As far as can think about it is that BarycentricMapping should stop using the to and from model to compute barycentric topologies Maybe it should be refactored to be part of the Data depenency graph by adding few data field.; - control_rest_position // The vector of positions that are the control points of the interpolation space. ; - target_rest_position // The vector of positions that are embeded into interpolation space.; ; With these two it is clear that a change in the contrl_rest_position or target_rest_position should trigger the recomputation of barycentric coordinates.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825
https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825:369,Modifiability,refactor,refactored,369,@fredroy This is a very good question and definitely worth investigation. . To me this is related to a systematic problem we have regarding the mix between Data update through DDG or updates using toModel and fromModel. As far as can think about it is that BarycentricMapping should stop using the to and from model to compute barycentric topologies Maybe it should be refactored to be part of the Data depenency graph by adding few data field.; - control_rest_position // The vector of positions that are the control points of the interpolation space. ; - target_rest_position // The vector of positions that are embeded into interpolation space.; ; With these two it is clear that a change in the contrl_rest_position or target_rest_position should trigger the recomputation of barycentric coordinates.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825
https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825:672,Usability,clear,clear,672,@fredroy This is a very good question and definitely worth investigation. . To me this is related to a systematic problem we have regarding the mix between Data update through DDG or updates using toModel and fromModel. As far as can think about it is that BarycentricMapping should stop using the to and from model to compute barycentric topologies Maybe it should be refactored to be part of the Data depenency graph by adding few data field.; - control_rest_position // The vector of positions that are the control points of the interpolation space. ; - target_rest_position // The vector of positions that are embeded into interpolation space.; ; With these two it is clear that a change in the contrl_rest_position or target_rest_position should trigger the recomputation of barycentric coordinates.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825
https://github.com/sofa-framework/sofa/pull/2969#issuecomment-1134916530:172,Usability,clear,clear,172,msg_advice are emitted if the component it not muted. ; The default condition to be muted is when printLog is false. So it should behave as a msg_info... except it is more clear this is a suggestion.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2969#issuecomment-1134916530
https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840:35,Energy Efficiency,efficient,efficient,35,"I made the code more concise, more efficient and clearer to me. It also removes the need of the variable which was initially shadowed. Let me know if you agree/disagree.; I also merged master.; I suggest also to move the methods definitions in the cpp file, but I did not want to be out of the scope of this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840
https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840:96,Modifiability,variab,variable,96,"I made the code more concise, more efficient and clearer to me. It also removes the need of the variable which was initially shadowed. Let me know if you agree/disagree.; I also merged master.; I suggest also to move the methods definitions in the cpp file, but I did not want to be out of the scope of this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840
https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840:49,Usability,clear,clearer,49,"I made the code more concise, more efficient and clearer to me. It also removes the need of the variable which was initially shadowed. Let me know if you agree/disagree.; I also merged master.; I suggest also to move the methods definitions in the cpp file, but I did not want to be out of the scope of this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840
https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155095712:50,Performance,load,loader,50,"Yes the method exists... but, contrary to the XML loader, the SofaPython3 scene loader does not use the setInstanciationSourceFileName to set the filename associated with the root node. ; This can be done in a simple PR at SofaPython3. . EDIT: I made a quick pr to for SofapythoN3: https://github.com/sofa-framework/SofaPython3/pull/271",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155095712
https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155095712:80,Performance,load,loader,80,"Yes the method exists... but, contrary to the XML loader, the SofaPython3 scene loader does not use the setInstanciationSourceFileName to set the filename associated with the root node. ; This can be done in a simple PR at SofaPython3. . EDIT: I made a quick pr to for SofapythoN3: https://github.com/sofa-framework/SofaPython3/pull/271",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155095712
https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155095712:210,Usability,simpl,simple,210,"Yes the method exists... but, contrary to the XML loader, the SofaPython3 scene loader does not use the setInstanciationSourceFileName to set the filename associated with the root node. ; This can be done in a simple PR at SofaPython3. . EDIT: I made a quick pr to for SofapythoN3: https://github.com/sofa-framework/SofaPython3/pull/271",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155095712
https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155193405:254,Performance,load,loader,254,"This is how I would do it:. 1. Separate the `SceneCheckMissingRequiredPlugin` class into 3: 1) an abstract base class, 2) a derived class printing the XML summary, 3) a derived class printing the Python summary.; 2. Move the XML class near the XML scene loader; 3. Move the Python class in SofaPython3; 4. Add (optionally) a new instance of the classes in each scene loader (see `void addListener( Listener* l )`). I admit this is quite complex to do. The reason is that all the scene checkers are all grouped in the same module, and `SceneCheck` is not in Core (but it could be). In any case, I am uncomfortable with the idea to have a scene checker for Python in the core. Somehow, it should be in SofaPython3. Another case to support is simpleapi :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155193405
https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155193405:367,Performance,load,loader,367,"This is how I would do it:. 1. Separate the `SceneCheckMissingRequiredPlugin` class into 3: 1) an abstract base class, 2) a derived class printing the XML summary, 3) a derived class printing the Python summary.; 2. Move the XML class near the XML scene loader; 3. Move the Python class in SofaPython3; 4. Add (optionally) a new instance of the classes in each scene loader (see `void addListener( Listener* l )`). I admit this is quite complex to do. The reason is that all the scene checkers are all grouped in the same module, and `SceneCheck` is not in Core (but it could be). In any case, I am uncomfortable with the idea to have a scene checker for Python in the core. Somehow, it should be in SofaPython3. Another case to support is simpleapi :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155193405
https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155193405:740,Usability,simpl,simpleapi,740,"This is how I would do it:. 1. Separate the `SceneCheckMissingRequiredPlugin` class into 3: 1) an abstract base class, 2) a derived class printing the XML summary, 3) a derived class printing the Python summary.; 2. Move the XML class near the XML scene loader; 3. Move the Python class in SofaPython3; 4. Add (optionally) a new instance of the classes in each scene loader (see `void addListener( Listener* l )`). I admit this is quite complex to do. The reason is that all the scene checkers are all grouped in the same module, and `SceneCheck` is not in Core (but it could be). In any case, I am uncomfortable with the idea to have a scene checker for Python in the core. Somehow, it should be in SofaPython3. Another case to support is simpleapi :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155193405
https://github.com/sofa-framework/sofa/pull/3059#issuecomment-1227602466:312,Usability,clear,clear,312,"I finally got time to try a version with sptr as suggested by @epernod but because there is cycling reference counting there is memory leaks. So I reverted back to a raw pointer to old m_root and it is actually consistant with how are handled the other pointer to parents in DAGNode::l_parent (depsite it is not clear this are raw pointer because of the use of the Link's ""margic"" (the strong link vs weak link)) .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3059#issuecomment-1227602466
https://github.com/sofa-framework/sofa/pull/3084#issuecomment-1172285654:13,Usability,simpl,simply,13,@hugtalbot I simply checked out #2999 :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3084#issuecomment-1172285654
https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887:25,Modifiability,plugin,plugins,25,"UX is not perfect : some plugins loaded are in blue in the GUI (the one loaded by the GUI itself).; Even with a tooltip, the user can be a bit confused but this is a dev feature. An issue will be created (double mechanism of plugin loading)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887
https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887:225,Modifiability,plugin,plugin,225,"UX is not perfect : some plugins loaded are in blue in the GUI (the one loaded by the GUI itself).; Even with a tooltip, the user can be a bit confused but this is a dev feature. An issue will be created (double mechanism of plugin loading)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887
https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887:33,Performance,load,loaded,33,"UX is not perfect : some plugins loaded are in blue in the GUI (the one loaded by the GUI itself).; Even with a tooltip, the user can be a bit confused but this is a dev feature. An issue will be created (double mechanism of plugin loading)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887
https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887:72,Performance,load,loaded,72,"UX is not perfect : some plugins loaded are in blue in the GUI (the one loaded by the GUI itself).; Even with a tooltip, the user can be a bit confused but this is a dev feature. An issue will be created (double mechanism of plugin loading)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887
https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887:232,Performance,load,loading,232,"UX is not perfect : some plugins loaded are in blue in the GUI (the one loaded by the GUI itself).; Even with a tooltip, the user can be a bit confused but this is a dev feature. An issue will be created (double mechanism of plugin loading)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887
https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887:0,Usability,UX,UX,0,"UX is not perfect : some plugins loaded are in blue in the GUI (the one loaded by the GUI itself).; Even with a tooltip, the user can be a bit confused but this is a dev feature. An issue will be created (double mechanism of plugin loading)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887
https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1180100688:52,Usability,clear,clear,52,I see @fredroy you requested changes. I think it is clear now?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1180100688
https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481:325,Integrability,depend,dependency,325,"Hi all, . Thanks for the PR. . In the past it was consider that draw tools was a rendering abstraction layer to be used for debugging/inspection or GUI helpers. The recommendation was to use drawTools in the Base::visual() overrides. The main ideas was to allow component developpers to have rendering tools without having a dependency to opengl. On its side, OglXXX component in Sofa.GL exists to hold compoennts that, for whatever reason (performance, lack of time), are still implemented using the opengl api. Up to now, the evolution guidelines was something like:; - replace in the complete code base ogl call by drawTools calls into xxx::draw() ; - move every component for which ogl call remains (mostly in xxxx:drawVisual) into the Sofa.GL.XXX. This PR does something else, as it replace opengl calls from Sofa.GL.OglXXX by drawTools's ones. Implementing component rendering using drawTools instead of ogl calls is probably desirable (if there is no performance cost)... but it cannot be in Sofa.GL. . I recommand to create a new component in Sofa.Component.Visual, for the component using drawTools and if needed in Sofa.GL.Component have the ogl version subclassing it (if needed).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481
https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481:441,Performance,perform,performance,441,"Hi all, . Thanks for the PR. . In the past it was consider that draw tools was a rendering abstraction layer to be used for debugging/inspection or GUI helpers. The recommendation was to use drawTools in the Base::visual() overrides. The main ideas was to allow component developpers to have rendering tools without having a dependency to opengl. On its side, OglXXX component in Sofa.GL exists to hold compoennts that, for whatever reason (performance, lack of time), are still implemented using the opengl api. Up to now, the evolution guidelines was something like:; - replace in the complete code base ogl call by drawTools calls into xxx::draw() ; - move every component for which ogl call remains (mostly in xxxx:drawVisual) into the Sofa.GL.XXX. This PR does something else, as it replace opengl calls from Sofa.GL.OglXXX by drawTools's ones. Implementing component rendering using drawTools instead of ogl calls is probably desirable (if there is no performance cost)... but it cannot be in Sofa.GL. . I recommand to create a new component in Sofa.Component.Visual, for the component using drawTools and if needed in Sofa.GL.Component have the ogl version subclassing it (if needed).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481
https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481:958,Performance,perform,performance,958,"Hi all, . Thanks for the PR. . In the past it was consider that draw tools was a rendering abstraction layer to be used for debugging/inspection or GUI helpers. The recommendation was to use drawTools in the Base::visual() overrides. The main ideas was to allow component developpers to have rendering tools without having a dependency to opengl. On its side, OglXXX component in Sofa.GL exists to hold compoennts that, for whatever reason (performance, lack of time), are still implemented using the opengl api. Up to now, the evolution guidelines was something like:; - replace in the complete code base ogl call by drawTools calls into xxx::draw() ; - move every component for which ogl call remains (mostly in xxxx:drawVisual) into the Sofa.GL.XXX. This PR does something else, as it replace opengl calls from Sofa.GL.OglXXX by drawTools's ones. Implementing component rendering using drawTools instead of ogl calls is probably desirable (if there is no performance cost)... but it cannot be in Sofa.GL. . I recommand to create a new component in Sofa.Component.Visual, for the component using drawTools and if needed in Sofa.GL.Component have the ogl version subclassing it (if needed).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481
https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481:538,Usability,guid,guidelines,538,"Hi all, . Thanks for the PR. . In the past it was consider that draw tools was a rendering abstraction layer to be used for debugging/inspection or GUI helpers. The recommendation was to use drawTools in the Base::visual() overrides. The main ideas was to allow component developpers to have rendering tools without having a dependency to opengl. On its side, OglXXX component in Sofa.GL exists to hold compoennts that, for whatever reason (performance, lack of time), are still implemented using the opengl api. Up to now, the evolution guidelines was something like:; - replace in the complete code base ogl call by drawTools calls into xxx::draw() ; - move every component for which ogl call remains (mostly in xxxx:drawVisual) into the Sofa.GL.XXX. This PR does something else, as it replace opengl calls from Sofa.GL.OglXXX by drawTools's ones. Implementing component rendering using drawTools instead of ogl calls is probably desirable (if there is no performance cost)... but it cannot be in Sofa.GL. . I recommand to create a new component in Sofa.Component.Visual, for the component using drawTools and if needed in Sofa.GL.Component have the ogl version subclassing it (if needed).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481
https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1184124812:409,Deployability,update,update,409,"@alxbilger . In addition to have very component not relying anymore on a dependency to opengl should be moved to a generic module. ; I would suggest having a layer of compatibility/deprecation (possibly build on top of the generic module) to to tell users that scenes like:; ```console; RequiredPlugin(""Sofa.GL.Component"") ; OglModel(); OglGrid() ; ```; Are still working but displays nice guidance on how to update to more or less something of that kind:; ```console; RequiredPlugin(""Sofa.Components.Visual"") ; VisualModel() ; VisualGrid() ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1184124812
https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1184124812:73,Integrability,depend,dependency,73,"@alxbilger . In addition to have very component not relying anymore on a dependency to opengl should be moved to a generic module. ; I would suggest having a layer of compatibility/deprecation (possibly build on top of the generic module) to to tell users that scenes like:; ```console; RequiredPlugin(""Sofa.GL.Component"") ; OglModel(); OglGrid() ; ```; Are still working but displays nice guidance on how to update to more or less something of that kind:; ```console; RequiredPlugin(""Sofa.Components.Visual"") ; VisualModel() ; VisualGrid() ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1184124812
https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1184124812:390,Usability,guid,guidance,390,"@alxbilger . In addition to have very component not relying anymore on a dependency to opengl should be moved to a generic module. ; I would suggest having a layer of compatibility/deprecation (possibly build on top of the generic module) to to tell users that scenes like:; ```console; RequiredPlugin(""Sofa.GL.Component"") ; OglModel(); OglGrid() ; ```; Are still working but displays nice guidance on how to update to more or less something of that kind:; ```console; RequiredPlugin(""Sofa.Components.Visual"") ; VisualModel() ; VisualGrid() ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1184124812
https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670:829,Modifiability,variab,variables,829,"> I am a bit sad that we lost simplicity in cmake files cry. I liked the fact that Sofa/framework was (supposed to?) be buildable by iteelf; . How? By unchecking the SOFA_COMPONENT option? It's still possible this way. The thing is that Framework is (unfortunately) not a module and thus should not be treated as one if we want to be consistent. I'm not against reverting the framework/CMakeLists.txt deletion though. > and that the root SOFA CMakefile was kind of slimmer/less complicated and actually was (supposed to be ?) not mandatory. This file was and still is mandatory. At least, I think it's clearer now with the changes I propose because we see what is directly below the root CMakeLists (all the remaining add_subdirectory calls) and what could be done from somewhere else. Ideally we should just have a some options/variables and a bunch of add_subdirectory calls in this file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670
https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670:30,Usability,simpl,simplicity,30,"> I am a bit sad that we lost simplicity in cmake files cry. I liked the fact that Sofa/framework was (supposed to?) be buildable by iteelf; . How? By unchecking the SOFA_COMPONENT option? It's still possible this way. The thing is that Framework is (unfortunately) not a module and thus should not be treated as one if we want to be consistent. I'm not against reverting the framework/CMakeLists.txt deletion though. > and that the root SOFA CMakefile was kind of slimmer/less complicated and actually was (supposed to be ?) not mandatory. This file was and still is mandatory. At least, I think it's clearer now with the changes I propose because we see what is directly below the root CMakeLists (all the remaining add_subdirectory calls) and what could be done from somewhere else. Ideally we should just have a some options/variables and a bunch of add_subdirectory calls in this file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670
https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670:602,Usability,clear,clearer,602,"> I am a bit sad that we lost simplicity in cmake files cry. I liked the fact that Sofa/framework was (supposed to?) be buildable by iteelf; . How? By unchecking the SOFA_COMPONENT option? It's still possible this way. The thing is that Framework is (unfortunately) not a module and thus should not be treated as one if we want to be consistent. I'm not against reverting the framework/CMakeLists.txt deletion though. > and that the root SOFA CMakefile was kind of slimmer/less complicated and actually was (supposed to be ?) not mandatory. This file was and still is mandatory. At least, I think it's clearer now with the changes I propose because we see what is directly below the root CMakeLists (all the remaining add_subdirectory calls) and what could be done from somewhere else. Ideally we should just have a some options/variables and a bunch of add_subdirectory calls in this file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670
https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180587977:266,Usability,simpl,simpler,266,"New changes:; - Move Sofa.GL module under Sofa directory; - SofaKernel is gone.; - Everything was moved under applications/collections/deprecated; - New cosmetic feature in SofaMacros to hide sub-options when base-option is disabled (like cmake_dependent_option but simpler). E.g. when I disable SOFA_COMPONENT, all SOFA_COMPONENT_* are hidden.; - A bit of cleaning",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180587977
https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614:3476,Integrability,message,message,3476,"3) Shouldn't we remove the ""call-super"" ? ; The code and PR makes use of what we call the ""call super""design patern in which an specialization or an in-herited class must call its parent/general implementation to behave correctly. I think the PR contains a variation for ""template"" of this pattern with the unspecializedInit(). In most of the case I noticed that the ""call super"" was a bad design choice as it delegate the ""validity"" of the implementation to the child/specialization instead of enforcing the behavioral validity by code structure. ; Example of the call super ""design""; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial(); ; virtual void init(); {; doSomethingCrucial();; }; }. class UserImplementation : GeneralImplementation; {; public:; virtual void init(); {; GeneralImplementation::init(); ; }; }; ```; And how it can be change to prevent mis-implementation:; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial();; void init(); {; doSomethingCrucial();; doInit(); ; }; ; protected:; virtual void doInit() = 0; ; }. class UserImplementation : GeneralImplementation; {; public:; final void doInit() override; {; /// my specific things; }; }; ```; I don't know if this could/may/must be applied to BilateralInteractionConstraint...but at first sight it looks like a good sanbox. . 4) Mixing reset/init; I see that reset() is actually calling init(). To me this leads to a lot of fuzzyness in which it is not clear what are the purpose of these function. Maybe it is possible to rework that part to make clear what are the specific role of the API entry points. This probably requires to clarify what reset is supposed to do (and this is probably not strictly equivalent to init()). . 5) Extra side notes:; I would recommand deprecating all handleEvent implementation by printing a deprecation message saying that you need to use ; a separated controller. Because...well this is just a non-sense to have hardcoded keycode and UX concerns.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614
https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614:200,Usability,clear,clearer,200,"Hi @alxbilger . Thanks for the PR and requesting a review. The existing code makes the assumption we only want Vec3 and Rigid3, the PR builds on that assumption to make the implementation cleaner and clearer. The changes dones are relevant and can probably merged as-is. . Nevetheless the PR makes the underlying assumption that we only want Vec3Type and Rigid3Type is questionnable in several ways and is also connected to several of Sofa's code architecture issues that are worht discussing. 1) Do we want to support 1, 2,4, 6d constraint ? ; If this is the case then the current non specialized implementation need to be check it actually compiles and do the expected thing. If this is not the case we should consider fixing that.; But if handling 1,2,4, 6d is not possible nor a desirable property the we should consider making code extension through in-heritance and subclassing instead of templatization. . 2) Asymetrical implementation regarding the floating point precision: ; The current implemented allows users to add extra instanciation for Vec3 (f,d) but do not allow such a thing for Rigid3f. This asymetry in implementation is weird to me as I tend to think that if there is functionnal equivalence regarding the templated data (i.e that one data type is in no way special against the other => Vec3 is i no way ""better"" compared to Rigid3) then this functionnal equivalence results in a code base that exhibit symmetrical implementation where the Vec3 and Rigid3 are treated the same. This is not the case as one is specialized in .cpp while the other is not specialized and is implemented in the .inl. . 3) Shouldn't we remove the ""call-super"" ? ; The code and PR makes use of what we call the ""call super""design patern in which an specialization or an in-herited class must call its parent/general implementation to behave correctly. I think the PR contains a variation for ""template"" of this pattern with the unspecializedInit(). In most of the case I noticed that the ""call super"" w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614
https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614:3091,Usability,clear,clear,3091,"3) Shouldn't we remove the ""call-super"" ? ; The code and PR makes use of what we call the ""call super""design patern in which an specialization or an in-herited class must call its parent/general implementation to behave correctly. I think the PR contains a variation for ""template"" of this pattern with the unspecializedInit(). In most of the case I noticed that the ""call super"" was a bad design choice as it delegate the ""validity"" of the implementation to the child/specialization instead of enforcing the behavioral validity by code structure. ; Example of the call super ""design""; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial(); ; virtual void init(); {; doSomethingCrucial();; }; }. class UserImplementation : GeneralImplementation; {; public:; virtual void init(); {; GeneralImplementation::init(); ; }; }; ```; And how it can be change to prevent mis-implementation:; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial();; void init(); {; doSomethingCrucial();; doInit(); ; }; ; protected:; virtual void doInit() = 0; ; }. class UserImplementation : GeneralImplementation; {; public:; final void doInit() override; {; /// my specific things; }; }; ```; I don't know if this could/may/must be applied to BilateralInteractionConstraint...but at first sight it looks like a good sanbox. . 4) Mixing reset/init; I see that reset() is actually calling init(). To me this leads to a lot of fuzzyness in which it is not clear what are the purpose of these function. Maybe it is possible to rework that part to make clear what are the specific role of the API entry points. This probably requires to clarify what reset is supposed to do (and this is probably not strictly equivalent to init()). . 5) Extra side notes:; I would recommand deprecating all handleEvent implementation by printing a deprecation message saying that you need to use ; a separated controller. Because...well this is just a non-sense to have hardcoded keycode and UX concerns.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614
https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614:3186,Usability,clear,clear,3186,"3) Shouldn't we remove the ""call-super"" ? ; The code and PR makes use of what we call the ""call super""design patern in which an specialization or an in-herited class must call its parent/general implementation to behave correctly. I think the PR contains a variation for ""template"" of this pattern with the unspecializedInit(). In most of the case I noticed that the ""call super"" was a bad design choice as it delegate the ""validity"" of the implementation to the child/specialization instead of enforcing the behavioral validity by code structure. ; Example of the call super ""design""; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial(); ; virtual void init(); {; doSomethingCrucial();; }; }. class UserImplementation : GeneralImplementation; {; public:; virtual void init(); {; GeneralImplementation::init(); ; }; }; ```; And how it can be change to prevent mis-implementation:; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial();; void init(); {; doSomethingCrucial();; doInit(); ; }; ; protected:; virtual void doInit() = 0; ; }. class UserImplementation : GeneralImplementation; {; public:; final void doInit() override; {; /// my specific things; }; }; ```; I don't know if this could/may/must be applied to BilateralInteractionConstraint...but at first sight it looks like a good sanbox. . 4) Mixing reset/init; I see that reset() is actually calling init(). To me this leads to a lot of fuzzyness in which it is not clear what are the purpose of these function. Maybe it is possible to rework that part to make clear what are the specific role of the API entry points. This probably requires to clarify what reset is supposed to do (and this is probably not strictly equivalent to init()). . 5) Extra side notes:; I would recommand deprecating all handleEvent implementation by printing a deprecation message saying that you need to use ; a separated controller. Because...well this is just a non-sense to have hardcoded keycode and UX concerns.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614
https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614:3608,Usability,UX,UX,3608,"3) Shouldn't we remove the ""call-super"" ? ; The code and PR makes use of what we call the ""call super""design patern in which an specialization or an in-herited class must call its parent/general implementation to behave correctly. I think the PR contains a variation for ""template"" of this pattern with the unspecializedInit(). In most of the case I noticed that the ""call super"" was a bad design choice as it delegate the ""validity"" of the implementation to the child/specialization instead of enforcing the behavioral validity by code structure. ; Example of the call super ""design""; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial(); ; virtual void init(); {; doSomethingCrucial();; }; }. class UserImplementation : GeneralImplementation; {; public:; virtual void init(); {; GeneralImplementation::init(); ; }; }; ```; And how it can be change to prevent mis-implementation:; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial();; void init(); {; doSomethingCrucial();; doInit(); ; }; ; protected:; virtual void doInit() = 0; ; }. class UserImplementation : GeneralImplementation; {; public:; final void doInit() override; {; /// my specific things; }; }; ```; I don't know if this could/may/must be applied to BilateralInteractionConstraint...but at first sight it looks like a good sanbox. . 4) Mixing reset/init; I see that reset() is actually calling init(). To me this leads to a lot of fuzzyness in which it is not clear what are the purpose of these function. Maybe it is possible to rework that part to make clear what are the specific role of the API entry points. This probably requires to clarify what reset is supposed to do (and this is probably not strictly equivalent to init()). . 5) Extra side notes:; I would recommand deprecating all handleEvent implementation by printing a deprecation message saying that you need to use ; a separated controller. Because...well this is just a non-sense to have hardcoded keycode and UX concerns.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614
https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1188825154:235,Usability,clear,clearer,235,"Yes, I kind of hijacked the PR to open general discussion, but as my first line was saying:. ""The existing code makes the assumption we only want Vec3 and Rigid3, the PR builds on that assumption to make the implementation cleaner and clearer. The changes dones are relevant and can probably merged as-is."". All what follow is probably for future PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1188825154
https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1225431851:59,Usability,guid,guidelines,59,- there are some different kind of ` { ... } ` against the guidelines but it was there before so it is not really the point of the PR; - I would put the content of the specialized(?) inl files directly into the associated cpp.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1225431851
https://github.com/sofa-framework/sofa/issues/3149#issuecomment-1235280937:117,Usability,simpl,simply,117,"@damienmarchal regarding the hook in the addObject(BaseObject*) so that any addition of a Mass Object, should it not simply warn the user that no gravity will be applied if no GravityForceField is added ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3149#issuecomment-1235280937
https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1194083853:12,Integrability,message,message,12,"Ok sorry my message was not totally clear. I meant, you check the option in the Node and it propagate the printLog to all child Node and their components.; So if you want all the printLog, you activate it in the root Node.; Just suggesting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1194083853
https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1194083853:36,Usability,clear,clear,36,"Ok sorry my message was not totally clear. I meant, you check the option in the Node and it propagate the printLog to all child Node and their components.; So if you want all the printLog, you activate it in the root Node.; Just suggesting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1194083853
https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1196614783:120,Testability,log,log,120,"Thanks for you feedback @epernod. I think your suggestion is the more natural. Actually, I tried to set `printLog` in a log, to see if it was already working (but no). But I always feel uncomfortable when modifying such an important base class. I don't want that some classes become God classes. That's why I did not touch the Node class. But I am definitively open to discussion",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1196614783
https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1196614783:15,Usability,feedback,feedback,15,"Thanks for you feedback @epernod. I think your suggestion is the more natural. Actually, I tried to set `printLog` in a log, to see if it was already working (but no). But I always feel uncomfortable when modifying such an important base class. I don't want that some classes become God classes. That's why I did not touch the Node class. But I am definitively open to discussion",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1196614783
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:1034,Availability,avail,available,1034,"For historical explanations:; * we need to gather the pointers to all Data in a Base instance, so there must be a function somewhere that is called with both the pointer to the `Base*` object and to the `Data*`.; * a simple option could be to have the `Base*` pointer as a parameter of the Data constructor, however most compilers issue a warning if `this` is explicitly used when initializing member variables, as it is not fully constructed yet; * however, compilers are happy with calling a method, which itself use `this`, hence the initial implementation of `initData()` (which was called `dataField()`) had the `this` pointer implicitely, but needed the `Data*` pointer to add if to the ""fields"" map, which is why it was provided as an explicit parameter to the method; * later changes refactored this to add new features (such capturing which level of the class hierarchy is creating each Data), and the actual registration of the `Data*` in the list within Base was moved to the Data constructor, where the `Data*` pointer is available so the one from `initData()` became redundant. The newer similar design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:1080,Availability,redundant,redundant,1080,"For historical explanations:; * we need to gather the pointers to all Data in a Base instance, so there must be a function somewhere that is called with both the pointer to the `Base*` object and to the `Data*`.; * a simple option could be to have the `Base*` pointer as a parameter of the Data constructor, however most compilers issue a warning if `this` is explicitly used when initializing member variables, as it is not fully constructed yet; * however, compilers are happy with calling a method, which itself use `this`, hence the initial implementation of `initData()` (which was called `dataField()`) had the `this` pointer implicitely, but needed the `Data*` pointer to add if to the ""fields"" map, which is why it was provided as an explicit parameter to the method; * later changes refactored this to add new features (such capturing which level of the class hierarchy is creating each Data), and the actual registration of the `Data*` in the list within Base was moved to the Data constructor, where the `Data*` pointer is available so the one from `initData()` became redundant. The newer similar design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:1421,Availability,error,errors,1421,"rning if `this` is explicitly used when initializing member variables, as it is not fully constructed yet; * however, compilers are happy with calling a method, which itself use `this`, hence the initial implementation of `initData()` (which was called `dataField()`) had the `this` pointer implicitely, but needed the `Data*` pointer to add if to the ""fields"" map, which is why it was provided as an explicit parameter to the method; * later changes refactored this to add new features (such capturing which level of the class hierarchy is creating each Data), and the actual registration of the `Data*` in the list within Base was moved to the Data constructor, where the `Data*` pointer is available so the one from `initData()` became redundant. The newer similar design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` will incorrectly use the `initData()` version without default value but with one boolean flag, as `""mydefaultvalue""` is a `const char*` which requires a ""user-defined"" conversion to `std::string`, while `""help message""` is implicitely convertible to `bool` without any ""user-defined"" conversion, so preferred by the compiler. So if we break t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:1631,Availability,error,error,1631," it was provided as an explicit parameter to the method; * later changes refactored this to add new features (such capturing which level of the class hierarchy is creating each Data), and the actual registration of the `Data*` in the list within Base was moved to the Data constructor, where the `Data*` pointer is available so the one from `initData()` became redundant. The newer similar design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` will incorrectly use the `initData()` version without default value but with one boolean flag, as `""mydefaultvalue""` is a `const char*` which requires a ""user-defined"" conversion to `std::string`, while `""help message""` is implicitely convertible to `bool` without any ""user-defined"" conversion, so preferred by the compiler. So if we break the compatibility to the current `initData()` API, I would strongly suggest to remove this issue, by removing the two optional bool flags which are seldom used anyway (and can be replaced by a call to `setDisplayed()` or `setReadOnly()`).; * compared to when this code was originally written, c++ now allows to put initializers of member variables in the class declaration direct",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:1637,Integrability,message,messages,1637," it was provided as an explicit parameter to the method; * later changes refactored this to add new features (such capturing which level of the class hierarchy is creating each Data), and the actual registration of the `Data*` in the list within Base was moved to the Data constructor, where the `Data*` pointer is available so the one from `initData()` became redundant. The newer similar design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` will incorrectly use the `initData()` version without default value but with one boolean flag, as `""mydefaultvalue""` is a `const char*` which requires a ""user-defined"" conversion to `std::string`, while `""help message""` is implicitely convertible to `bool` without any ""user-defined"" conversion, so preferred by the compiler. So if we break the compatibility to the current `initData()` API, I would strongly suggest to remove this issue, by removing the two optional bool flags which are seldom used anyway (and can be replaced by a call to `setDisplayed()` or `setReadOnly()`).; * compared to when this code was originally written, c++ now allows to put initializers of member variables in the class declaration direct",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:1989,Integrability,message,message,1989,"r design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` will incorrectly use the `initData()` version without default value but with one boolean flag, as `""mydefaultvalue""` is a `const char*` which requires a ""user-defined"" conversion to `std::string`, while `""help message""` is implicitely convertible to `bool` without any ""user-defined"" conversion, so preferred by the compiler. So if we break the compatibility to the current `initData()` API, I would strongly suggest to remove this issue, by removing the two optional bool flags which are seldom used anyway (and can be replaced by a call to `setDisplayed()` or `setReadOnly()`).; * compared to when this code was originally written, c++ now allows to put initializers of member variables in the class declaration directly, which for Data members could be preferable to initializing them in the constructor (the name and help message would be visible in the header instead of the implementation, it does not need to be duplicated in case there are multiple constructors, and there would no longer be any unhelpful warnings on some compilers about mismatched initialization orderings). I'm not suggesting to d",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:2210,Integrability,message,message,2210,"r design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` will incorrectly use the `initData()` version without default value but with one boolean flag, as `""mydefaultvalue""` is a `const char*` which requires a ""user-defined"" conversion to `std::string`, while `""help message""` is implicitely convertible to `bool` without any ""user-defined"" conversion, so preferred by the compiler. So if we break the compatibility to the current `initData()` API, I would strongly suggest to remove this issue, by removing the two optional bool flags which are seldom used anyway (and can be replaced by a call to `setDisplayed()` or `setReadOnly()`).; * compared to when this code was originally written, c++ now allows to put initializers of member variables in the class declaration directly, which for Data members could be preferable to initializing them in the constructor (the name and help message would be visible in the header instead of the implementation, it does not need to be duplicated in case there are multiple constructors, and there would no longer be any unhelpful warnings on some compilers about mismatched initialization orderings). I'm not suggesting to d",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:2826,Integrability,message,message,2826," not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` will incorrectly use the `initData()` version without default value but with one boolean flag, as `""mydefaultvalue""` is a `const char*` which requires a ""user-defined"" conversion to `std::string`, while `""help message""` is implicitely convertible to `bool` without any ""user-defined"" conversion, so preferred by the compiler. So if we break the compatibility to the current `initData()` API, I would strongly suggest to remove this issue, by removing the two optional bool flags which are seldom used anyway (and can be replaced by a call to `setDisplayed()` or `setReadOnly()`).; * compared to when this code was originally written, c++ now allows to put initializers of member variables in the class declaration directly, which for Data members could be preferable to initializing them in the constructor (the name and help message would be visible in the header instead of the implementation, it does not need to be duplicated in case there are multiple constructors, and there would no longer be any unhelpful warnings on some compilers about mismatched initialization orderings). I'm not suggesting to do that in all the components in this PR (as the diff would be horible to review), but any new designs of `initData` should check that this is possible (last time I looked at that, gcc and msvc did not agree on if we needed to write `Data<> d = initData(...)` versus `Data<> d { initData(...) }` versus `Data<> d = { initData(...) }`, but it was a long time ago...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:401,Modifiability,variab,variables,401,"For historical explanations:; * we need to gather the pointers to all Data in a Base instance, so there must be a function somewhere that is called with both the pointer to the `Base*` object and to the `Data*`.; * a simple option could be to have the `Base*` pointer as a parameter of the Data constructor, however most compilers issue a warning if `this` is explicitly used when initializing member variables, as it is not fully constructed yet; * however, compilers are happy with calling a method, which itself use `this`, hence the initial implementation of `initData()` (which was called `dataField()`) had the `this` pointer implicitely, but needed the `Data*` pointer to add if to the ""fields"" map, which is why it was provided as an explicit parameter to the method; * later changes refactored this to add new features (such capturing which level of the class hierarchy is creating each Data), and the actual registration of the `Data*` in the list within Base was moved to the Data constructor, where the `Data*` pointer is available so the one from `initData()` became redundant. The newer similar design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:792,Modifiability,refactor,refactored,792,"For historical explanations:; * we need to gather the pointers to all Data in a Base instance, so there must be a function somewhere that is called with both the pointer to the `Base*` object and to the `Data*`.; * a simple option could be to have the `Base*` pointer as a parameter of the Data constructor, however most compilers issue a warning if `this` is explicitly used when initializing member variables, as it is not fully constructed yet; * however, compilers are happy with calling a method, which itself use `this`, hence the initial implementation of `initData()` (which was called `dataField()`) had the `this` pointer implicitely, but needed the `Data*` pointer to add if to the ""fields"" map, which is why it was provided as an explicit parameter to the method; * later changes refactored this to add new features (such capturing which level of the class hierarchy is creating each Data), and the actual registration of the `Data*` in the list within Base was moved to the Data constructor, where the `Data*` pointer is available so the one from `initData()` became redundant. The newer similar design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:2679,Modifiability,variab,variables,2679," not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` will incorrectly use the `initData()` version without default value but with one boolean flag, as `""mydefaultvalue""` is a `const char*` which requires a ""user-defined"" conversion to `std::string`, while `""help message""` is implicitely convertible to `bool` without any ""user-defined"" conversion, so preferred by the compiler. So if we break the compatibility to the current `initData()` API, I would strongly suggest to remove this issue, by removing the two optional bool flags which are seldom used anyway (and can be replaced by a call to `setDisplayed()` or `setReadOnly()`).; * compared to when this code was originally written, c++ now allows to put initializers of member variables in the class declaration directly, which for Data members could be preferable to initializing them in the constructor (the name and help message would be visible in the header instead of the implementation, it does not need to be duplicated in case there are multiple constructors, and there would no longer be any unhelpful warnings on some compilers about mismatched initialization orderings). I'm not suggesting to do that in all the components in this PR (as the diff would be horible to review), but any new designs of `initData` should check that this is possible (last time I looked at that, gcc and msvc did not agree on if we needed to write `Data<> d = initData(...)` versus `Data<> d { initData(...) }` versus `Data<> d = { initData(...) }`, but it was a long time ago...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:1080,Safety,redund,redundant,1080,"For historical explanations:; * we need to gather the pointers to all Data in a Base instance, so there must be a function somewhere that is called with both the pointer to the `Base*` object and to the `Data*`.; * a simple option could be to have the `Base*` pointer as a parameter of the Data constructor, however most compilers issue a warning if `this` is explicitly used when initializing member variables, as it is not fully constructed yet; * however, compilers are happy with calling a method, which itself use `this`, hence the initial implementation of `initData()` (which was called `dataField()`) had the `this` pointer implicitely, but needed the `Data*` pointer to add if to the ""fields"" map, which is why it was provided as an explicit parameter to the method; * later changes refactored this to add new features (such capturing which level of the class hierarchy is creating each Data), and the actual registration of the `Data*` in the list within Base was moved to the Data constructor, where the `Data*` pointer is available so the one from `initData()` became redundant. The newer similar design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:217,Usability,simpl,simple,217,"For historical explanations:; * we need to gather the pointers to all Data in a Base instance, so there must be a function somewhere that is called with both the pointer to the `Base*` object and to the `Data*`.; * a simple option could be to have the `Base*` pointer as a parameter of the Data constructor, however most compilers issue a warning if `this` is explicitly used when initializing member variables, as it is not fully constructed yet; * however, compilers are happy with calling a method, which itself use `this`, hence the initial implementation of `initData()` (which was called `dataField()`) had the `this` pointer implicitely, but needed the `Data*` pointer to add if to the ""fields"" map, which is why it was provided as an explicit parameter to the method; * later changes refactored this to add new features (such capturing which level of the class hierarchy is creating each Data), and the actual registration of the `Data*` in the list within Base was moved to the Data constructor, where the `Data*` pointer is available so the one from `initData()` became redundant. The newer similar design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877:178,Modifiability,maintainab,maintainable,178,"Hi all, . Thanks for the discussion. . My current understanding is that removing the whole InitData Mechanisme is:; - possible, ; - desirable (would make the code more clear and maintainable). This mean converting every ; ```c++; myData(initData(&myData, 0.1, ""myData"", ""helpe)) ; /// into ; myData(this, 0.1, ""myData"", ""helpe""); ; ```; About the use of ""this"" in a child constructor. My understanding is that it is considered safe for non virutal methods and attributes from the superclass (https://isocpp.org/wiki/faq/ctors#using-this-in-ctors). I also tried a pure constructor based initialization with g++ and clang++ and got no warnings with -Wall and -pedantic. About the ambiguity case cause by the char* to bool implicit conversion... I would say it would be much easier to fix when the initData machinary will be dropped. . EDIT: One more thing about the bool to specify the parameter... I think that using directly the enum 'named"" value or the setXXXX method to set the parameter is far better than using bool.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877:427,Safety,safe,safe,427,"Hi all, . Thanks for the discussion. . My current understanding is that removing the whole InitData Mechanisme is:; - possible, ; - desirable (would make the code more clear and maintainable). This mean converting every ; ```c++; myData(initData(&myData, 0.1, ""myData"", ""helpe)) ; /// into ; myData(this, 0.1, ""myData"", ""helpe""); ; ```; About the use of ""this"" in a child constructor. My understanding is that it is considered safe for non virutal methods and attributes from the superclass (https://isocpp.org/wiki/faq/ctors#using-this-in-ctors). I also tried a pure constructor based initialization with g++ and clang++ and got no warnings with -Wall and -pedantic. About the ambiguity case cause by the char* to bool implicit conversion... I would say it would be much easier to fix when the initData machinary will be dropped. . EDIT: One more thing about the bool to specify the parameter... I think that using directly the enum 'named"" value or the setXXXX method to set the parameter is far better than using bool.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877
https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877:168,Usability,clear,clear,168,"Hi all, . Thanks for the discussion. . My current understanding is that removing the whole InitData Mechanisme is:; - possible, ; - desirable (would make the code more clear and maintainable). This mean converting every ; ```c++; myData(initData(&myData, 0.1, ""myData"", ""helpe)) ; /// into ; myData(this, 0.1, ""myData"", ""helpe""); ; ```; About the use of ""this"" in a child constructor. My understanding is that it is considered safe for non virutal methods and attributes from the superclass (https://isocpp.org/wiki/faq/ctors#using-this-in-ctors). I also tried a pure constructor based initialization with g++ and clang++ and got no warnings with -Wall and -pedantic. About the ambiguity case cause by the char* to bool implicit conversion... I would say it would be much easier to fix when the initData machinary will be dropped. . EDIT: One more thing about the bool to specify the parameter... I think that using directly the enum 'named"" value or the setXXXX method to set the parameter is far better than using bool.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877
https://github.com/sofa-framework/sofa/pull/3227#issuecomment-1222392543:33,Usability,feedback,feedback,33,"Thanks a lot @alxbilger for your feedback, I will make the requested change :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3227#issuecomment-1222392543
https://github.com/sofa-framework/sofa/pull/3232#issuecomment-1229950339:74,Usability,feedback,feedback,74,Small warning before back porting... ; I got 10 minuets ago a preliminary feedback from @samFabrice that this change is not working as expected. ; He is investigating and will confirm/cancel the warning.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3232#issuecomment-1229950339
https://github.com/sofa-framework/sofa/pull/3233#issuecomment-1223895055:14,Usability,intuit,intuition,14,"@hugtalbot My intuition would answer no, but I cannot prove it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3233#issuecomment-1223895055
https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278:571,Security,access,accessors,571,"There is a primary template class that can act on any type (not just Data). In this case, the class is a simple proxy.; A second implementation partially specializes the class for vector types. Again, no need to be a Data. The type needs to implement the `begin` and `end` methods, and the `[](int)` operator, to be considered a vector type.; Finally, a third implementation partially specializes the class for Data. This specialization uses one of the first two implementation: `template<class T> class ReadAccessor<Data<T> > : public ReadAccessor<T>`.; We can say that accessors are meant to be used for Data only, but they need the implementations for any type (the type that is contained by the Data). And those implementations can be tested, even if they are not used. Worth to be noted:; `std::vector` is of course considered as a vector type. If I want to use it through an accessor, it matches the partial specialization for vector types. However, accessors for vector types require the type `Size` in the vector type (there is an alias). `std::vector` has not such a type, so the compilation fails. Accessors to vector types can be used only for `sofa::type::vector` (and its derived types). Conclusion: ; 1) there is a discrepancy between the `is_vector` type trait and the requirements of the accessors.; 2) Write `ReadAccessor<std::vector<Real> >` or `ReadAccessor<Data<std::vector<Real> > >` does not compile. To fix this behavior, I'll suggest in another PR something like; ```cpp; using Size = std::conditional_t<hasSizeSize<T>::value, T::Size, T::size_type>;; ```. I think the read-only flag has nothing to do with the accessors. I think it is related to the GUI only.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278
https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278:881,Security,access,accessor,881,"There is a primary template class that can act on any type (not just Data). In this case, the class is a simple proxy.; A second implementation partially specializes the class for vector types. Again, no need to be a Data. The type needs to implement the `begin` and `end` methods, and the `[](int)` operator, to be considered a vector type.; Finally, a third implementation partially specializes the class for Data. This specialization uses one of the first two implementation: `template<class T> class ReadAccessor<Data<T> > : public ReadAccessor<T>`.; We can say that accessors are meant to be used for Data only, but they need the implementations for any type (the type that is contained by the Data). And those implementations can be tested, even if they are not used. Worth to be noted:; `std::vector` is of course considered as a vector type. If I want to use it through an accessor, it matches the partial specialization for vector types. However, accessors for vector types require the type `Size` in the vector type (there is an alias). `std::vector` has not such a type, so the compilation fails. Accessors to vector types can be used only for `sofa::type::vector` (and its derived types). Conclusion: ; 1) there is a discrepancy between the `is_vector` type trait and the requirements of the accessors.; 2) Write `ReadAccessor<std::vector<Real> >` or `ReadAccessor<Data<std::vector<Real> > >` does not compile. To fix this behavior, I'll suggest in another PR something like; ```cpp; using Size = std::conditional_t<hasSizeSize<T>::value, T::Size, T::size_type>;; ```. I think the read-only flag has nothing to do with the accessors. I think it is related to the GUI only.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278
https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278:956,Security,access,accessors,956,"There is a primary template class that can act on any type (not just Data). In this case, the class is a simple proxy.; A second implementation partially specializes the class for vector types. Again, no need to be a Data. The type needs to implement the `begin` and `end` methods, and the `[](int)` operator, to be considered a vector type.; Finally, a third implementation partially specializes the class for Data. This specialization uses one of the first two implementation: `template<class T> class ReadAccessor<Data<T> > : public ReadAccessor<T>`.; We can say that accessors are meant to be used for Data only, but they need the implementations for any type (the type that is contained by the Data). And those implementations can be tested, even if they are not used. Worth to be noted:; `std::vector` is of course considered as a vector type. If I want to use it through an accessor, it matches the partial specialization for vector types. However, accessors for vector types require the type `Size` in the vector type (there is an alias). `std::vector` has not such a type, so the compilation fails. Accessors to vector types can be used only for `sofa::type::vector` (and its derived types). Conclusion: ; 1) there is a discrepancy between the `is_vector` type trait and the requirements of the accessors.; 2) Write `ReadAccessor<std::vector<Real> >` or `ReadAccessor<Data<std::vector<Real> > >` does not compile. To fix this behavior, I'll suggest in another PR something like; ```cpp; using Size = std::conditional_t<hasSizeSize<T>::value, T::Size, T::size_type>;; ```. I think the read-only flag has nothing to do with the accessors. I think it is related to the GUI only.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278
https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278:1304,Security,access,accessors,1304,"There is a primary template class that can act on any type (not just Data). In this case, the class is a simple proxy.; A second implementation partially specializes the class for vector types. Again, no need to be a Data. The type needs to implement the `begin` and `end` methods, and the `[](int)` operator, to be considered a vector type.; Finally, a third implementation partially specializes the class for Data. This specialization uses one of the first two implementation: `template<class T> class ReadAccessor<Data<T> > : public ReadAccessor<T>`.; We can say that accessors are meant to be used for Data only, but they need the implementations for any type (the type that is contained by the Data). And those implementations can be tested, even if they are not used. Worth to be noted:; `std::vector` is of course considered as a vector type. If I want to use it through an accessor, it matches the partial specialization for vector types. However, accessors for vector types require the type `Size` in the vector type (there is an alias). `std::vector` has not such a type, so the compilation fails. Accessors to vector types can be used only for `sofa::type::vector` (and its derived types). Conclusion: ; 1) there is a discrepancy between the `is_vector` type trait and the requirements of the accessors.; 2) Write `ReadAccessor<std::vector<Real> >` or `ReadAccessor<Data<std::vector<Real> > >` does not compile. To fix this behavior, I'll suggest in another PR something like; ```cpp; using Size = std::conditional_t<hasSizeSize<T>::value, T::Size, T::size_type>;; ```. I think the read-only flag has nothing to do with the accessors. I think it is related to the GUI only.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278
https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278:1635,Security,access,accessors,1635,"There is a primary template class that can act on any type (not just Data). In this case, the class is a simple proxy.; A second implementation partially specializes the class for vector types. Again, no need to be a Data. The type needs to implement the `begin` and `end` methods, and the `[](int)` operator, to be considered a vector type.; Finally, a third implementation partially specializes the class for Data. This specialization uses one of the first two implementation: `template<class T> class ReadAccessor<Data<T> > : public ReadAccessor<T>`.; We can say that accessors are meant to be used for Data only, but they need the implementations for any type (the type that is contained by the Data). And those implementations can be tested, even if they are not used. Worth to be noted:; `std::vector` is of course considered as a vector type. If I want to use it through an accessor, it matches the partial specialization for vector types. However, accessors for vector types require the type `Size` in the vector type (there is an alias). `std::vector` has not such a type, so the compilation fails. Accessors to vector types can be used only for `sofa::type::vector` (and its derived types). Conclusion: ; 1) there is a discrepancy between the `is_vector` type trait and the requirements of the accessors.; 2) Write `ReadAccessor<std::vector<Real> >` or `ReadAccessor<Data<std::vector<Real> > >` does not compile. To fix this behavior, I'll suggest in another PR something like; ```cpp; using Size = std::conditional_t<hasSizeSize<T>::value, T::Size, T::size_type>;; ```. I think the read-only flag has nothing to do with the accessors. I think it is related to the GUI only.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278
https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278:739,Testability,test,tested,739,"There is a primary template class that can act on any type (not just Data). In this case, the class is a simple proxy.; A second implementation partially specializes the class for vector types. Again, no need to be a Data. The type needs to implement the `begin` and `end` methods, and the `[](int)` operator, to be considered a vector type.; Finally, a third implementation partially specializes the class for Data. This specialization uses one of the first two implementation: `template<class T> class ReadAccessor<Data<T> > : public ReadAccessor<T>`.; We can say that accessors are meant to be used for Data only, but they need the implementations for any type (the type that is contained by the Data). And those implementations can be tested, even if they are not used. Worth to be noted:; `std::vector` is of course considered as a vector type. If I want to use it through an accessor, it matches the partial specialization for vector types. However, accessors for vector types require the type `Size` in the vector type (there is an alias). `std::vector` has not such a type, so the compilation fails. Accessors to vector types can be used only for `sofa::type::vector` (and its derived types). Conclusion: ; 1) there is a discrepancy between the `is_vector` type trait and the requirements of the accessors.; 2) Write `ReadAccessor<std::vector<Real> >` or `ReadAccessor<Data<std::vector<Real> > >` does not compile. To fix this behavior, I'll suggest in another PR something like; ```cpp; using Size = std::conditional_t<hasSizeSize<T>::value, T::Size, T::size_type>;; ```. I think the read-only flag has nothing to do with the accessors. I think it is related to the GUI only.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278
https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278:105,Usability,simpl,simple,105,"There is a primary template class that can act on any type (not just Data). In this case, the class is a simple proxy.; A second implementation partially specializes the class for vector types. Again, no need to be a Data. The type needs to implement the `begin` and `end` methods, and the `[](int)` operator, to be considered a vector type.; Finally, a third implementation partially specializes the class for Data. This specialization uses one of the first two implementation: `template<class T> class ReadAccessor<Data<T> > : public ReadAccessor<T>`.; We can say that accessors are meant to be used for Data only, but they need the implementations for any type (the type that is contained by the Data). And those implementations can be tested, even if they are not used. Worth to be noted:; `std::vector` is of course considered as a vector type. If I want to use it through an accessor, it matches the partial specialization for vector types. However, accessors for vector types require the type `Size` in the vector type (there is an alias). `std::vector` has not such a type, so the compilation fails. Accessors to vector types can be used only for `sofa::type::vector` (and its derived types). Conclusion: ; 1) there is a discrepancy between the `is_vector` type trait and the requirements of the accessors.; 2) Write `ReadAccessor<std::vector<Real> >` or `ReadAccessor<Data<std::vector<Real> > >` does not compile. To fix this behavior, I'll suggest in another PR something like; ```cpp; using Size = std::conditional_t<hasSizeSize<T>::value, T::Size, T::size_type>;; ```. I think the read-only flag has nothing to do with the accessors. I think it is related to the GUI only.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278
https://github.com/sofa-framework/sofa/pull/3298#issuecomment-1253551760:564,Usability,clear,clear,564,"Here are more details related to @alxbilger's concerns on ""do we want short name for fixed_array"". I think it would be interesting to go toward a systematic approach on generalizing the use of short names/alias in our code base because currently the ""do what you want"" policy leads to a lot of messiness in our code base with plenty of style inconsistencies. . So I would be in favor of the following rules: ; - every extern template XXXX should have use a short name. ; - every short name should be lead to an extern template. ; The two are good because it makes clear what is related to an extern template and what is not. . Now to have an idea on how much hardcoded short name do we want my guidelines are:; - every registered type in a factory (eg: TableDataWidget or in ObjectFactory) deserve a short name. ; - every type used in a Data<> in our code base deserve a short name (to be consistent with what is seen in the sofa scene). ; - never use long name if you can use a short name. . If you see other things to add/remove please tell.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3298#issuecomment-1253551760
https://github.com/sofa-framework/sofa/pull/3298#issuecomment-1253551760:694,Usability,guid,guidelines,694,"Here are more details related to @alxbilger's concerns on ""do we want short name for fixed_array"". I think it would be interesting to go toward a systematic approach on generalizing the use of short names/alias in our code base because currently the ""do what you want"" policy leads to a lot of messiness in our code base with plenty of style inconsistencies. . So I would be in favor of the following rules: ; - every extern template XXXX should have use a short name. ; - every short name should be lead to an extern template. ; The two are good because it makes clear what is related to an extern template and what is not. . Now to have an idea on how much hardcoded short name do we want my guidelines are:; - every registered type in a factory (eg: TableDataWidget or in ObjectFactory) deserve a short name. ; - every type used in a Data<> in our code base deserve a short name (to be consistent with what is seen in the sofa scene). ; - never use long name if you can use a short name. . If you see other things to add/remove please tell.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3298#issuecomment-1253551760
https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252283975:698,Deployability,update,update,698,"We already talked about that, and indeed you explained very well the nature of the problem and how to solve it. I don't think of a better approach. It is important to note that this pattern needs to be implemented again for classes, derived from BaseObject, and base class themselves. Look at `BarycentricMapping`, derived from `Mapping`, for example: it calls `Inherit1::doBaseObjectInit`, which is actually the same problem that you described. Here also it should be replaced by a ""delegate"" pattern. Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252283975
https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252283975:670,Usability,guid,guide,670,"We already talked about that, and indeed you explained very well the nature of the problem and how to solve it. I don't think of a better approach. It is important to note that this pattern needs to be implemented again for classes, derived from BaseObject, and base class themselves. Look at `BarycentricMapping`, derived from `Mapping`, for example: it calls `Inherit1::doBaseObjectInit`, which is actually the same problem that you described. Here also it should be replaced by a ""delegate"" pattern. Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252283975
https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:889,Deployability,update,update,889,"We discussed a lot about it...but we never did a PR on that topic probably fearing the refactoring work and the amount of workload it would generates. . > It is important to note that this pattern needs to be implemented again for classes, derived from BaseObject, and base class themselves. Look at BarycentricMapping, derived from Mapping, for example: it calls Inherit1::doBaseObjectInit, which is actually the same problem that you described. Here also it should be replaced by a ""delegate"" pattern. Yes, all call-super need to be fixed that way (which I didn't in the PR), I will not do that unless it is clear we are really going to do such a breaking change in the sofa code base ;) . > Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get docum",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162
https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:2059,Integrability,contract,contract,2059,"e of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get documentation on what the ""methodDelegated"" should do (to know contract the child has to fulfill). . The advantage I see with that naming scheme is that it works with chain of delegation. So the code should look like:; ```cpp; BaseObject::init() /// non virtual ; {; // I do the stuff shared by all child ; checkWhatever();; ; // ask my child to do their specific init, ; doBaseObjectInit(); }. BarycentricMapping::doBaseObjectInit() final; {; // I do the stuff shared by all of my child ; checkWhatever();; ; // ask my child to do their specific init, ; doBarycentricMappingInit();; }. MyChildOfBarycentricMapping::doBarycentricMapping() final; {; // ask my child to do their specific init, ; }; ```. This long naming scheme also has some good properties in case of multiple in-heritance, as it avoid colliding delegate function's name. . Of course, any other naming scheme suggestion is welcomed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162
https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:87,Modifiability,refactor,refactoring,87,"We discussed a lot about it...but we never did a PR on that topic probably fearing the refactoring work and the amount of workload it would generates. . > It is important to note that this pattern needs to be implemented again for classes, derived from BaseObject, and base class themselves. Look at BarycentricMapping, derived from Mapping, for example: it calls Inherit1::doBaseObjectInit, which is actually the same problem that you described. Here also it should be replaced by a ""delegate"" pattern. Yes, all call-super need to be fixed that way (which I didn't in the PR), I will not do that unless it is clear we are really going to do such a breaking change in the sofa code base ;) . > Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get docum",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162
https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:1203,Safety,detect,detected,1203,"ttern needs to be implemented again for classes, derived from BaseObject, and base class themselves. Look at BarycentricMapping, derived from Mapping, for example: it calls Inherit1::doBaseObjectInit, which is actually the same problem that you described. Here also it should be replaced by a ""delegate"" pattern. Yes, all call-super need to be fixed that way (which I didn't in the PR), I will not do that unless it is clear we are really going to do such a breaking change in the sofa code base ;) . > Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get documentation on what the ""methodDelegated"" should do (to know contract the child has to fulfill). . The advantage I see with that naming scheme is that it works with chain of delegation. So the c",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162
https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:2792,Safety,avoid,avoid,2792,"e of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get documentation on what the ""methodDelegated"" should do (to know contract the child has to fulfill). . The advantage I see with that naming scheme is that it works with chain of delegation. So the code should look like:; ```cpp; BaseObject::init() /// non virtual ; {; // I do the stuff shared by all child ; checkWhatever();; ; // ask my child to do their specific init, ; doBaseObjectInit(); }. BarycentricMapping::doBaseObjectInit() final; {; // I do the stuff shared by all of my child ; checkWhatever();; ; // ask my child to do their specific init, ; doBarycentricMappingInit();; }. MyChildOfBarycentricMapping::doBarycentricMapping() final; {; // ask my child to do their specific init, ; }; ```. This long naming scheme also has some good properties in case of multiple in-heritance, as it avoid colliding delegate function's name. . Of course, any other naming scheme suggestion is welcomed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162
https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:610,Usability,clear,clear,610,"We discussed a lot about it...but we never did a PR on that topic probably fearing the refactoring work and the amount of workload it would generates. . > It is important to note that this pattern needs to be implemented again for classes, derived from BaseObject, and base class themselves. Look at BarycentricMapping, derived from Mapping, for example: it calls Inherit1::doBaseObjectInit, which is actually the same problem that you described. Here also it should be replaced by a ""delegate"" pattern. Yes, all call-super need to be fixed that way (which I didn't in the PR), I will not do that unless it is clear we are really going to do such a breaking change in the sofa code base ;) . > Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get docum",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162
https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:861,Usability,guid,guide,861,"We discussed a lot about it...but we never did a PR on that topic probably fearing the refactoring work and the amount of workload it would generates. . > It is important to note that this pattern needs to be implemented again for classes, derived from BaseObject, and base class themselves. Look at BarycentricMapping, derived from Mapping, for example: it calls Inherit1::doBaseObjectInit, which is actually the same problem that you described. Here also it should be replaced by a ""delegate"" pattern. Yes, all call-super need to be fixed that way (which I didn't in the PR), I will not do that unless it is clear we are really going to do such a breaking change in the sofa code base ;) . > Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get docum",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162
https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:1543,Usability,clear,clear,1543," Yes, all call-super need to be fixed that way (which I didn't in the PR), I will not do that unless it is clear we are really going to do such a breaking change in the sofa code base ;) . > Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get documentation on what the ""methodDelegated"" should do (to know contract the child has to fulfill). . The advantage I see with that naming scheme is that it works with chain of delegation. So the code should look like:; ```cpp; BaseObject::init() /// non virtual ; {; // I do the stuff shared by all child ; checkWhatever();; ; // ask my child to do their specific init, ; doBaseObjectInit(); }. BarycentricMapping::doBaseObjectInit() final; {; // I do the stuff shared by all of my child ; checkWhatever();;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162
https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256001467:143,Usability,simpl,simplapi,143,"Thanks again for the investigation. I see you are using the raw c++ code to make your scene. Instead of doing that the ""hard way"" you can use ""simplapi"" which mimick in c++ de python one. It is in sofa/simulation/graph/simpleapi.h and there are exemple in the code base.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256001467
https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256001467:219,Usability,simpl,simpleapi,219,"Thanks again for the investigation. I see you are using the raw c++ code to make your scene. Instead of doing that the ""hard way"" you can use ""simplapi"" which mimick in c++ de python one. It is in sofa/simulation/graph/simpleapi.h and there are exemple in the code base.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256001467
https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256275783:448,Integrability,depend,depends,448,"@ScheiklP Here is a branch with a simple object tracker: https://github.com/alxbilger/sofa/tree/objecttracker. It counts the number of creation and destruction for each class managed with the `SOFA_CLASS` macro. Note that if `Y` derives from `X`, it counts both `X` and `Y`. Finally, it prints a summary when the program finishes (properly). But I cannot guarantee that more destructions does not happen after the summary (static destruction order depends on construction order and https://en.cppreference.com/w/cpp/language/siof). Is this useful to you? Can you spot which component is not destroyed?. The diff is here: https://github.com/sofa-framework/sofa/compare/master...alxbilger:sofa:objecttracker?expand=1. For example, there are a couple of components in caduceus where I see a difference between nb of allocations and destructions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256275783
https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256275783:34,Usability,simpl,simple,34,"@ScheiklP Here is a branch with a simple object tracker: https://github.com/alxbilger/sofa/tree/objecttracker. It counts the number of creation and destruction for each class managed with the `SOFA_CLASS` macro. Note that if `Y` derives from `X`, it counts both `X` and `Y`. Finally, it prints a summary when the program finishes (properly). But I cannot guarantee that more destructions does not happen after the summary (static destruction order depends on construction order and https://en.cppreference.com/w/cpp/language/siof). Is this useful to you? Can you spot which component is not destroyed?. The diff is here: https://github.com/sofa-framework/sofa/compare/master...alxbilger:sofa:objecttracker?expand=1. For example, there are a couple of components in caduceus where I see a difference between nb of allocations and destructions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256275783
https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256642333:228,Deployability,release,release,228,"```; void NarrowPhaseDetection::endNarrowPhase(); {; for (auto it = m_outputsMap.begin(); it != m_outputsMap.end();); {; DetectionOutputVector *do_vec = (it->second);; if (!do_vec || do_vec->empty()); {; if (do_vec); {; do_vec->release();; }; m_outputsMap.erase(it++);; }; else; {; ++it;; }; }; }; ```. The intended behavior of this is ""if the vector is empty, or it's a nullpointer, remove it from the map. If it is not a nullpointer, also release the vector"", right?. Since the `do_vec->clear()` is in `beginNarrowPhase`, the vector is never released correctly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256642333
https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256642333:441,Deployability,release,release,441,"```; void NarrowPhaseDetection::endNarrowPhase(); {; for (auto it = m_outputsMap.begin(); it != m_outputsMap.end();); {; DetectionOutputVector *do_vec = (it->second);; if (!do_vec || do_vec->empty()); {; if (do_vec); {; do_vec->release();; }; m_outputsMap.erase(it++);; }; else; {; ++it;; }; }; }; ```. The intended behavior of this is ""if the vector is empty, or it's a nullpointer, remove it from the map. If it is not a nullpointer, also release the vector"", right?. Since the `do_vec->clear()` is in `beginNarrowPhase`, the vector is never released correctly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256642333
https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256642333:544,Deployability,release,released,544,"```; void NarrowPhaseDetection::endNarrowPhase(); {; for (auto it = m_outputsMap.begin(); it != m_outputsMap.end();); {; DetectionOutputVector *do_vec = (it->second);; if (!do_vec || do_vec->empty()); {; if (do_vec); {; do_vec->release();; }; m_outputsMap.erase(it++);; }; else; {; ++it;; }; }; }; ```. The intended behavior of this is ""if the vector is empty, or it's a nullpointer, remove it from the map. If it is not a nullpointer, also release the vector"", right?. Since the `do_vec->clear()` is in `beginNarrowPhase`, the vector is never released correctly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256642333
https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256642333:489,Usability,clear,clear,489,"```; void NarrowPhaseDetection::endNarrowPhase(); {; for (auto it = m_outputsMap.begin(); it != m_outputsMap.end();); {; DetectionOutputVector *do_vec = (it->second);; if (!do_vec || do_vec->empty()); {; if (do_vec); {; do_vec->release();; }; m_outputsMap.erase(it++);; }; else; {; ++it;; }; }; }; ```. The intended behavior of this is ""if the vector is empty, or it's a nullpointer, remove it from the map. If it is not a nullpointer, also release the vector"", right?. Since the `do_vec->clear()` is in `beginNarrowPhase`, the vector is never released correctly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256642333
https://github.com/sofa-framework/sofa/pull/3327#issuecomment-1272091500:177,Usability,clear,clear,177,@hugtalbot @alxbilger @fredroy ; I have added the deprecated lifecycle mechanism as requested. Could you tell me if I did it right. The instructions on the webpage are not 100% clear to me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3327#issuecomment-1272091500
https://github.com/sofa-framework/sofa/pull/3328#issuecomment-1272102338:242,Usability,clear,clear,242,> I recommend to deprecate Data fields properly. See https://www.sofa-framework.org/community/doc/contributing-to-sofa/lifecycle-mechanisms/#removing-a-datafield. I did something to correctly depreciate the Data. The instruction are not 100% clear to me (regarding dates inside the macro and parse method). Let me know if it seems correct.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3328#issuecomment-1272102338
https://github.com/sofa-framework/sofa/pull/3335#issuecomment-1257009032:5,Usability,feedback,feedback,5,your feedback would be good @bakpaul @courtecuisse @ziqiu-zeng,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3335#issuecomment-1257009032
https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648:333,Deployability,update,update,333,"These two components were added as a tool to smooth the transition between the use of hard-coded alias in our code base to ""no alias"" at all. The underlying idea was to propose our users, and more specifically the one complaining about the disappearance of the alias they are using, a simple way to restore it (if they don't want to update their complete scene base). . About the fact is it not used... this is not surprising as we are not removing the aliases as it was planned and when we do it we are updating all the scenes in our code base (removing the need for MakeAlias). I personally think that the approach proposed in (#PR 2512: https://github.com/sofa-framework/sofa/pull/2512) is much elegant compared to the MakeAlias (and would advocate to remove MakeAlias when something similar to 2512 is merged) . In any case (either with MakeAlias *or* the Import component) hard-coding multiple aliases for a single component in our c++ code is an UX mistake while letting user specify their aliases is an UX feature, so I would be more in favor for having a clear roadmap to remove the aliases.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648
https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648:285,Usability,simpl,simple,285,"These two components were added as a tool to smooth the transition between the use of hard-coded alias in our code base to ""no alias"" at all. The underlying idea was to propose our users, and more specifically the one complaining about the disappearance of the alias they are using, a simple way to restore it (if they don't want to update their complete scene base). . About the fact is it not used... this is not surprising as we are not removing the aliases as it was planned and when we do it we are updating all the scenes in our code base (removing the need for MakeAlias). I personally think that the approach proposed in (#PR 2512: https://github.com/sofa-framework/sofa/pull/2512) is much elegant compared to the MakeAlias (and would advocate to remove MakeAlias when something similar to 2512 is merged) . In any case (either with MakeAlias *or* the Import component) hard-coding multiple aliases for a single component in our c++ code is an UX mistake while letting user specify their aliases is an UX feature, so I would be more in favor for having a clear roadmap to remove the aliases.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648
https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648:952,Usability,UX,UX,952,"These two components were added as a tool to smooth the transition between the use of hard-coded alias in our code base to ""no alias"" at all. The underlying idea was to propose our users, and more specifically the one complaining about the disappearance of the alias they are using, a simple way to restore it (if they don't want to update their complete scene base). . About the fact is it not used... this is not surprising as we are not removing the aliases as it was planned and when we do it we are updating all the scenes in our code base (removing the need for MakeAlias). I personally think that the approach proposed in (#PR 2512: https://github.com/sofa-framework/sofa/pull/2512) is much elegant compared to the MakeAlias (and would advocate to remove MakeAlias when something similar to 2512 is merged) . In any case (either with MakeAlias *or* the Import component) hard-coding multiple aliases for a single component in our c++ code is an UX mistake while letting user specify their aliases is an UX feature, so I would be more in favor for having a clear roadmap to remove the aliases.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648
https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648:1010,Usability,UX,UX,1010,"These two components were added as a tool to smooth the transition between the use of hard-coded alias in our code base to ""no alias"" at all. The underlying idea was to propose our users, and more specifically the one complaining about the disappearance of the alias they are using, a simple way to restore it (if they don't want to update their complete scene base). . About the fact is it not used... this is not surprising as we are not removing the aliases as it was planned and when we do it we are updating all the scenes in our code base (removing the need for MakeAlias). I personally think that the approach proposed in (#PR 2512: https://github.com/sofa-framework/sofa/pull/2512) is much elegant compared to the MakeAlias (and would advocate to remove MakeAlias when something similar to 2512 is merged) . In any case (either with MakeAlias *or* the Import component) hard-coding multiple aliases for a single component in our c++ code is an UX mistake while letting user specify their aliases is an UX feature, so I would be more in favor for having a clear roadmap to remove the aliases.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648
https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648:1063,Usability,clear,clear,1063,"These two components were added as a tool to smooth the transition between the use of hard-coded alias in our code base to ""no alias"" at all. The underlying idea was to propose our users, and more specifically the one complaining about the disappearance of the alias they are using, a simple way to restore it (if they don't want to update their complete scene base). . About the fact is it not used... this is not surprising as we are not removing the aliases as it was planned and when we do it we are updating all the scenes in our code base (removing the need for MakeAlias). I personally think that the approach proposed in (#PR 2512: https://github.com/sofa-framework/sofa/pull/2512) is much elegant compared to the MakeAlias (and would advocate to remove MakeAlias when something similar to 2512 is merged) . In any case (either with MakeAlias *or* the Import component) hard-coding multiple aliases for a single component in our c++ code is an UX mistake while letting user specify their aliases is an UX feature, so I would be more in favor for having a clear roadmap to remove the aliases.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648
https://github.com/sofa-framework/sofa/pull/3412#issuecomment-1288098257:25,Usability,clear,clear,25,nice job and thx for the clear PR explanation,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3412#issuecomment-1288098257
https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688:73,Modifiability,refactor,refactoring,73,"Not sure it solves any problem and it might degrade performances. A full refactoring of AdvancedTimer should be the objective to make it simple, thread-safe and shiny!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688
https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688:52,Performance,perform,performances,52,"Not sure it solves any problem and it might degrade performances. A full refactoring of AdvancedTimer should be the objective to make it simple, thread-safe and shiny!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688
https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688:152,Safety,safe,safe,152,"Not sure it solves any problem and it might degrade performances. A full refactoring of AdvancedTimer should be the objective to make it simple, thread-safe and shiny!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688
https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688:137,Usability,simpl,simple,137,"Not sure it solves any problem and it might degrade performances. A full refactoring of AdvancedTimer should be the objective to make it simple, thread-safe and shiny!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688
https://github.com/sofa-framework/sofa/pull/3435#issuecomment-1299944386:119,Usability,feedback,feedback,119,Discussion : what about remove the usage of float within SOFA to lighten the code base of SOFA. This might affect (and feedback would be interesting) some guys @ziqiu-zeng @courtecuisse @bakpaul,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3435#issuecomment-1299944386
https://github.com/sofa-framework/sofa/issues/3450#issuecomment-1307832420:499,Usability,UX,UX,499,"The problem is because the alias introduced in commit https://github.com/sofa-framework/sofa/commit/cd3b8aea26c296c2f0bb948ec6f96807565522bf translated every ""float"" to 'f"" ... which only works for component that implement GetCustemTemplateName() consistently with the sofa template name convention. For component that does not do such a thing the templateName() is decoded from the typeid().name() (which is plateform specific). The automatic decoding from typeid is bad practice that leaks to the UX implementation/compiler details. . To fix the issue the NameDecoder mechanism (or the SOFA_CLASS macro) should be improved to check if there is DataTypeInfo<T>::name() before calling the NameDecoder.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3450#issuecomment-1307832420
https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307358562:95,Security,validat,validate,95,> An opportunity to add a unit test in SofaPython3 ;); +1. But SofaPython3 is not the place to validate sofa core behavior. It would be much better to have it in Sofa implemented using simpleapi. And not in a reverting PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307358562
https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307358562:31,Testability,test,test,31,> An opportunity to add a unit test in SofaPython3 ;); +1. But SofaPython3 is not the place to validate sofa core behavior. It would be much better to have it in Sofa implemented using simpleapi. And not in a reverting PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307358562
https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307358562:185,Usability,simpl,simpleapi,185,> An opportunity to add a unit test in SofaPython3 ;); +1. But SofaPython3 is not the place to validate sofa core behavior. It would be much better to have it in Sofa implemented using simpleapi. And not in a reverting PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307358562
https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386:29,Modifiability,refactor,refactoring,29,"@alxbilger I implemented the refactoring of NameDecoder and clearly this is way better that way. Some part fit much more naturally and both NameDecoder and BaseClassNameHelper have kind of consistency on their respective role. . EDIT: I directly went to the DISABLED state as I see no simple way (apart from duplicating the code) to keep the feature. But In our whole code base, that was very rarely used.. so I think this is the same for plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386
https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386:439,Modifiability,plugin,plugins,439,"@alxbilger I implemented the refactoring of NameDecoder and clearly this is way better that way. Some part fit much more naturally and both NameDecoder and BaseClassNameHelper have kind of consistency on their respective role. . EDIT: I directly went to the DISABLED state as I see no simple way (apart from duplicating the code) to keep the feature. But In our whole code base, that was very rarely used.. so I think this is the same for plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386
https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386:60,Usability,clear,clearly,60,"@alxbilger I implemented the refactoring of NameDecoder and clearly this is way better that way. Some part fit much more naturally and both NameDecoder and BaseClassNameHelper have kind of consistency on their respective role. . EDIT: I directly went to the DISABLED state as I see no simple way (apart from duplicating the code) to keep the feature. But In our whole code base, that was very rarely used.. so I think this is the same for plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386
https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386:285,Usability,simpl,simple,285,"@alxbilger I implemented the refactoring of NameDecoder and clearly this is way better that way. Some part fit much more naturally and both NameDecoder and BaseClassNameHelper have kind of consistency on their respective role. . EDIT: I directly went to the DISABLED state as I see no simple way (apart from duplicating the code) to keep the feature. But In our whole code base, that was very rarely used.. so I think this is the same for plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386
https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347:34,Energy Efficiency,schedul,scheduler,34,"For some reasons, the static task scheduler could not be destroyed by the end of the program because it results into a deadlock: the worker threads are not woken up by the destructor of the task scheduler. I did not find how to fix this issue. Therefore, I clear the task schedulers before the end of the program, in the module `cleanup` function. It did not happened before because the task scheduler was never destroyed resulting in a memory leak and not-joined idle threads.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347
https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347:195,Energy Efficiency,schedul,scheduler,195,"For some reasons, the static task scheduler could not be destroyed by the end of the program because it results into a deadlock: the worker threads are not woken up by the destructor of the task scheduler. I did not find how to fix this issue. Therefore, I clear the task schedulers before the end of the program, in the module `cleanup` function. It did not happened before because the task scheduler was never destroyed resulting in a memory leak and not-joined idle threads.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347
https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347:272,Energy Efficiency,schedul,schedulers,272,"For some reasons, the static task scheduler could not be destroyed by the end of the program because it results into a deadlock: the worker threads are not woken up by the destructor of the task scheduler. I did not find how to fix this issue. Therefore, I clear the task schedulers before the end of the program, in the module `cleanup` function. It did not happened before because the task scheduler was never destroyed resulting in a memory leak and not-joined idle threads.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347
https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347:392,Energy Efficiency,schedul,scheduler,392,"For some reasons, the static task scheduler could not be destroyed by the end of the program because it results into a deadlock: the worker threads are not woken up by the destructor of the task scheduler. I did not find how to fix this issue. Therefore, I clear the task schedulers before the end of the program, in the module `cleanup` function. It did not happened before because the task scheduler was never destroyed resulting in a memory leak and not-joined idle threads.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347
https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347:257,Usability,clear,clear,257,"For some reasons, the static task scheduler could not be destroyed by the end of the program because it results into a deadlock: the worker threads are not woken up by the destructor of the task scheduler. I did not find how to fix this issue. Therefore, I clear the task schedulers before the end of the program, in the module `cleanup` function. It did not happened before because the task scheduler was never destroyed resulting in a memory leak and not-joined idle threads.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347
https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324904059:46,Usability,feedback,feedback,46,@damienmarchal It makes sense. Thanks for the feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324904059
https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315420671:349,Availability,error,error,349,"hi @fredroy, thanks for getting back. I am using Ubuntu 18.04.6 LTS. In `sofaframework/sofabuilder_ubuntu`, I clone the repo `git clone -b v22.06.00 https://github.com/sofa-framework/sofa.git sofa/src` and followed the procedure for `build SOFA on [Linux](https://www.sofa-framework.org/community/doc/getting-started/build/linux/)` and got the same error while running ./runSofa. while using `sofaframework/sofa_nightly_ubuntu:v22.06-full`, I first directly run ./runSofa without building sofa and then with building as earlier but again same error. ; Please also guide me if I have even have to build in second case `(sofaframework/sofa_nightly_ubuntu:v22.06-full)`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315420671
https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315420671:543,Availability,error,error,543,"hi @fredroy, thanks for getting back. I am using Ubuntu 18.04.6 LTS. In `sofaframework/sofabuilder_ubuntu`, I clone the repo `git clone -b v22.06.00 https://github.com/sofa-framework/sofa.git sofa/src` and followed the procedure for `build SOFA on [Linux](https://www.sofa-framework.org/community/doc/getting-started/build/linux/)` and got the same error while running ./runSofa. while using `sofaframework/sofa_nightly_ubuntu:v22.06-full`, I first directly run ./runSofa without building sofa and then with building as earlier but again same error. ; Please also guide me if I have even have to build in second case `(sofaframework/sofa_nightly_ubuntu:v22.06-full)`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315420671
https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315420671:564,Usability,guid,guide,564,"hi @fredroy, thanks for getting back. I am using Ubuntu 18.04.6 LTS. In `sofaframework/sofabuilder_ubuntu`, I clone the repo `git clone -b v22.06.00 https://github.com/sofa-framework/sofa.git sofa/src` and followed the procedure for `build SOFA on [Linux](https://www.sofa-framework.org/community/doc/getting-started/build/linux/)` and got the same error while running ./runSofa. while using `sofaframework/sofa_nightly_ubuntu:v22.06-full`, I first directly run ./runSofa without building sofa and then with building as earlier but again same error. ; Please also guide me if I have even have to build in second case `(sofaframework/sofa_nightly_ubuntu:v22.06-full)`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315420671
https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1337325939:181,Testability,test,test,181,"https://github.com/sofa-framework/sofa/pull/3512 is already merged.; But you could try to add your changes on https://github.com/sofa-framework/sofa/pull/3501. According to my unit test, a simple; ```cpp; if (n == 0); {; return true;; }; ```; makes the job",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1337325939
https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1337325939:189,Usability,simpl,simple,189,"https://github.com/sofa-framework/sofa/pull/3512 is already merged.; But you could try to add your changes on https://github.com/sofa-framework/sofa/pull/3501. According to my unit test, a simple; ```cpp; if (n == 0); {; return true;; }; ```; makes the job",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1337325939
https://github.com/sofa-framework/sofa/pull/3503#issuecomment-1325242993:123,Security,access,accessor,123,"In term of easy task for newcommers, ; finding excessive calls to getValue() is clearly one of them (same for begin/end vs accessor).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3503#issuecomment-1325242993
https://github.com/sofa-framework/sofa/pull/3503#issuecomment-1325242993:80,Usability,clear,clearly,80,"In term of easy task for newcommers, ; finding excessive calls to getValue() is clearly one of them (same for begin/end vs accessor).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3503#issuecomment-1325242993
https://github.com/sofa-framework/sofa/pull/3508#issuecomment-1331766967:60,Usability,simpl,simple,60,"Indeed, no example of the component was found, so I added a simple one: a beam under gravity",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3508#issuecomment-1331766967
https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910:629,Integrability,rout,routine,629,"Thanks a lot @chhas for the investigation :raised_hands:; I'm no specialist either, but, although most changes in the commit are simply `Vector3 -> Vec3`, there are two things that seem suspicious to me, in `SofaViewer.cpp` (l.256-295) and `QtGLViewer.cpp`(l.823-860) (sorry, I can't find an easy way to link to a specific line in a commit diff view).; In both, there is a change of condition from :; ```; if( isControlPressed() ); ```; to; ```; if (!isControlPressed() && !e->isAutoRepeat()); ```; before calling a `propagateEvent` method on the `QKeyEvent` being processed.; I had a brief look: `isAutoRepeat` seems to be a Qt routine always returning an `autor` variable being set to 1 in `qevent.h`. And `isControlPressed()` refers to an internal variable `m_isControlPressed` in `SofaViewer.h`, which does what its name suggests. At this point, it seems that these modifications could very well explain the two changes of behaviour I was describing above.; @damienmarchal, could you give us some input on this ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910
https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910:665,Modifiability,variab,variable,665,"Thanks a lot @chhas for the investigation :raised_hands:; I'm no specialist either, but, although most changes in the commit are simply `Vector3 -> Vec3`, there are two things that seem suspicious to me, in `SofaViewer.cpp` (l.256-295) and `QtGLViewer.cpp`(l.823-860) (sorry, I can't find an easy way to link to a specific line in a commit diff view).; In both, there is a change of condition from :; ```; if( isControlPressed() ); ```; to; ```; if (!isControlPressed() && !e->isAutoRepeat()); ```; before calling a `propagateEvent` method on the `QKeyEvent` being processed.; I had a brief look: `isAutoRepeat` seems to be a Qt routine always returning an `autor` variable being set to 1 in `qevent.h`. And `isControlPressed()` refers to an internal variable `m_isControlPressed` in `SofaViewer.h`, which does what its name suggests. At this point, it seems that these modifications could very well explain the two changes of behaviour I was describing above.; @damienmarchal, could you give us some input on this ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910
https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910:751,Modifiability,variab,variable,751,"Thanks a lot @chhas for the investigation :raised_hands:; I'm no specialist either, but, although most changes in the commit are simply `Vector3 -> Vec3`, there are two things that seem suspicious to me, in `SofaViewer.cpp` (l.256-295) and `QtGLViewer.cpp`(l.823-860) (sorry, I can't find an easy way to link to a specific line in a commit diff view).; In both, there is a change of condition from :; ```; if( isControlPressed() ); ```; to; ```; if (!isControlPressed() && !e->isAutoRepeat()); ```; before calling a `propagateEvent` method on the `QKeyEvent` being processed.; I had a brief look: `isAutoRepeat` seems to be a Qt routine always returning an `autor` variable being set to 1 in `qevent.h`. And `isControlPressed()` refers to an internal variable `m_isControlPressed` in `SofaViewer.h`, which does what its name suggests. At this point, it seems that these modifications could very well explain the two changes of behaviour I was describing above.; @damienmarchal, could you give us some input on this ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910
https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910:129,Usability,simpl,simply,129,"Thanks a lot @chhas for the investigation :raised_hands:; I'm no specialist either, but, although most changes in the commit are simply `Vector3 -> Vec3`, there are two things that seem suspicious to me, in `SofaViewer.cpp` (l.256-295) and `QtGLViewer.cpp`(l.823-860) (sorry, I can't find an easy way to link to a specific line in a commit diff view).; In both, there is a change of condition from :; ```; if( isControlPressed() ); ```; to; ```; if (!isControlPressed() && !e->isAutoRepeat()); ```; before calling a `propagateEvent` method on the `QKeyEvent` being processed.; I had a brief look: `isAutoRepeat` seems to be a Qt routine always returning an `autor` variable being set to 1 in `qevent.h`. And `isControlPressed()` refers to an internal variable `m_isControlPressed` in `SofaViewer.h`, which does what its name suggests. At this point, it seems that these modifications could very well explain the two changes of behaviour I was describing above.; @damienmarchal, could you give us some input on this ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910
https://github.com/sofa-framework/sofa/pull/3556#issuecomment-1386675840:101,Usability,feedback,feedback,101,"Parse function should warn when using the removed Data `blockSize` :pray: ; Then, without additional feedback, will be merged",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3556#issuecomment-1386675840
https://github.com/sofa-framework/sofa/pull/3584#issuecomment-1385001387:103,Usability,simpl,simply,103,"Strangely, gcc cannot find the operator for the implicit conversion from `Mat<1,1,int>` to `int`. So I simply made the conversion explicit and it's working.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3584#issuecomment-1385001387
https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805:62,Modifiability,refactor,refactor,62,"@fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)).; My point is, don't merge this PR right now, unless is super urgent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805
https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805:365,Performance,perform,performances,365,"@fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)).; My point is, don't merge this PR right now, unless is super urgent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805
https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805:208,Usability,simpl,simply,208,"@fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)).; My point is, don't merge this PR right now, unless is super urgent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805
https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805:253,Usability,simpl,simply,253,"@fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)).; My point is, don't merge this PR right now, unless is super urgent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805
https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232:64,Modifiability,refactor,refactor,64,"> @fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)). My point is, don't merge this PR right now, unless is super urgent. Of course, it would be much better to effectively fix the problem than to ignore it. This PR was just providing a quick but brainless solution for a (hopefully) temporary fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232
https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232:367,Performance,perform,performances,367,"> @fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)). My point is, don't merge this PR right now, unless is super urgent. Of course, it would be much better to effectively fix the problem than to ignore it. This PR was just providing a quick but brainless solution for a (hopefully) temporary fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232
https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232:210,Usability,simpl,simply,210,"> @fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)). My point is, don't merge this PR right now, unless is super urgent. Of course, it would be much better to effectively fix the problem than to ignore it. This PR was just providing a quick but brainless solution for a (hopefully) temporary fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232
https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232:255,Usability,simpl,simply,255,"> @fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)). My point is, don't merge this PR right now, unless is super urgent. Of course, it would be much better to effectively fix the problem than to ignore it. This PR was just providing a quick but brainless solution for a (hopefully) temporary fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232
https://github.com/sofa-framework/sofa/pull/3658#issuecomment-1433788701:138,Usability,clear,clearly,138,"cool @fredroy . > Note that you need to do one step before being able to see the boxes (dont know if it is on purpose or not). this might clearly be computed at first step, but I do not see why it could not be done at init..",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3658#issuecomment-1433788701
https://github.com/sofa-framework/sofa/pull/3680#issuecomment-1479115587:125,Usability,clear,clear,125,"Hi @EulalieCoevoet, @hugtalbot, @bakpaul . We discussed this PR today and agree this is nice work to merge... but it was not clear which part of the discussion still hold or not. Can you make a short summary and flag discussion as resolved.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3680#issuecomment-1479115587
https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112:325,Availability,down,down,325,"Hello,; would it be possible to provide a simple test?; It seems there is no unit/scene/regression tests which are using Multi2Mapping and its `input2` apparently.; And by just looking at the code, I cannot see why `input2` would be impacted by #3665 as there is no `validator` for input2 😅; It would be much easier to track down the bug, thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112
https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112:267,Security,validat,validator,267,"Hello,; would it be possible to provide a simple test?; It seems there is no unit/scene/regression tests which are using Multi2Mapping and its `input2` apparently.; And by just looking at the code, I cannot see why `input2` would be impacted by #3665 as there is no `validator` for input2 😅; It would be much easier to track down the bug, thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112
https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112:49,Testability,test,test,49,"Hello,; would it be possible to provide a simple test?; It seems there is no unit/scene/regression tests which are using Multi2Mapping and its `input2` apparently.; And by just looking at the code, I cannot see why `input2` would be impacted by #3665 as there is no `validator` for input2 😅; It would be much easier to track down the bug, thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112
https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112:99,Testability,test,tests,99,"Hello,; would it be possible to provide a simple test?; It seems there is no unit/scene/regression tests which are using Multi2Mapping and its `input2` apparently.; And by just looking at the code, I cannot see why `input2` would be impacted by #3665 as there is no `validator` for input2 😅; It would be much easier to track down the bug, thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112
https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112:42,Usability,simpl,simple,42,"Hello,; would it be possible to provide a simple test?; It seems there is no unit/scene/regression tests which are using Multi2Mapping and its `input2` apparently.; And by just looking at the code, I cannot see why `input2` would be impacted by #3665 as there is no `validator` for input2 😅; It would be much easier to track down the bug, thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112
https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603:15,Availability,failure,failure,15,"The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603
https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603:354,Integrability,message,message,354,"The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603
https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603:409,Integrability,message,message,409,"The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603
https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603:9,Testability,test,tests,9,"The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603
https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603:255,Usability,clear,clearHandlers,255,"The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603
https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603:343,Usability,clear,clears,343,"The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603
https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997:17,Availability,failure,failure,17,"> The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier. Well done!; I have added the `breaking` flag due to the change of some signatures for some methods",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997
https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997:356,Integrability,message,message,356,"> The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier. Well done!; I have added the `breaking` flag due to the change of some signatures for some methods",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997
https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997:411,Integrability,message,message,411,"> The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier. Well done!; I have added the `breaking` flag due to the change of some signatures for some methods",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997
https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997:11,Testability,test,tests,11,"> The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier. Well done!; I have added the `breaking` flag due to the change of some signatures for some methods",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997
https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997:257,Usability,clear,clearHandlers,257,"> The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier. Well done!; I have added the `breaking` flag due to the change of some signatures for some methods",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997
https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997:345,Usability,clear,clears,345,"> The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier. Well done!; I have added the `breaking` flag due to the change of some signatures for some methods",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:83,Availability,error,error,83,"Thank you for your response. Yesterday I tried with my home PC and it occured that error. Today I'm trying with my office PC and it occurs another error but still in the same process. Here is the log:. ```; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giangnguyen/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python3.8 (found version ""3.8.10"") ; Adding library Sofa.Framework; Adding module Sofa.Component; Adding module Sofa.Component.ODESolver; Adding module Sofa.Component.ODESolver.Forward; Adding module Sofa.Component.ODESolver.Backward; Adding module Sofa.Component.IO; Adding module Sofa.Component.IO.Mesh; Adding module Sofa.Component.Playback; Adding module Sofa.Component.SceneUtility; Adding module Sofa.Component.Topology; Adding module Sofa.Component.Topology.Container; Adding module Sofa.Component.Topology.Container.Constant; Adding module Sofa.Component.Topology.Container.Dynamic; Adding module Sofa.Component.Topology.Container.Grid; Adding module Sofa.Component.Topology.Mapping; Adding module Sofa.Component.Topology.Utility; Adding module Sofa.Component.Visual; Adding module Sofa.Component.LinearSolver; Adding module Sofa.Component.LinearSolver.Iterative; Adding module Sofa.Component.LinearSolver.Direct; Sofa.Component.LinearSolver.Direct: using built-in metis library; Adding m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:147,Availability,error,error,147,"Thank you for your response. Yesterday I tried with my home PC and it occured that error. Today I'm trying with my office PC and it occurs another error but still in the same process. Here is the log:. ```; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giangnguyen/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python3.8 (found version ""3.8.10"") ; Adding library Sofa.Framework; Adding module Sofa.Component; Adding module Sofa.Component.ODESolver; Adding module Sofa.Component.ODESolver.Forward; Adding module Sofa.Component.ODESolver.Backward; Adding module Sofa.Component.IO; Adding module Sofa.Component.IO.Mesh; Adding module Sofa.Component.Playback; Adding module Sofa.Component.SceneUtility; Adding module Sofa.Component.Topology; Adding module Sofa.Component.Topology.Container; Adding module Sofa.Component.Topology.Container.Constant; Adding module Sofa.Component.Topology.Container.Dynamic; Adding module Sofa.Component.Topology.Container.Grid; Adding module Sofa.Component.Topology.Mapping; Adding module Sofa.Component.Topology.Utility; Adding module Sofa.Component.Visual; Adding module Sofa.Component.LinearSolver; Adding module Sofa.Component.LinearSolver.Iterative; Adding module Sofa.Component.LinearSolver.Direct; Sofa.Component.LinearSolver.Direct: using built-in metis library; Adding m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:7391,Availability,error,errors,7391," Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at applications/plugins/SofaPython3/CMakeLists.txt:114 (find_package):; Could not find a package configuration file provided by ""pybind11""; (requested version 2.3) with any of the following names:. pybind11Config.cmake; pybind11-config.cmake. Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed. Configuring incomplete, errors occurred!; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:340,Deployability,install,install,340,"Thank you for your response. Yesterday I tried with my home PC and it occured that error. Today I'm trying with my office PC and it occurs another error but still in the same process. Here is the log:. ```; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giangnguyen/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python3.8 (found version ""3.8.10"") ; Adding library Sofa.Framework; Adding module Sofa.Component; Adding module Sofa.Component.ODESolver; Adding module Sofa.Component.ODESolver.Forward; Adding module Sofa.Component.ODESolver.Backward; Adding module Sofa.Component.IO; Adding module Sofa.Component.IO.Mesh; Adding module Sofa.Component.Playback; Adding module Sofa.Component.SceneUtility; Adding module Sofa.Component.Topology; Adding module Sofa.Component.Topology.Container; Adding module Sofa.Component.Topology.Container.Constant; Adding module Sofa.Component.Topology.Container.Dynamic; Adding module Sofa.Component.Topology.Container.Grid; Adding module Sofa.Component.Topology.Mapping; Adding module Sofa.Component.Topology.Utility; Adding module Sofa.Component.Visual; Adding module Sofa.Component.LinearSolver; Adding module Sofa.Component.LinearSolver.Iterative; Adding module Sofa.Component.LinearSolver.Direct; Sofa.Component.LinearSolver.Direct: using built-in metis library; Adding m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:6990,Deployability,configurat,configuration,6990," Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at applications/plugins/SofaPython3/CMakeLists.txt:114 (find_package):; Could not find a package configuration file provided by ""pybind11""; (requested version 2.3) with any of the following names:. pybind11Config.cmake; pybind11-config.cmake. Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed. Configuring incomplete, errors occurred!; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:7144,Deployability,install,installation,7144," Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at applications/plugins/SofaPython3/CMakeLists.txt:114 (find_package):; Could not find a package configuration file provided by ""pybind11""; (requested version 2.3) with any of the following names:. pybind11Config.cmake; pybind11-config.cmake. Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed. Configuring incomplete, errors occurred!; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:7356,Deployability,install,installed,7356," Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at applications/plugins/SofaPython3/CMakeLists.txt:114 (find_package):; Could not find a package configuration file provided by ""pybind11""; (requested version 2.3) with any of the following names:. pybind11Config.cmake; pybind11-config.cmake. Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed. Configuring incomplete, errors occurred!; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:4252,Integrability,depend,dependent,4252,"t.Collision.Detection; Adding module Sofa.Component.Collision.Detection.Algorithm; Adding module Sofa.Component.Collision.Detection.Intersection; Adding module Sofa.Component.Collision.Response; Adding module Sofa.Component.Collision.Response.Mapper; Adding module Sofa.Component.Collision.Response.Contact; Adding module Sofa.Component.Setting; Adding module Sofa.Component.Controller; Adding module Sofa.Component.Engine; Adding module Sofa.Component.Engine.Analyze; Adding module Sofa.Component.Engine.Generate; Adding module Sofa.Component.Engine.Select; Adding module Sofa.Component.Engine.Transform; Adding module Sofa.Component.Haptics; Adding library Sofa.GL; Adding module Sofa.GL.Component; Adding module Sofa.GL.Component.Rendering2D; Adding module Sofa.GL.Component.Rendering3D; Adding module Sofa.GL.Component.Engine; Adding module Sofa.GL.Component.Shader; Adding module Sofa.GUI.Component; Adding library Sofa.GUI.Common; cxxopts version 2.2.0; -- Sofa.GUI.Common: Sofa.GL dependent features enabled.; Adding library Sofa.GUI.Batch; Adding library Sofa.GUI.Qt; Sofa.GUI.Qt: will use Qt5; Sofa.GUI.Qt: Qt5Charts not found. No chart nor Profile will be compiled; -- FFmpeg executable was found /usr/bin/ffmpeg; Sofa.GUI.Qt: QtCharts not found, SofaWindowProfiler will not be built.; Sofa.GUI.Qt: Qt5WebEngine not found, QDocBrowser will not be built.; Adding collection SofaGui; Adding collection SofaGuiCommon; Adding collection SofaGuiQt; Adding collection SofaFramework; Adding collection SofaSimulation; Adding collection SofaBase; Adding collection SofaSimpleFem; Adding collection SofaRigid; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collectio",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:6344,Modifiability,plugin,plugin,6344,g collection SofaRigid; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collection SofaBoundaryCondition; Adding collection SofaGeneralAnimationLoop; Adding collection SofaGeneralDeformable; Adding collection SofaGeneralEngine; Adding collection SofaGeneralExplicitOdeSolver; Adding collection SofaGeneralImplicitOdeSolver; Adding collection SofaGeneralLinearSolver; Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:6579,Modifiability,plugin,plugin,6579,g collection SofaRigid; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collection SofaBoundaryCondition; Adding collection SofaGeneralAnimationLoop; Adding collection SofaGeneralDeformable; Adding collection SofaGeneralEngine; Adding collection SofaGeneralExplicitOdeSolver; Adding collection SofaGeneralImplicitOdeSolver; Adding collection SofaGeneralLinearSolver; Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:6607,Modifiability,plugin,plugin,6607,g collection SofaRigid; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collection SofaBoundaryCondition; Adding collection SofaGeneralAnimationLoop; Adding collection SofaGeneralDeformable; Adding collection SofaGeneralEngine; Adding collection SofaGeneralExplicitOdeSolver; Adding collection SofaGeneralImplicitOdeSolver; Adding collection SofaGeneralLinearSolver; Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:6749,Modifiability,plugin,plugin,6749,g collection SofaRigid; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collection SofaBoundaryCondition; Adding collection SofaGeneralAnimationLoop; Adding collection SofaGeneralDeformable; Adding collection SofaGeneralEngine; Adding collection SofaGeneralExplicitOdeSolver; Adding collection SofaGeneralImplicitOdeSolver; Adding collection SofaGeneralLinearSolver; Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:6861,Modifiability,plugin,plugin,6861," Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at applications/plugins/SofaPython3/CMakeLists.txt:114 (find_package):; Could not find a package configuration file provided by ""pybind11""; (requested version 2.3) with any of the following names:. pybind11Config.cmake; pybind11-config.cmake. Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed. Configuring incomplete, errors occurred!; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:6909,Modifiability,plugin,plugins,6909," Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at applications/plugins/SofaPython3/CMakeLists.txt:114 (find_package):; Could not find a package configuration file provided by ""pybind11""; (requested version 2.3) with any of the following names:. pybind11Config.cmake; pybind11-config.cmake. Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed. Configuring incomplete, errors occurred!; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:6990,Modifiability,config,configuration,6990," Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at applications/plugins/SofaPython3/CMakeLists.txt:114 (find_package):; Could not find a package configuration file provided by ""pybind11""; (requested version 2.3) with any of the following names:. pybind11Config.cmake; pybind11-config.cmake. Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed. Configuring incomplete, errors occurred!; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:7122,Modifiability,config,config,7122," Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at applications/plugins/SofaPython3/CMakeLists.txt:114 (find_package):; Could not find a package configuration file provided by ""pybind11""; (requested version 2.3) with any of the following names:. pybind11Config.cmake; pybind11-config.cmake. Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed. Configuring incomplete, errors occurred!; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:196,Testability,log,log,196,"Thank you for your response. Yesterday I tried with my home PC and it occured that error. Today I'm trying with my office PC and it occurs another error but still in the same process. Here is the log:. ```; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giangnguyen/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python3.8 (found version ""3.8.10"") ; Adding library Sofa.Framework; Adding module Sofa.Component; Adding module Sofa.Component.ODESolver; Adding module Sofa.Component.ODESolver.Forward; Adding module Sofa.Component.ODESolver.Backward; Adding module Sofa.Component.IO; Adding module Sofa.Component.IO.Mesh; Adding module Sofa.Component.Playback; Adding module Sofa.Component.SceneUtility; Adding module Sofa.Component.Topology; Adding module Sofa.Component.Topology.Container; Adding module Sofa.Component.Topology.Container.Constant; Adding module Sofa.Component.Topology.Container.Dynamic; Adding module Sofa.Component.Topology.Container.Grid; Adding module Sofa.Component.Topology.Mapping; Adding module Sofa.Component.Topology.Utility; Adding module Sofa.Component.Visual; Adding module Sofa.Component.LinearSolver; Adding module Sofa.Component.LinearSolver.Iterative; Adding module Sofa.Component.LinearSolver.Direct; Sofa.Component.LinearSolver.Direct: using built-in metis library; Adding m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:7471,Testability,log,log,7471," Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at applications/plugins/SofaPython3/CMakeLists.txt:114 (find_package):; Could not find a package configuration file provided by ""pybind11""; (requested version 2.3) with any of the following names:. pybind11Config.cmake; pybind11-config.cmake. Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed. Configuring incomplete, errors occurred!; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:7539,Testability,log,log,7539," Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at applications/plugins/SofaPython3/CMakeLists.txt:114 (find_package):; Could not find a package configuration file provided by ""pybind11""; (requested version 2.3) with any of the following names:. pybind11Config.cmake; pybind11-config.cmake. Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed. Configuring incomplete, errors occurred!; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:435,Usability,usab,usable,435,"Thank you for your response. Yesterday I tried with my home PC and it occured that error. Today I'm trying with my office PC and it occurs another error but still in the same process. Here is the log:. ```; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giangnguyen/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python3.8 (found version ""3.8.10"") ; Adding library Sofa.Framework; Adding module Sofa.Component; Adding module Sofa.Component.ODESolver; Adding module Sofa.Component.ODESolver.Forward; Adding module Sofa.Component.ODESolver.Backward; Adding module Sofa.Component.IO; Adding module Sofa.Component.IO.Mesh; Adding module Sofa.Component.Playback; Adding module Sofa.Component.SceneUtility; Adding module Sofa.Component.Topology; Adding module Sofa.Component.Topology.Container; Adding module Sofa.Component.Topology.Container.Constant; Adding module Sofa.Component.Topology.Container.Dynamic; Adding module Sofa.Component.Topology.Container.Grid; Adding module Sofa.Component.Topology.Mapping; Adding module Sofa.Component.Topology.Utility; Adding module Sofa.Component.Visual; Adding module Sofa.Component.LinearSolver; Adding module Sofa.Component.LinearSolver.Iterative; Adding module Sofa.Component.LinearSolver.Direct; Sofa.Component.LinearSolver.Direct: using built-in metis library; Adding m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:41,Availability,error,error,41,"@alxbilger . > Hello, I think the actual error is in the output of the Cmake Gui(bottom part), could you copy-paste it ?. Sorry for the delay, here is the log output:; ```; The C compiler identification is Clang 10.0.0; The CXX compiler identification is Clang 10.0.0; Check for working C compiler: /usr/bin/clang; Check for working C compiler: /usr/bin/clang -- works; Detecting C compiler ABI info; Detecting C compiler ABI info - done; Detecting C compile features; Detecting C compile features - done; Check for working CXX compiler: /usr/bin/clang++; Check for working CXX compiler: /usr/bin/clang++ -- works; Detecting CXX compiler ABI info; Detecting CXX compiler ABI info - done; Detecting CXX compile features; Detecting CXX compile features - done; Setting build type to Release as none was specified.; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giang/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; Found Json: /home/giang/sofa/src/extlibs/json (Required is at least version ""3.1.2"") ; Found STB: /home/giang/sofa/src/extlibs/stb ; Found DIFFLIB: /home/giang/sofa/src/extlibs/difflib ; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python (found version ""3.8.10"") ; Looking for pthread.h; Looking for pthread.h - found; Performing Test CMAKE_HAVE_LIBC_PTHREAD; Perf",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:9337,Availability,error,errors,9337,"ra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.cmake.in does not exist.; CMake Error at Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:266 (configure_file):; configure_file Problem configuring file; Call Stack (most recent call first):; Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:295 (sofa_add_generic_external); applications/plugins/CMakeLists.txt:22 (sofa_add_subdirectory). SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.5"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package). Configuring incomplete, errors occurred!; See also ""/home/giang/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giang/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:940,Deployability,install,install,940,"@alxbilger . > Hello, I think the actual error is in the output of the Cmake Gui(bottom part), could you copy-paste it ?. Sorry for the delay, here is the log output:; ```; The C compiler identification is Clang 10.0.0; The CXX compiler identification is Clang 10.0.0; Check for working C compiler: /usr/bin/clang; Check for working C compiler: /usr/bin/clang -- works; Detecting C compiler ABI info; Detecting C compiler ABI info - done; Detecting C compile features; Detecting C compile features - done; Check for working CXX compiler: /usr/bin/clang++; Check for working CXX compiler: /usr/bin/clang++ -- works; Detecting CXX compiler ABI info; Detecting CXX compiler ABI info - done; Detecting CXX compile features; Detecting CXX compile features - done; Setting build type to Release as none was specified.; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giang/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; Found Json: /home/giang/sofa/src/extlibs/json (Required is at least version ""3.1.2"") ; Found STB: /home/giang/sofa/src/extlibs/stb ; Found DIFFLIB: /home/giang/sofa/src/extlibs/difflib ; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python (found version ""3.8.10"") ; Looking for pthread.h; Looking for pthread.h - found; Performing Test CMAKE_HAVE_LIBC_PTHREAD; Perf",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:5642,Integrability,depend,dependent,5642,"onent.Collision.Detection.Intersection; Adding module Sofa.Component.Collision.Response; Adding module Sofa.Component.Collision.Response.Mapper; Adding module Sofa.Component.Collision.Response.Contact; Adding module Sofa.Component.Setting; Adding module Sofa.Component.Controller; Adding module Sofa.Component.Engine; Adding module Sofa.Component.Engine.Analyze; Adding module Sofa.Component.Engine.Generate; Adding module Sofa.Component.Engine.Select; Adding module Sofa.Component.Engine.Transform; Adding module Sofa.Component.Haptics; Adding library Sofa.GL; Found OpenGL: /usr/lib/x86_64-linux-gnu/libOpenGL.so ; Found GLEW: /usr/include (found version ""2.1.0"") ; Adding module Sofa.GL.Component; Adding module Sofa.GL.Component.Rendering2D; Adding module Sofa.GL.Component.Rendering3D; Adding module Sofa.GL.Component.Engine; Adding module Sofa.GL.Component.Shader; Adding module Sofa.GUI.Component; Adding library Sofa.GUI.Common; cxxopts version 2.2.0; -- Sofa.GUI.Common: Sofa.GL dependent features enabled.; Adding library Sofa.GUI.Batch; Adding library Sofa.GUI.Qt; Sofa.GUI.Qt: will use Qt5; Sofa.GUI.Qt: Qt5Charts not found. No chart nor Profile will be compiled; -- FFmpeg executable was found /usr/bin/ffmpeg; Sofa.GUI.Qt: QtCharts not found, SofaWindowProfiler will not be built.; Sofa.GUI.Qt: Qt5WebEngine not found, QDocBrowser will not be built.; Adding collection SofaGui; Adding collection SofaGuiCommon; Adding collection SofaGuiQt; Adding collection SofaFramework; Adding collection SofaSimulation; Adding collection SofaBase; Adding collection SofaSimpleFem; Adding collection SofaRigid; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collectio",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:8798,Integrability,message,message,8798,"ra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.cmake.in does not exist.; CMake Error at Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:266 (configure_file):; configure_file Problem configuring file; Call Stack (most recent call first):; Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:295 (sofa_add_generic_external); applications/plugins/CMakeLists.txt:22 (sofa_add_subdirectory). SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.5"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package). Configuring incomplete, errors occurred!; See also ""/home/giang/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giang/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:7734,Modifiability,plugin,plugin,7734,; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collection SofaBoundaryCondition; Adding collection SofaGeneralAnimationLoop; Adding collection SofaGeneralDeformable; Adding collection SofaGeneralEngine; Adding collection SofaGeneralExplicitOdeSolver; Adding collection SofaGeneralImplicitOdeSolver; Adding collection SofaGeneralLinearSolver; Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:7969,Modifiability,plugin,plugin,7969,; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collection SofaBoundaryCondition; Adding collection SofaGeneralAnimationLoop; Adding collection SofaGeneralDeformable; Adding collection SofaGeneralEngine; Adding collection SofaGeneralExplicitOdeSolver; Adding collection SofaGeneralImplicitOdeSolver; Adding collection SofaGeneralLinearSolver; Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:7997,Modifiability,plugin,plugin,7997,; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collection SofaBoundaryCondition; Adding collection SofaGeneralAnimationLoop; Adding collection SofaGeneralDeformable; Adding collection SofaGeneralEngine; Adding collection SofaGeneralExplicitOdeSolver; Adding collection SofaGeneralImplicitOdeSolver; Adding collection SofaGeneralLinearSolver; Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:8139,Modifiability,plugin,plugin,8139,; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collection SofaBoundaryCondition; Adding collection SofaGeneralAnimationLoop; Adding collection SofaGeneralDeformable; Adding collection SofaGeneralEngine; Adding collection SofaGeneralExplicitOdeSolver; Adding collection SofaGeneralImplicitOdeSolver; Adding collection SofaGeneralLinearSolver; Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:8223,Modifiability,plugin,plugins,8223,; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collection SofaBoundaryCondition; Adding collection SofaGeneralAnimationLoop; Adding collection SofaGeneralDeformable; Adding collection SofaGeneralEngine; Adding collection SofaGeneralExplicitOdeSolver; Adding collection SofaGeneralImplicitOdeSolver; Adding collection SofaGeneralLinearSolver; Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:8405,Modifiability,config,configuring,8405,"tion SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.cmake.in does not exist.; CMake Error at Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:266 (configure_file):; configure_file Problem configuring file; Call Stack (most recent call first):; Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:295 (sofa_add_generic_external); applications/plugins/CMakeLists.txt:22 (sofa_add_subdirectory). SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.5"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package). Configuring incomplete, errors occurred!; See also ""/home/giang/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/ho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:8561,Modifiability,plugin,plugins,8561,"ra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.cmake.in does not exist.; CMake Error at Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:266 (configure_file):; configure_file Problem configuring file; Call Stack (most recent call first):; Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:295 (sofa_add_generic_external); applications/plugins/CMakeLists.txt:22 (sofa_add_subdirectory). SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.5"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package). Configuring incomplete, errors occurred!; See also ""/home/giang/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giang/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:8692,Modifiability,plugin,plugin,8692,"ra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.cmake.in does not exist.; CMake Error at Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:266 (configure_file):; configure_file Problem configuring file; Call Stack (most recent call first):; Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:295 (sofa_add_generic_external); applications/plugins/CMakeLists.txt:22 (sofa_add_subdirectory). SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.5"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package). Configuring incomplete, errors occurred!; See also ""/home/giang/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giang/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:9259,Modifiability,plugin,plugins,9259,"ra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.cmake.in does not exist.; CMake Error at Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:266 (configure_file):; configure_file Problem configuring file; Call Stack (most recent call first):; Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:295 (sofa_add_generic_external); applications/plugins/CMakeLists.txt:22 (sofa_add_subdirectory). SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.5"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package). Configuring incomplete, errors occurred!; See also ""/home/giang/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giang/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:155,Testability,log,log,155,"@alxbilger . > Hello, I think the actual error is in the output of the Cmake Gui(bottom part), could you copy-paste it ?. Sorry for the delay, here is the log output:; ```; The C compiler identification is Clang 10.0.0; The CXX compiler identification is Clang 10.0.0; Check for working C compiler: /usr/bin/clang; Check for working C compiler: /usr/bin/clang -- works; Detecting C compiler ABI info; Detecting C compiler ABI info - done; Detecting C compile features; Detecting C compile features - done; Check for working CXX compiler: /usr/bin/clang++; Check for working CXX compiler: /usr/bin/clang++ -- works; Detecting CXX compiler ABI info; Detecting CXX compiler ABI info - done; Detecting CXX compile features; Detecting CXX compile features - done; Setting build type to Release as none was specified.; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giang/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; Found Json: /home/giang/sofa/src/extlibs/json (Required is at least version ""3.1.2"") ; Found STB: /home/giang/sofa/src/extlibs/stb ; Found DIFFLIB: /home/giang/sofa/src/extlibs/difflib ; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python (found version ""3.8.10"") ; Looking for pthread.h; Looking for pthread.h - found; Performing Test CMAKE_HAVE_LIBC_PTHREAD; Perf",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:9411,Testability,log,log,9411,"ra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.cmake.in does not exist.; CMake Error at Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:266 (configure_file):; configure_file Problem configuring file; Call Stack (most recent call first):; Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:295 (sofa_add_generic_external); applications/plugins/CMakeLists.txt:22 (sofa_add_subdirectory). SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.5"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package). Configuring incomplete, errors occurred!; See also ""/home/giang/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giang/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:9473,Testability,log,log,9473,"ra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.cmake.in does not exist.; CMake Error at Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:266 (configure_file):; configure_file Problem configuring file; Call Stack (most recent call first):; Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:295 (sofa_add_generic_external); applications/plugins/CMakeLists.txt:22 (sofa_add_subdirectory). SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.5"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package). Configuring incomplete, errors occurred!; See also ""/home/giang/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giang/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:1035,Usability,usab,usable,1035,"e Gui(bottom part), could you copy-paste it ?. Sorry for the delay, here is the log output:; ```; The C compiler identification is Clang 10.0.0; The CXX compiler identification is Clang 10.0.0; Check for working C compiler: /usr/bin/clang; Check for working C compiler: /usr/bin/clang -- works; Detecting C compiler ABI info; Detecting C compiler ABI info - done; Detecting C compile features; Detecting C compile features - done; Check for working CXX compiler: /usr/bin/clang++; Check for working CXX compiler: /usr/bin/clang++ -- works; Detecting CXX compiler ABI info; Detecting CXX compiler ABI info - done; Detecting CXX compile features; Detecting CXX compile features - done; Setting build type to Release as none was specified.; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giang/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; Found Json: /home/giang/sofa/src/extlibs/json (Required is at least version ""3.1.2"") ; Found STB: /home/giang/sofa/src/extlibs/stb ; Found DIFFLIB: /home/giang/sofa/src/extlibs/difflib ; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python (found version ""3.8.10"") ; Looking for pthread.h; Looking for pthread.h - found; Performing Test CMAKE_HAVE_LIBC_PTHREAD; Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; Check if compiler accepts -p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815
https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1534324585:404,Usability,clear,clear,404,> I did not check but I thought it was using `addData` here:; > ; > https://github.com/sofa-framework/sofa/blob/9096c3eed599622ec9eb77a3d8a61bf3932a81a7/Sofa/Component/StateContainer/src/sofa/component/statecontainer/MechanicalObject.inl#L1310. Not necessarily there is another codepath that initialize the state vectors and registe the data. Refactoring the whole part would be interesting to make that clear but it is far outside the scope of this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1534324585
https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232:345,Deployability,update,update,345,"Hello @alxbilger . Nice PR. . This is outside of the scope of the PR but the use of the very intrusive; ```cpp; if (this->d_componentState.getValue() != sofa::core::objectmodel::ComponentState::Valid); return;; ```; makes me thing one day we will have to do something. The way to go is probably to make clear when the component state validation/update issupposed to happen. The two choice are: ""everytime/everywhere"", update all the time including ""in-between"" timestep or only once at beginning of timestep (with visitor in the BeginAnimationStep event ?).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232
https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232:418,Deployability,update,update,418,"Hello @alxbilger . Nice PR. . This is outside of the scope of the PR but the use of the very intrusive; ```cpp; if (this->d_componentState.getValue() != sofa::core::objectmodel::ComponentState::Valid); return;; ```; makes me thing one day we will have to do something. The way to go is probably to make clear when the component state validation/update issupposed to happen. The two choice are: ""everytime/everywhere"", update all the time including ""in-between"" timestep or only once at beginning of timestep (with visitor in the BeginAnimationStep event ?).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232
https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232:334,Security,validat,validation,334,"Hello @alxbilger . Nice PR. . This is outside of the scope of the PR but the use of the very intrusive; ```cpp; if (this->d_componentState.getValue() != sofa::core::objectmodel::ComponentState::Valid); return;; ```; makes me thing one day we will have to do something. The way to go is probably to make clear when the component state validation/update issupposed to happen. The two choice are: ""everytime/everywhere"", update all the time including ""in-between"" timestep or only once at beginning of timestep (with visitor in the BeginAnimationStep event ?).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232
https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232:303,Usability,clear,clear,303,"Hello @alxbilger . Nice PR. . This is outside of the scope of the PR but the use of the very intrusive; ```cpp; if (this->d_componentState.getValue() != sofa::core::objectmodel::ComponentState::Valid); return;; ```; makes me thing one day we will have to do something. The way to go is probably to make clear when the component state validation/update issupposed to happen. The two choice are: ""everytime/everywhere"", update all the time including ""in-between"" timestep or only once at beginning of timestep (with visitor in the BeginAnimationStep event ?).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232
https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:266,Integrability,interface,interface,266,"@alxbilger . Thanks for your relevant question, actually this is why the PR is in wip. . So more details. ; Fundamentally the TypeInfo system is a strange beast compose of two things. One is a type-traits API designed to be used in compile time code, one is dynamic interface API. AbstractTypeInfo is the dynamic interface (with the virtual function). The AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Prop",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905
https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:313,Integrability,interface,interface,313,"@alxbilger . Thanks for your relevant question, actually this is why the PR is in wip. . So more details. ; Fundamentally the TypeInfo system is a strange beast compose of two things. One is a type-traits API designed to be used in compile time code, one is dynamic interface API. AbstractTypeInfo is the dynamic interface (with the virtual function). The AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Prop",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905
https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:403,Integrability,wrap,wrap,403,"@alxbilger . Thanks for your relevant question, actually this is why the PR is in wip. . So more details. ; Fundamentally the TypeInfo system is a strange beast compose of two things. One is a type-traits API designed to be used in compile time code, one is dynamic interface API. AbstractTypeInfo is the dynamic interface (with the virtual function). The AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Prop",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905
https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:1588,Modifiability,refactor,refactor,1588,"AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::empty();; throw std::runtime_error(""Invalid operation"");; }. void setValueInteger(int index, int value) override ; { ; if constexpr(; !Info::Properties::IsSetContainer && ; Info::Properties::Type == DataType::Integer); return Info::setAt(index, value);; throw std::runtime_error(""Invalid operation"");; }; /// ...; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905
https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:1177,Usability,clear,clear,1177,"in compile time code, one is dynamic interface API. AbstractTypeInfo is the dynamic interface (with the virtual function). The AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::empty();; throw std::runtime_error(""Invalid operation"");; }. void setValueInteger(int index, int value) override ; { ; if constexpr(; !Info::Properties::IsSetContainer && ; Info::Properties::Ty",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905
https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:1387,Usability,clear,clear,1387,"AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::empty();; throw std::runtime_error(""Invalid operation"");; }. void setValueInteger(int index, int value) override ; { ; if constexpr(; !Info::Properties::IsSetContainer && ; Info::Properties::Type == DataType::Integer); return Info::setAt(index, value);; throw std::runtime_error(""Invalid operation"");; }; /// ...; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905
https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:1864,Usability,clear,clear,1864,"AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::empty();; throw std::runtime_error(""Invalid operation"");; }. void setValueInteger(int index, int value) override ; { ; if constexpr(; !Info::Properties::IsSetContainer && ; Info::Properties::Type == DataType::Integer); return Info::setAt(index, value);; throw std::runtime_error(""Invalid operation"");; }; /// ...; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905
https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1590748119:47,Availability,error,error,47,"> @epernod @damienmarchal I have the following error in several scenes of SoftRobots:; > ; > ```; > [ERROR] [UniformMass(mass)] TopologyData: indices already has a TopologyDataHandler. createTopologyHandler should only be called once at init of the TopologyData.; > ```; > ; > I think it is due to the fact that a Node is initialized twice. What is your recommendation?. Quickly: this error is fired because init is not called only once. A ""TopologyDataHandler"" is created in the UniformMass init method. Creating 2 trackers could create real bugs if topologicalChanges are applied (basically changes will be applied twice); I see several options:; - init should not be applied several times in those examples; - If we decide init could be applied several times, we need to change the code to check tracker are not created twice. This should be possible but not as simple as ```tracker != null```. As a quick workaround: replace the `TetrahedronSetTopologyContainer ` by a `MeshTopology ` here : https://github.com/SofaDefrost/SoftRobots/blob/4acf28248278106c2855206f1751dcba41268039/examples/tutorials/Tripod/details/elasticbody.py#L20; This should solve all the tripod tutorials scenes. TopologyDataHandler are not created if the topology is using static containers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1590748119
https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1590748119:385,Availability,error,error,385,"> @epernod @damienmarchal I have the following error in several scenes of SoftRobots:; > ; > ```; > [ERROR] [UniformMass(mass)] TopologyData: indices already has a TopologyDataHandler. createTopologyHandler should only be called once at init of the TopologyData.; > ```; > ; > I think it is due to the fact that a Node is initialized twice. What is your recommendation?. Quickly: this error is fired because init is not called only once. A ""TopologyDataHandler"" is created in the UniformMass init method. Creating 2 trackers could create real bugs if topologicalChanges are applied (basically changes will be applied twice); I see several options:; - init should not be applied several times in those examples; - If we decide init could be applied several times, we need to change the code to check tracker are not created twice. This should be possible but not as simple as ```tracker != null```. As a quick workaround: replace the `TetrahedronSetTopologyContainer ` by a `MeshTopology ` here : https://github.com/SofaDefrost/SoftRobots/blob/4acf28248278106c2855206f1751dcba41268039/examples/tutorials/Tripod/details/elasticbody.py#L20; This should solve all the tripod tutorials scenes. TopologyDataHandler are not created if the topology is using static containers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1590748119
https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1590748119:865,Usability,simpl,simple,865,"> @epernod @damienmarchal I have the following error in several scenes of SoftRobots:; > ; > ```; > [ERROR] [UniformMass(mass)] TopologyData: indices already has a TopologyDataHandler. createTopologyHandler should only be called once at init of the TopologyData.; > ```; > ; > I think it is due to the fact that a Node is initialized twice. What is your recommendation?. Quickly: this error is fired because init is not called only once. A ""TopologyDataHandler"" is created in the UniformMass init method. Creating 2 trackers could create real bugs if topologicalChanges are applied (basically changes will be applied twice); I see several options:; - init should not be applied several times in those examples; - If we decide init could be applied several times, we need to change the code to check tracker are not created twice. This should be possible but not as simple as ```tracker != null```. As a quick workaround: replace the `TetrahedronSetTopologyContainer ` by a `MeshTopology ` here : https://github.com/SofaDefrost/SoftRobots/blob/4acf28248278106c2855206f1751dcba41268039/examples/tutorials/Tripod/details/elasticbody.py#L20; This should solve all the tripod tutorials scenes. TopologyDataHandler are not created if the topology is using static containers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1590748119
https://github.com/sofa-framework/sofa/pull/3888#issuecomment-1569740293:30,Usability,feedback,feedback,30,It would be nice to have some feedback from @EtienneMenager @fjourdes @alxbilger @courtecuisse,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3888#issuecomment-1569740293
https://github.com/sofa-framework/sofa/pull/3894#issuecomment-1590483514:304,Usability,simpl,simplified,304,"> I don't understand why we have so much complexity around `projectResponseT`. It seems we don't need the template since we call it only once. Same for the lambda. Not everywhere, sometimes the templated projectResponseT is called with VecDeriv (aka Vec\<Deriv>) and MatrixDeriv (aka CRS)); But it could simplified where this statement does not apply though.; EDIT: some (e.g FixedTranslationConstraint) are useless IMO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3894#issuecomment-1590483514
https://github.com/sofa-framework/sofa/pull/3903#issuecomment-1568253488:33,Usability,user experience,user experience,33,"I'm always in favor of improving user experience and renaming coder's name by something with a mechanical meaning fit in this :) . For the PR, i suggest to first rename the class and filename, then adding an alias ""RestShapeSpringForceField"". So users are warned when using RestShapeSFF to use SpringConstraint.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3903#issuecomment-1568253488
https://github.com/sofa-framework/sofa/pull/3903#issuecomment-1569866405:96,Usability,simpl,simple,96,"I Agree with Alex, the first two ones are ok, but the third one is not good. Why not keeping it simple and call it XXXLagrangianConstraint",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3903#issuecomment-1569866405
https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1573757731:7,Usability,UX,UX,7,+1 for UX improvement of such importance.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1573757731
https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1575027962:100,Usability,simpl,simple,100,"I'm actually a bit uncertain regarding your proposal @damienmarchal, I thought about it before this simple PR; My conclusion was the following: the more colors, the more confusing it can be for the users. On our hand, we want users to actually fix their scene for in both cases: deprecation and warnings. Having a single color for this purpose makes sense to me: simpler to read and simpler to understand for the user -> there is something to fix in the scene !. Maybe there is cases of warnings not requiring a scene fix which I am not thinking about..",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1575027962
https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1575027962:363,Usability,simpl,simpler,363,"I'm actually a bit uncertain regarding your proposal @damienmarchal, I thought about it before this simple PR; My conclusion was the following: the more colors, the more confusing it can be for the users. On our hand, we want users to actually fix their scene for in both cases: deprecation and warnings. Having a single color for this purpose makes sense to me: simpler to read and simpler to understand for the user -> there is something to fix in the scene !. Maybe there is cases of warnings not requiring a scene fix which I am not thinking about..",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1575027962
https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1575027962:383,Usability,simpl,simpler,383,"I'm actually a bit uncertain regarding your proposal @damienmarchal, I thought about it before this simple PR; My conclusion was the following: the more colors, the more confusing it can be for the users. On our hand, we want users to actually fix their scene for in both cases: deprecation and warnings. Having a single color for this purpose makes sense to me: simpler to read and simpler to understand for the user -> there is something to fix in the scene !. Maybe there is cases of warnings not requiring a scene fix which I am not thinking about..",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1575027962
https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1590796190:288,Usability,clear,clear,288,"> So, if I understand correctly, you implemented 2 methods to deduce the template: 1) a static method in the component, 2) an additional line when registering in the object factory. Yes, despite it is possible to have only the system with the static method I find the explict method more clear despite it does not allow to cover the same set of feature. We may remove it if needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1590796190
https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882:439,Deployability,update,updated,439,"Hi @fredroy,. I fully support removing the dependency to SceneCreator. Thanks for the effort. . Small comment: ; I think that using simpleapi is a better option for scene creation than using the raw c++one:; - it reduce the need for c++ includes (so the dependency graph (aka ""the giant spaggheti bowl"") pressure). ; - it reduce the compilation time,; - in theory simple and consistant API aligned with the python one (but It haven't been updated so it match with SofaPython3... but doing such a thing is worth the effort).; ; ; EDIT: I just try how would look a modernize simpleapi (https://godbolt.org/z/9EW9dbnvn)... and think I'm going to like doing things like that (thanks to c++ std::any):; ```cpp; mo = createObject(""MechanicalObject"",; {{""name"", std::string{""myMo""}}, ; {""position"", {{1,2,3},{4,5,6}}},; {""enable"", true}});; node.addObject(mo);; ```; The syntax is nice and there is no more this ugly data to string to data creation using ""BaseObjectDescription"" and its parse method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882
https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882:213,Energy Efficiency,reduce,reduce,213,"Hi @fredroy,. I fully support removing the dependency to SceneCreator. Thanks for the effort. . Small comment: ; I think that using simpleapi is a better option for scene creation than using the raw c++one:; - it reduce the need for c++ includes (so the dependency graph (aka ""the giant spaggheti bowl"") pressure). ; - it reduce the compilation time,; - in theory simple and consistant API aligned with the python one (but It haven't been updated so it match with SofaPython3... but doing such a thing is worth the effort).; ; ; EDIT: I just try how would look a modernize simpleapi (https://godbolt.org/z/9EW9dbnvn)... and think I'm going to like doing things like that (thanks to c++ std::any):; ```cpp; mo = createObject(""MechanicalObject"",; {{""name"", std::string{""myMo""}}, ; {""position"", {{1,2,3},{4,5,6}}},; {""enable"", true}});; node.addObject(mo);; ```; The syntax is nice and there is no more this ugly data to string to data creation using ""BaseObjectDescription"" and its parse method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882
https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882:322,Energy Efficiency,reduce,reduce,322,"Hi @fredroy,. I fully support removing the dependency to SceneCreator. Thanks for the effort. . Small comment: ; I think that using simpleapi is a better option for scene creation than using the raw c++one:; - it reduce the need for c++ includes (so the dependency graph (aka ""the giant spaggheti bowl"") pressure). ; - it reduce the compilation time,; - in theory simple and consistant API aligned with the python one (but It haven't been updated so it match with SofaPython3... but doing such a thing is worth the effort).; ; ; EDIT: I just try how would look a modernize simpleapi (https://godbolt.org/z/9EW9dbnvn)... and think I'm going to like doing things like that (thanks to c++ std::any):; ```cpp; mo = createObject(""MechanicalObject"",; {{""name"", std::string{""myMo""}}, ; {""position"", {{1,2,3},{4,5,6}}},; {""enable"", true}});; node.addObject(mo);; ```; The syntax is nice and there is no more this ugly data to string to data creation using ""BaseObjectDescription"" and its parse method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882
https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882:43,Integrability,depend,dependency,43,"Hi @fredroy,. I fully support removing the dependency to SceneCreator. Thanks for the effort. . Small comment: ; I think that using simpleapi is a better option for scene creation than using the raw c++one:; - it reduce the need for c++ includes (so the dependency graph (aka ""the giant spaggheti bowl"") pressure). ; - it reduce the compilation time,; - in theory simple and consistant API aligned with the python one (but It haven't been updated so it match with SofaPython3... but doing such a thing is worth the effort).; ; ; EDIT: I just try how would look a modernize simpleapi (https://godbolt.org/z/9EW9dbnvn)... and think I'm going to like doing things like that (thanks to c++ std::any):; ```cpp; mo = createObject(""MechanicalObject"",; {{""name"", std::string{""myMo""}}, ; {""position"", {{1,2,3},{4,5,6}}},; {""enable"", true}});; node.addObject(mo);; ```; The syntax is nice and there is no more this ugly data to string to data creation using ""BaseObjectDescription"" and its parse method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882
https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882:254,Integrability,depend,dependency,254,"Hi @fredroy,. I fully support removing the dependency to SceneCreator. Thanks for the effort. . Small comment: ; I think that using simpleapi is a better option for scene creation than using the raw c++one:; - it reduce the need for c++ includes (so the dependency graph (aka ""the giant spaggheti bowl"") pressure). ; - it reduce the compilation time,; - in theory simple and consistant API aligned with the python one (but It haven't been updated so it match with SofaPython3... but doing such a thing is worth the effort).; ; ; EDIT: I just try how would look a modernize simpleapi (https://godbolt.org/z/9EW9dbnvn)... and think I'm going to like doing things like that (thanks to c++ std::any):; ```cpp; mo = createObject(""MechanicalObject"",; {{""name"", std::string{""myMo""}}, ; {""position"", {{1,2,3},{4,5,6}}},; {""enable"", true}});; node.addObject(mo);; ```; The syntax is nice and there is no more this ugly data to string to data creation using ""BaseObjectDescription"" and its parse method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882
https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882:132,Usability,simpl,simpleapi,132,"Hi @fredroy,. I fully support removing the dependency to SceneCreator. Thanks for the effort. . Small comment: ; I think that using simpleapi is a better option for scene creation than using the raw c++one:; - it reduce the need for c++ includes (so the dependency graph (aka ""the giant spaggheti bowl"") pressure). ; - it reduce the compilation time,; - in theory simple and consistant API aligned with the python one (but It haven't been updated so it match with SofaPython3... but doing such a thing is worth the effort).; ; ; EDIT: I just try how would look a modernize simpleapi (https://godbolt.org/z/9EW9dbnvn)... and think I'm going to like doing things like that (thanks to c++ std::any):; ```cpp; mo = createObject(""MechanicalObject"",; {{""name"", std::string{""myMo""}}, ; {""position"", {{1,2,3},{4,5,6}}},; {""enable"", true}});; node.addObject(mo);; ```; The syntax is nice and there is no more this ugly data to string to data creation using ""BaseObjectDescription"" and its parse method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882
https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882:364,Usability,simpl,simple,364,"Hi @fredroy,. I fully support removing the dependency to SceneCreator. Thanks for the effort. . Small comment: ; I think that using simpleapi is a better option for scene creation than using the raw c++one:; - it reduce the need for c++ includes (so the dependency graph (aka ""the giant spaggheti bowl"") pressure). ; - it reduce the compilation time,; - in theory simple and consistant API aligned with the python one (but It haven't been updated so it match with SofaPython3... but doing such a thing is worth the effort).; ; ; EDIT: I just try how would look a modernize simpleapi (https://godbolt.org/z/9EW9dbnvn)... and think I'm going to like doing things like that (thanks to c++ std::any):; ```cpp; mo = createObject(""MechanicalObject"",; {{""name"", std::string{""myMo""}}, ; {""position"", {{1,2,3},{4,5,6}}},; {""enable"", true}});; node.addObject(mo);; ```; The syntax is nice and there is no more this ugly data to string to data creation using ""BaseObjectDescription"" and its parse method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882
https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882:573,Usability,simpl,simpleapi,573,"Hi @fredroy,. I fully support removing the dependency to SceneCreator. Thanks for the effort. . Small comment: ; I think that using simpleapi is a better option for scene creation than using the raw c++one:; - it reduce the need for c++ includes (so the dependency graph (aka ""the giant spaggheti bowl"") pressure). ; - it reduce the compilation time,; - in theory simple and consistant API aligned with the python one (but It haven't been updated so it match with SofaPython3... but doing such a thing is worth the effort).; ; ; EDIT: I just try how would look a modernize simpleapi (https://godbolt.org/z/9EW9dbnvn)... and think I'm going to like doing things like that (thanks to c++ std::any):; ```cpp; mo = createObject(""MechanicalObject"",; {{""name"", std::string{""myMo""}}, ; {""position"", {{1,2,3},{4,5,6}}},; {""enable"", true}});; node.addObject(mo);; ```; The syntax is nice and there is no more this ugly data to string to data creation using ""BaseObjectDescription"" and its parse method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882
https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1653112403:459,Availability,error,errors,459,"Some notes:. - It was extremely hard to understand why L^T was used in the first step of the solve, and not L. I hope it's clearer now with the comment I added. Anyway, it requires to have the knowledge of the CSR and CSC formats, and how they relates to the transpose.; - I would like to use C++20 `std::span` in some functions such as `solveLowerUnitriangularSystemCSR`.; - Regression tests threshold are usually set to 1e-4. IMO it's not enough to capture errors happening on a single DOF because it's an average",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1653112403
https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1653112403:387,Testability,test,tests,387,"Some notes:. - It was extremely hard to understand why L^T was used in the first step of the solve, and not L. I hope it's clearer now with the comment I added. Anyway, it requires to have the knowledge of the CSR and CSC formats, and how they relates to the transpose.; - I would like to use C++20 `std::span` in some functions such as `solveLowerUnitriangularSystemCSR`.; - Regression tests threshold are usually set to 1e-4. IMO it's not enough to capture errors happening on a single DOF because it's an average",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1653112403
https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1653112403:123,Usability,clear,clearer,123,"Some notes:. - It was extremely hard to understand why L^T was used in the first step of the solve, and not L. I hope it's clearer now with the comment I added. Anyway, it requires to have the knowledge of the CSR and CSC formats, and how they relates to the transpose.; - I would like to use C++20 `std::span` in some functions such as `solveLowerUnitriangularSystemCSR`.; - Regression tests threshold are usually set to 1e-4. IMO it's not enough to capture errors happening on a single DOF because it's an average",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1653112403
https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376:531,Modifiability,parameteriz,parameterizations,531,"Looks like this particular case falls under the Euler angles singularities. The initial quaternion `q0` converted to Roll-Pitch-Yaw Euler angles has a pitch of `pi / 2`, which corresponds to a singularity case, i.e. there is no global and smooth solutions to the inverse problem of converting the rotation to Euler angles. In this particular case, one DOF is lost (I found the explanations of this quite intuitive and clear here: http://lavalle.pl/vr/node83.html ).; When we can afford it, a good way would be to only allow global parameterizations of SO(3) and simply not use Euler angles, but I guess we have reasons to have them in SOFA and have to deal with them.; I would not go to change anything in the `createQuaterFromEuler` or `toEulerVector` conversions functions, as to me they are valid as it and it is left to the user of Euler angles to know that they have to be used as their are, locally, as it is a local parameterization, i.e. not close to their singularities.; I guess this is what happened also in the random rotations failing tests.; What do you think about simply fixing our tests by excluding cases where quaternion `q0` is leading to a Euler angles singularity (here checking that pitch is not `pi / 2`), prior to converting them back to queternion `q1` ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376
https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376:923,Modifiability,parameteriz,parameterization,923,"Looks like this particular case falls under the Euler angles singularities. The initial quaternion `q0` converted to Roll-Pitch-Yaw Euler angles has a pitch of `pi / 2`, which corresponds to a singularity case, i.e. there is no global and smooth solutions to the inverse problem of converting the rotation to Euler angles. In this particular case, one DOF is lost (I found the explanations of this quite intuitive and clear here: http://lavalle.pl/vr/node83.html ).; When we can afford it, a good way would be to only allow global parameterizations of SO(3) and simply not use Euler angles, but I guess we have reasons to have them in SOFA and have to deal with them.; I would not go to change anything in the `createQuaterFromEuler` or `toEulerVector` conversions functions, as to me they are valid as it and it is left to the user of Euler angles to know that they have to be used as their are, locally, as it is a local parameterization, i.e. not close to their singularities.; I guess this is what happened also in the random rotations failing tests.; What do you think about simply fixing our tests by excluding cases where quaternion `q0` is leading to a Euler angles singularity (here checking that pitch is not `pi / 2`), prior to converting them back to queternion `q1` ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376
https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376:1048,Testability,test,tests,1048,"Looks like this particular case falls under the Euler angles singularities. The initial quaternion `q0` converted to Roll-Pitch-Yaw Euler angles has a pitch of `pi / 2`, which corresponds to a singularity case, i.e. there is no global and smooth solutions to the inverse problem of converting the rotation to Euler angles. In this particular case, one DOF is lost (I found the explanations of this quite intuitive and clear here: http://lavalle.pl/vr/node83.html ).; When we can afford it, a good way would be to only allow global parameterizations of SO(3) and simply not use Euler angles, but I guess we have reasons to have them in SOFA and have to deal with them.; I would not go to change anything in the `createQuaterFromEuler` or `toEulerVector` conversions functions, as to me they are valid as it and it is left to the user of Euler angles to know that they have to be used as their are, locally, as it is a local parameterization, i.e. not close to their singularities.; I guess this is what happened also in the random rotations failing tests.; What do you think about simply fixing our tests by excluding cases where quaternion `q0` is leading to a Euler angles singularity (here checking that pitch is not `pi / 2`), prior to converting them back to queternion `q1` ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376
https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376:1098,Testability,test,tests,1098,"Looks like this particular case falls under the Euler angles singularities. The initial quaternion `q0` converted to Roll-Pitch-Yaw Euler angles has a pitch of `pi / 2`, which corresponds to a singularity case, i.e. there is no global and smooth solutions to the inverse problem of converting the rotation to Euler angles. In this particular case, one DOF is lost (I found the explanations of this quite intuitive and clear here: http://lavalle.pl/vr/node83.html ).; When we can afford it, a good way would be to only allow global parameterizations of SO(3) and simply not use Euler angles, but I guess we have reasons to have them in SOFA and have to deal with them.; I would not go to change anything in the `createQuaterFromEuler` or `toEulerVector` conversions functions, as to me they are valid as it and it is left to the user of Euler angles to know that they have to be used as their are, locally, as it is a local parameterization, i.e. not close to their singularities.; I guess this is what happened also in the random rotations failing tests.; What do you think about simply fixing our tests by excluding cases where quaternion `q0` is leading to a Euler angles singularity (here checking that pitch is not `pi / 2`), prior to converting them back to queternion `q1` ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376
https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376:404,Usability,intuit,intuitive,404,"Looks like this particular case falls under the Euler angles singularities. The initial quaternion `q0` converted to Roll-Pitch-Yaw Euler angles has a pitch of `pi / 2`, which corresponds to a singularity case, i.e. there is no global and smooth solutions to the inverse problem of converting the rotation to Euler angles. In this particular case, one DOF is lost (I found the explanations of this quite intuitive and clear here: http://lavalle.pl/vr/node83.html ).; When we can afford it, a good way would be to only allow global parameterizations of SO(3) and simply not use Euler angles, but I guess we have reasons to have them in SOFA and have to deal with them.; I would not go to change anything in the `createQuaterFromEuler` or `toEulerVector` conversions functions, as to me they are valid as it and it is left to the user of Euler angles to know that they have to be used as their are, locally, as it is a local parameterization, i.e. not close to their singularities.; I guess this is what happened also in the random rotations failing tests.; What do you think about simply fixing our tests by excluding cases where quaternion `q0` is leading to a Euler angles singularity (here checking that pitch is not `pi / 2`), prior to converting them back to queternion `q1` ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376
https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376:418,Usability,clear,clear,418,"Looks like this particular case falls under the Euler angles singularities. The initial quaternion `q0` converted to Roll-Pitch-Yaw Euler angles has a pitch of `pi / 2`, which corresponds to a singularity case, i.e. there is no global and smooth solutions to the inverse problem of converting the rotation to Euler angles. In this particular case, one DOF is lost (I found the explanations of this quite intuitive and clear here: http://lavalle.pl/vr/node83.html ).; When we can afford it, a good way would be to only allow global parameterizations of SO(3) and simply not use Euler angles, but I guess we have reasons to have them in SOFA and have to deal with them.; I would not go to change anything in the `createQuaterFromEuler` or `toEulerVector` conversions functions, as to me they are valid as it and it is left to the user of Euler angles to know that they have to be used as their are, locally, as it is a local parameterization, i.e. not close to their singularities.; I guess this is what happened also in the random rotations failing tests.; What do you think about simply fixing our tests by excluding cases where quaternion `q0` is leading to a Euler angles singularity (here checking that pitch is not `pi / 2`), prior to converting them back to queternion `q1` ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376
https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376:562,Usability,simpl,simply,562,"Looks like this particular case falls under the Euler angles singularities. The initial quaternion `q0` converted to Roll-Pitch-Yaw Euler angles has a pitch of `pi / 2`, which corresponds to a singularity case, i.e. there is no global and smooth solutions to the inverse problem of converting the rotation to Euler angles. In this particular case, one DOF is lost (I found the explanations of this quite intuitive and clear here: http://lavalle.pl/vr/node83.html ).; When we can afford it, a good way would be to only allow global parameterizations of SO(3) and simply not use Euler angles, but I guess we have reasons to have them in SOFA and have to deal with them.; I would not go to change anything in the `createQuaterFromEuler` or `toEulerVector` conversions functions, as to me they are valid as it and it is left to the user of Euler angles to know that they have to be used as their are, locally, as it is a local parameterization, i.e. not close to their singularities.; I guess this is what happened also in the random rotations failing tests.; What do you think about simply fixing our tests by excluding cases where quaternion `q0` is leading to a Euler angles singularity (here checking that pitch is not `pi / 2`), prior to converting them back to queternion `q1` ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376
https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376:1080,Usability,simpl,simply,1080,"Looks like this particular case falls under the Euler angles singularities. The initial quaternion `q0` converted to Roll-Pitch-Yaw Euler angles has a pitch of `pi / 2`, which corresponds to a singularity case, i.e. there is no global and smooth solutions to the inverse problem of converting the rotation to Euler angles. In this particular case, one DOF is lost (I found the explanations of this quite intuitive and clear here: http://lavalle.pl/vr/node83.html ).; When we can afford it, a good way would be to only allow global parameterizations of SO(3) and simply not use Euler angles, but I guess we have reasons to have them in SOFA and have to deal with them.; I would not go to change anything in the `createQuaterFromEuler` or `toEulerVector` conversions functions, as to me they are valid as it and it is left to the user of Euler angles to know that they have to be used as their are, locally, as it is a local parameterization, i.e. not close to their singularities.; I guess this is what happened also in the random rotations failing tests.; What do you think about simply fixing our tests by excluding cases where quaternion `q0` is leading to a Euler angles singularity (here checking that pitch is not `pi / 2`), prior to converting them back to queternion `q1` ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376
https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717065958:927,Usability,clear,clearSystem,927,"I tried it with a tetrahedron beam with a TetrahedronFEMForcefield (not parallel) and I don't have a speed up, it is quite the contrary : . ```; Parallel : 14.7546 FPS. 2 	 0.04	 1 	 61.29	 64.18	 62.09	 0.56	 62.09	 99.59	..solve; 3 	 0.04	 1 	 61.29	 64.18	 62.09	 0.56	 62.09	 99.59	...Mechanical; 4 	 0.06	 1 	 1.78	 2.54	 1.93	 0.14	 1.93	 3.09	....ComputeForce; 4 	 1.99	 1 	 1.01	 1.63	 1.20	 0.11	 1.20	 1.93	....ComputeRHTerm; 4 	 3.20	 1 	 50.63	 52.92	 51.24	 0.43	 51.24	 82.18	....MBKBuild; 5 	 3.20	 1 	 50.63	 52.92	 51.24	 0.43	 51.24	 82.18	.....CG-setSystemMBKMatrix; 6 	 3.20	 1 	 0.02	 0.02	 0.02	 0 	 0.02	 0.03	......getContributors; 6 	 3.22	 1 	 0.01	 0.01	 0.01	 0 	 0.01	 0.02	......buildMappingGraph; 6 	 3.23	 1 	 0.25	 0.82	 0.31	 0.08	 0.31	 0.50	......InitializeSystem; 7 	 3.23	 1 	 0.15	 0.40	 0.19	 0.04	 0.19	 0.30	.......resizeSystem; 7 	 3.41	 1 	 0.07	 0.40	 0.11	 0.05	 0.11	 0.18	.......clearSystem; 7 	 3.53	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.02	.......initializeLocalMatrices; 6 	 3.54	 1 	 50.34	 52.60	 50.89	 0.41	 50.89	 81.62	......AssembleSystem; 7 	 3.54	 1 	 50.31	 52.58	 50.87	 0.41	 50.87	 81.58	.......buildMatrices; 8 	 3.54	 1 	 50.03	 52.24	 50.56	 0.40	 50.56	 81.10	........buildStiffness; 8 	 54.11	 1 	 0.28	 0.45	 0.30	 0.03	 0.30	 0.48	........buildMass; 8 	 54.40	 1 	 0 	 0 	 0 	 0 	 0 	 0 	........buildDamping; 8 	 54.40	 1 	 0 	 0 	 0 	 0 	 0 	 0 	........buildGeometricStiffness; 7 	 54.41	 1 	 0 	 0 	 0 	 0 	 0 	 0 	.......projectMappedMatrices; 7 	 54.41	 1 	 0.02	 0.03	 0.02	 0 	 0.02	 0.03	.......applyProjectiveConstraint; 4 	 54.43	 1 	 7.47	 8.01	 7.68	 0.11	 7.68	 12.32	....MBKSolve; 5 	 54.57	 1 	 7.31	 7.85	 7.52	 0.11	 7.52	 12.06	.....CG-Solve; 4 	 62.12	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.02	....UpdateVAndX. --- . Normal : 27.3678 FPS. 2 	 0.04	 1 	 37.97	 39.96	 38.38	 0.34	 38.38	 99.38	..solve; 3 	 0.04	 1 	 37.96	 39.95	 38.38	 0.34	 38.38	 99.37	...Mechanical; 4 	 0.06	 1 	 1.70	 2.24	 1.88	 0.12	 1.88	 4.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717065958
https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717065958:2579,Usability,clear,clearSystem,2579,onstraint; 4 	 54.43	 1 	 7.47	 8.01	 7.68	 0.11	 7.68	 12.32	....MBKSolve; 5 	 54.57	 1 	 7.31	 7.85	 7.52	 0.11	 7.52	 12.06	.....CG-Solve; 4 	 62.12	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.02	....UpdateVAndX. --- . Normal : 27.3678 FPS. 2 	 0.04	 1 	 37.97	 39.96	 38.38	 0.34	 38.38	 99.38	..solve; 3 	 0.04	 1 	 37.96	 39.95	 38.38	 0.34	 38.38	 99.37	...Mechanical; 4 	 0.06	 1 	 1.70	 2.24	 1.88	 0.12	 1.88	 4.88	....ComputeForce; 4 	 1.94	 1 	 0.94	 1.23	 1.04	 0.06	 1.04	 2.68	....ComputeRHTerm; 4 	 2.98	 1 	 22.20	 23.41	 22.47	 0.18	 22.47	 58.17	....MBKBuild; 5 	 2.98	 1 	 22.20	 23.40	 22.46	 0.18	 22.46	 58.16	.....CG-setSystemMBKMatrix; 6 	 2.98	 1 	 0.01	 0.03	 0.02	 0 	 0.02	 0.04	......getContributors; 6 	 3 	 1 	 0.01	 0.01	 0.01	 0 	 0.01	 0.02	......buildMappingGraph; 6 	 3.01	 1 	 0.25	 0.56	 0.30	 0.04	 0.30	 0.77	......InitializeSystem; 7 	 3.01	 1 	 0.13	 0.28	 0.16	 0.03	 0.16	 0.41	.......resizeSystem; 7 	 3.17	 1 	 0.09	 0.25	 0.12	 0.02	 0.12	 0.32	.......clearSystem; 7 	 3.29	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.04	.......initializeLocalMatrices; 6 	 3.31	 1 	 21.92	 22.80	 22.13	 0.15	 22.13	 57.31	......AssembleSystem; 7 	 3.31	 1 	 21.90	 22.77	 22.11	 0.14	 22.11	 57.25	.......buildMatrices; 8 	 3.31	 1 	 21.62	 22.44	 21.82	 0.14	 21.82	 56.50	........buildStiffness; 8 	 25.13	 1 	 0.27	 0.33	 0.28	 0.01	 0.29	 0.74	........buildMass; 8 	 25.42	 1 	 0 	 0 	 0 	 0 	 0 	 0 	........buildDamping; 8 	 25.42	 1 	 0 	 0 	 0 	 0 	 0 	 0 	........buildGeometricStiffness; 7 	 25.42	 1 	 0 	 0 	 0 	 0 	 0 	 0 	.......projectMappedMatrices; 7 	 25.42	 1 	 0.02	 0.02	 0.02	 0 	 0.02	 0.05	.......applyProjectiveConstraint; 4 	 25.45	 1 	 12.80	 13.57	 12.96	 0.12	 12.96	 33.55	....MBKSolve; 5 	 25.63	 1 	 12.61	 13.31	 12.75	 0.11	 12.75	 33 	.....CG-Solve; 4 	 38.41	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.03	....UpdateVAndX; ```. Here is the scene. ; [4000-Cantilever-CG.scn.zip](https://github.com/sofa-framework/sofa/files/12594473/4000-Cantilever-CG.scn.zip),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717065958
https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532:158,Testability,benchmark,benchmark,158,"@bakpaul you were right, and it is fixed now in https://github.com/sofa-framework/sofa/pull/4138/commits/c349e111debbcb377c5bbb7ad68610c15f336c52. Here is my benchmark:. ```; CGLinearSolver template=""CompressedRowSparseMatrixMat3x3d"". [INFO] [BatchGUI] 1000 iterations done in 72.7944 s ( 13.7373 FPS). Steps Duration Statistics (in ms) :; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 40.29 110.35 72.73 8.91 72732.7 100 TOTAL; 1 0 1 40.29 110.32 72.73 8.91 72.73 100 .Simulation::animate; 2 0.01 1 0 0.07 0 0 0 0 ..BehaviorUpdatePositionVisitor; 2 0.01 1 0 0.03 0 0 0 0.01 ..UpdateInternalDataVisitor; 2 0.01 1 0 0.04 0.01 0 0.01 0.01 ..resetConstraint; 2 0.02 1 0 0.02 0 0 0 0 ..collision; 2 0.03 1 0 0.03 0 0 0 0 ..propagateIntegrateBeginEvent; 2 0.03 1 0 0.02 0 0 0 0 ..beginIntegration; 2 0.03 1 0 0.07 0 0 0 0 ..buildConstraintMatrix; 2 0.03 1 0 0.03 0.01 0 0.01 0.01 ..accumulateMatrixDeriv; 2 0.04 1 40.07 109.99 72.48 8.91 72.48 99.65 ..solve; 3 0.04 1 40.07 109.98 72.47 8.90 72.47 99.65 ...Mechanical; 4 0.07 1 2.07 4.47 2.45 0.33 2.45 3.37 ....ComputeForce; 4 2.52 1 1.11 3.14 1.37 0.29 1.37 1.89 ....ComputeRHTerm; 4 3.89 1 34.04 71.94 36.80 2.11 36.80 50.60 ....MBKBuild; 5 3.90 1 34.03 71.91 36.79 2.11 36.79 50.58 .....CG-setSystemMBKMatrix; 6 3.90 1 0.03 0.21 0.04 0.01 0.04 0.05 ......getContributors; 6 3.94 1 0.02 0.17 0.02 0.01 0.02 0.03 ......buildMappingGraph; 6 3.96 1 0.25 2.56 0.72 0.17 0.72 0.98 ......InitializeSystem; 7 3.97 1 0.06 1.35 0.36 0.10 0.36 0.50 .......resizeSystem; 7 4.33 1 0.01 1.22 0.32 0.08 0.32 0.44 .......clearSystem; 7 4.65 1 0.02 0.27 0.03 0.01 0.03 0.04 .......initializeLocalMatrices; 6 4.68 1 33.38 71.55 36 2.08 36 49.49 ......AssembleSystem; 7 4.68 1 33.35 49.36 35.94 1.80 35.94 49.41 .......buildMatrices; 8 4.68 1 32.79 49.09 35.44 1.78 35.44 48.72 ........buildStiffness; 8 40.13 1 0.25 1.33 0.49 0.12 0.49 0.67 ........buildMass; 8 40.61 1 0 0.02 0 0 0 0.01 ........buildDamping; 8 40.62 1 0 0.02 0 0 0 0 ........buildGeometri",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532
https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532:1568,Usability,clear,clearSystem,1568,"3 0 0 0 0.01 ..UpdateInternalDataVisitor; 2 0.01 1 0 0.04 0.01 0 0.01 0.01 ..resetConstraint; 2 0.02 1 0 0.02 0 0 0 0 ..collision; 2 0.03 1 0 0.03 0 0 0 0 ..propagateIntegrateBeginEvent; 2 0.03 1 0 0.02 0 0 0 0 ..beginIntegration; 2 0.03 1 0 0.07 0 0 0 0 ..buildConstraintMatrix; 2 0.03 1 0 0.03 0.01 0 0.01 0.01 ..accumulateMatrixDeriv; 2 0.04 1 40.07 109.99 72.48 8.91 72.48 99.65 ..solve; 3 0.04 1 40.07 109.98 72.47 8.90 72.47 99.65 ...Mechanical; 4 0.07 1 2.07 4.47 2.45 0.33 2.45 3.37 ....ComputeForce; 4 2.52 1 1.11 3.14 1.37 0.29 1.37 1.89 ....ComputeRHTerm; 4 3.89 1 34.04 71.94 36.80 2.11 36.80 50.60 ....MBKBuild; 5 3.90 1 34.03 71.91 36.79 2.11 36.79 50.58 .....CG-setSystemMBKMatrix; 6 3.90 1 0.03 0.21 0.04 0.01 0.04 0.05 ......getContributors; 6 3.94 1 0.02 0.17 0.02 0.01 0.02 0.03 ......buildMappingGraph; 6 3.96 1 0.25 2.56 0.72 0.17 0.72 0.98 ......InitializeSystem; 7 3.97 1 0.06 1.35 0.36 0.10 0.36 0.50 .......resizeSystem; 7 4.33 1 0.01 1.22 0.32 0.08 0.32 0.44 .......clearSystem; 7 4.65 1 0.02 0.27 0.03 0.01 0.03 0.04 .......initializeLocalMatrices; 6 4.68 1 33.38 71.55 36 2.08 36 49.49 ......AssembleSystem; 7 4.68 1 33.35 49.36 35.94 1.80 35.94 49.41 .......buildMatrices; 8 4.68 1 32.79 49.09 35.44 1.78 35.44 48.72 ........buildStiffness; 8 40.13 1 0.25 1.33 0.49 0.12 0.49 0.67 ........buildMass; 8 40.61 1 0 0.02 0 0 0 0.01 ........buildDamping; 8 40.62 1 0 0.02 0 0 0 0 ........buildGeometricStiffness; 7 40.62 1 0 0.02 0 0 0 0 .......projectMappedMatrices; 7 40.63 1 0.02 22.18 0.05 0.70 0.05 0.07 .......applyProjectiveConstraint; 4 40.69 1 1.38 43.66 31.78 8.31 31.78 43.69 ....MBKSolve; 5 41.19 1 0.92 43.15 31.20 8.30 31.20 42.90 .....CG-Solve; 4 72.48 1 0.02 0.15 0.03 0.01 0.03 0.04 ....UpdateVAndX; ```. ```; ParallelCGLinearSolver template=""ParallelCompressedRowSparseMatrixMat3x3d"". [INFO] [BatchGUI] 1000 iterations done in 53.883 s ( 18.5587 FPS). Steps Duration Statistics (in ms) :; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 39.40 89.6",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532
https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532:3724,Usability,clear,clearSystem,3724,) :; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 39.40 89.65 53.81 3.72 53810.7 100 TOTAL; 1 0 1 39.40 89.63 53.81 3.72 53.81 99.99 .Simulation::animate; 2 0.01 1 0 0.02 0 0 0 0 ..BehaviorUpdatePositionVisitor; 2 0.01 1 0 0.02 0 0 0 0.01 ..UpdateInternalDataVisitor; 2 0.01 1 0 0.04 0.01 0 0.01 0.01 ..resetConstraint; 2 0.02 1 0 0.07 0 0 0 0 ..collision; 2 0.02 1 0 0 0 0 0 0 ..propagateIntegrateBeginEvent; 2 0.03 1 0 0.02 0 0 0 0 ..beginIntegration; 2 0.03 1 0 0.06 0 0 0 0 ..buildConstraintMatrix; 2 0.03 1 0 0.02 0 0 0 0.01 ..accumulateMatrixDeriv; 2 0.04 1 39.17 89.35 53.58 3.72 53.58 99.57 ..solve; 3 0.04 1 39.17 89.34 53.57 3.72 53.57 99.56 ...Mechanical; 4 0.07 1 2.11 3.55 2.36 0.14 2.36 4.38 ....ComputeForce; 4 2.42 1 1.14 3.35 1.30 0.18 1.30 2.41 ....ComputeRHTerm; 4 3.72 1 33.78 68.54 35.78 1.50 35.78 66.50 ....MBKBuild; 5 3.73 1 33.77 68.51 35.78 1.50 35.78 66.48 .....CG-setSystemMBKMatrix; 6 3.73 1 0.03 0.14 0.04 0.01 0.04 0.07 ......getContributors; 6 3.77 1 0.02 0.21 0.02 0.01 0.02 0.04 ......buildMappingGraph; 6 3.79 1 0.26 1.60 0.70 0.10 0.70 1.29 ......InitializeSystem; 7 3.79 1 0.09 1.18 0.36 0.06 0.36 0.67 .......resizeSystem; 7 4.16 1 0.01 0.69 0.30 0.04 0.30 0.56 .......clearSystem; 7 4.46 1 0.02 0.17 0.02 0.01 0.02 0.05 .......initializeLocalMatrices; 6 4.49 1 33.12 68.12 35.01 1.48 35.01 65.06 ......AssembleSystem; 7 4.49 1 33.09 47.99 34.95 1.13 34.95 64.95 .......buildMatrices; 8 4.49 1 32.71 47.75 34.52 1.10 34.52 64.16 ........buildStiffness; 8 39.02 1 0.23 1.13 0.41 0.08 0.41 0.77 ........buildMass; 8 39.43 1 0 0.02 0 0 0 0.01 ........buildDamping; 8 39.44 1 0 0.02 0 0 0 0 ........buildGeometricStiffness; 7 39.44 1 0 0 0 0 0 0 .......projectMappedMatrices; 7 39.44 1 0.02 20.12 0.05 0.63 0.05 0.09 .......applyProjectiveConstraint; 4 39.51 1 0.85 21.84 14.06 3.56 14.06 26.13 ....MBKSolve; 5 39.83 1 0.51 21.43 13.67 3.56 13.67 25.41 .....CG-Solve; 4 53.57 1 0.02 0.07 0.02 0 0.02 0.05 ....UpdateVAndX; ```. Thanks for having tried!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532
https://github.com/sofa-framework/sofa/pull/4163#issuecomment-1737430587:244,Integrability,interface,interfaces,244,"Hello thank you for the feedback,. I'm strongly reluctant to hard code in c++ trivial keyboard controller because there is a lot of boilerplate code and because this also encourage software obesity by having all the application specific's user interfaces in Sofa Core, think about just changing the keypress ""a"" to ""b"" without recompiling sofa. . But I'm ok to implement that in a python controllers, does it would be ok ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4163#issuecomment-1737430587
https://github.com/sofa-framework/sofa/pull/4163#issuecomment-1737430587:24,Usability,feedback,feedback,24,"Hello thank you for the feedback,. I'm strongly reluctant to hard code in c++ trivial keyboard controller because there is a lot of boilerplate code and because this also encourage software obesity by having all the application specific's user interfaces in Sofa Core, think about just changing the keypress ""a"" to ""b"" without recompiling sofa. . But I'm ok to implement that in a python controllers, does it would be ok ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4163#issuecomment-1737430587
https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089:58,Integrability,message,messages,58,"It's not perfect. The progress bar interacts with console messages (`msg_info`, `std::cout` etc), but it behaves well when the message is longer than the progress bar. Otherwise, both are mixed on a single line. It still does not behave correctly after a ctrl+c in a infinite loop (`runSofa -n infinite`). I also made some threading experiment in the case of infinite loop but no success. I wanted to add a command line option to hide the progress bar if needed. I wanted to add it only for BatchGUI, but it seems that parsing crashes for unkown arguments (the loading of the gui is after the parse). Maybe the help of @fredroy would be needed here (if we decide to go on).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089
https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089:127,Integrability,message,message,127,"It's not perfect. The progress bar interacts with console messages (`msg_info`, `std::cout` etc), but it behaves well when the message is longer than the progress bar. Otherwise, both are mixed on a single line. It still does not behave correctly after a ctrl+c in a infinite loop (`runSofa -n infinite`). I also made some threading experiment in the case of infinite loop but no success. I wanted to add a command line option to hide the progress bar if needed. I wanted to add it only for BatchGUI, but it seems that parsing crashes for unkown arguments (the loading of the gui is after the parse). Maybe the help of @fredroy would be needed here (if we decide to go on).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089
https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089:561,Performance,load,loading,561,"It's not perfect. The progress bar interacts with console messages (`msg_info`, `std::cout` etc), but it behaves well when the message is longer than the progress bar. Otherwise, both are mixed on a single line. It still does not behave correctly after a ctrl+c in a infinite loop (`runSofa -n infinite`). I also made some threading experiment in the case of infinite loop but no success. I wanted to add a command line option to hide the progress bar if needed. I wanted to add it only for BatchGUI, but it seems that parsing crashes for unkown arguments (the loading of the gui is after the parse). Maybe the help of @fredroy would be needed here (if we decide to go on).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089
https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089:22,Usability,progress bar,progress bar,22,"It's not perfect. The progress bar interacts with console messages (`msg_info`, `std::cout` etc), but it behaves well when the message is longer than the progress bar. Otherwise, both are mixed on a single line. It still does not behave correctly after a ctrl+c in a infinite loop (`runSofa -n infinite`). I also made some threading experiment in the case of infinite loop but no success. I wanted to add a command line option to hide the progress bar if needed. I wanted to add it only for BatchGUI, but it seems that parsing crashes for unkown arguments (the loading of the gui is after the parse). Maybe the help of @fredroy would be needed here (if we decide to go on).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089
https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089:154,Usability,progress bar,progress bar,154,"It's not perfect. The progress bar interacts with console messages (`msg_info`, `std::cout` etc), but it behaves well when the message is longer than the progress bar. Otherwise, both are mixed on a single line. It still does not behave correctly after a ctrl+c in a infinite loop (`runSofa -n infinite`). I also made some threading experiment in the case of infinite loop but no success. I wanted to add a command line option to hide the progress bar if needed. I wanted to add it only for BatchGUI, but it seems that parsing crashes for unkown arguments (the loading of the gui is after the parse). Maybe the help of @fredroy would be needed here (if we decide to go on).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089
https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089:439,Usability,progress bar,progress bar,439,"It's not perfect. The progress bar interacts with console messages (`msg_info`, `std::cout` etc), but it behaves well when the message is longer than the progress bar. Otherwise, both are mixed on a single line. It still does not behave correctly after a ctrl+c in a infinite loop (`runSofa -n infinite`). I also made some threading experiment in the case of infinite loop but no success. I wanted to add a command line option to hide the progress bar if needed. I wanted to add it only for BatchGUI, but it seems that parsing crashes for unkown arguments (the loading of the gui is after the parse). Maybe the help of @fredroy would be needed here (if we decide to go on).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089
https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877:86,Modifiability,plugin,plugin,86,"@fredroy a feedback from Hadrien from #3894. A crash is occuring from the SofaCUDALDI plugin, but it does concern SOFA.; The crash has been noticed when constraints are added on a ""non-mechanical"" object, aka a passive/non-moving object used for the collision detection (MechanicalObject with no solver). In the SofaCUDALDI plugin the following code is written : . ``` cpp; MatrixDerivRowConstIterator1 Re1= c1.readLine(c.myCId);; MatrixDerivRowConstIterator2 Re2= c2.readLine(c.myCId);; ; for (MatrixDerivColIterator1 it=Re1.begin(); it!=Re1.end();++it); {; //unsigned int dof = itSvd1->first;; dx1+= it.val(); //x1Free[dof] - x1[dof];; }; ```. while in CompressedRowSparseMatrixConstraint.h there is: ; ``` cpp; ColConstIterator begin() const; {; Range r = m_matrix->getRowRange(m_internal);; return ColConstIterator(m_internal, r.begin(), m_matrix);; }; ```. and in CompressedRowSparseMatrixGeneric.h :; ``` cpp ; Range getRowRange(Index id) const { return Range(rowBegin[id], rowBegin[id+1]); }. ``` . where rowBegin is empty. Hadrien explained that in a CRM structure, 2 values are required minimum in order to check whether the CRS is empty or not; Is this possible ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877
https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877:324,Modifiability,plugin,plugin,324,"@fredroy a feedback from Hadrien from #3894. A crash is occuring from the SofaCUDALDI plugin, but it does concern SOFA.; The crash has been noticed when constraints are added on a ""non-mechanical"" object, aka a passive/non-moving object used for the collision detection (MechanicalObject with no solver). In the SofaCUDALDI plugin the following code is written : . ``` cpp; MatrixDerivRowConstIterator1 Re1= c1.readLine(c.myCId);; MatrixDerivRowConstIterator2 Re2= c2.readLine(c.myCId);; ; for (MatrixDerivColIterator1 it=Re1.begin(); it!=Re1.end();++it); {; //unsigned int dof = itSvd1->first;; dx1+= it.val(); //x1Free[dof] - x1[dof];; }; ```. while in CompressedRowSparseMatrixConstraint.h there is: ; ``` cpp; ColConstIterator begin() const; {; Range r = m_matrix->getRowRange(m_internal);; return ColConstIterator(m_internal, r.begin(), m_matrix);; }; ```. and in CompressedRowSparseMatrixGeneric.h :; ``` cpp ; Range getRowRange(Index id) const { return Range(rowBegin[id], rowBegin[id+1]); }. ``` . where rowBegin is empty. Hadrien explained that in a CRM structure, 2 values are required minimum in order to check whether the CRS is empty or not; Is this possible ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877
https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877:260,Safety,detect,detection,260,"@fredroy a feedback from Hadrien from #3894. A crash is occuring from the SofaCUDALDI plugin, but it does concern SOFA.; The crash has been noticed when constraints are added on a ""non-mechanical"" object, aka a passive/non-moving object used for the collision detection (MechanicalObject with no solver). In the SofaCUDALDI plugin the following code is written : . ``` cpp; MatrixDerivRowConstIterator1 Re1= c1.readLine(c.myCId);; MatrixDerivRowConstIterator2 Re2= c2.readLine(c.myCId);; ; for (MatrixDerivColIterator1 it=Re1.begin(); it!=Re1.end();++it); {; //unsigned int dof = itSvd1->first;; dx1+= it.val(); //x1Free[dof] - x1[dof];; }; ```. while in CompressedRowSparseMatrixConstraint.h there is: ; ``` cpp; ColConstIterator begin() const; {; Range r = m_matrix->getRowRange(m_internal);; return ColConstIterator(m_internal, r.begin(), m_matrix);; }; ```. and in CompressedRowSparseMatrixGeneric.h :; ``` cpp ; Range getRowRange(Index id) const { return Range(rowBegin[id], rowBegin[id+1]); }. ``` . where rowBegin is empty. Hadrien explained that in a CRM structure, 2 values are required minimum in order to check whether the CRS is empty or not; Is this possible ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877
https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877:11,Usability,feedback,feedback,11,"@fredroy a feedback from Hadrien from #3894. A crash is occuring from the SofaCUDALDI plugin, but it does concern SOFA.; The crash has been noticed when constraints are added on a ""non-mechanical"" object, aka a passive/non-moving object used for the collision detection (MechanicalObject with no solver). In the SofaCUDALDI plugin the following code is written : . ``` cpp; MatrixDerivRowConstIterator1 Re1= c1.readLine(c.myCId);; MatrixDerivRowConstIterator2 Re2= c2.readLine(c.myCId);; ; for (MatrixDerivColIterator1 it=Re1.begin(); it!=Re1.end();++it); {; //unsigned int dof = itSvd1->first;; dx1+= it.val(); //x1Free[dof] - x1[dof];; }; ```. while in CompressedRowSparseMatrixConstraint.h there is: ; ``` cpp; ColConstIterator begin() const; {; Range r = m_matrix->getRowRange(m_internal);; return ColConstIterator(m_internal, r.begin(), m_matrix);; }; ```. and in CompressedRowSparseMatrixGeneric.h :; ``` cpp ; Range getRowRange(Index id) const { return Range(rowBegin[id], rowBegin[id+1]); }. ``` . where rowBegin is empty. Hadrien explained that in a CRM structure, 2 values are required minimum in order to check whether the CRS is empty or not; Is this possible ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877
https://github.com/sofa-framework/sofa/pull/4187#issuecomment-1730239279:57,Usability,simpl,simplified,57,"More seriously, defaultCompliance can be considered in a simplified way as the inverse of the nodal mass.; This is close to 184 in this simulation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4187#issuecomment-1730239279
https://github.com/sofa-framework/sofa/pull/4187#issuecomment-1730537815:59,Usability,simpl,simplified,59,"> More seriously, defaultCompliance can be considered in a simplified way as the inverse of the nodal mass. This is close to 184 in this simulation. Not the purpose of the PR itself, but not possible to do a ""autoSetDefaultCompliance=true"" or something like that ? 😅",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4187#issuecomment-1730537815
https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460:20,Testability,test,tests,20,"[ci-build][with-all-tests]. > Don't you think that moving `errF` and `tempF` out of the loop is enough? I would test to only resize them in the loop. The underlying memory allocation should not happen a lot. My suggestion is because I think it is simpler to understand compared to the buffer implementation. I will try that 👍. > ; > In any case, I think the condition `if (nb > bufferSize)` is not necessary. Thats what I was thinking but not sure 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460
https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460:112,Testability,test,test,112,"[ci-build][with-all-tests]. > Don't you think that moving `errF` and `tempF` out of the loop is enough? I would test to only resize them in the loop. The underlying memory allocation should not happen a lot. My suggestion is because I think it is simpler to understand compared to the buffer implementation. I will try that 👍. > ; > In any case, I think the condition `if (nb > bufferSize)` is not necessary. Thats what I was thinking but not sure 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460
https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460:247,Usability,simpl,simpler,247,"[ci-build][with-all-tests]. > Don't you think that moving `errF` and `tempF` out of the loop is enough? I would test to only resize them in the loop. The underlying memory allocation should not happen a lot. My suggestion is because I think it is simpler to understand compared to the buffer implementation. I will try that 👍. > ; > In any case, I think the condition `if (nb > bufferSize)` is not necessary. Thats what I was thinking but not sure 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460
https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1734678391:84,Testability,test,test,84,"> Don't you think that moving `errF` and `tempF` out of the loop is enough? I would test to only resize them in the loop. The underlying memory allocation should not happen a lot. My suggestion is because I think it is simpler to understand compared to the buffer implementation.; > ; > In any case, I think the condition `if (nb > bufferSize)` is not necessary. I obtained the same level of improvement so I will go with this easier way 👍",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1734678391
https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1734678391:219,Usability,simpl,simpler,219,"> Don't you think that moving `errF` and `tempF` out of the loop is enough? I would test to only resize them in the loop. The underlying memory allocation should not happen a lot. My suggestion is because I think it is simpler to understand compared to the buffer implementation.; > ; > In any case, I think the condition `if (nb > bufferSize)` is not necessary. I obtained the same level of improvement so I will go with this easier way 👍",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1734678391
https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674:818,Availability,redundant,redundant,818,"I have identified the actual issue in ```$sofa_dir/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - line 124 has a few mentions of ```/${PROJECT_NAME}``` too much, removing these at least reduces the header install path to ```$sofa_dir/build/install/include/extlibs/QGLViewer/QGLViewer/*.h```; - for some reason the ```MOC_HEADER_FILES``` (line 21 ff.) are not considered for copying by your ```sofa_create_package_with_targets``` macro. For testing I have simply copied the headers listed in ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES```. This does not affect the build and finally copies the previously missing MOC headers to the install include directory. I can make a pull request for this. Or I can wait a bit if someone has an idea on how to properly copy/install the MOC_HEADERS without the redundant mentioning in both header lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674
https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674:215,Deployability,install,install,215,"I have identified the actual issue in ```$sofa_dir/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - line 124 has a few mentions of ```/${PROJECT_NAME}``` too much, removing these at least reduces the header install path to ```$sofa_dir/build/install/include/extlibs/QGLViewer/QGLViewer/*.h```; - for some reason the ```MOC_HEADER_FILES``` (line 21 ff.) are not considered for copying by your ```sofa_create_package_with_targets``` macro. For testing I have simply copied the headers listed in ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES```. This does not affect the build and finally copies the previously missing MOC headers to the install include directory. I can make a pull request for this. Or I can wait a bit if someone has an idea on how to properly copy/install the MOC_HEADERS without the redundant mentioning in both header lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674
https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674:250,Deployability,install,install,250,"I have identified the actual issue in ```$sofa_dir/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - line 124 has a few mentions of ```/${PROJECT_NAME}``` too much, removing these at least reduces the header install path to ```$sofa_dir/build/install/include/extlibs/QGLViewer/QGLViewer/*.h```; - for some reason the ```MOC_HEADER_FILES``` (line 21 ff.) are not considered for copying by your ```sofa_create_package_with_targets``` macro. For testing I have simply copied the headers listed in ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES```. This does not affect the build and finally copies the previously missing MOC headers to the install include directory. I can make a pull request for this. Or I can wait a bit if someone has an idea on how to properly copy/install the MOC_HEADERS without the redundant mentioning in both header lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674
https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674:652,Deployability,install,install,652,"I have identified the actual issue in ```$sofa_dir/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - line 124 has a few mentions of ```/${PROJECT_NAME}``` too much, removing these at least reduces the header install path to ```$sofa_dir/build/install/include/extlibs/QGLViewer/QGLViewer/*.h```; - for some reason the ```MOC_HEADER_FILES``` (line 21 ff.) are not considered for copying by your ```sofa_create_package_with_targets``` macro. For testing I have simply copied the headers listed in ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES```. This does not affect the build and finally copies the previously missing MOC headers to the install include directory. I can make a pull request for this. Or I can wait a bit if someone has an idea on how to properly copy/install the MOC_HEADERS without the redundant mentioning in both header lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674
https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674:782,Deployability,install,install,782,"I have identified the actual issue in ```$sofa_dir/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - line 124 has a few mentions of ```/${PROJECT_NAME}``` too much, removing these at least reduces the header install path to ```$sofa_dir/build/install/include/extlibs/QGLViewer/QGLViewer/*.h```; - for some reason the ```MOC_HEADER_FILES``` (line 21 ff.) are not considered for copying by your ```sofa_create_package_with_targets``` macro. For testing I have simply copied the headers listed in ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES```. This does not affect the build and finally copies the previously missing MOC headers to the install include directory. I can make a pull request for this. Or I can wait a bit if someone has an idea on how to properly copy/install the MOC_HEADERS without the redundant mentioning in both header lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674
https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674:196,Energy Efficiency,reduce,reduces,196,"I have identified the actual issue in ```$sofa_dir/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - line 124 has a few mentions of ```/${PROJECT_NAME}``` too much, removing these at least reduces the header install path to ```$sofa_dir/build/install/include/extlibs/QGLViewer/QGLViewer/*.h```; - for some reason the ```MOC_HEADER_FILES``` (line 21 ff.) are not considered for copying by your ```sofa_create_package_with_targets``` macro. For testing I have simply copied the headers listed in ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES```. This does not affect the build and finally copies the previously missing MOC headers to the install include directory. I can make a pull request for this. Or I can wait a bit if someone has an idea on how to properly copy/install the MOC_HEADERS without the redundant mentioning in both header lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674
https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674:818,Safety,redund,redundant,818,"I have identified the actual issue in ```$sofa_dir/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - line 124 has a few mentions of ```/${PROJECT_NAME}``` too much, removing these at least reduces the header install path to ```$sofa_dir/build/install/include/extlibs/QGLViewer/QGLViewer/*.h```; - for some reason the ```MOC_HEADER_FILES``` (line 21 ff.) are not considered for copying by your ```sofa_create_package_with_targets``` macro. For testing I have simply copied the headers listed in ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES```. This does not affect the build and finally copies the previously missing MOC headers to the install include directory. I can make a pull request for this. Or I can wait a bit if someone has an idea on how to properly copy/install the MOC_HEADERS without the redundant mentioning in both header lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674
https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674:450,Testability,test,testing,450,"I have identified the actual issue in ```$sofa_dir/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - line 124 has a few mentions of ```/${PROJECT_NAME}``` too much, removing these at least reduces the header install path to ```$sofa_dir/build/install/include/extlibs/QGLViewer/QGLViewer/*.h```; - for some reason the ```MOC_HEADER_FILES``` (line 21 ff.) are not considered for copying by your ```sofa_create_package_with_targets``` macro. For testing I have simply copied the headers listed in ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES```. This does not affect the build and finally copies the previously missing MOC headers to the install include directory. I can make a pull request for this. Or I can wait a bit if someone has an idea on how to properly copy/install the MOC_HEADERS without the redundant mentioning in both header lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674
https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674:465,Usability,simpl,simply,465,"I have identified the actual issue in ```$sofa_dir/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - line 124 has a few mentions of ```/${PROJECT_NAME}``` too much, removing these at least reduces the header install path to ```$sofa_dir/build/install/include/extlibs/QGLViewer/QGLViewer/*.h```; - for some reason the ```MOC_HEADER_FILES``` (line 21 ff.) are not considered for copying by your ```sofa_create_package_with_targets``` macro. For testing I have simply copied the headers listed in ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES```. This does not affect the build and finally copies the previously missing MOC headers to the install include directory. I can make a pull request for this. Or I can wait a bit if someone has an idea on how to properly copy/install the MOC_HEADERS without the redundant mentioning in both header lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674
https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:61,Deployability,release,release,61,"Glad to see someone asking question on that topic. Since the release of sofapython3, I'm waiting someone having interest on that topic so we can modernize the prefab's using the added feature of sp3 and experience gained since sofapython2. . Short answers to your questions: ; - should they be located in the SofaPython3 plugin?; It is unclear to me about what you are talking about, prefab are already in SofaPython3. Are you in fact talking about the prefab that are in stlib ? ; If this is the case, it make sense to have prefab in SofaPython3 to demonstrate a ""standard"" way of doing a prefab through ""examples"", there could also have a standard prefab library, but I see no problem in having that in stlib or any other third party plugin. That's said, I don't consider the prefab in stlib mature enough for such move, first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279
https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:1652,Integrability,interoperab,interoperable,1652,"es"", there could also have a standard prefab library, but I see no problem in having that in stlib or any other third party plugin. That's said, I don't consider the prefab in stlib mature enough for such move, first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the prefab documentation => so updating the prefab documentation now we managed to fix the sofapython3 one) . - there is also non trivial issues related to design practices, especially on re-usability through inheritance, composition or prototypes. . - there is an issue smoothing transition from a scene to a prefab (visible in the two way by which you can define a prefab, with the python decorator or by in-heriting from Sofa.Prefab). - there is also issues related to the fact that Sofa is relying on the scenegraph to do the ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279
https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:1868,Integrability,interface,interface,1868,"first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the prefab documentation => so updating the prefab documentation now we managed to fix the sofapython3 one) . - there is also non trivial issues related to design practices, especially on re-usability through inheritance, composition or prototypes. . - there is an issue smoothing transition from a scene to a prefab (visible in the two way by which you can define a prefab, with the python decorator or by in-heriting from Sofa.Prefab). - there is also issues related to the fact that Sofa is relying on the scenegraph to do the simulation, this has the consequence that currently some useful scene-patterns are not easy to make through prefab. I think the work from @alxbilger on refactoring the animation loop and solving relax these cons",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279
https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:321,Modifiability,plugin,plugin,321,"Glad to see someone asking question on that topic. Since the release of sofapython3, I'm waiting someone having interest on that topic so we can modernize the prefab's using the added feature of sp3 and experience gained since sofapython2. . Short answers to your questions: ; - should they be located in the SofaPython3 plugin?; It is unclear to me about what you are talking about, prefab are already in SofaPython3. Are you in fact talking about the prefab that are in stlib ? ; If this is the case, it make sense to have prefab in SofaPython3 to demonstrate a ""standard"" way of doing a prefab through ""examples"", there could also have a standard prefab library, but I see no problem in having that in stlib or any other third party plugin. That's said, I don't consider the prefab in stlib mature enough for such move, first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279
https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:736,Modifiability,plugin,plugin,736,"Glad to see someone asking question on that topic. Since the release of sofapython3, I'm waiting someone having interest on that topic so we can modernize the prefab's using the added feature of sp3 and experience gained since sofapython2. . Short answers to your questions: ; - should they be located in the SofaPython3 plugin?; It is unclear to me about what you are talking about, prefab are already in SofaPython3. Are you in fact talking about the prefab that are in stlib ? ; If this is the case, it make sense to have prefab in SofaPython3 to demonstrate a ""standard"" way of doing a prefab through ""examples"", there could also have a standard prefab library, but I see no problem in having that in stlib or any other third party plugin. That's said, I don't consider the prefab in stlib mature enough for such move, first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279
https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:2291,Modifiability,inherit,inheritance,2291,"s always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the prefab documentation => so updating the prefab documentation now we managed to fix the sofapython3 one) . - there is also non trivial issues related to design practices, especially on re-usability through inheritance, composition or prototypes. . - there is an issue smoothing transition from a scene to a prefab (visible in the two way by which you can define a prefab, with the python decorator or by in-heriting from Sofa.Prefab). - there is also issues related to the fact that Sofa is relying on the scenegraph to do the simulation, this has the consequence that currently some useful scene-patterns are not easy to make through prefab. I think the work from @alxbilger on refactoring the animation loop and solving relax these constraints... I'm not sure it is at the point there is no more contraint so we can freely move on that. . Probably there is many more on that... but I can for sure make a clear summary of all that are missing before having prefab first class citizen in SofaPython3 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279
https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:2764,Modifiability,refactor,refactoring,2764,"s always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the prefab documentation => so updating the prefab documentation now we managed to fix the sofapython3 one) . - there is also non trivial issues related to design practices, especially on re-usability through inheritance, composition or prototypes. . - there is an issue smoothing transition from a scene to a prefab (visible in the two way by which you can define a prefab, with the python decorator or by in-heriting from Sofa.Prefab). - there is also issues related to the fact that Sofa is relying on the scenegraph to do the simulation, this has the consequence that currently some useful scene-patterns are not easy to make through prefab. I think the work from @alxbilger on refactoring the animation loop and solving relax these constraints... I'm not sure it is at the point there is no more contraint so we can freely move on that. . Probably there is many more on that... but I can for sure make a clear summary of all that are missing before having prefab first class citizen in SofaPython3 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279
https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:1132,Usability,usab,usability,1132,"I'm waiting someone having interest on that topic so we can modernize the prefab's using the added feature of sp3 and experience gained since sofapython2. . Short answers to your questions: ; - should they be located in the SofaPython3 plugin?; It is unclear to me about what you are talking about, prefab are already in SofaPython3. Are you in fact talking about the prefab that are in stlib ? ; If this is the case, it make sense to have prefab in SofaPython3 to demonstrate a ""standard"" way of doing a prefab through ""examples"", there could also have a standard prefab library, but I see no problem in having that in stlib or any other third party plugin. That's said, I don't consider the prefab in stlib mature enough for such move, first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279
https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:2273,Usability,usab,usability,2273,"s always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the prefab documentation => so updating the prefab documentation now we managed to fix the sofapython3 one) . - there is also non trivial issues related to design practices, especially on re-usability through inheritance, composition or prototypes. . - there is an issue smoothing transition from a scene to a prefab (visible in the two way by which you can define a prefab, with the python decorator or by in-heriting from Sofa.Prefab). - there is also issues related to the fact that Sofa is relying on the scenegraph to do the simulation, this has the consequence that currently some useful scene-patterns are not easy to make through prefab. I think the work from @alxbilger on refactoring the animation loop and solving relax these constraints... I'm not sure it is at the point there is no more contraint so we can freely move on that. . Probably there is many more on that... but I can for sure make a clear summary of all that are missing before having prefab first class citizen in SofaPython3 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279
https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:2991,Usability,clear,clear,2991,"s always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the prefab documentation => so updating the prefab documentation now we managed to fix the sofapython3 one) . - there is also non trivial issues related to design practices, especially on re-usability through inheritance, composition or prototypes. . - there is an issue smoothing transition from a scene to a prefab (visible in the two way by which you can define a prefab, with the python decorator or by in-heriting from Sofa.Prefab). - there is also issues related to the fact that Sofa is relying on the scenegraph to do the simulation, this has the consequence that currently some useful scene-patterns are not easy to make through prefab. I think the work from @alxbilger on refactoring the animation loop and solving relax these constraints... I'm not sure it is at the point there is no more contraint so we can freely move on that. . Probably there is many more on that... but I can for sure make a clear summary of all that are missing before having prefab first class citizen in SofaPython3 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279
https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1750395312:57,Usability,guid,guide,57,"Hi @Gabriele111 ,; There is also a slightly more verbose guide on https://scheiklp.github.io/sofa_env/setting_up_sofa.html",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1750395312
https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217:320,Deployability,install,install,320,"Basically, when i compile sofa using cmake it says that it is adding sofapython3 and it seems not to have any problems. But when i run runSofa.exe sofapython3 is not in the plugin list and i cannot open python scenes in sofa. I can't load it manually fromn the plugin manager either. I tried also to follow the guide to install python3 on github but the problem still remains.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217
https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217:173,Modifiability,plugin,plugin,173,"Basically, when i compile sofa using cmake it says that it is adding sofapython3 and it seems not to have any problems. But when i run runSofa.exe sofapython3 is not in the plugin list and i cannot open python scenes in sofa. I can't load it manually fromn the plugin manager either. I tried also to follow the guide to install python3 on github but the problem still remains.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217
https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217:261,Modifiability,plugin,plugin,261,"Basically, when i compile sofa using cmake it says that it is adding sofapython3 and it seems not to have any problems. But when i run runSofa.exe sofapython3 is not in the plugin list and i cannot open python scenes in sofa. I can't load it manually fromn the plugin manager either. I tried also to follow the guide to install python3 on github but the problem still remains.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217
https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217:234,Performance,load,load,234,"Basically, when i compile sofa using cmake it says that it is adding sofapython3 and it seems not to have any problems. But when i run runSofa.exe sofapython3 is not in the plugin list and i cannot open python scenes in sofa. I can't load it manually fromn the plugin manager either. I tried also to follow the guide to install python3 on github but the problem still remains.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217
https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217:311,Usability,guid,guide,311,"Basically, when i compile sofa using cmake it says that it is adding sofapython3 and it seems not to have any problems. But when i run runSofa.exe sofapython3 is not in the plugin list and i cannot open python scenes in sofa. I can't load it manually fromn the plugin manager either. I tried also to follow the guide to install python3 on github but the problem still remains.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217
https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1754590641:47,Usability,usab,usability,47,Hi ! This is of interest. But it would gain in usability if it was also generalized for triangles. Adding barycentric coords of size 2 limits its use to edges and thus cannot be hard coded in the general class. Have you done something similar for your cutting simulations @epernod ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1754590641
https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797:126,Integrability,depend,dependency,126,Yes exactly. Normally runing a simple cmake with the desired flags to activate or deactivate some plugins will be enough. All dependency are met for most of the plugins.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797
https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797:98,Modifiability,plugin,plugins,98,Yes exactly. Normally runing a simple cmake with the desired flags to activate or deactivate some plugins will be enough. All dependency are met for most of the plugins.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797
https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797:161,Modifiability,plugin,plugins,161,Yes exactly. Normally runing a simple cmake with the desired flags to activate or deactivate some plugins will be enough. All dependency are met for most of the plugins.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797
https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797:31,Usability,simpl,simple,31,Yes exactly. Normally runing a simple cmake with the desired flags to activate or deactivate some plugins will be enough. All dependency are met for most of the plugins.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797
https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1771157912:544,Usability,clear,clear,544,"> Ok for me, but could you explain in which case you have this problem? Setting the component to invalid is a good idea. Breaking the loop might create some bigger issue in components using the topology as it won't be set. We have this problem when using subtopologies defined using BoxROIs. The subTopo has fewer points than the original topology (Since it is a subset of it) but the triangles in that subtopo refer to nodes indexed with the numbering in the original topology that are out of bounds within the subtopo world. Not sure that is clear!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1771157912
https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1772243763:819,Security,access,access,819,"> > Ok for me, but could you explain in which case you have this problem? Setting the component to invalid is a good idea. Breaking the loop might create some bigger issue in components using the topology as it won't be set.; > ; > We have this problem when using subtopologies defined using BoxROIs. The subTopo has fewer points than the original topology (Since it is a subset of it) but the triangles in that subtopo refer to nodes indexed with the numbering in the original topology that are out of bounds within the subtopo world. Not sure that is clear!. There is something un-catholic there... So if I understand well, you have triangle in your topology that refer to point out of bound to your current node mechanicalObject?; I don't understand how it can work. It will crash as soon as a component will try to access a dof passing through the topology no?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1772243763
https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1772243763:553,Usability,clear,clear,553,"> > Ok for me, but could you explain in which case you have this problem? Setting the component to invalid is a good idea. Breaking the loop might create some bigger issue in components using the topology as it won't be set.; > ; > We have this problem when using subtopologies defined using BoxROIs. The subTopo has fewer points than the original topology (Since it is a subset of it) but the triangles in that subtopo refer to nodes indexed with the numbering in the original topology that are out of bounds within the subtopo world. Not sure that is clear!. There is something un-catholic there... So if I understand well, you have triangle in your topology that refer to point out of bound to your current node mechanicalObject?; I don't understand how it can work. It will crash as soon as a component will try to access a dof passing through the topology no?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1772243763
https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1820989683:836,Security,access,access,836,"> > > Ok for me, but could you explain in which case you have this problem? Setting the component to invalid is a good idea. Breaking the loop might create some bigger issue in components using the topology as it won't be set.; > > ; > > ; > > We have this problem when using subtopologies defined using BoxROIs. The subTopo has fewer points than the original topology (Since it is a subset of it) but the triangles in that subtopo refer to nodes indexed with the numbering in the original topology that are out of bounds within the subtopo world. Not sure that is clear!; > ; > There is something un-catholic there... So if I understand well, you have triangle in your topology that refer to point out of bound to your current node mechanicalObject? I don't understand how it can work. It will crash as soon as a component will try to access a dof passing through the topology no?. Sorry for the late reply!; So it is a case where the node where the subtopology is defined does not contain a MechanicalObject. It is only defined to add a ForceField applying onto a subpart of the node of the MechanicalObject. An example is in this scene: https://github.com/SofaDefrost/ModelOrderReduction/blob/master/tools/test/sofa_test_scene/quadruped.py",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1820989683
https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1820989683:1209,Testability,test,test,1209,"> > > Ok for me, but could you explain in which case you have this problem? Setting the component to invalid is a good idea. Breaking the loop might create some bigger issue in components using the topology as it won't be set.; > > ; > > ; > > We have this problem when using subtopologies defined using BoxROIs. The subTopo has fewer points than the original topology (Since it is a subset of it) but the triangles in that subtopo refer to nodes indexed with the numbering in the original topology that are out of bounds within the subtopo world. Not sure that is clear!; > ; > There is something un-catholic there... So if I understand well, you have triangle in your topology that refer to point out of bound to your current node mechanicalObject? I don't understand how it can work. It will crash as soon as a component will try to access a dof passing through the topology no?. Sorry for the late reply!; So it is a case where the node where the subtopology is defined does not contain a MechanicalObject. It is only defined to add a ForceField applying onto a subpart of the node of the MechanicalObject. An example is in this scene: https://github.com/SofaDefrost/ModelOrderReduction/blob/master/tools/test/sofa_test_scene/quadruped.py",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1820989683
https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1820989683:565,Usability,clear,clear,565,"> > > Ok for me, but could you explain in which case you have this problem? Setting the component to invalid is a good idea. Breaking the loop might create some bigger issue in components using the topology as it won't be set.; > > ; > > ; > > We have this problem when using subtopologies defined using BoxROIs. The subTopo has fewer points than the original topology (Since it is a subset of it) but the triangles in that subtopo refer to nodes indexed with the numbering in the original topology that are out of bounds within the subtopo world. Not sure that is clear!; > ; > There is something un-catholic there... So if I understand well, you have triangle in your topology that refer to point out of bound to your current node mechanicalObject? I don't understand how it can work. It will crash as soon as a component will try to access a dof passing through the topology no?. Sorry for the late reply!; So it is a case where the node where the subtopology is defined does not contain a MechanicalObject. It is only defined to add a ForceField applying onto a subpart of the node of the MechanicalObject. An example is in this scene: https://github.com/SofaDefrost/ModelOrderReduction/blob/master/tools/test/sofa_test_scene/quadruped.py",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1820989683
https://github.com/sofa-framework/sofa/pull/4334#issuecomment-1856589634:58,Usability,simpl,simplified,58,Having BaseContext and BaseNode a single class would have simplified so much sofa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4334#issuecomment-1856589634
https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380:175,Deployability,update,updated,175,"I consider the fetch mechanism within the Sofa subdirectories as a flawned design that is causing more troubles than it solved. And it is the n°1 cause of ""Can you help me, I updated SOFA from master it does not compile anymore "" at DEFROST (eg: https://github.com/sofa-framework/sofa/issues/4343). . This fetch mechanism is simplifing the initial ""fetch"" of the plugins but it complexify a lot every subsequent updates for each of them. . So to me, the fetches should be done outside the sofa directory structures (or not be used at all).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380
https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380:412,Deployability,update,updates,412,"I consider the fetch mechanism within the Sofa subdirectories as a flawned design that is causing more troubles than it solved. And it is the n°1 cause of ""Can you help me, I updated SOFA from master it does not compile anymore "" at DEFROST (eg: https://github.com/sofa-framework/sofa/issues/4343). . This fetch mechanism is simplifing the initial ""fetch"" of the plugins but it complexify a lot every subsequent updates for each of them. . So to me, the fetches should be done outside the sofa directory structures (or not be used at all).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380
https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380:363,Modifiability,plugin,plugins,363,"I consider the fetch mechanism within the Sofa subdirectories as a flawned design that is causing more troubles than it solved. And it is the n°1 cause of ""Can you help me, I updated SOFA from master it does not compile anymore "" at DEFROST (eg: https://github.com/sofa-framework/sofa/issues/4343). . This fetch mechanism is simplifing the initial ""fetch"" of the plugins but it complexify a lot every subsequent updates for each of them. . So to me, the fetches should be done outside the sofa directory structures (or not be used at all).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380
https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380:325,Usability,simpl,simplifing,325,"I consider the fetch mechanism within the Sofa subdirectories as a flawned design that is causing more troubles than it solved. And it is the n°1 cause of ""Can you help me, I updated SOFA from master it does not compile anymore "" at DEFROST (eg: https://github.com/sofa-framework/sofa/issues/4343). . This fetch mechanism is simplifing the initial ""fetch"" of the plugins but it complexify a lot every subsequent updates for each of them. . So to me, the fetches should be done outside the sofa directory structures (or not be used at all).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380
https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982:368,Modifiability,plugin,plugins,368,"For @sofa-framework/reviewers : this PR is now ready but it will have a **massive impact on all the code base.**. Any feedback is more than welcome. A compatibility layer is obviously implemented. We suggest to merge this PR but temporarily de-activating all the warnings (compilation-time and runtime). Another PR will start the cleaning within SOFA and its official plugins. When the main part will be done, warnings will be re-activated so that plugin authors can be informed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982
https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982:448,Modifiability,plugin,plugin,448,"For @sofa-framework/reviewers : this PR is now ready but it will have a **massive impact on all the code base.**. Any feedback is more than welcome. A compatibility layer is obviously implemented. We suggest to merge this PR but temporarily de-activating all the warnings (compilation-time and runtime). Another PR will start the cleaning within SOFA and its official plugins. When the main part will be done, warnings will be re-activated so that plugin authors can be informed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982
https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982:118,Usability,feedback,feedback,118,"For @sofa-framework/reviewers : this PR is now ready but it will have a **massive impact on all the code base.**. Any feedback is more than welcome. A compatibility layer is obviously implemented. We suggest to merge this PR but temporarily de-activating all the warnings (compilation-time and runtime). Another PR will start the cleaning within SOFA and its official plugins. When the main part will be done, warnings will be re-activated so that plugin authors can be informed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982
https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009:382,Deployability,integrat,integrating,382,"Hi @hugtalbot,. Thank you for your response. I've reviewed the CMakeLists.txt file in the SofaTearing plugin and noticed that the first two lines are:. find_package(SofaFramework REQUIRED); find_package(SofaGui REQUIRED). However, I couldn't find SofaFramework and SofaGui mentioned in the SOFA-NG transition list you provided. It's possible that I've misunderstood the process for integrating a v21.06 plugin with SOFA v23.06. Could you please clarify this for me or offer further guidance?. Thank you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009
https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009:382,Integrability,integrat,integrating,382,"Hi @hugtalbot,. Thank you for your response. I've reviewed the CMakeLists.txt file in the SofaTearing plugin and noticed that the first two lines are:. find_package(SofaFramework REQUIRED); find_package(SofaGui REQUIRED). However, I couldn't find SofaFramework and SofaGui mentioned in the SOFA-NG transition list you provided. It's possible that I've misunderstood the process for integrating a v21.06 plugin with SOFA v23.06. Could you please clarify this for me or offer further guidance?. Thank you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009
https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009:102,Modifiability,plugin,plugin,102,"Hi @hugtalbot,. Thank you for your response. I've reviewed the CMakeLists.txt file in the SofaTearing plugin and noticed that the first two lines are:. find_package(SofaFramework REQUIRED); find_package(SofaGui REQUIRED). However, I couldn't find SofaFramework and SofaGui mentioned in the SOFA-NG transition list you provided. It's possible that I've misunderstood the process for integrating a v21.06 plugin with SOFA v23.06. Could you please clarify this for me or offer further guidance?. Thank you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009
https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009:403,Modifiability,plugin,plugin,403,"Hi @hugtalbot,. Thank you for your response. I've reviewed the CMakeLists.txt file in the SofaTearing plugin and noticed that the first two lines are:. find_package(SofaFramework REQUIRED); find_package(SofaGui REQUIRED). However, I couldn't find SofaFramework and SofaGui mentioned in the SOFA-NG transition list you provided. It's possible that I've misunderstood the process for integrating a v21.06 plugin with SOFA v23.06. Could you please clarify this for me or offer further guidance?. Thank you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009
https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009:482,Usability,guid,guidance,482,"Hi @hugtalbot,. Thank you for your response. I've reviewed the CMakeLists.txt file in the SofaTearing plugin and noticed that the first two lines are:. find_package(SofaFramework REQUIRED); find_package(SofaGui REQUIRED). However, I couldn't find SofaFramework and SofaGui mentioned in the SOFA-NG transition list you provided. It's possible that I've misunderstood the process for integrating a v21.06 plugin with SOFA v23.06. Could you please clarify this for me or offer further guidance?. Thank you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009
https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922632664:156,Deployability,patch,patches,156,"@olivier-roussel thanks for the conda test and the feedbacks 👍; You should have made suggestions and/or make a PR on my branch, as I cannot credit you your patches 😵",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922632664
https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922632664:38,Testability,test,test,38,"@olivier-roussel thanks for the conda test and the feedbacks 👍; You should have made suggestions and/or make a PR on my branch, as I cannot credit you your patches 😵",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922632664
https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922632664:51,Usability,feedback,feedbacks,51,"@olivier-roussel thanks for the conda test and the feedbacks 👍; You should have made suggestions and/or make a PR on my branch, as I cannot credit you your patches 😵",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922632664
https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923345776:157,Deployability,patch,patches,157,"> @olivier-roussel thanks for the conda test and the feedbacks 👍 You should have made suggestions and/or make a PR on my branch, as I cannot credit you your patches 😵. Indeed, sorry about that",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923345776
https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923345776:40,Testability,test,test,40,"> @olivier-roussel thanks for the conda test and the feedbacks 👍 You should have made suggestions and/or make a PR on my branch, as I cannot credit you your patches 😵. Indeed, sorry about that",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923345776
https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923345776:53,Usability,feedback,feedbacks,53,"> @olivier-roussel thanks for the conda test and the feedbacks 👍 You should have made suggestions and/or make a PR on my branch, as I cannot credit you your patches 😵. Indeed, sorry about that",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923345776
https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776:135,Usability,undo,undocumented,135,"Personnally I'm wondering if using a string here instead of magical systems is not better because otherwise it means we are relying on undocumented feature in our UX (because NameDecoder are used to register object in the factory). . More fundamentally, exposing the implementation names through the UX is considered as as bad design and is very typical of application make by developpers that considere themselves as their first users... so they find themselves find super cool as a kind of ""super print debuggin"" as well as the ability to see ""their"" naming in the end user app. . When targetted users are not the developpers, it is considered much better to make a glossary of the term they use... shape the UX on top of that and use their term in the UX... while keeping implementation's names out of user's eyes .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776
https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776:163,Usability,UX,UX,163,"Personnally I'm wondering if using a string here instead of magical systems is not better because otherwise it means we are relying on undocumented feature in our UX (because NameDecoder are used to register object in the factory). . More fundamentally, exposing the implementation names through the UX is considered as as bad design and is very typical of application make by developpers that considere themselves as their first users... so they find themselves find super cool as a kind of ""super print debuggin"" as well as the ability to see ""their"" naming in the end user app. . When targetted users are not the developpers, it is considered much better to make a glossary of the term they use... shape the UX on top of that and use their term in the UX... while keeping implementation's names out of user's eyes .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776
https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776:300,Usability,UX,UX,300,"Personnally I'm wondering if using a string here instead of magical systems is not better because otherwise it means we are relying on undocumented feature in our UX (because NameDecoder are used to register object in the factory). . More fundamentally, exposing the implementation names through the UX is considered as as bad design and is very typical of application make by developpers that considere themselves as their first users... so they find themselves find super cool as a kind of ""super print debuggin"" as well as the ability to see ""their"" naming in the end user app. . When targetted users are not the developpers, it is considered much better to make a glossary of the term they use... shape the UX on top of that and use their term in the UX... while keeping implementation's names out of user's eyes .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776
https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776:711,Usability,UX,UX,711,"Personnally I'm wondering if using a string here instead of magical systems is not better because otherwise it means we are relying on undocumented feature in our UX (because NameDecoder are used to register object in the factory). . More fundamentally, exposing the implementation names through the UX is considered as as bad design and is very typical of application make by developpers that considere themselves as their first users... so they find themselves find super cool as a kind of ""super print debuggin"" as well as the ability to see ""their"" naming in the end user app. . When targetted users are not the developpers, it is considered much better to make a glossary of the term they use... shape the UX on top of that and use their term in the UX... while keeping implementation's names out of user's eyes .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776
https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776:755,Usability,UX,UX,755,"Personnally I'm wondering if using a string here instead of magical systems is not better because otherwise it means we are relying on undocumented feature in our UX (because NameDecoder are used to register object in the factory). . More fundamentally, exposing the implementation names through the UX is considered as as bad design and is very typical of application make by developpers that considere themselves as their first users... so they find themselves find super cool as a kind of ""super print debuggin"" as well as the ability to see ""their"" naming in the end user app. . When targetted users are not the developpers, it is considered much better to make a glossary of the term they use... shape the UX on top of that and use their term in the UX... while keeping implementation's names out of user's eyes .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776
https://github.com/sofa-framework/sofa/issues/4527#issuecomment-1962333637:22,Usability,feedback,feedback,22,Great! Thanks for the feedback @KantaphatLeelakunwet,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4527#issuecomment-1962333637
https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838:6896,Availability,toler,tolerance,6896,"addObject(""IdentityMapping"", input=""@.."", output=""@VisualBody""). soft_bead_node = composite_node.addChild(""soft bead""); soft_bead_node.addObject(""MeshOBJLoader"", name=""meshLoader_1"", filename=""mesh/bubille_in1.obj"", handleSeams=True); soft_bead_node.addObject(""OglModel"", name=""VisualBody1"", src=""@meshLoader_1"", normals=""0"", color=[1, 0, 0, 1]); soft_bead_node.addObject(""HexahedronCompositeFEMMapping"", input=""@.."", output=""@VisualBody1""). stiff_bead_node = composite_node.addChild(""stiff bead""); stiff_bead_node.addObject(""MeshOBJLoader"", name=""meshLoader_3"", filename=""mesh/bubille_in2.obj"", handleSeams=True); stiff_bead_node.addObject(""OglModel"", name=""VisualBody2"", src=""@meshLoader_3"", normals=""0"", color=[0, 0, 1, 1]); stiff_bead_node.addObject(""HexahedronCompositeFEMMapping"", input=""@.."", output=""@VisualBody2""). ball_node = root.addChild(""ball""); ball_node.addObject(""EulerImplicitSolver"", vdamping=0, rayleighMass=0, rayleighStiffness=0); ball_node.addObject(""CGLinearSolver"", iterations=100, tolerance=1e-5, threshold=1e-5). ball_node.addObject(""MechanicalObject"", template=""Rigid3d"", position=[0, 5, 0, 0, 0, 0, 1], showObject=True, showObjectScale=2.0); ball_node.addObject(""UniformMass"", totalMass=10000.0); ball_node.addObject(""SphereCollisionModel"", radius=0.5, group=1); ball_node.addObject(""UncoupledConstraintCorrection""); ```. As a side question: Am I even using the right components? How would you model this scene of a liver with an embedded tumor? I also tested the Heterogeneous-TetrahedronFEMForceField.scn example, but that is even more unstable. When you interact with the object through the mouse, it applies a huge force in the opposite direction. <video src=""https://github.com/sofa-framework/sofa/assets/29635054/dc863ba3-7e55-48e1-8b5d-30d078fd5b88; "" width=""200"" height=""auto"">. I also simplified the liver scene to just the SOFA liver. Same problem with the instability. ```python; import Sofa; import Sofa.Core. PLUGINS = [; ""Sofa.Component.AnimationLoop"",; ""Sof",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838
https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838:4894,Deployability,update,updateStiffnessMatrix,4894,"ase""); root.addObject(""MinProximityIntersection"", name=""Proximity"", alarmDistance=0.5, contactDistance=0.3); root.addObject(""CollisionResponse"", response=""FrictionContactConstraint""); root.addObject(""GenericConstraintSolver""). composite_node = root.addChild(""composite""); composite_node.addObject(; ""SparseGridMultipleTopology"",; n=[6, 3, 3],; fileTopology=""mesh/bubille_out.obj"",; fileTopologies=[""mesh/bubille_out.obj"", ""mesh/bubille_in1.obj"", ""mesh/bubille_in2.obj""],; nbVirtualFinerLevels=3,; finestConnectivity=False,; stiffnessCoefs=[1, 0.0001, 50],; massCoefs=[1, 1, 1],; ); composite_node.addObject(""EulerImplicitSolver"", vdamping=0, rayleighMass=0, rayleighStiffness=0); composite_node.addObject(""SparseLDLSolver""); composite_node.addObject(""MechanicalObject""); composite_node.addObject(; ""HexahedronCompositeFEMForceFieldAndMass"",; drawType=""0"",; lumpedMass=False,; nbVirtualFinerLevels=2,; youngModulus=600,; poissonRatio=0.3,; method=""polar"",; density=0.1,; updateStiffnessMatrix=False,; printLog=False,; ); composite_node.addObject(""BoxROI"", box=""-5 -2.1 -10 10 -1.9 10""); composite_node.addObject(""FixedConstraint"", indices=""@BoxROI.indices""); composite_node.addObject(""LinearSolverConstraintCorrection""). collision_node = composite_node.addChild(""collision""). collision_node.addObject(""MeshOBJLoader"", name=""loader"", filename=""mesh/bubille_out.obj""); collision_node.addObject(""MeshTopology"", src=""@loader""); collision_node.addObject(""MechanicalObject"", src=""@loader""); collision_node.addObject(""HexahedronCompositeFEMMapping""); # collision_node.addObject(""TriangleCollisionModel"", group=0); collision_node.addObject(""SphereCollisionModel"", group=0, radius=0.3). visual_node = collision_node.addChild(""visual""); visual_node.addObject(""MeshOBJLoader"", name=""meshLoader_2"", filename=""mesh/bubille_out.obj"", handleSeams=True); visual_node.addObject(""OglModel"", name=""VisualBody"", src=""@meshLoader_2"", normals=""0"", color=[0.1, 0.8, 0.3, 0.6]); visual_node.addObject(""IdentityMapping"", input=",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838
https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838:10238,Deployability,update,updateStiffnessMatrix,10238," ""showVisual"",; ""showForceFields"",; ""showBehaviorModels"",; ],; ). root.addObject(""CollisionPipeline"", depth=6, verbose=False, draw=False); root.addObject(""BruteForceBroadPhase""); root.addObject(""BVHNarrowPhase""); root.addObject(""MinProximityIntersection"", name=""Proximity"", alarmDistance=0.5, contactDistance=0.3); root.addObject(""CollisionResponse"", response=""FrictionContactConstraint""); root.addObject(""GenericConstraintSolver""). scene_node = root.addChild(""scene""). composite_node = scene_node.addChild(""composite""). mesh_files = [; ""mesh/liver.obj"",; ]. composite_node.addObject(; ""SparseGridMultipleTopology"",; n=[6, 6, 6],; fileTopology=mesh_files[0],; fileTopologies=mesh_files,; nbVirtualFinerLevels=2,; finestConnectivity=False,; stiffnessCoefs=[1] * len(mesh_files),; massCoefs=[1] * len(mesh_files),; ). composite_node.addObject(""EulerImplicitSolver"", vdamping=0, rayleighMass=0, rayleighStiffness=0); composite_node.addObject(""SparseLDLSolver""); composite_node.addObject(""MechanicalObject""); composite_node.addObject(; ""HexahedronCompositeFEMForceFieldAndMass"",; drawType=0,; lumpedMass=False,; nbVirtualFinerLevels=2,; youngModulus=600,; poissonRatio=0.3,; method=""polar"",; density=0.1,; updateStiffnessMatrix=False,; ); composite_node.addObject(""BoxROI"", box=[-1, -5, -1, 5, 5, 5]); composite_node.addObject(""FixedConstraint"", indices=""@BoxROI.indices""); composite_node.addObject(""LinearSolverConstraintCorrection""). liver_visual = composite_node.addChild(""visual""); liver_visual.addObject(""MeshOBJLoader"", filename=mesh_files[0]); liver_visual.addObject(; ""OglModel"",; src=""@MeshOBJLoader"",; material=""Transparent Diffuse 1 1 0 1 0.45 Ambient 0 1 1 1 1 Specular 1 0 0 1 1 Emissive 0 1 0 0 1 Shininess 1 100"",; ); liver_visual.addObject(""HexahedronCompositeFEMMapping""). return root; ```. <video src=""https://github.com/sofa-framework/sofa/assets/29635054/2088731c-9fe9-4d2f-a574-a71d9d615815; "" width=""200"" height=""auto"">. This is without any interaction with the scene. Cheers,; Paul",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838
https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838:8825,Modifiability,plugin,plugin,8825,"mport Sofa.Core. PLUGINS = [; ""Sofa.Component.AnimationLoop"",; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ""Sofa.Component.Collision.Response.Contact"",; ""Sofa.Component.Constraint.Lagrangian.Solver"",; ""Sofa.Component.Visual"",; ""Sofa.Component.Collision.Geometry"",; ""Sofa.Component.Constraint.Projective"",; ""Sofa.Component.LinearSolver.Iterative"",; ""Sofa.Component.Mapping.NonLinear"",; ""Sofa.Component.Mass"",; ""Sofa.Component.ODESolver.Backward"",; ""Sofa.Component.StateContainer"",; ""Sofa.GL.Component.Rendering3D"",; ""Sofa.Component.Constraint.Lagrangian.Correction"",; ""Sofa.Component.Topology.Container.Dynamic"",; ""MultiThreading"",; ""Sofa.Component.SolidMechanics.FEM.NonUniform"",; ""Sofa.Component.Topology.Container.Grid"",; ""Sofa.Component.IO.Mesh"",; ""Sofa.Component.LinearSolver.Direct"",; ""Sofa.Component.Mapping.Linear"",; ""Sofa.Component.Topology.Container.Constant"",; ]. def createScene(root: Sofa.Core.Node):. plugin_set = set(PLUGINS); for plugin in plugin_set:; root.addObject(""RequiredPlugin"", name=plugin). root.gravity = [0.0, 0.0, -9.81]; root.dt = 0.02. root.addObject(""FreeMotionAnimationLoop""); root.addObject(; ""VisualStyle"",; displayFlags=[; ""showVisual"",; ""showForceFields"",; ""showBehaviorModels"",; ],; ). root.addObject(""CollisionPipeline"", depth=6, verbose=False, draw=False); root.addObject(""BruteForceBroadPhase""); root.addObject(""BVHNarrowPhase""); root.addObject(""MinProximityIntersection"", name=""Proximity"", alarmDistance=0.5, contactDistance=0.3); root.addObject(""CollisionResponse"", response=""FrictionContactConstraint""); root.addObject(""GenericConstraintSolver""). scene_node = root.addChild(""scene""). composite_node = scene_node.addChild(""composite""). mesh_files = [; ""mesh/liver.obj"",; ]. composite_node.addObject(; ""SparseGridMultipleTopology"",; n=[6, 6, 6],; fileTopology=mesh_files[0],; fileTopologies=mesh_files,; nbVirtualFinerLevels=2,; finestConnectivity=False,; stiffnessCoefs=[1] * len(mesh_files),; massCoef",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838
https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838:8886,Modifiability,plugin,plugin,8886,"ationLoop"",; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ""Sofa.Component.Collision.Response.Contact"",; ""Sofa.Component.Constraint.Lagrangian.Solver"",; ""Sofa.Component.Visual"",; ""Sofa.Component.Collision.Geometry"",; ""Sofa.Component.Constraint.Projective"",; ""Sofa.Component.LinearSolver.Iterative"",; ""Sofa.Component.Mapping.NonLinear"",; ""Sofa.Component.Mass"",; ""Sofa.Component.ODESolver.Backward"",; ""Sofa.Component.StateContainer"",; ""Sofa.GL.Component.Rendering3D"",; ""Sofa.Component.Constraint.Lagrangian.Correction"",; ""Sofa.Component.Topology.Container.Dynamic"",; ""MultiThreading"",; ""Sofa.Component.SolidMechanics.FEM.NonUniform"",; ""Sofa.Component.Topology.Container.Grid"",; ""Sofa.Component.IO.Mesh"",; ""Sofa.Component.LinearSolver.Direct"",; ""Sofa.Component.Mapping.Linear"",; ""Sofa.Component.Topology.Container.Constant"",; ]. def createScene(root: Sofa.Core.Node):. plugin_set = set(PLUGINS); for plugin in plugin_set:; root.addObject(""RequiredPlugin"", name=plugin). root.gravity = [0.0, 0.0, -9.81]; root.dt = 0.02. root.addObject(""FreeMotionAnimationLoop""); root.addObject(; ""VisualStyle"",; displayFlags=[; ""showVisual"",; ""showForceFields"",; ""showBehaviorModels"",; ],; ). root.addObject(""CollisionPipeline"", depth=6, verbose=False, draw=False); root.addObject(""BruteForceBroadPhase""); root.addObject(""BVHNarrowPhase""); root.addObject(""MinProximityIntersection"", name=""Proximity"", alarmDistance=0.5, contactDistance=0.3); root.addObject(""CollisionResponse"", response=""FrictionContactConstraint""); root.addObject(""GenericConstraintSolver""). scene_node = root.addChild(""scene""). composite_node = scene_node.addChild(""composite""). mesh_files = [; ""mesh/liver.obj"",; ]. composite_node.addObject(; ""SparseGridMultipleTopology"",; n=[6, 6, 6],; fileTopology=mesh_files[0],; fileTopologies=mesh_files,; nbVirtualFinerLevels=2,; finestConnectivity=False,; stiffnessCoefs=[1] * len(mesh_files),; massCoefs=[1] * len(mesh_files),; ). composite_node.addObje",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838
https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838:5247,Performance,load,loader,5247,"gy"",; n=[6, 3, 3],; fileTopology=""mesh/bubille_out.obj"",; fileTopologies=[""mesh/bubille_out.obj"", ""mesh/bubille_in1.obj"", ""mesh/bubille_in2.obj""],; nbVirtualFinerLevels=3,; finestConnectivity=False,; stiffnessCoefs=[1, 0.0001, 50],; massCoefs=[1, 1, 1],; ); composite_node.addObject(""EulerImplicitSolver"", vdamping=0, rayleighMass=0, rayleighStiffness=0); composite_node.addObject(""SparseLDLSolver""); composite_node.addObject(""MechanicalObject""); composite_node.addObject(; ""HexahedronCompositeFEMForceFieldAndMass"",; drawType=""0"",; lumpedMass=False,; nbVirtualFinerLevels=2,; youngModulus=600,; poissonRatio=0.3,; method=""polar"",; density=0.1,; updateStiffnessMatrix=False,; printLog=False,; ); composite_node.addObject(""BoxROI"", box=""-5 -2.1 -10 10 -1.9 10""); composite_node.addObject(""FixedConstraint"", indices=""@BoxROI.indices""); composite_node.addObject(""LinearSolverConstraintCorrection""). collision_node = composite_node.addChild(""collision""). collision_node.addObject(""MeshOBJLoader"", name=""loader"", filename=""mesh/bubille_out.obj""); collision_node.addObject(""MeshTopology"", src=""@loader""); collision_node.addObject(""MechanicalObject"", src=""@loader""); collision_node.addObject(""HexahedronCompositeFEMMapping""); # collision_node.addObject(""TriangleCollisionModel"", group=0); collision_node.addObject(""SphereCollisionModel"", group=0, radius=0.3). visual_node = collision_node.addChild(""visual""); visual_node.addObject(""MeshOBJLoader"", name=""meshLoader_2"", filename=""mesh/bubille_out.obj"", handleSeams=True); visual_node.addObject(""OglModel"", name=""VisualBody"", src=""@meshLoader_2"", normals=""0"", color=[0.1, 0.8, 0.3, 0.6]); visual_node.addObject(""IdentityMapping"", input=""@.."", output=""@VisualBody""). soft_bead_node = composite_node.addChild(""soft bead""); soft_bead_node.addObject(""MeshOBJLoader"", name=""meshLoader_1"", filename=""mesh/bubille_in1.obj"", handleSeams=True); soft_bead_node.addObject(""OglModel"", name=""VisualBody1"", src=""@meshLoader_1"", normals=""0"", color=[1, 0, 0, 1]); soft_bead_no",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838
https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838:5337,Performance,load,loader,5337,"le_out.obj"", ""mesh/bubille_in1.obj"", ""mesh/bubille_in2.obj""],; nbVirtualFinerLevels=3,; finestConnectivity=False,; stiffnessCoefs=[1, 0.0001, 50],; massCoefs=[1, 1, 1],; ); composite_node.addObject(""EulerImplicitSolver"", vdamping=0, rayleighMass=0, rayleighStiffness=0); composite_node.addObject(""SparseLDLSolver""); composite_node.addObject(""MechanicalObject""); composite_node.addObject(; ""HexahedronCompositeFEMForceFieldAndMass"",; drawType=""0"",; lumpedMass=False,; nbVirtualFinerLevels=2,; youngModulus=600,; poissonRatio=0.3,; method=""polar"",; density=0.1,; updateStiffnessMatrix=False,; printLog=False,; ); composite_node.addObject(""BoxROI"", box=""-5 -2.1 -10 10 -1.9 10""); composite_node.addObject(""FixedConstraint"", indices=""@BoxROI.indices""); composite_node.addObject(""LinearSolverConstraintCorrection""). collision_node = composite_node.addChild(""collision""). collision_node.addObject(""MeshOBJLoader"", name=""loader"", filename=""mesh/bubille_out.obj""); collision_node.addObject(""MeshTopology"", src=""@loader""); collision_node.addObject(""MechanicalObject"", src=""@loader""); collision_node.addObject(""HexahedronCompositeFEMMapping""); # collision_node.addObject(""TriangleCollisionModel"", group=0); collision_node.addObject(""SphereCollisionModel"", group=0, radius=0.3). visual_node = collision_node.addChild(""visual""); visual_node.addObject(""MeshOBJLoader"", name=""meshLoader_2"", filename=""mesh/bubille_out.obj"", handleSeams=True); visual_node.addObject(""OglModel"", name=""VisualBody"", src=""@meshLoader_2"", normals=""0"", color=[0.1, 0.8, 0.3, 0.6]); visual_node.addObject(""IdentityMapping"", input=""@.."", output=""@VisualBody""). soft_bead_node = composite_node.addChild(""soft bead""); soft_bead_node.addObject(""MeshOBJLoader"", name=""meshLoader_1"", filename=""mesh/bubille_in1.obj"", handleSeams=True); soft_bead_node.addObject(""OglModel"", name=""VisualBody1"", src=""@meshLoader_1"", normals=""0"", color=[1, 0, 0, 1]); soft_bead_node.addObject(""HexahedronCompositeFEMMapping"", input=""@.."", output=""@VisualBody1""). st",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838
https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838:5398,Performance,load,loader,5398,"],; nbVirtualFinerLevels=3,; finestConnectivity=False,; stiffnessCoefs=[1, 0.0001, 50],; massCoefs=[1, 1, 1],; ); composite_node.addObject(""EulerImplicitSolver"", vdamping=0, rayleighMass=0, rayleighStiffness=0); composite_node.addObject(""SparseLDLSolver""); composite_node.addObject(""MechanicalObject""); composite_node.addObject(; ""HexahedronCompositeFEMForceFieldAndMass"",; drawType=""0"",; lumpedMass=False,; nbVirtualFinerLevels=2,; youngModulus=600,; poissonRatio=0.3,; method=""polar"",; density=0.1,; updateStiffnessMatrix=False,; printLog=False,; ); composite_node.addObject(""BoxROI"", box=""-5 -2.1 -10 10 -1.9 10""); composite_node.addObject(""FixedConstraint"", indices=""@BoxROI.indices""); composite_node.addObject(""LinearSolverConstraintCorrection""). collision_node = composite_node.addChild(""collision""). collision_node.addObject(""MeshOBJLoader"", name=""loader"", filename=""mesh/bubille_out.obj""); collision_node.addObject(""MeshTopology"", src=""@loader""); collision_node.addObject(""MechanicalObject"", src=""@loader""); collision_node.addObject(""HexahedronCompositeFEMMapping""); # collision_node.addObject(""TriangleCollisionModel"", group=0); collision_node.addObject(""SphereCollisionModel"", group=0, radius=0.3). visual_node = collision_node.addChild(""visual""); visual_node.addObject(""MeshOBJLoader"", name=""meshLoader_2"", filename=""mesh/bubille_out.obj"", handleSeams=True); visual_node.addObject(""OglModel"", name=""VisualBody"", src=""@meshLoader_2"", normals=""0"", color=[0.1, 0.8, 0.3, 0.6]); visual_node.addObject(""IdentityMapping"", input=""@.."", output=""@VisualBody""). soft_bead_node = composite_node.addChild(""soft bead""); soft_bead_node.addObject(""MeshOBJLoader"", name=""meshLoader_1"", filename=""mesh/bubille_in1.obj"", handleSeams=True); soft_bead_node.addObject(""OglModel"", name=""VisualBody1"", src=""@meshLoader_1"", normals=""0"", color=[1, 0, 0, 1]); soft_bead_node.addObject(""HexahedronCompositeFEMMapping"", input=""@.."", output=""@VisualBody1""). stiff_bead_node = composite_node.addChild(""stiff bead""); stif",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838
https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838:7371,Testability,test,tested,7371,". stiff_bead_node = composite_node.addChild(""stiff bead""); stiff_bead_node.addObject(""MeshOBJLoader"", name=""meshLoader_3"", filename=""mesh/bubille_in2.obj"", handleSeams=True); stiff_bead_node.addObject(""OglModel"", name=""VisualBody2"", src=""@meshLoader_3"", normals=""0"", color=[0, 0, 1, 1]); stiff_bead_node.addObject(""HexahedronCompositeFEMMapping"", input=""@.."", output=""@VisualBody2""). ball_node = root.addChild(""ball""); ball_node.addObject(""EulerImplicitSolver"", vdamping=0, rayleighMass=0, rayleighStiffness=0); ball_node.addObject(""CGLinearSolver"", iterations=100, tolerance=1e-5, threshold=1e-5). ball_node.addObject(""MechanicalObject"", template=""Rigid3d"", position=[0, 5, 0, 0, 0, 0, 1], showObject=True, showObjectScale=2.0); ball_node.addObject(""UniformMass"", totalMass=10000.0); ball_node.addObject(""SphereCollisionModel"", radius=0.5, group=1); ball_node.addObject(""UncoupledConstraintCorrection""); ```. As a side question: Am I even using the right components? How would you model this scene of a liver with an embedded tumor? I also tested the Heterogeneous-TetrahedronFEMForceField.scn example, but that is even more unstable. When you interact with the object through the mouse, it applies a huge force in the opposite direction. <video src=""https://github.com/sofa-framework/sofa/assets/29635054/dc863ba3-7e55-48e1-8b5d-30d078fd5b88; "" width=""200"" height=""auto"">. I also simplified the liver scene to just the SOFA liver. Same problem with the instability. ```python; import Sofa; import Sofa.Core. PLUGINS = [; ""Sofa.Component.AnimationLoop"",; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ""Sofa.Component.Collision.Response.Contact"",; ""Sofa.Component.Constraint.Lagrangian.Solver"",; ""Sofa.Component.Visual"",; ""Sofa.Component.Collision.Geometry"",; ""Sofa.Component.Constraint.Projective"",; ""Sofa.Component.LinearSolver.Iterative"",; ""Sofa.Component.Mapping.NonLinear"",; ""Sofa.Component.Mass"",; ""Sofa.Component.ODESolver.Backward"",; ""So",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838
https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838:7712,Usability,simpl,simplified,7712,"dChild(""ball""); ball_node.addObject(""EulerImplicitSolver"", vdamping=0, rayleighMass=0, rayleighStiffness=0); ball_node.addObject(""CGLinearSolver"", iterations=100, tolerance=1e-5, threshold=1e-5). ball_node.addObject(""MechanicalObject"", template=""Rigid3d"", position=[0, 5, 0, 0, 0, 0, 1], showObject=True, showObjectScale=2.0); ball_node.addObject(""UniformMass"", totalMass=10000.0); ball_node.addObject(""SphereCollisionModel"", radius=0.5, group=1); ball_node.addObject(""UncoupledConstraintCorrection""); ```. As a side question: Am I even using the right components? How would you model this scene of a liver with an embedded tumor? I also tested the Heterogeneous-TetrahedronFEMForceField.scn example, but that is even more unstable. When you interact with the object through the mouse, it applies a huge force in the opposite direction. <video src=""https://github.com/sofa-framework/sofa/assets/29635054/dc863ba3-7e55-48e1-8b5d-30d078fd5b88; "" width=""200"" height=""auto"">. I also simplified the liver scene to just the SOFA liver. Same problem with the instability. ```python; import Sofa; import Sofa.Core. PLUGINS = [; ""Sofa.Component.AnimationLoop"",; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ""Sofa.Component.Collision.Response.Contact"",; ""Sofa.Component.Constraint.Lagrangian.Solver"",; ""Sofa.Component.Visual"",; ""Sofa.Component.Collision.Geometry"",; ""Sofa.Component.Constraint.Projective"",; ""Sofa.Component.LinearSolver.Iterative"",; ""Sofa.Component.Mapping.NonLinear"",; ""Sofa.Component.Mass"",; ""Sofa.Component.ODESolver.Backward"",; ""Sofa.Component.StateContainer"",; ""Sofa.GL.Component.Rendering3D"",; ""Sofa.Component.Constraint.Lagrangian.Correction"",; ""Sofa.Component.Topology.Container.Dynamic"",; ""MultiThreading"",; ""Sofa.Component.SolidMechanics.FEM.NonUniform"",; ""Sofa.Component.Topology.Container.Grid"",; ""Sofa.Component.IO.Mesh"",; ""Sofa.Component.LinearSolver.Direct"",; ""Sofa.Component.Mapping.Linear"",; ""Sofa.Component.Topology.Cont",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838
https://github.com/sofa-framework/sofa/pull/4625#issuecomment-2042583615:110,Safety,detect,detect,110,"Actually I was more thinking on tracking Mass::d_componentState to either be notified on changed or to simply detect when a mass is changed using a DataTracker. . Using a DataTracker situation would be more or less the following... . ```cpp; class MatrixLinearSystem; {; // .......; private:; DataTracker massChangedTracker; ; };. void MatrixLinearSystem<>::XXXX(); {; ...; /// somewhere where we add the mass to the lists of contributor; massChangedTracker->trackData(contributor->d_componentState); ... ; }. void MatrixLinearSystem<TMatrix, TVector>::contribute(const core::MechanicalParams* mparams); {; ...; /// Here we can then juste track the change; else if constexpr (c == Contribution::MASS); {; if( massChangedTracker->hasChanged(contributor->d_componentState) ) ; {; contributor->buildMassMatrix(m_mass[contributor]);; massChangedTracker->clean(contributor->d_componentState); ; }; }; ....; }; ```. PS: This is somehow connected to what @hugtalbot is doing in these PRs: https://github.com/sofa-framework/sofa/pull/3927",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4625#issuecomment-2042583615
https://github.com/sofa-framework/sofa/pull/4625#issuecomment-2042583615:103,Usability,simpl,simply,103,"Actually I was more thinking on tracking Mass::d_componentState to either be notified on changed or to simply detect when a mass is changed using a DataTracker. . Using a DataTracker situation would be more or less the following... . ```cpp; class MatrixLinearSystem; {; // .......; private:; DataTracker massChangedTracker; ; };. void MatrixLinearSystem<>::XXXX(); {; ...; /// somewhere where we add the mass to the lists of contributor; massChangedTracker->trackData(contributor->d_componentState); ... ; }. void MatrixLinearSystem<TMatrix, TVector>::contribute(const core::MechanicalParams* mparams); {; ...; /// Here we can then juste track the change; else if constexpr (c == Contribution::MASS); {; if( massChangedTracker->hasChanged(contributor->d_componentState) ) ; {; contributor->buildMassMatrix(m_mass[contributor]);; massChangedTracker->clean(contributor->d_componentState); ; }; }; ....; }; ```. PS: This is somehow connected to what @hugtalbot is doing in these PRs: https://github.com/sofa-framework/sofa/pull/3927",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4625#issuecomment-2042583615
https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084580463:182,Performance,load,loading,182,"You are clearly in a dev state, each time you push a commit it triggers a new build on the CI. I'll put the flag wip again until you tell me that you've finished your fixes to avoid loading the CI.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084580463
https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084580463:176,Safety,avoid,avoid,176,"You are clearly in a dev state, each time you push a commit it triggers a new build on the CI. I'll put the flag wip again until you tell me that you've finished your fixes to avoid loading the CI.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084580463
https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084580463:8,Usability,clear,clearly,8,"You are clearly in a dev state, each time you push a commit it triggers a new build on the CI. I'll put the flag wip again until you tell me that you've finished your fixes to avoid loading the CI.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084580463
https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084605955:184,Performance,load,loading,184,"> You are clearly in a dev state, each time you push a commit it triggers a new build on the CI. I'll put the flag wip again until you tell me that you've finished your fixes to avoid loading the CI. All changes was minor and i think I'm not in dev state now. sorry for loading on CI",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084605955
https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084605955:270,Performance,load,loading,270,"> You are clearly in a dev state, each time you push a commit it triggers a new build on the CI. I'll put the flag wip again until you tell me that you've finished your fixes to avoid loading the CI. All changes was minor and i think I'm not in dev state now. sorry for loading on CI",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084605955
https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084605955:178,Safety,avoid,avoid,178,"> You are clearly in a dev state, each time you push a commit it triggers a new build on the CI. I'll put the flag wip again until you tell me that you've finished your fixes to avoid loading the CI. All changes was minor and i think I'm not in dev state now. sorry for loading on CI",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084605955
https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084605955:10,Usability,clear,clearly,10,"> You are clearly in a dev state, each time you push a commit it triggers a new build on the CI. I'll put the flag wip again until you tell me that you've finished your fixes to avoid loading the CI. All changes was minor and i think I'm not in dev state now. sorry for loading on CI",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084605955
https://github.com/sofa-framework/sofa/pull/4695#issuecomment-2084536191:67,Usability,guid,guidelines,67,https://www.sofa-framework.org/community/doc/programming-with-sofa/guidelines/ is still not formatted appropriately. Any idea @hugtalbot @bakpaul @fredroy ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4695#issuecomment-2084536191
https://github.com/sofa-framework/sofa/pull/4775#issuecomment-2162608418:297,Usability,UX,UX,297,"> > * if it is input or output (for DataEngines); > ; > Isn't it defined by the group string? Input Data have the group ""Inputs"", and output ""Outputs"". I would say that being an input is because the Data has been added with DataEngine::addInput ... the fact it is in the group ""Inputs"" is just an UX choice.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4775#issuecomment-2162608418
https://github.com/sofa-framework/sofa/pull/4801#issuecomment-2235862086:322,Modifiability,refactor,refactoring,322,"I think this is because you need to call the bwdInit after the init and addContact calls when this parameter is used (by checking quickly the code). It is harmless when the template is Vec3D but it prepares the computation for when you want to keep the orientation -> again this is really a bad API and might require some refactoring. . If you still have the diff locally, could you try this ? I guess the usability of your feature would really gain from this if it was working. But if this doesn't make any change, I am ok with the state of the PR. . Tell me how it goes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4801#issuecomment-2235862086
https://github.com/sofa-framework/sofa/pull/4801#issuecomment-2235862086:406,Usability,usab,usability,406,"I think this is because you need to call the bwdInit after the init and addContact calls when this parameter is used (by checking quickly the code). It is harmless when the template is Vec3D but it prepares the computation for when you want to keep the orientation -> again this is really a bad API and might require some refactoring. . If you still have the diff locally, could you try this ? I guess the usability of your feature would really gain from this if it was working. But if this doesn't make any change, I am ok with the state of the PR. . Tell me how it goes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4801#issuecomment-2235862086
https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106:421,Deployability,integrat,integration,421,"So I took a look at the SleepController. It simply puts context to sleep where the mechanical object has a max velocity under a certain threshold. Then wake them up again only when a collision occurs with another object that is moving. ; Three remarks : ; - Being put to sleep disables any mechanical visitor to be applied on the node and deactivates its constraint corrections. So no more computing (no system build, no integration, only collision detection); - This works well only for scenes where external interaction only arise between two objects colliding, neither by the mean of a change of external forces (dynamic vector field for instance), or of constraint state changes not managed by the collision pipeline (for instance statically defined interaction constraints such as cable constraints). ; - The code seems overly complicated for what it performs but certainly does what it says it does. I didn't try it but it looks ok. . Sincerely, I cannot see myself advising anyone to use it in their scene given the fact that the use case doesn't apply for the majority of the scenes (especially for soft robotics). So I wouldn't mind never seeing it again...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106
https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106:712,Deployability,pipeline,pipeline,712,"So I took a look at the SleepController. It simply puts context to sleep where the mechanical object has a max velocity under a certain threshold. Then wake them up again only when a collision occurs with another object that is moving. ; Three remarks : ; - Being put to sleep disables any mechanical visitor to be applied on the node and deactivates its constraint corrections. So no more computing (no system build, no integration, only collision detection); - This works well only for scenes where external interaction only arise between two objects colliding, neither by the mean of a change of external forces (dynamic vector field for instance), or of constraint state changes not managed by the collision pipeline (for instance statically defined interaction constraints such as cable constraints). ; - The code seems overly complicated for what it performs but certainly does what it says it does. I didn't try it but it looks ok. . Sincerely, I cannot see myself advising anyone to use it in their scene given the fact that the use case doesn't apply for the majority of the scenes (especially for soft robotics). So I wouldn't mind never seeing it again...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106
https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106:421,Integrability,integrat,integration,421,"So I took a look at the SleepController. It simply puts context to sleep where the mechanical object has a max velocity under a certain threshold. Then wake them up again only when a collision occurs with another object that is moving. ; Three remarks : ; - Being put to sleep disables any mechanical visitor to be applied on the node and deactivates its constraint corrections. So no more computing (no system build, no integration, only collision detection); - This works well only for scenes where external interaction only arise between two objects colliding, neither by the mean of a change of external forces (dynamic vector field for instance), or of constraint state changes not managed by the collision pipeline (for instance statically defined interaction constraints such as cable constraints). ; - The code seems overly complicated for what it performs but certainly does what it says it does. I didn't try it but it looks ok. . Sincerely, I cannot see myself advising anyone to use it in their scene given the fact that the use case doesn't apply for the majority of the scenes (especially for soft robotics). So I wouldn't mind never seeing it again...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106
https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106:856,Performance,perform,performs,856,"So I took a look at the SleepController. It simply puts context to sleep where the mechanical object has a max velocity under a certain threshold. Then wake them up again only when a collision occurs with another object that is moving. ; Three remarks : ; - Being put to sleep disables any mechanical visitor to be applied on the node and deactivates its constraint corrections. So no more computing (no system build, no integration, only collision detection); - This works well only for scenes where external interaction only arise between two objects colliding, neither by the mean of a change of external forces (dynamic vector field for instance), or of constraint state changes not managed by the collision pipeline (for instance statically defined interaction constraints such as cable constraints). ; - The code seems overly complicated for what it performs but certainly does what it says it does. I didn't try it but it looks ok. . Sincerely, I cannot see myself advising anyone to use it in their scene given the fact that the use case doesn't apply for the majority of the scenes (especially for soft robotics). So I wouldn't mind never seeing it again...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106
https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106:449,Safety,detect,detection,449,"So I took a look at the SleepController. It simply puts context to sleep where the mechanical object has a max velocity under a certain threshold. Then wake them up again only when a collision occurs with another object that is moving. ; Three remarks : ; - Being put to sleep disables any mechanical visitor to be applied on the node and deactivates its constraint corrections. So no more computing (no system build, no integration, only collision detection); - This works well only for scenes where external interaction only arise between two objects colliding, neither by the mean of a change of external forces (dynamic vector field for instance), or of constraint state changes not managed by the collision pipeline (for instance statically defined interaction constraints such as cable constraints). ; - The code seems overly complicated for what it performs but certainly does what it says it does. I didn't try it but it looks ok. . Sincerely, I cannot see myself advising anyone to use it in their scene given the fact that the use case doesn't apply for the majority of the scenes (especially for soft robotics). So I wouldn't mind never seeing it again...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106
https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106:44,Usability,simpl,simply,44,"So I took a look at the SleepController. It simply puts context to sleep where the mechanical object has a max velocity under a certain threshold. Then wake them up again only when a collision occurs with another object that is moving. ; Three remarks : ; - Being put to sleep disables any mechanical visitor to be applied on the node and deactivates its constraint corrections. So no more computing (no system build, no integration, only collision detection); - This works well only for scenes where external interaction only arise between two objects colliding, neither by the mean of a change of external forces (dynamic vector field for instance), or of constraint state changes not managed by the collision pipeline (for instance statically defined interaction constraints such as cable constraints). ; - The code seems overly complicated for what it performs but certainly does what it says it does. I didn't try it but it looks ok. . Sincerely, I cannot see myself advising anyone to use it in their scene given the fact that the use case doesn't apply for the majority of the scenes (especially for soft robotics). So I wouldn't mind never seeing it again...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106
https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443:59,Security,sanitiz,sanitizers,59,Some feedbacks:; I compiled with https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer and I did not get any difference in leaks while executing TorusFall.scn and caduceus.scn in batch for 100 steps unfortunately.; The output is huge (20Mo of logs) so not easy shareable (can give it on demand). Final outputs for both (PR and master branches) :; caduceus: `SUMMARY: AddressSanitizer: 10282202 byte(s) leaked in 111987 allocation(s).`; torusfall: `SUMMARY: AddressSanitizer: 6271499 byte(s) leaked in 28416 allocation(s).`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443
https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443:261,Testability,log,logs,261,Some feedbacks:; I compiled with https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer and I did not get any difference in leaks while executing TorusFall.scn and caduceus.scn in batch for 100 steps unfortunately.; The output is huge (20Mo of logs) so not easy shareable (can give it on demand). Final outputs for both (PR and master branches) :; caduceus: `SUMMARY: AddressSanitizer: 10282202 byte(s) leaked in 111987 allocation(s).`; torusfall: `SUMMARY: AddressSanitizer: 6271499 byte(s) leaked in 28416 allocation(s).`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443
https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443:5,Usability,feedback,feedbacks,5,Some feedbacks:; I compiled with https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer and I did not get any difference in leaks while executing TorusFall.scn and caduceus.scn in batch for 100 steps unfortunately.; The output is huge (20Mo of logs) so not easy shareable (can give it on demand). Final outputs for both (PR and master branches) :; caduceus: `SUMMARY: AddressSanitizer: 10282202 byte(s) leaked in 111987 allocation(s).`; torusfall: `SUMMARY: AddressSanitizer: 6271499 byte(s) leaked in 28416 allocation(s).`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443
https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2264776309:54,Usability,simpl,simple,54,I also think about creating a graph link instead of a simple copy:. ```cpp; if (!worldGravity_.isSet()); {; worldGravity_.setParent(&c); ///< Gravity IN THE WORLD COORDINATE SYSTEM.; }; ```. What do you think?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2264776309
https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2265459196:135,Usability,simpl,simple,135,> I think it will break a lot of scenes. I like it baby :fire_engine: :fire: . > I also think about creating a graph link instead of a simple copy:. :thinking: why would you do that? I am unsure about side effect,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2265459196
https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2269055267:56,Usability,simpl,simple,56,> I also think about creating a graph link instead of a simple copy:. why @alxbilger,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2269055267
https://github.com/sofa-framework/sofa/pull/4906#issuecomment-2339894590:158,Usability,simpl,simpler,158,"> do you plan to create a doc page @alxbilger for us to go through the equation for review ?. yes, but I need more time. Fortunately, the equations are 1000x simpler than in AreaMapping",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4906#issuecomment-2339894590
https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:327,Integrability,interface,interface,327,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920
https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:233,Testability,test,testing,233,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920
https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:263,Testability,test,tests,263,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920
https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:303,Testability,test,tests,303,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920
https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:435,Testability,test,tests,435,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920
https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:534,Testability,test,tests,534,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920
https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:567,Testability,test,testing,567,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920
https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:741,Testability,test,testable,741,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920
https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:955,Usability,clear,clear,955,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920
https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:1616,Usability,clear,clear,1616,"ng more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is better and as the PR is breaking... this may be ok ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920
https://github.com/sofa-framework/sofa/pull/4945#issuecomment-2325930280:279,Usability,UX,UX,279,To me adding more and more hard coded drawing function by copy-pasting other's drawing function in every components is not desirable. . I see two better solutions: ; 1) the drawing code & related datafield should at least be moved in a separated c++ object to factor rendering & UX. ; 2) the drawing code & related datafields should be in a separated sofa component so they can be compose in the scene.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4945#issuecomment-2325930280
https://github.com/sofa-framework/sofa/issues/4954#issuecomment-2324076285:130,Usability,simpl,simple,130,"Another question, If there are some ways to extract the **Constraints Matrix** and ""Internal Force Vector and its Jacobian"". Some simple examples would be greatly appreciated!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4954#issuecomment-2324076285
