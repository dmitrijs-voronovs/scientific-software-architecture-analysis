id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:39,Availability,failure,failure,39,/// Make a Error instance representing failure using the given error info; /// type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:63,Availability,error,error,63,/// Make a Error instance representing failure using the given error info; /// type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:24,Availability,error,error,24,"/// Base class for user error types. Users should declare their error types; /// like:; ///; /// class MyError : public ErrorInfo<MyError> {; /// ....; /// };; ///; /// This class provides an implementation of the ErrorInfoBase::kind; /// method, which is used by the Error RTTI system.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:64,Availability,error,error,64,"/// Base class for user error types. Users should declare their error types; /// like:; ///; /// class MyError : public ErrorInfo<MyError> {; /// ....; /// };; ///; /// This class provides an implementation of the ErrorInfoBase::kind; /// method, which is used by the Error RTTI system.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:120,Availability,Error,ErrorInfo,120,"/// Base class for user error types. Users should declare their error types; /// like:; ///; /// class MyError : public ErrorInfo<MyError> {; /// ....; /// };; ///; /// This class provides an implementation of the ErrorInfoBase::kind; /// method, which is used by the Error RTTI system.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:214,Availability,Error,ErrorInfoBase,214,"/// Base class for user error types. Users should declare their error types; /// like:; ///; /// class MyError : public ErrorInfo<MyError> {; /// ....; /// };; ///; /// This class provides an implementation of the ErrorInfoBase::kind; /// method, which is used by the Error RTTI system.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:268,Availability,Error,Error,268,"/// Base class for user error types. Users should declare their error types; /// like:; ///; /// class MyError : public ErrorInfo<MyError> {; /// ....; /// };; ///; /// This class provides an implementation of the ErrorInfoBase::kind; /// method, which is used by the Error RTTI system.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:3,Modifiability,inherit,inherit,3,// inherit constructors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:12,Availability,Error,ErrorInfo,12,/// Special ErrorInfo subclass representing a list of ErrorInfos.; /// Instances of this class are constructed by joinError.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:54,Availability,Error,ErrorInfos,54,/// Special ErrorInfo subclass representing a list of ErrorInfos.; /// Instances of this class are constructed by joinError.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:71,Availability,Error,ErrorList,71,// handleErrors needs to be able to iterate the payload list of an; // ErrorList.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:11,Availability,Error,ErrorInfo,11,// Used by ErrorInfo::classID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:16,Availability,error,errors,16,"/// Concatenate errors. The resulting Error is unchecked, and contains the; /// ErrorInfo(s), if any, contained in E1, followed by the; /// ErrorInfo(s), if any, contained in E2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:38,Availability,Error,Error,38,"/// Concatenate errors. The resulting Error is unchecked, and contains the; /// ErrorInfo(s), if any, contained in E1, followed by the; /// ErrorInfo(s), if any, contained in E2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:80,Availability,Error,ErrorInfo,80,"/// Concatenate errors. The resulting Error is unchecked, and contains the; /// ErrorInfo(s), if any, contained in E1, followed by the; /// ErrorInfo(s), if any, contained in E2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:140,Availability,Error,ErrorInfo,140,"/// Concatenate errors. The resulting Error is unchecked, and contains the; /// ErrorInfo(s), if any, contained in E1, followed by the; /// ErrorInfo(s), if any, contained in E2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:41,Availability,Error,Error,41,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:79,Availability,Error,ErrorOr,79,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:117,Availability,Error,Error,117,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:135,Availability,Error,Error,135,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:234,Availability,error,errorIsA,234,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:279,Availability,error,error,279,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:468,Availability,Error,Error,468,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:790,Availability,error,error,790,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:836,Availability,error,error,836,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:941,Availability,error,error,941,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:988,Availability,error,error,988,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:1317,Availability,Error,Error,1317,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:262,Testability,test,testing,262,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:883,Testability,log,logging,883,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:1203,Testability,test,testing,1203,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:1301,Testability,Test,Testing,1301,"/// Tagged union holding either a T or a Error.; ///; /// This class parallels ErrorOr, but replaces error_code with Error. Since; /// Error cannot be copied, this class replaces getError() with; /// takeError(). It also adds an bool errorIsA<ErrT>() method for testing the; /// error class type.; ///; /// Example usage of 'Expected<T>' as a function return type:; ///; /// @code{.cpp}; /// Expected<int> myDivide(int A, int B) {; /// if (B == 0) {; /// // return an Error; /// return createStringError(inconvertibleErrorCode(),; /// ""B must not be zero!"");; /// }; /// // return an integer; /// return A / B;; /// }; /// @endcode; ///; /// Checking the results of to a function returning 'Expected<T>':; /// @code{.cpp}; /// if (auto E = Result.takeError()) {; /// // We must consume the error. Typically one of:; /// // - return the error to our caller; /// // - toString(), when logging; /// // - consumeError(), to silently swallow the error; /// // - handleErrors(), to distinguish error types; /// errs() << ""Problem with division "" << toString(std::move(E)) << ""\n"";; /// return;; /// }; /// // use the result; /// outs() << ""The answer is "" << *Result << ""\n"";; /// @endcode; ///; /// For unit-testing a function returning an 'Expected<T>', see the; /// 'EXPECT_THAT_EXPECTED' macros in llvm/Testing/Support/Error.h",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:26,Availability,error,error,26,/// Create an Expected<T> error value from the given Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:53,Availability,Error,Error,53,/// Create an Expected<T> error value from the given Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:27,Availability,Error,Error,27,"/// Forbid to convert from Error::success() implicitly, this avoids having; /// Expected<T> foo() { return Error::success(); } which compiles otherwise; /// but triggers the assertion above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:107,Availability,Error,Error,107,"/// Forbid to convert from Error::success() implicitly, this avoids having; /// Expected<T> foo() { return Error::success(); } which compiles otherwise; /// but triggers the assertion above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:61,Safety,avoid,avoids,61,"/// Forbid to convert from Error::success() implicitly, this avoids having; /// Expected<T> foo() { return Error::success(); } which compiles otherwise; /// but triggers the assertion above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:174,Testability,assert,assertion,174,"/// Forbid to convert from Error::success() implicitly, this avoids having; /// Expected<T> foo() { return Error::success(); } which compiles otherwise; /// but triggers the assertion above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:32,Availability,error,error,32,/// Return false if there is an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:38,Availability,error,error,38,/// Check that this Expected<T> is an error of type ErrT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:33,Availability,error,error,33,/// Take ownership of the stored error.; /// After calling this the Expected<T> is in an indeterminate state that can; /// only be safely destructed. No further calls (beside the destructor) should; /// be made on the Expected<T> value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:131,Safety,safe,safely,131,/// Take ownership of the stored error.; /// After calling this the Expected<T> is in an indeterminate state that can; /// only be safely destructed. No further calls (beside the destructor) should; /// be made on the Expected<T> value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:21,Availability,error,error,21,"/// Report a serious error, calling any installed error handler. See; /// ErrorHandling.h.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:50,Availability,error,error,50,"/// Report a serious error, calling any installed error handler. See; /// ErrorHandling.h.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:74,Availability,Error,ErrorHandling,74,"/// Report a serious error, calling any installed error handler. See; /// ErrorHandling.h.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:40,Deployability,install,installed,40,"/// Report a serious error, calling any installed error handler. See; /// ErrorHandling.h.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:19,Availability,error,error,19,/// Report a fatal error if Err is a failure value.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns; /// // Error::success().; /// Error foo(bool DoFallibleOperation);; ///; /// cantFail(foo(false));; /// @endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:37,Availability,failure,failure,37,/// Report a fatal error if Err is a failure value.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns; /// // Error::success().; /// Error foo(bool DoFallibleOperation);; ///; /// cantFail(foo(false));; /// @endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:160,Availability,Error,Error,160,/// Report a fatal error if Err is a failure value.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns; /// // Error::success().; /// Error foo(bool DoFallibleOperation);; ///; /// cantFail(foo(false));; /// @endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:378,Availability,Error,Error,378,/// Report a fatal error if Err is a failure value.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns; /// // Error::success().; /// Error foo(bool DoFallibleOperation);; ///; /// cantFail(foo(false));; /// @endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:401,Availability,Error,Error,401,/// Report a fatal error if Err is a failure value.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns; /// // Error::success().; /// Error foo(bool DoFallibleOperation);; ///; /// cantFail(foo(false));; /// @endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:91,Integrability,wrap,wrap,91,/// Report a fatal error if Err is a failure value.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns; /// // Error::success().; /// Error foo(bool DoFallibleOperation);; ///; /// cantFail(foo(false));; /// @endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:19,Availability,error,error,19,"/// Report a fatal error if ValOrErr is a failure value, otherwise unwraps and; /// returns the contained value.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns an int.; /// Expected<int> foo(bool DoFallibleOperation);; ///; /// int X = cantFail(foo(false));; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:42,Availability,failure,failure,42,"/// Report a fatal error if ValOrErr is a failure value, otherwise unwraps and; /// returns the contained value.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns an int.; /// Expected<int> foo(bool DoFallibleOperation);; ///; /// int X = cantFail(foo(false));; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:221,Availability,Error,Error,221,"/// Report a fatal error if ValOrErr is a failure value, otherwise unwraps and; /// returns the contained value.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns an int.; /// Expected<int> foo(bool DoFallibleOperation);; ///; /// int X = cantFail(foo(false));; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:152,Integrability,wrap,wrap,152,"/// Report a fatal error if ValOrErr is a failure value, otherwise unwraps and; /// returns the contained value.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns an int.; /// Expected<int> foo(bool DoFallibleOperation);; ///; /// int X = cantFail(foo(false));; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:19,Availability,error,error,19,"/// Report a fatal error if ValOrErr is a failure value, otherwise unwraps and; /// returns the contained reference.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns a Bar&.; /// Expected<Bar&> foo(bool DoFallibleOperation);; ///; /// Bar &X = cantFail(foo(false));; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:42,Availability,failure,failure,42,"/// Report a fatal error if ValOrErr is a failure value, otherwise unwraps and; /// returns the contained reference.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns a Bar&.; /// Expected<Bar&> foo(bool DoFallibleOperation);; ///; /// Bar &X = cantFail(foo(false));; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:225,Availability,Error,Error,225,"/// Report a fatal error if ValOrErr is a failure value, otherwise unwraps and; /// returns the contained reference.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns a Bar&.; /// Expected<Bar&> foo(bool DoFallibleOperation);; ///; /// Bar &X = cantFail(foo(false));; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:156,Integrability,wrap,wrap,156,"/// Report a fatal error if ValOrErr is a failure value, otherwise unwraps and; /// returns the contained reference.; ///; /// This function can be used to wrap calls to fallible functions ONLY when it; /// is known that the Error will always be a success value. E.g.; ///; /// @code{.cpp}; /// // foo only attempts the fallible operation if DoFallibleOperation is; /// // true. If DoFallibleOperation is false then foo always returns a Bar&.; /// Expected<Bar&> foo(bool DoFallibleOperation);; ///; /// Bar &X = cantFail(foo(false));; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:73,Availability,Error,ErrorInfo,73,"/// Helper for testing applicability of, and applying, handlers for; /// ErrorInfo types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:15,Testability,test,testing,15,"/// Helper for testing applicability of, and applying, handlers for; /// ErrorInfo types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:41,Availability,Error,Error,41,// Specialization functions of the form 'Error (const ErrT&)'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:46,Availability,Error,Error,46,/// Specialization for functions of the form 'Error (std::unique_ptr<ErrT>)'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:13,Availability,Error,ErrorInfo,13,"/// Pass the ErrorInfo(s) contained in E to their respective handlers. Any; /// unhandled errors (or Errors returned by handlers) are re-concatenated and; /// returned.; /// Because this function returns an error, its result must also be checked; /// or returned. If you intend to handle all errors use handleAllErrors; /// (which returns void, and will abort() on unhandled errors) instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:90,Availability,error,errors,90,"/// Pass the ErrorInfo(s) contained in E to their respective handlers. Any; /// unhandled errors (or Errors returned by handlers) are re-concatenated and; /// returned.; /// Because this function returns an error, its result must also be checked; /// or returned. If you intend to handle all errors use handleAllErrors; /// (which returns void, and will abort() on unhandled errors) instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:101,Availability,Error,Errors,101,"/// Pass the ErrorInfo(s) contained in E to their respective handlers. Any; /// unhandled errors (or Errors returned by handlers) are re-concatenated and; /// returned.; /// Because this function returns an error, its result must also be checked; /// or returned. If you intend to handle all errors use handleAllErrors; /// (which returns void, and will abort() on unhandled errors) instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:207,Availability,error,error,207,"/// Pass the ErrorInfo(s) contained in E to their respective handlers. Any; /// unhandled errors (or Errors returned by handlers) are re-concatenated and; /// returned.; /// Because this function returns an error, its result must also be checked; /// or returned. If you intend to handle all errors use handleAllErrors; /// (which returns void, and will abort() on unhandled errors) instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:292,Availability,error,errors,292,"/// Pass the ErrorInfo(s) contained in E to their respective handlers. Any; /// unhandled errors (or Errors returned by handlers) are re-concatenated and; /// returned.; /// Because this function returns an error, its result must also be checked; /// or returned. If you intend to handle all errors use handleAllErrors; /// (which returns void, and will abort() on unhandled errors) instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:375,Availability,error,errors,375,"/// Pass the ErrorInfo(s) contained in E to their respective handlers. Any; /// unhandled errors (or Errors returned by handlers) are re-concatenated and; /// returned.; /// Because this function returns an error, its result must also be checked; /// or returned. If you intend to handle all errors use handleAllErrors; /// (which returns void, and will abort() on unhandled errors) instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:354,Safety,abort,abort,354,"/// Pass the ErrorInfo(s) contained in E to their respective handlers. Any; /// unhandled errors (or Errors returned by handlers) are re-concatenated and; /// returned.; /// Because this function returns an error, its result must also be checked; /// or returned. If you intend to handle all errors use handleAllErrors; /// (which returns void, and will abort() on unhandled errors) instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:66,Availability,error,errors,66,"/// Behaves the same as handleErrors, except that by contract all errors; /// *must* be handled by the given handlers (i.e. there must be no remaining; /// errors after running the handlers, or llvm_unreachable is called).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:156,Availability,error,errors,156,"/// Behaves the same as handleErrors, except that by contract all errors; /// *must* be handled by the given handlers (i.e. there must be no remaining; /// errors after running the handlers, or llvm_unreachable is called).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:53,Integrability,contract,contract,53,"/// Behaves the same as handleErrors, except that by contract all errors; /// *must* be handled by the given handlers (i.e. there must be no remaining; /// errors after running the handlers, or llvm_unreachable is called).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:26,Availability,error,error,26,"/// Check that E is a non-error, then drop it.; /// If E is an error, llvm_unreachable will be called.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:63,Availability,error,error,63,"/// Check that E is a non-error, then drop it.; /// If E is an error, llvm_unreachable will be called.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:15,Availability,error,errors,15,"/// Handle any errors (if present) in an Expected<T>, then try a recovery path.; ///; /// If the incoming value is a success value it is returned unmodified. If it; /// is a failure value then it the contained error is passed to handleErrors.; /// If handleErrors is able to handle the error then the RecoveryPath functor; /// is called to supply the final result. If handleErrors is not able to; /// handle all errors then the unhandled errors are returned.; ///; /// This utility enables the follow pattern:; ///; /// @code{.cpp}; /// enum FooStrategy { Aggressive, Conservative };; /// Expected<Foo> foo(FooStrategy S);; ///; /// auto ResultOrErr =; /// handleExpected(; /// foo(Aggressive),; /// []() { return foo(Conservative); },; /// [](AggressiveStrategyError&) {; /// // Implicitly conusme this - we'll recover by using a conservative; /// // strategy.; /// });; ///; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:65,Availability,recover,recovery,65,"/// Handle any errors (if present) in an Expected<T>, then try a recovery path.; ///; /// If the incoming value is a success value it is returned unmodified. If it; /// is a failure value then it the contained error is passed to handleErrors.; /// If handleErrors is able to handle the error then the RecoveryPath functor; /// is called to supply the final result. If handleErrors is not able to; /// handle all errors then the unhandled errors are returned.; ///; /// This utility enables the follow pattern:; ///; /// @code{.cpp}; /// enum FooStrategy { Aggressive, Conservative };; /// Expected<Foo> foo(FooStrategy S);; ///; /// auto ResultOrErr =; /// handleExpected(; /// foo(Aggressive),; /// []() { return foo(Conservative); },; /// [](AggressiveStrategyError&) {; /// // Implicitly conusme this - we'll recover by using a conservative; /// // strategy.; /// });; ///; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:174,Availability,failure,failure,174,"/// Handle any errors (if present) in an Expected<T>, then try a recovery path.; ///; /// If the incoming value is a success value it is returned unmodified. If it; /// is a failure value then it the contained error is passed to handleErrors.; /// If handleErrors is able to handle the error then the RecoveryPath functor; /// is called to supply the final result. If handleErrors is not able to; /// handle all errors then the unhandled errors are returned.; ///; /// This utility enables the follow pattern:; ///; /// @code{.cpp}; /// enum FooStrategy { Aggressive, Conservative };; /// Expected<Foo> foo(FooStrategy S);; ///; /// auto ResultOrErr =; /// handleExpected(; /// foo(Aggressive),; /// []() { return foo(Conservative); },; /// [](AggressiveStrategyError&) {; /// // Implicitly conusme this - we'll recover by using a conservative; /// // strategy.; /// });; ///; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:210,Availability,error,error,210,"/// Handle any errors (if present) in an Expected<T>, then try a recovery path.; ///; /// If the incoming value is a success value it is returned unmodified. If it; /// is a failure value then it the contained error is passed to handleErrors.; /// If handleErrors is able to handle the error then the RecoveryPath functor; /// is called to supply the final result. If handleErrors is not able to; /// handle all errors then the unhandled errors are returned.; ///; /// This utility enables the follow pattern:; ///; /// @code{.cpp}; /// enum FooStrategy { Aggressive, Conservative };; /// Expected<Foo> foo(FooStrategy S);; ///; /// auto ResultOrErr =; /// handleExpected(; /// foo(Aggressive),; /// []() { return foo(Conservative); },; /// [](AggressiveStrategyError&) {; /// // Implicitly conusme this - we'll recover by using a conservative; /// // strategy.; /// });; ///; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:286,Availability,error,error,286,"/// Handle any errors (if present) in an Expected<T>, then try a recovery path.; ///; /// If the incoming value is a success value it is returned unmodified. If it; /// is a failure value then it the contained error is passed to handleErrors.; /// If handleErrors is able to handle the error then the RecoveryPath functor; /// is called to supply the final result. If handleErrors is not able to; /// handle all errors then the unhandled errors are returned.; ///; /// This utility enables the follow pattern:; ///; /// @code{.cpp}; /// enum FooStrategy { Aggressive, Conservative };; /// Expected<Foo> foo(FooStrategy S);; ///; /// auto ResultOrErr =; /// handleExpected(; /// foo(Aggressive),; /// []() { return foo(Conservative); },; /// [](AggressiveStrategyError&) {; /// // Implicitly conusme this - we'll recover by using a conservative; /// // strategy.; /// });; ///; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:301,Availability,Recover,RecoveryPath,301,"/// Handle any errors (if present) in an Expected<T>, then try a recovery path.; ///; /// If the incoming value is a success value it is returned unmodified. If it; /// is a failure value then it the contained error is passed to handleErrors.; /// If handleErrors is able to handle the error then the RecoveryPath functor; /// is called to supply the final result. If handleErrors is not able to; /// handle all errors then the unhandled errors are returned.; ///; /// This utility enables the follow pattern:; ///; /// @code{.cpp}; /// enum FooStrategy { Aggressive, Conservative };; /// Expected<Foo> foo(FooStrategy S);; ///; /// auto ResultOrErr =; /// handleExpected(; /// foo(Aggressive),; /// []() { return foo(Conservative); },; /// [](AggressiveStrategyError&) {; /// // Implicitly conusme this - we'll recover by using a conservative; /// // strategy.; /// });; ///; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:412,Availability,error,errors,412,"/// Handle any errors (if present) in an Expected<T>, then try a recovery path.; ///; /// If the incoming value is a success value it is returned unmodified. If it; /// is a failure value then it the contained error is passed to handleErrors.; /// If handleErrors is able to handle the error then the RecoveryPath functor; /// is called to supply the final result. If handleErrors is not able to; /// handle all errors then the unhandled errors are returned.; ///; /// This utility enables the follow pattern:; ///; /// @code{.cpp}; /// enum FooStrategy { Aggressive, Conservative };; /// Expected<Foo> foo(FooStrategy S);; ///; /// auto ResultOrErr =; /// handleExpected(; /// foo(Aggressive),; /// []() { return foo(Conservative); },; /// [](AggressiveStrategyError&) {; /// // Implicitly conusme this - we'll recover by using a conservative; /// // strategy.; /// });; ///; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:438,Availability,error,errors,438,"/// Handle any errors (if present) in an Expected<T>, then try a recovery path.; ///; /// If the incoming value is a success value it is returned unmodified. If it; /// is a failure value then it the contained error is passed to handleErrors.; /// If handleErrors is able to handle the error then the RecoveryPath functor; /// is called to supply the final result. If handleErrors is not able to; /// handle all errors then the unhandled errors are returned.; ///; /// This utility enables the follow pattern:; ///; /// @code{.cpp}; /// enum FooStrategy { Aggressive, Conservative };; /// Expected<Foo> foo(FooStrategy S);; ///; /// auto ResultOrErr =; /// handleExpected(; /// foo(Aggressive),; /// []() { return foo(Conservative); },; /// [](AggressiveStrategyError&) {; /// // Implicitly conusme this - we'll recover by using a conservative; /// // strategy.; /// });; ///; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:812,Availability,recover,recover,812,"/// Handle any errors (if present) in an Expected<T>, then try a recovery path.; ///; /// If the incoming value is a success value it is returned unmodified. If it; /// is a failure value then it the contained error is passed to handleErrors.; /// If handleErrors is able to handle the error then the RecoveryPath functor; /// is called to supply the final result. If handleErrors is not able to; /// handle all errors then the unhandled errors are returned.; ///; /// This utility enables the follow pattern:; ///; /// @code{.cpp}; /// enum FooStrategy { Aggressive, Conservative };; /// Expected<Foo> foo(FooStrategy S);; ///; /// auto ResultOrErr =; /// handleExpected(; /// foo(Aggressive),; /// []() { return foo(Conservative); },; /// [](AggressiveStrategyError&) {; /// // Implicitly conusme this - we'll recover by using a conservative; /// // strategy.; /// });; ///; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:65,Safety,recover,recovery,65,"/// Handle any errors (if present) in an Expected<T>, then try a recovery path.; ///; /// If the incoming value is a success value it is returned unmodified. If it; /// is a failure value then it the contained error is passed to handleErrors.; /// If handleErrors is able to handle the error then the RecoveryPath functor; /// is called to supply the final result. If handleErrors is not able to; /// handle all errors then the unhandled errors are returned.; ///; /// This utility enables the follow pattern:; ///; /// @code{.cpp}; /// enum FooStrategy { Aggressive, Conservative };; /// Expected<Foo> foo(FooStrategy S);; ///; /// auto ResultOrErr =; /// handleExpected(; /// foo(Aggressive),; /// []() { return foo(Conservative); },; /// [](AggressiveStrategyError&) {; /// // Implicitly conusme this - we'll recover by using a conservative; /// // strategy.; /// });; ///; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:301,Safety,Recover,RecoveryPath,301,"/// Handle any errors (if present) in an Expected<T>, then try a recovery path.; ///; /// If the incoming value is a success value it is returned unmodified. If it; /// is a failure value then it the contained error is passed to handleErrors.; /// If handleErrors is able to handle the error then the RecoveryPath functor; /// is called to supply the final result. If handleErrors is not able to; /// handle all errors then the unhandled errors are returned.; ///; /// This utility enables the follow pattern:; ///; /// @code{.cpp}; /// enum FooStrategy { Aggressive, Conservative };; /// Expected<Foo> foo(FooStrategy S);; ///; /// auto ResultOrErr =; /// handleExpected(; /// foo(Aggressive),; /// []() { return foo(Conservative); },; /// [](AggressiveStrategyError&) {; /// // Implicitly conusme this - we'll recover by using a conservative; /// // strategy.; /// });; ///; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:812,Safety,recover,recover,812,"/// Handle any errors (if present) in an Expected<T>, then try a recovery path.; ///; /// If the incoming value is a success value it is returned unmodified. If it; /// is a failure value then it the contained error is passed to handleErrors.; /// If handleErrors is able to handle the error then the RecoveryPath functor; /// is called to supply the final result. If handleErrors is not able to; /// handle all errors then the unhandled errors are returned.; ///; /// This utility enables the follow pattern:; ///; /// @code{.cpp}; /// enum FooStrategy { Aggressive, Conservative };; /// Expected<Foo> foo(FooStrategy S);; ///; /// auto ResultOrErr =; /// handleExpected(; /// foo(Aggressive),; /// []() { return foo(Conservative); },; /// [](AggressiveStrategyError&) {; /// // Implicitly conusme this - we'll recover by using a conservative; /// // strategy.; /// });; ///; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:12,Availability,error,errors,12,"/// Log all errors (if any) in E to OS. If there are any errors, ErrorBanner; /// will be printed before the first one is logged. A newline will be printed; /// after each error.; ///; /// This function is compatible with the helpers from Support/WithColor.h. You; /// can pass any of them as the OS. Please consider using them instead of; /// including 'error: ' in the ErrorBanner.; ///; /// This is useful in the base level of your program to allow clean termination; /// (allowing clean deallocation of resources, etc.), while reporting error; /// information to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:57,Availability,error,errors,57,"/// Log all errors (if any) in E to OS. If there are any errors, ErrorBanner; /// will be printed before the first one is logged. A newline will be printed; /// after each error.; ///; /// This function is compatible with the helpers from Support/WithColor.h. You; /// can pass any of them as the OS. Please consider using them instead of; /// including 'error: ' in the ErrorBanner.; ///; /// This is useful in the base level of your program to allow clean termination; /// (allowing clean deallocation of resources, etc.), while reporting error; /// information to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:65,Availability,Error,ErrorBanner,65,"/// Log all errors (if any) in E to OS. If there are any errors, ErrorBanner; /// will be printed before the first one is logged. A newline will be printed; /// after each error.; ///; /// This function is compatible with the helpers from Support/WithColor.h. You; /// can pass any of them as the OS. Please consider using them instead of; /// including 'error: ' in the ErrorBanner.; ///; /// This is useful in the base level of your program to allow clean termination; /// (allowing clean deallocation of resources, etc.), while reporting error; /// information to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:172,Availability,error,error,172,"/// Log all errors (if any) in E to OS. If there are any errors, ErrorBanner; /// will be printed before the first one is logged. A newline will be printed; /// after each error.; ///; /// This function is compatible with the helpers from Support/WithColor.h. You; /// can pass any of them as the OS. Please consider using them instead of; /// including 'error: ' in the ErrorBanner.; ///; /// This is useful in the base level of your program to allow clean termination; /// (allowing clean deallocation of resources, etc.), while reporting error; /// information to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:355,Availability,error,error,355,"/// Log all errors (if any) in E to OS. If there are any errors, ErrorBanner; /// will be printed before the first one is logged. A newline will be printed; /// after each error.; ///; /// This function is compatible with the helpers from Support/WithColor.h. You; /// can pass any of them as the OS. Please consider using them instead of; /// including 'error: ' in the ErrorBanner.; ///; /// This is useful in the base level of your program to allow clean termination; /// (allowing clean deallocation of resources, etc.), while reporting error; /// information to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:371,Availability,Error,ErrorBanner,371,"/// Log all errors (if any) in E to OS. If there are any errors, ErrorBanner; /// will be printed before the first one is logged. A newline will be printed; /// after each error.; ///; /// This function is compatible with the helpers from Support/WithColor.h. You; /// can pass any of them as the OS. Please consider using them instead of; /// including 'error: ' in the ErrorBanner.; ///; /// This is useful in the base level of your program to allow clean termination; /// (allowing clean deallocation of resources, etc.), while reporting error; /// information to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:541,Availability,error,error,541,"/// Log all errors (if any) in E to OS. If there are any errors, ErrorBanner; /// will be printed before the first one is logged. A newline will be printed; /// after each error.; ///; /// This function is compatible with the helpers from Support/WithColor.h. You; /// can pass any of them as the OS. Please consider using them instead of; /// including 'error: ' in the ErrorBanner.; ///; /// This is useful in the base level of your program to allow clean termination; /// (allowing clean deallocation of resources, etc.), while reporting error; /// information to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:4,Testability,Log,Log,4,"/// Log all errors (if any) in E to OS. If there are any errors, ErrorBanner; /// will be printed before the first one is logged. A newline will be printed; /// after each error.; ///; /// This function is compatible with the helpers from Support/WithColor.h. You; /// can pass any of them as the OS. Please consider using them instead of; /// including 'error: ' in the ErrorBanner.; ///; /// This is useful in the base level of your program to allow clean termination; /// (allowing clean deallocation of resources, etc.), while reporting error; /// information to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:122,Testability,log,logged,122,"/// Log all errors (if any) in E to OS. If there are any errors, ErrorBanner; /// will be printed before the first one is logged. A newline will be printed; /// after each error.; ///; /// This function is compatible with the helpers from Support/WithColor.h. You; /// can pass any of them as the OS. Please consider using them instead of; /// including 'error: ' in the ErrorBanner.; ///; /// This is useful in the base level of your program to allow clean termination; /// (allowing clean deallocation of resources, etc.), while reporting error; /// information to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:14,Availability,error,error,14,/// Write all error messages (if any) in E to a string. The newline character; /// is used to separate error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:103,Availability,error,error,103,/// Write all error messages (if any) in E to a string. The newline character; /// is used to separate error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:20,Integrability,message,messages,20,/// Write all error messages (if any) in E to a string. The newline character; /// is used to separate error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:109,Integrability,message,messages,109,/// Write all error messages (if any) in E to a string. The newline character; /// is used to separate error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:14,Availability,Error,Error,14,"/// Consume a Error without doing anything. This method should be used; /// only where an error can be considered a reasonable and expected return; /// value.; ///; /// Uses of this method are potentially indicative of design problems: If it's; /// legitimate to do nothing while processing an ""error"", the error-producer; /// might be more clearly refactored to return an std::optional<T>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:90,Availability,error,error,90,"/// Consume a Error without doing anything. This method should be used; /// only where an error can be considered a reasonable and expected return; /// value.; ///; /// Uses of this method are potentially indicative of design problems: If it's; /// legitimate to do nothing while processing an ""error"", the error-producer; /// might be more clearly refactored to return an std::optional<T>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:295,Availability,error,error,295,"/// Consume a Error without doing anything. This method should be used; /// only where an error can be considered a reasonable and expected return; /// value.; ///; /// Uses of this method are potentially indicative of design problems: If it's; /// legitimate to do nothing while processing an ""error"", the error-producer; /// might be more clearly refactored to return an std::optional<T>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:307,Availability,error,error-producer,307,"/// Consume a Error without doing anything. This method should be used; /// only where an error can be considered a reasonable and expected return; /// value.; ///; /// Uses of this method are potentially indicative of design problems: If it's; /// legitimate to do nothing while processing an ""error"", the error-producer; /// might be more clearly refactored to return an std::optional<T>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:349,Modifiability,refactor,refactored,349,"/// Consume a Error without doing anything. This method should be used; /// only where an error can be considered a reasonable and expected return; /// value.; ///; /// Uses of this method are potentially indicative of design problems: If it's; /// legitimate to do nothing while processing an ""error"", the error-producer; /// might be more clearly refactored to return an std::optional<T>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:341,Usability,clear,clearly,341,"/// Consume a Error without doing anything. This method should be used; /// only where an error can be considered a reasonable and expected return; /// value.; ///; /// Uses of this method are potentially indicative of design problems: If it's; /// legitimate to do nothing while processing an ""error"", the error-producer; /// might be more clearly refactored to return an std::optional<T>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:109,Availability,error,error,109,"/// Convert an Expected to an Optional without doing anything. This method; /// should be used only where an error can be considered a reasonable and; /// expected return value.; ///; /// Uses of this method are potentially indicative of problems: perhaps the; /// error should be propagated further, or the error-producer should just; /// return an Optional in the first place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:265,Availability,error,error,265,"/// Convert an Expected to an Optional without doing anything. This method; /// should be used only where an error can be considered a reasonable and; /// expected return value.; ///; /// Uses of this method are potentially indicative of problems: perhaps the; /// error should be propagated further, or the error-producer should just; /// return an Optional in the first place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:308,Availability,error,error-producer,308,"/// Convert an Expected to an Optional without doing anything. This method; /// should be used only where an error can be considered a reasonable and; /// expected return value.; ///; /// Uses of this method are potentially indicative of problems: perhaps the; /// error should be propagated further, or the error-producer should just; /// return an Optional in the first place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:29,Availability,Error,Error,29,"/// Helper for converting an Error to a bool.; ///; /// This method returns true if Err is in an error state, or false if it is; /// in a success state. Puts Err in a checked state in both cases (unlike; /// Error::operator bool(), which only does this for success states).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:97,Availability,error,error,97,"/// Helper for converting an Error to a bool.; ///; /// This method returns true if Err is in an error state, or false if it is; /// in a success state. Puts Err in a checked state in both cases (unlike; /// Error::operator bool(), which only does this for success states).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:208,Availability,Error,Error,208,"/// Helper for converting an Error to a bool.; ///; /// This method returns true if Err is in an error state, or false if it is; /// in a success state. Puts Err in a checked state in both cases (unlike; /// Error::operator bool(), which only does this for success states).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:15,Availability,Error,Errors,15,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:88,Availability,Error,Error-as-out-parameter,88,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:127,Availability,error,error,127,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:312,Availability,error,error,312,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:347,Availability,Error,Errors,347,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:587,Availability,Error,Error,587,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:606,Availability,Error,ErrorAsOutParameter,606,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:795,Availability,Error,ErrorAsOutParameter,795,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:824,Availability,Error,Error,824,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:843,Availability,Error,Error,843,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:892,Availability,Error,Errors,892,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:900,Availability,Error,Error,900,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:953,Availability,Error,ErrorAsOutParameter,953,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:981,Availability,Error,Error,981,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:1082,Availability,Error,Error,1082,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:1120,Availability,Error,Error,1120,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:495,Performance,perform,performs,495,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:354,Safety,abort,abort,354,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:384,Usability,clear,clear,384,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:722,Usability,clear,cleared,722,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:3,Usability,Clear,Clear,3,// Clear the checked bit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:66,Availability,Error,ErrorAsOutParameter,66,/// Helper for Expected<T>s used as out-parameters.; ///; /// See ErrorAsOutParameter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:44,Availability,Error,Error,44,/// This class wraps a std::error_code in a Error.; ///; /// This is useful if you're writing an interface that returns a Error; /// (or Expected) and you want to call code that still returns; /// std::error_codes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:122,Availability,Error,Error,122,/// This class wraps a std::error_code in a Error.; ///; /// This is useful if you're writing an interface that returns a Error; /// (or Expected) and you want to call code that still returns; /// std::error_codes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:15,Integrability,wrap,wraps,15,/// This class wraps a std::error_code in a Error.; ///; /// This is useful if you're writing an interface that returns a Error; /// (or Expected) and you want to call code that still returns; /// std::error_codes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:97,Integrability,interface,interface,97,/// This class wraps a std::error_code in a Error.; ///; /// This is useful if you're writing an interface that returns a Error; /// (or Expected) and you want to call code that still returns; /// std::error_codes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:11,Availability,Error,ErrorInfo,11,// Used by ErrorInfo::classID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:89,Availability,Error,Error,89,"/// The value returned by this function can be returned from convertToErrorCode; /// for Error values where no sensible translation to std::error_code exists.; /// It should only be used in this situation, and should never be used where a; /// sensible conversion to std::error_code is available, as attempts to convert; /// to/from this error will result in a fatal error. (i.e. it is a programmatic; /// error to try to convert such a value).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:286,Availability,avail,available,286,"/// The value returned by this function can be returned from convertToErrorCode; /// for Error values where no sensible translation to std::error_code exists.; /// It should only be used in this situation, and should never be used where a; /// sensible conversion to std::error_code is available, as attempts to convert; /// to/from this error will result in a fatal error. (i.e. it is a programmatic; /// error to try to convert such a value).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:338,Availability,error,error,338,"/// The value returned by this function can be returned from convertToErrorCode; /// for Error values where no sensible translation to std::error_code exists.; /// It should only be used in this situation, and should never be used where a; /// sensible conversion to std::error_code is available, as attempts to convert; /// to/from this error will result in a fatal error. (i.e. it is a programmatic; /// error to try to convert such a value).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:367,Availability,error,error,367,"/// The value returned by this function can be returned from convertToErrorCode; /// for Error values where no sensible translation to std::error_code exists.; /// It should only be used in this situation, and should never be used where a; /// sensible conversion to std::error_code is available, as attempts to convert; /// to/from this error will result in a fatal error. (i.e. it is a programmatic; /// error to try to convert such a value).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:406,Availability,error,error,406,"/// The value returned by this function can be returned from convertToErrorCode; /// for Error values where no sensible translation to std::error_code exists.; /// It should only be used in this situation, and should never be used where a; /// sensible conversion to std::error_code is available, as attempts to convert; /// to/from this error will result in a fatal error. (i.e. it is a programmatic; /// error to try to convert such a value).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:50,Availability,Error,Error,50,/// Helper for converting an std::error_code to a Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:102,Availability,Error,Error,102,"/// Helper for converting an ECError to a std::error_code.; ///; /// This method requires that Err be Error() or an ECError, otherwise it; /// will trigger a call to abort().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:166,Safety,abort,abort,166,"/// Helper for converting an ECError to a std::error_code.; ///; /// This method requires that Err be Error() or an ECError, otherwise it; /// will trigger a call to abort().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:15,Availability,Error,ErrorOr,15,/// Convert an ErrorOr<T> to an Expected<T>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:33,Availability,Error,ErrorOr,33,/// Convert an Expected<T> to an ErrorOr<T>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:36,Availability,Error,Error,36,"/// This class wraps a string in an Error.; ///; /// StringError is useful in cases where the client is not expected to be able; /// to consume the specific error message programmatically (for example, if the; /// error message is to be presented to the user).; ///; /// StringError can also be used when additional information is to be printed; /// along with a error_code message. Depending on the constructor called, this; /// class can either display:; /// 1. the error_code message (ECError behavior); /// 2. a string; /// 3. the error_code message and a string; ///; /// These behaviors are useful when subtyping is required; for example, when a; /// specific library needs an explicit error type. In the example below,; /// PDBError is derived from StringError:; ///; /// @code{.cpp}; /// Expected<int> foo() {; /// return llvm::make_error<PDBError>(pdb_error_code::dia_failed_loading,; /// ""Additional information"");; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:157,Availability,error,error,157,"/// This class wraps a string in an Error.; ///; /// StringError is useful in cases where the client is not expected to be able; /// to consume the specific error message programmatically (for example, if the; /// error message is to be presented to the user).; ///; /// StringError can also be used when additional information is to be printed; /// along with a error_code message. Depending on the constructor called, this; /// class can either display:; /// 1. the error_code message (ECError behavior); /// 2. a string; /// 3. the error_code message and a string; ///; /// These behaviors are useful when subtyping is required; for example, when a; /// specific library needs an explicit error type. In the example below,; /// PDBError is derived from StringError:; ///; /// @code{.cpp}; /// Expected<int> foo() {; /// return llvm::make_error<PDBError>(pdb_error_code::dia_failed_loading,; /// ""Additional information"");; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:214,Availability,error,error,214,"/// This class wraps a string in an Error.; ///; /// StringError is useful in cases where the client is not expected to be able; /// to consume the specific error message programmatically (for example, if the; /// error message is to be presented to the user).; ///; /// StringError can also be used when additional information is to be printed; /// along with a error_code message. Depending on the constructor called, this; /// class can either display:; /// 1. the error_code message (ECError behavior); /// 2. a string; /// 3. the error_code message and a string; ///; /// These behaviors are useful when subtyping is required; for example, when a; /// specific library needs an explicit error type. In the example below,; /// PDBError is derived from StringError:; ///; /// @code{.cpp}; /// Expected<int> foo() {; /// return llvm::make_error<PDBError>(pdb_error_code::dia_failed_loading,; /// ""Additional information"");; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:692,Availability,error,error,692,"/// This class wraps a string in an Error.; ///; /// StringError is useful in cases where the client is not expected to be able; /// to consume the specific error message programmatically (for example, if the; /// error message is to be presented to the user).; ///; /// StringError can also be used when additional information is to be printed; /// along with a error_code message. Depending on the constructor called, this; /// class can either display:; /// 1. the error_code message (ECError behavior); /// 2. a string; /// 3. the error_code message and a string; ///; /// These behaviors are useful when subtyping is required; for example, when a; /// specific library needs an explicit error type. In the example below,; /// PDBError is derived from StringError:; ///; /// @code{.cpp}; /// Expected<int> foo() {; /// return llvm::make_error<PDBError>(pdb_error_code::dia_failed_loading,; /// ""Additional information"");; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:15,Integrability,wrap,wraps,15,"/// This class wraps a string in an Error.; ///; /// StringError is useful in cases where the client is not expected to be able; /// to consume the specific error message programmatically (for example, if the; /// error message is to be presented to the user).; ///; /// StringError can also be used when additional information is to be printed; /// along with a error_code message. Depending on the constructor called, this; /// class can either display:; /// 1. the error_code message (ECError behavior); /// 2. a string; /// 3. the error_code message and a string; ///; /// These behaviors are useful when subtyping is required; for example, when a; /// specific library needs an explicit error type. In the example below,; /// PDBError is derived from StringError:; ///; /// @code{.cpp}; /// Expected<int> foo() {; /// return llvm::make_error<PDBError>(pdb_error_code::dia_failed_loading,; /// ""Additional information"");; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:163,Integrability,message,message,163,"/// This class wraps a string in an Error.; ///; /// StringError is useful in cases where the client is not expected to be able; /// to consume the specific error message programmatically (for example, if the; /// error message is to be presented to the user).; ///; /// StringError can also be used when additional information is to be printed; /// along with a error_code message. Depending on the constructor called, this; /// class can either display:; /// 1. the error_code message (ECError behavior); /// 2. a string; /// 3. the error_code message and a string; ///; /// These behaviors are useful when subtyping is required; for example, when a; /// specific library needs an explicit error type. In the example below,; /// PDBError is derived from StringError:; ///; /// @code{.cpp}; /// Expected<int> foo() {; /// return llvm::make_error<PDBError>(pdb_error_code::dia_failed_loading,; /// ""Additional information"");; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:220,Integrability,message,message,220,"/// This class wraps a string in an Error.; ///; /// StringError is useful in cases where the client is not expected to be able; /// to consume the specific error message programmatically (for example, if the; /// error message is to be presented to the user).; ///; /// StringError can also be used when additional information is to be printed; /// along with a error_code message. Depending on the constructor called, this; /// class can either display:; /// 1. the error_code message (ECError behavior); /// 2. a string; /// 3. the error_code message and a string; ///; /// These behaviors are useful when subtyping is required; for example, when a; /// specific library needs an explicit error type. In the example below,; /// PDBError is derived from StringError:; ///; /// @code{.cpp}; /// Expected<int> foo() {; /// return llvm::make_error<PDBError>(pdb_error_code::dia_failed_loading,; /// ""Additional information"");; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:374,Integrability,message,message,374,"/// This class wraps a string in an Error.; ///; /// StringError is useful in cases where the client is not expected to be able; /// to consume the specific error message programmatically (for example, if the; /// error message is to be presented to the user).; ///; /// StringError can also be used when additional information is to be printed; /// along with a error_code message. Depending on the constructor called, this; /// class can either display:; /// 1. the error_code message (ECError behavior); /// 2. a string; /// 3. the error_code message and a string; ///; /// These behaviors are useful when subtyping is required; for example, when a; /// specific library needs an explicit error type. In the example below,; /// PDBError is derived from StringError:; ///; /// @code{.cpp}; /// Expected<int> foo() {; /// return llvm::make_error<PDBError>(pdb_error_code::dia_failed_loading,; /// ""Additional information"");; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:383,Integrability,Depend,Depending,383,"/// This class wraps a string in an Error.; ///; /// StringError is useful in cases where the client is not expected to be able; /// to consume the specific error message programmatically (for example, if the; /// error message is to be presented to the user).; ///; /// StringError can also be used when additional information is to be printed; /// along with a error_code message. Depending on the constructor called, this; /// class can either display:; /// 1. the error_code message (ECError behavior); /// 2. a string; /// 3. the error_code message and a string; ///; /// These behaviors are useful when subtyping is required; for example, when a; /// specific library needs an explicit error type. In the example below,; /// PDBError is derived from StringError:; ///; /// @code{.cpp}; /// Expected<int> foo() {; /// return llvm::make_error<PDBError>(pdb_error_code::dia_failed_loading,; /// ""Additional information"");; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:479,Integrability,message,message,479,"/// This class wraps a string in an Error.; ///; /// StringError is useful in cases where the client is not expected to be able; /// to consume the specific error message programmatically (for example, if the; /// error message is to be presented to the user).; ///; /// StringError can also be used when additional information is to be printed; /// along with a error_code message. Depending on the constructor called, this; /// class can either display:; /// 1. the error_code message (ECError behavior); /// 2. a string; /// 3. the error_code message and a string; ///; /// These behaviors are useful when subtyping is required; for example, when a; /// specific library needs an explicit error type. In the example below,; /// PDBError is derived from StringError:; ///; /// @code{.cpp}; /// Expected<int> foo() {; /// return llvm::make_error<PDBError>(pdb_error_code::dia_failed_loading,; /// ""Additional information"");; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:546,Integrability,message,message,546,"/// This class wraps a string in an Error.; ///; /// StringError is useful in cases where the client is not expected to be able; /// to consume the specific error message programmatically (for example, if the; /// error message is to be presented to the user).; ///; /// StringError can also be used when additional information is to be printed; /// along with a error_code message. Depending on the constructor called, this; /// class can either display:; /// 1. the error_code message (ECError behavior); /// 2. a string; /// 3. the error_code message and a string; ///; /// These behaviors are useful when subtyping is required; for example, when a; /// specific library needs an explicit error type. In the example below,; /// PDBError is derived from StringError:; ///; /// @code{.cpp}; /// Expected<int> foo() {; /// return llvm::make_error<PDBError>(pdb_error_code::dia_failed_loading,; /// ""Additional information"");; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:44,Availability,Error,Error,44,"/// This class wraps a filename and another Error.; ///; /// In some cases, an error needs to live along a 'source' name, in order to; /// show more detailed information to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:79,Availability,error,error,79,"/// This class wraps a filename and another Error.; ///; /// In some cases, an error needs to live along a 'source' name, in order to; /// show more detailed information to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:15,Integrability,wrap,wraps,15,"/// This class wraps a filename and another Error.; ///; /// In some cases, an error needs to live along a 'source' name, in order to; /// show more detailed information to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:11,Availability,Error,ErrorInfo,11,// Used by ErrorInfo::classID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:55,Availability,Error,Error,55,/// Concatenate a source file path and/or name with an Error. The resulting; /// Error is unchecked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:81,Availability,Error,Error,81,/// Concatenate a source file path and/or name with an Error. The resulting; /// Error is unchecked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:71,Availability,Error,Error,71,/// Concatenate a source file path and/or name with line number and an Error.; /// The resulting Error is unchecked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:97,Availability,Error,Error,97,/// Concatenate a source file path and/or name with line number and an Error.; /// The resulting Error is unchecked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:87,Availability,Error,Error,87,/// Concatenate a source file path and/or name with a std::error_code ; /// to form an Error object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:100,Availability,Error,Error,100,/// Concatenate a source file path and/or name with line number and; /// std::error_code to form an Error object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:30,Availability,error,error,30,/// Helper for check-and-exit error handling.; ///; /// For tool use only. NOT FOR USE IN LIBRARY CODE.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:14,Availability,error,error,14,/// Create an error on exit helper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:34,Availability,error,errors,34,/// Set the banner string for any errors caught by operator().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:28,Availability,failure,failure,28,/// Check Err. If it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:50,Availability,error,error,50,/// Check Err. If it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:42,Testability,log,log,42,/// Check Err. If it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:91,Availability,failure,failure,91,/// Check E. If it's in a success state then return the contained value. If; /// it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:113,Availability,error,error,113,/// Check E. If it's in a success state then return the contained value. If; /// it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:105,Testability,log,log,105,/// Check E. If it's in a success state then return the contained value. If; /// it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:95,Availability,failure,failure,95,/// Check E. If it's in a success state then return the contained reference. If; /// it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:117,Availability,error,error,117,/// Check E. If it's in a success state then return the contained reference. If; /// it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:109,Testability,log,log,109,/// Check E. If it's in a success state then return the contained reference. If; /// it's in a failure state log the error(s) and exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:20,Availability,Error,Error,20,/// Conversion from Error to LLVMErrorRef for C error bindings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:48,Availability,error,error,48,/// Conversion from Error to LLVMErrorRef for C error bindings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:36,Availability,Error,Error,36,/// Conversion from LLVMErrorRef to Error for C error bindings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:48,Availability,error,error,48,/// Conversion from LLVMErrorRef to Error for C error bindings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:20,Availability,Error,ErrorHandling,20,"//===- llvm/Support/ErrorHandling.h - Fatal error handling ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an API used to indicate fatal error conditions. Non-fatal; // errors (most of them) should be handled through LLVMContext.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:44,Availability,error,error,44,"//===- llvm/Support/ErrorHandling.h - Fatal error handling ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an API used to indicate fatal error conditions. Non-fatal; // errors (most of them) should be handled through LLVMContext.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:431,Availability,error,error,431,"//===- llvm/Support/ErrorHandling.h - Fatal error handling ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an API used to indicate fatal error conditions. Non-fatal; // errors (most of them) should be handled through LLVMContext.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:463,Availability,error,errors,463,"//===- llvm/Support/ErrorHandling.h - Fatal error handling ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an API used to indicate fatal error conditions. Non-fatal; // errors (most of them) should be handled through LLVMContext.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:7,Availability,error,error,7,/// An error handler callback.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:49,Availability,error,error,49,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:103,Availability,recover,recoverable,103,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:116,Availability,error,error,116,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:162,Availability,error,error,162,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:217,Availability,error,error,217,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:271,Availability,error,error,271,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:415,Availability,error,error,415,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:516,Availability,error,error,516,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:613,Availability,recover,recover,613,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:641,Availability,fault,faults,641,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:812,Availability,error,error,812,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:34,Deployability,Install,Installs,34,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:179,Deployability,install,installed,179,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:288,Deployability,install,installed,288,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:804,Deployability,install,install,804,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:223,Integrability,message,message,223,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:354,Integrability,message,message,354,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:103,Safety,recover,recoverable,103,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:613,Safety,recover,recover,613,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:346,Testability,log,log,346,"/// install_fatal_error_handler - Installs a new error handler to be used; /// whenever a serious (non-recoverable) error is encountered by LLVM.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; /// It is dangerous to naively use an error handler which throws an exception.; /// Even though some applications desire to gracefully recover from arbitrary; /// faults, blindly throwing exceptions through unfamiliar code isn't a way to; /// achieve this.; ///; /// \param user_data - An argument which will be passed to the install error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:21,Availability,error,error,21,/// Restores default error handling behaviour.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:40,Usability,simpl,simple,40,/// ScopedFatalErrorHandler - This is a simple helper class which just; /// calls install_fatal_error_handler in its constructor and; /// remove_fatal_error_handler in its destructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:22,Availability,error,error,22,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:51,Availability,error,error,51,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:115,Availability,error,error,115,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:188,Availability,error,errors,188,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:238,Availability,error,error,238,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:318,Availability,error,error,318,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:363,Availability,error,error,363,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:41,Deployability,install,installed,41,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:255,Deployability,install,installed,255,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:293,Integrability,message,message,293,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:512,Integrability,depend,dependency,512,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:411,Safety,abort,abort,411,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:495,Safety,avoid,avoid,495,"/// Reports a serious error, calling any installed error handler. These; /// functions are intended to be used for error conditions which are outside; /// the control of the compiler (I/O errors, invalid user input, etc.); ///; /// If no error handler is installed the default is to print the message to; /// standard error, followed by a newline.; /// After the error handler is called this function will call abort(), it; /// does not return.; /// NOTE: The std::string variant was removed to avoid a <string> dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:29,Availability,error,error,29,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:89,Availability,error,error,89,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:393,Availability,error,error,393,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:448,Availability,error,error,448,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:502,Availability,error,error,502,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:646,Availability,error,error,646,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:787,Availability,error,error,787,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:4,Deployability,Install,Installs,4,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:171,Deployability,install,install,171,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:410,Deployability,install,installed,410,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:519,Deployability,install,installed,519,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:777,Deployability,install,installed,777,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:454,Integrability,message,message,454,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:585,Integrability,message,message,585,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:577,Testability,log,log,577,"/// Installs a new bad alloc error handler that should be used whenever a; /// bad alloc error, e.g. failing malloc/calloc, is encountered by LLVM.; ///; /// The user can install a bad alloc handler, in order to define the behavior; /// in case of failing allocations, e.g. throwing an exception. Note that this; /// handler must not trigger any additional allocations itself.; ///; /// If no error handler is installed the default is to print the error message; /// to stderr, and call exit(1). If an error handler is installed then it is; /// the handler's responsibility to log the message, it will no longer be; /// printed to stderr. If the error handler returns, then exit(1) will be; /// called.; ///; ///; /// \param user_data - An argument which will be passed to the installed error; /// handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:31,Availability,error,error,31,/// Restores default bad alloc error handling behavior.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:24,Availability,error,error,24,"/// Reports a bad alloc error, calling any user defined bad alloc; /// error handler. In contrast to the generic 'report_fatal_error'; /// functions, this function might not terminate, e.g. the user; /// defined error handler throws an exception, but it won't return.; ///; /// Note: When throwing an exception in the bad alloc handler, make sure that; /// the following unwind succeeds, e.g. do not trigger additional allocations; /// in the unwind chain.; ///; /// If no error handler is installed (default), throws a bad_alloc exception; /// if LLVM is compiled with exception support. Otherwise prints the error; /// to standard error and calls abort().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:71,Availability,error,error,71,"/// Reports a bad alloc error, calling any user defined bad alloc; /// error handler. In contrast to the generic 'report_fatal_error'; /// functions, this function might not terminate, e.g. the user; /// defined error handler throws an exception, but it won't return.; ///; /// Note: When throwing an exception in the bad alloc handler, make sure that; /// the following unwind succeeds, e.g. do not trigger additional allocations; /// in the unwind chain.; ///; /// If no error handler is installed (default), throws a bad_alloc exception; /// if LLVM is compiled with exception support. Otherwise prints the error; /// to standard error and calls abort().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:212,Availability,error,error,212,"/// Reports a bad alloc error, calling any user defined bad alloc; /// error handler. In contrast to the generic 'report_fatal_error'; /// functions, this function might not terminate, e.g. the user; /// defined error handler throws an exception, but it won't return.; ///; /// Note: When throwing an exception in the bad alloc handler, make sure that; /// the following unwind succeeds, e.g. do not trigger additional allocations; /// in the unwind chain.; ///; /// If no error handler is installed (default), throws a bad_alloc exception; /// if LLVM is compiled with exception support. Otherwise prints the error; /// to standard error and calls abort().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:473,Availability,error,error,473,"/// Reports a bad alloc error, calling any user defined bad alloc; /// error handler. In contrast to the generic 'report_fatal_error'; /// functions, this function might not terminate, e.g. the user; /// defined error handler throws an exception, but it won't return.; ///; /// Note: When throwing an exception in the bad alloc handler, make sure that; /// the following unwind succeeds, e.g. do not trigger additional allocations; /// in the unwind chain.; ///; /// If no error handler is installed (default), throws a bad_alloc exception; /// if LLVM is compiled with exception support. Otherwise prints the error; /// to standard error and calls abort().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:610,Availability,error,error,610,"/// Reports a bad alloc error, calling any user defined bad alloc; /// error handler. In contrast to the generic 'report_fatal_error'; /// functions, this function might not terminate, e.g. the user; /// defined error handler throws an exception, but it won't return.; ///; /// Note: When throwing an exception in the bad alloc handler, make sure that; /// the following unwind succeeds, e.g. do not trigger additional allocations; /// in the unwind chain.; ///; /// If no error handler is installed (default), throws a bad_alloc exception; /// if LLVM is compiled with exception support. Otherwise prints the error; /// to standard error and calls abort().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:633,Availability,error,error,633,"/// Reports a bad alloc error, calling any user defined bad alloc; /// error handler. In contrast to the generic 'report_fatal_error'; /// functions, this function might not terminate, e.g. the user; /// defined error handler throws an exception, but it won't return.; ///; /// Note: When throwing an exception in the bad alloc handler, make sure that; /// the following unwind succeeds, e.g. do not trigger additional allocations; /// in the unwind chain.; ///; /// If no error handler is installed (default), throws a bad_alloc exception; /// if LLVM is compiled with exception support. Otherwise prints the error; /// to standard error and calls abort().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:490,Deployability,install,installed,490,"/// Reports a bad alloc error, calling any user defined bad alloc; /// error handler. In contrast to the generic 'report_fatal_error'; /// functions, this function might not terminate, e.g. the user; /// defined error handler throws an exception, but it won't return.; ///; /// Note: When throwing an exception in the bad alloc handler, make sure that; /// the following unwind succeeds, e.g. do not trigger additional allocations; /// in the unwind chain.; ///; /// If no error handler is installed (default), throws a bad_alloc exception; /// if LLVM is compiled with exception support. Otherwise prints the error; /// to standard error and calls abort().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:649,Safety,abort,abort,649,"/// Reports a bad alloc error, calling any user defined bad alloc; /// error handler. In contrast to the generic 'report_fatal_error'; /// functions, this function might not terminate, e.g. the user; /// defined error handler throws an exception, but it won't return.; ///; /// Note: When throwing an exception in the bad alloc handler, make sure that; /// the following unwind succeeds, e.g. do not trigger additional allocations; /// in the unwind chain.; ///; /// If no error handler is installed (default), throws a bad_alloc exception; /// if LLVM is compiled with exception support. Otherwise prints the error; /// to standard error and calls abort().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:57,Integrability,message,message,57,"/// This function calls abort(), and prints the optional message to stderr.; /// Use the llvm_unreachable macro (that adds location info), instead of; /// calling this function directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:24,Safety,abort,abort,24,"/// This function calls abort(), and prints the optional message to stderr.; /// Use the llvm_unreachable macro (that adds location info), instead of; /// calling this function directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:619,Energy Efficiency,reduce,reduced,619,"/// Marks that the current location is not supposed to be reachable.; /// In !NDEBUG builds, prints the message and location info to stderr.; /// In NDEBUG builds, if the platform does not support a builtin unreachable; /// then we call an internal LLVM runtime function. Otherwise the behavior is; /// controlled by the CMake flag; /// -DLLVM_UNREACHABLE_OPTIMIZE; /// * When ""ON"" (default) llvm_unreachable() becomes an optimizer hint; /// that the current location is not supposed to be reachable: the hint; /// turns such code path into undefined behavior. On compilers that don't; /// support such hints, prints a reduced message instead and aborts the; /// program.; /// * When ""OFF"", a builtin_trap is emitted instead of an; // optimizer hint or printing a reduced message.; ///; /// Use this instead of assert(0). It conveys intent more clearly, suppresses; /// diagnostics for unreachable code paths, and allows compilers to omit; /// unnecessary code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:764,Energy Efficiency,reduce,reduced,764,"/// Marks that the current location is not supposed to be reachable.; /// In !NDEBUG builds, prints the message and location info to stderr.; /// In NDEBUG builds, if the platform does not support a builtin unreachable; /// then we call an internal LLVM runtime function. Otherwise the behavior is; /// controlled by the CMake flag; /// -DLLVM_UNREACHABLE_OPTIMIZE; /// * When ""ON"" (default) llvm_unreachable() becomes an optimizer hint; /// that the current location is not supposed to be reachable: the hint; /// turns such code path into undefined behavior. On compilers that don't; /// support such hints, prints a reduced message instead and aborts the; /// program.; /// * When ""OFF"", a builtin_trap is emitted instead of an; // optimizer hint or printing a reduced message.; ///; /// Use this instead of assert(0). It conveys intent more clearly, suppresses; /// diagnostics for unreachable code paths, and allows compilers to omit; /// unnecessary code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:104,Integrability,message,message,104,"/// Marks that the current location is not supposed to be reachable.; /// In !NDEBUG builds, prints the message and location info to stderr.; /// In NDEBUG builds, if the platform does not support a builtin unreachable; /// then we call an internal LLVM runtime function. Otherwise the behavior is; /// controlled by the CMake flag; /// -DLLVM_UNREACHABLE_OPTIMIZE; /// * When ""ON"" (default) llvm_unreachable() becomes an optimizer hint; /// that the current location is not supposed to be reachable: the hint; /// turns such code path into undefined behavior. On compilers that don't; /// support such hints, prints a reduced message instead and aborts the; /// program.; /// * When ""OFF"", a builtin_trap is emitted instead of an; // optimizer hint or printing a reduced message.; ///; /// Use this instead of assert(0). It conveys intent more clearly, suppresses; /// diagnostics for unreachable code paths, and allows compilers to omit; /// unnecessary code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:627,Integrability,message,message,627,"/// Marks that the current location is not supposed to be reachable.; /// In !NDEBUG builds, prints the message and location info to stderr.; /// In NDEBUG builds, if the platform does not support a builtin unreachable; /// then we call an internal LLVM runtime function. Otherwise the behavior is; /// controlled by the CMake flag; /// -DLLVM_UNREACHABLE_OPTIMIZE; /// * When ""ON"" (default) llvm_unreachable() becomes an optimizer hint; /// that the current location is not supposed to be reachable: the hint; /// turns such code path into undefined behavior. On compilers that don't; /// support such hints, prints a reduced message instead and aborts the; /// program.; /// * When ""OFF"", a builtin_trap is emitted instead of an; // optimizer hint or printing a reduced message.; ///; /// Use this instead of assert(0). It conveys intent more clearly, suppresses; /// diagnostics for unreachable code paths, and allows compilers to omit; /// unnecessary code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:772,Integrability,message,message,772,"/// Marks that the current location is not supposed to be reachable.; /// In !NDEBUG builds, prints the message and location info to stderr.; /// In NDEBUG builds, if the platform does not support a builtin unreachable; /// then we call an internal LLVM runtime function. Otherwise the behavior is; /// controlled by the CMake flag; /// -DLLVM_UNREACHABLE_OPTIMIZE; /// * When ""ON"" (default) llvm_unreachable() becomes an optimizer hint; /// that the current location is not supposed to be reachable: the hint; /// turns such code path into undefined behavior. On compilers that don't; /// support such hints, prints a reduced message instead and aborts the; /// program.; /// * When ""OFF"", a builtin_trap is emitted instead of an; // optimizer hint or printing a reduced message.; ///; /// Use this instead of assert(0). It conveys intent more clearly, suppresses; /// diagnostics for unreachable code paths, and allows compilers to omit; /// unnecessary code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:422,Performance,optimiz,optimizer,422,"/// Marks that the current location is not supposed to be reachable.; /// In !NDEBUG builds, prints the message and location info to stderr.; /// In NDEBUG builds, if the platform does not support a builtin unreachable; /// then we call an internal LLVM runtime function. Otherwise the behavior is; /// controlled by the CMake flag; /// -DLLVM_UNREACHABLE_OPTIMIZE; /// * When ""ON"" (default) llvm_unreachable() becomes an optimizer hint; /// that the current location is not supposed to be reachable: the hint; /// turns such code path into undefined behavior. On compilers that don't; /// support such hints, prints a reduced message instead and aborts the; /// program.; /// * When ""OFF"", a builtin_trap is emitted instead of an; // optimizer hint or printing a reduced message.; ///; /// Use this instead of assert(0). It conveys intent more clearly, suppresses; /// diagnostics for unreachable code paths, and allows compilers to omit; /// unnecessary code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:735,Performance,optimiz,optimizer,735,"/// Marks that the current location is not supposed to be reachable.; /// In !NDEBUG builds, prints the message and location info to stderr.; /// In NDEBUG builds, if the platform does not support a builtin unreachable; /// then we call an internal LLVM runtime function. Otherwise the behavior is; /// controlled by the CMake flag; /// -DLLVM_UNREACHABLE_OPTIMIZE; /// * When ""ON"" (default) llvm_unreachable() becomes an optimizer hint; /// that the current location is not supposed to be reachable: the hint; /// turns such code path into undefined behavior. On compilers that don't; /// support such hints, prints a reduced message instead and aborts the; /// program.; /// * When ""OFF"", a builtin_trap is emitted instead of an; // optimizer hint or printing a reduced message.; ///; /// Use this instead of assert(0). It conveys intent more clearly, suppresses; /// diagnostics for unreachable code paths, and allows compilers to omit; /// unnecessary code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:647,Safety,abort,aborts,647,"/// Marks that the current location is not supposed to be reachable.; /// In !NDEBUG builds, prints the message and location info to stderr.; /// In NDEBUG builds, if the platform does not support a builtin unreachable; /// then we call an internal LLVM runtime function. Otherwise the behavior is; /// controlled by the CMake flag; /// -DLLVM_UNREACHABLE_OPTIMIZE; /// * When ""ON"" (default) llvm_unreachable() becomes an optimizer hint; /// that the current location is not supposed to be reachable: the hint; /// turns such code path into undefined behavior. On compilers that don't; /// support such hints, prints a reduced message instead and aborts the; /// program.; /// * When ""OFF"", a builtin_trap is emitted instead of an; // optimizer hint or printing a reduced message.; ///; /// Use this instead of assert(0). It conveys intent more clearly, suppresses; /// diagnostics for unreachable code paths, and allows compilers to omit; /// unnecessary code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:811,Testability,assert,assert,811,"/// Marks that the current location is not supposed to be reachable.; /// In !NDEBUG builds, prints the message and location info to stderr.; /// In NDEBUG builds, if the platform does not support a builtin unreachable; /// then we call an internal LLVM runtime function. Otherwise the behavior is; /// controlled by the CMake flag; /// -DLLVM_UNREACHABLE_OPTIMIZE; /// * When ""ON"" (default) llvm_unreachable() becomes an optimizer hint; /// that the current location is not supposed to be reachable: the hint; /// turns such code path into undefined behavior. On compilers that don't; /// support such hints, prints a reduced message instead and aborts the; /// program.; /// * When ""OFF"", a builtin_trap is emitted instead of an; // optimizer hint or printing a reduced message.; ///; /// Use this instead of assert(0). It conveys intent more clearly, suppresses; /// diagnostics for unreachable code paths, and allows compilers to omit; /// unnecessary code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:845,Usability,clear,clearly,845,"/// Marks that the current location is not supposed to be reachable.; /// In !NDEBUG builds, prints the message and location info to stderr.; /// In NDEBUG builds, if the platform does not support a builtin unreachable; /// then we call an internal LLVM runtime function. Otherwise the behavior is; /// controlled by the CMake flag; /// -DLLVM_UNREACHABLE_OPTIMIZE; /// * When ""ON"" (default) llvm_unreachable() becomes an optimizer hint; /// that the current location is not supposed to be reachable: the hint; /// turns such code path into undefined behavior. On compilers that don't; /// support such hints, prints a reduced message instead and aborts the; /// program.; /// * When ""OFF"", a builtin_trap is emitted instead of an; // optimizer hint or printing a reduced message.; ///; /// Use this instead of assert(0). It conveys intent more clearly, suppresses; /// diagnostics for unreachable code paths, and allows compilers to omit; /// unnecessary code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:20,Availability,Error,ErrorOr,20,"//===- llvm/Support/ErrorOr.h - Error Smart Pointer -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; ///; /// Provides ErrorOr<T> smart pointer.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:32,Availability,Error,Error,32,"//===- llvm/Support/ErrorOr.h - Error Smart Pointer -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; ///; /// Provides ErrorOr<T> smart pointer.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:410,Availability,Error,ErrorOr,410,"//===- llvm/Support/ErrorOr.h - Error Smart Pointer -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; ///; /// Provides ErrorOr<T> smart pointer.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:25,Availability,error,error,25,"/// Represents either an error or a value T.; ///; /// ErrorOr<T> is a pointer-like class that represents the result of an; /// operation. The result is either an error, or a value of type T. This is; /// designed to emulate the usage of returning a pointer where nullptr indicates; /// failure. However instead of just knowing that the operation failed, we also; /// have an error_code and optional user data that describes why it failed.; ///; /// It is used like the following.; /// \code; /// ErrorOr<Buffer> getBuffer();; ///; /// auto buffer = getBuffer();; /// if (error_code ec = buffer.getError()); /// return ec;; /// buffer->write(""adena"");; /// \endcode; ///; ///; /// Implicit conversion to bool returns true if there is a usable value. The; /// unary * and -> operators provide pointer like access to the value. Accessing; /// the value when there is an error has undefined behavior.; ///; /// When T is a reference type the behavior is slightly different. The reference; /// is held in a std::reference_wrapper<std::remove_reference<T>::type>, and; /// there is special handling to make operator -> work as if T was not a; /// reference.; ///; /// T cannot be a rvalue reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:55,Availability,Error,ErrorOr,55,"/// Represents either an error or a value T.; ///; /// ErrorOr<T> is a pointer-like class that represents the result of an; /// operation. The result is either an error, or a value of type T. This is; /// designed to emulate the usage of returning a pointer where nullptr indicates; /// failure. However instead of just knowing that the operation failed, we also; /// have an error_code and optional user data that describes why it failed.; ///; /// It is used like the following.; /// \code; /// ErrorOr<Buffer> getBuffer();; ///; /// auto buffer = getBuffer();; /// if (error_code ec = buffer.getError()); /// return ec;; /// buffer->write(""adena"");; /// \endcode; ///; ///; /// Implicit conversion to bool returns true if there is a usable value. The; /// unary * and -> operators provide pointer like access to the value. Accessing; /// the value when there is an error has undefined behavior.; ///; /// When T is a reference type the behavior is slightly different. The reference; /// is held in a std::reference_wrapper<std::remove_reference<T>::type>, and; /// there is special handling to make operator -> work as if T was not a; /// reference.; ///; /// T cannot be a rvalue reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:163,Availability,error,error,163,"/// Represents either an error or a value T.; ///; /// ErrorOr<T> is a pointer-like class that represents the result of an; /// operation. The result is either an error, or a value of type T. This is; /// designed to emulate the usage of returning a pointer where nullptr indicates; /// failure. However instead of just knowing that the operation failed, we also; /// have an error_code and optional user data that describes why it failed.; ///; /// It is used like the following.; /// \code; /// ErrorOr<Buffer> getBuffer();; ///; /// auto buffer = getBuffer();; /// if (error_code ec = buffer.getError()); /// return ec;; /// buffer->write(""adena"");; /// \endcode; ///; ///; /// Implicit conversion to bool returns true if there is a usable value. The; /// unary * and -> operators provide pointer like access to the value. Accessing; /// the value when there is an error has undefined behavior.; ///; /// When T is a reference type the behavior is slightly different. The reference; /// is held in a std::reference_wrapper<std::remove_reference<T>::type>, and; /// there is special handling to make operator -> work as if T was not a; /// reference.; ///; /// T cannot be a rvalue reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:287,Availability,failure,failure,287,"/// Represents either an error or a value T.; ///; /// ErrorOr<T> is a pointer-like class that represents the result of an; /// operation. The result is either an error, or a value of type T. This is; /// designed to emulate the usage of returning a pointer where nullptr indicates; /// failure. However instead of just knowing that the operation failed, we also; /// have an error_code and optional user data that describes why it failed.; ///; /// It is used like the following.; /// \code; /// ErrorOr<Buffer> getBuffer();; ///; /// auto buffer = getBuffer();; /// if (error_code ec = buffer.getError()); /// return ec;; /// buffer->write(""adena"");; /// \endcode; ///; ///; /// Implicit conversion to bool returns true if there is a usable value. The; /// unary * and -> operators provide pointer like access to the value. Accessing; /// the value when there is an error has undefined behavior.; ///; /// When T is a reference type the behavior is slightly different. The reference; /// is held in a std::reference_wrapper<std::remove_reference<T>::type>, and; /// there is special handling to make operator -> work as if T was not a; /// reference.; ///; /// T cannot be a rvalue reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:497,Availability,Error,ErrorOr,497,"/// Represents either an error or a value T.; ///; /// ErrorOr<T> is a pointer-like class that represents the result of an; /// operation. The result is either an error, or a value of type T. This is; /// designed to emulate the usage of returning a pointer where nullptr indicates; /// failure. However instead of just knowing that the operation failed, we also; /// have an error_code and optional user data that describes why it failed.; ///; /// It is used like the following.; /// \code; /// ErrorOr<Buffer> getBuffer();; ///; /// auto buffer = getBuffer();; /// if (error_code ec = buffer.getError()); /// return ec;; /// buffer->write(""adena"");; /// \endcode; ///; ///; /// Implicit conversion to bool returns true if there is a usable value. The; /// unary * and -> operators provide pointer like access to the value. Accessing; /// the value when there is an error has undefined behavior.; ///; /// When T is a reference type the behavior is slightly different. The reference; /// is held in a std::reference_wrapper<std::remove_reference<T>::type>, and; /// there is special handling to make operator -> work as if T was not a; /// reference.; ///; /// T cannot be a rvalue reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:868,Availability,error,error,868,"/// Represents either an error or a value T.; ///; /// ErrorOr<T> is a pointer-like class that represents the result of an; /// operation. The result is either an error, or a value of type T. This is; /// designed to emulate the usage of returning a pointer where nullptr indicates; /// failure. However instead of just knowing that the operation failed, we also; /// have an error_code and optional user data that describes why it failed.; ///; /// It is used like the following.; /// \code; /// ErrorOr<Buffer> getBuffer();; ///; /// auto buffer = getBuffer();; /// if (error_code ec = buffer.getError()); /// return ec;; /// buffer->write(""adena"");; /// \endcode; ///; ///; /// Implicit conversion to bool returns true if there is a usable value. The; /// unary * and -> operators provide pointer like access to the value. Accessing; /// the value when there is an error has undefined behavior.; ///; /// When T is a reference type the behavior is slightly different. The reference; /// is held in a std::reference_wrapper<std::remove_reference<T>::type>, and; /// there is special handling to make operator -> work as if T was not a; /// reference.; ///; /// T cannot be a rvalue reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:805,Security,access,access,805,"/// Represents either an error or a value T.; ///; /// ErrorOr<T> is a pointer-like class that represents the result of an; /// operation. The result is either an error, or a value of type T. This is; /// designed to emulate the usage of returning a pointer where nullptr indicates; /// failure. However instead of just knowing that the operation failed, we also; /// have an error_code and optional user data that describes why it failed.; ///; /// It is used like the following.; /// \code; /// ErrorOr<Buffer> getBuffer();; ///; /// auto buffer = getBuffer();; /// if (error_code ec = buffer.getError()); /// return ec;; /// buffer->write(""adena"");; /// \endcode; ///; ///; /// Implicit conversion to bool returns true if there is a usable value. The; /// unary * and -> operators provide pointer like access to the value. Accessing; /// the value when there is an error has undefined behavior.; ///; /// When T is a reference type the behavior is slightly different. The reference; /// is held in a std::reference_wrapper<std::remove_reference<T>::type>, and; /// there is special handling to make operator -> work as if T was not a; /// reference.; ///; /// T cannot be a rvalue reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:826,Security,Access,Accessing,826,"/// Represents either an error or a value T.; ///; /// ErrorOr<T> is a pointer-like class that represents the result of an; /// operation. The result is either an error, or a value of type T. This is; /// designed to emulate the usage of returning a pointer where nullptr indicates; /// failure. However instead of just knowing that the operation failed, we also; /// have an error_code and optional user data that describes why it failed.; ///; /// It is used like the following.; /// \code; /// ErrorOr<Buffer> getBuffer();; ///; /// auto buffer = getBuffer();; /// if (error_code ec = buffer.getError()); /// return ec;; /// buffer->write(""adena"");; /// \endcode; ///; ///; /// Implicit conversion to bool returns true if there is a usable value. The; /// unary * and -> operators provide pointer like access to the value. Accessing; /// the value when there is an error has undefined behavior.; ///; /// When T is a reference type the behavior is slightly different. The reference; /// is held in a std::reference_wrapper<std::remove_reference<T>::type>, and; /// there is special handling to make operator -> work as if T was not a; /// reference.; ///; /// T cannot be a rvalue reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:736,Usability,usab,usable,736,"/// Represents either an error or a value T.; ///; /// ErrorOr<T> is a pointer-like class that represents the result of an; /// operation. The result is either an error, or a value of type T. This is; /// designed to emulate the usage of returning a pointer where nullptr indicates; /// failure. However instead of just knowing that the operation failed, we also; /// have an error_code and optional user data that describes why it failed.; ///; /// It is used like the following.; /// \code; /// ErrorOr<Buffer> getBuffer();; ///; /// auto buffer = getBuffer();; /// if (error_code ec = buffer.getError()); /// return ec;; /// buffer->write(""adena"");; /// \endcode; ///; ///; /// Implicit conversion to bool returns true if there is a usable value. The; /// unary * and -> operators provide pointer like access to the value. Accessing; /// the value when there is an error has undefined behavior.; ///; /// When T is a reference type the behavior is slightly different. The reference; /// is held in a std::reference_wrapper<std::remove_reference<T>::type>, and; /// there is special handling to make operator -> work as if T was not a; /// reference.; ///; /// T cannot be a rvalue reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:32,Availability,error,error,32,/// Return false if there is an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:15,Availability,error,error,15,// Get other's error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:15,Availability,error,error,15,// Get other's error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExitCodes.h:131,Availability,error,error,131,"// <sysexits.h> does not exist on z/OS and Windows. The only value used in LLVM; // is EX_IOERR, which is used to signal a special error condition (broken pipe).; // Define the macro with its usual value from BSD systems, which is chosen to; // not clash with more standard exit codes like 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ExitCodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExitCodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h:973,Integrability,inject,injected,973,"//===-- llvm/Support/ExtensibleRTTI.h - ExtensibleRTTI support --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; //; // Defines an extensible RTTI mechanism designed to work with Casting.h.; //; // Extensible RTTI differs from LLVM's primary RTTI mechanism (see; // llvm.org/docs/HowToSetUpLLVMStyleRTTI.html) by supporting open type; // hierarchies, where new types can be added from outside libraries without; // needing to change existing code. LLVM's primary RTTI mechanism should be; // preferred where possible, but where open hierarchies are needed this system; // can be used.; //; // The RTTIRoot class defines methods for comparing type ids. Implementations; // of these methods can be injected into new classes using the RTTIExtends; // class template.; //; // E.g.; //; // @code{.cpp}; // class MyBaseClass : public RTTIExtends<MyBaseClass, RTTIRoot> {; // public:; // static char ID;; // virtual void foo() = 0;; // };; //; // class MyDerivedClass1 : public RTTIExtends<MyDerivedClass1, MyBaseClass> {; // public:; // static char ID;; // void foo() override {}; // };; //; // class MyDerivedClass2 : public RTTIExtends<MyDerivedClass2, MyBaseClass> {; // public:; // static char ID;; // void foo() override {}; // };; //; // char MyBaseClass::ID = 0;; // char MyDerivedClass1::ID = 0;; // char MyDerivedClass2:: ID = 0;; //; // void fn() {; // std::unique_ptr<MyBaseClass> B = llvm::make_unique<MyDerivedClass1>();; // llvm::outs() << isa<MyBaseClass>(B) << ""\n""; // Outputs ""1"".; // llvm::outs() << isa<MyDerivedClass1>(B) << ""\n""; // Outputs ""1"".; // llvm::outs() << isa<MyDerivedClass2>(B) << ""\n""; // Outputs ""0'.; // }; //; // @endcode; //; //===------------------------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h:973,Security,inject,injected,973,"//===-- llvm/Support/ExtensibleRTTI.h - ExtensibleRTTI support --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; //; // Defines an extensible RTTI mechanism designed to work with Casting.h.; //; // Extensible RTTI differs from LLVM's primary RTTI mechanism (see; // llvm.org/docs/HowToSetUpLLVMStyleRTTI.html) by supporting open type; // hierarchies, where new types can be added from outside libraries without; // needing to change existing code. LLVM's primary RTTI mechanism should be; // preferred where possible, but where open hierarchies are needed this system; // can be used.; //; // The RTTIRoot class defines methods for comparing type ids. Implementations; // of these methods can be injected into new classes using the RTTIExtends; // class template.; //; // E.g.; //; // @code{.cpp}; // class MyBaseClass : public RTTIExtends<MyBaseClass, RTTIRoot> {; // public:; // static char ID;; // virtual void foo() = 0;; // };; //; // class MyDerivedClass1 : public RTTIExtends<MyDerivedClass1, MyBaseClass> {; // public:; // static char ID;; // void foo() override {}; // };; //; // class MyDerivedClass2 : public RTTIExtends<MyDerivedClass2, MyBaseClass> {; // public:; // static char ID;; // void foo() override {}; // };; //; // char MyBaseClass::ID = 0;; // char MyDerivedClass1::ID = 0;; // char MyDerivedClass2:: ID = 0;; //; // void fn() {; // std::unique_ptr<MyBaseClass> B = llvm::make_unique<MyDerivedClass1>();; // llvm::outs() << isa<MyBaseClass>(B) << ""\n""; // Outputs ""1"".; // llvm::outs() << isa<MyDerivedClass1>(B) << ""\n""; // Outputs ""1"".; // llvm::outs() << isa<MyDerivedClass2>(B) << ""\n""; // Outputs ""0'.; // }; //; // @endcode; //; //===------------------------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h:4,Modifiability,Inherit,Inheritance,4,"/// Inheritance utility for extensible RTTI.; ///; /// Supports single inheritance only: A class can only have one; /// ExtensibleRTTI-parent (i.e. a parent for which the isa<> test will work),; /// though it can have many non-ExtensibleRTTI parents.; ///; /// RTTIExtents uses CRTP so the first template argument to RTTIExtends is the; /// newly introduced type, and the *second* argument is the parent class.; ///; /// class MyType : public RTTIExtends<MyType, RTTIRoot> {; /// public:; /// static char ID;; /// };; ///; /// class MyDerivedType : public RTTIExtends<MyDerivedType, MyType> {; /// public:; /// static char ID;; /// };; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h:71,Modifiability,inherit,inheritance,71,"/// Inheritance utility for extensible RTTI.; ///; /// Supports single inheritance only: A class can only have one; /// ExtensibleRTTI-parent (i.e. a parent for which the isa<> test will work),; /// though it can have many non-ExtensibleRTTI parents.; ///; /// RTTIExtents uses CRTP so the first template argument to RTTIExtends is the; /// newly introduced type, and the *second* argument is the parent class.; ///; /// class MyType : public RTTIExtends<MyType, RTTIRoot> {; /// public:; /// static char ID;; /// };; ///; /// class MyDerivedType : public RTTIExtends<MyDerivedType, MyType> {; /// public:; /// static char ID;; /// };; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h:177,Testability,test,test,177,"/// Inheritance utility for extensible RTTI.; ///; /// Supports single inheritance only: A class can only have one; /// ExtensibleRTTI-parent (i.e. a parent for which the isa<> test will work),; /// though it can have many non-ExtensibleRTTI parents.; ///; /// RTTIExtents uses CRTP so the first template argument to RTTIExtends is the; /// newly introduced type, and the *second* argument is the parent class.; ///; /// class MyType : public RTTIExtends<MyType, RTTIRoot> {; /// public:; /// static char ID;; /// };; ///; /// class MyDerivedType : public RTTIExtends<MyDerivedType, MyType> {; /// public:; /// static char ID;; /// };; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h:3,Modifiability,Inherit,Inherit,3,// Inherit constructors from ParentT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:4,Integrability,Synchroniz,Synchronizes,4,/// Synchronizes access to internal data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:17,Security,access,access,17,/// Synchronizes access to internal data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:147,Security,access,accessed,147,"/// Captures file system interaction and generates data to be later replayed; /// with the RedirectingFileSystem.; ///; /// For any file that gets accessed we eventually create:; /// - a copy of the file inside Root; /// - a record in RedirectingFileSystem mapping that maps:; /// current real path -> path to the copy in Root; ///; /// That intent is that later when the mapping is used by RedirectingFileSystem; /// it simulates the state of FS that we collected.; ///; /// We generate file copies and mapping lazily - see writeMapping and copyFiles.; /// We don't try to capture the state of the file at the exact time when it's; /// accessed. Files might get changed, deleted ... we record only the ""final""; /// state.; ///; /// In order to preserve the relative topology of files we use their real paths; /// as relative paths inside of the Root.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:637,Security,access,accessed,637,"/// Captures file system interaction and generates data to be later replayed; /// with the RedirectingFileSystem.; ///; /// For any file that gets accessed we eventually create:; /// - a copy of the file inside Root; /// - a record in RedirectingFileSystem mapping that maps:; /// current real path -> path to the copy in Root; ///; /// That intent is that later when the mapping is used by RedirectingFileSystem; /// it simulates the state of FS that we collected.; ///; /// We generate file copies and mapping lazily - see writeMapping and copyFiles.; /// We don't try to capture the state of the file at the exact time when it's; /// accessed. Files might get changed, deleted ... we record only the ""final""; /// state.; ///; /// In order to preserve the relative topology of files we use their real paths; /// as relative paths inside of the Root.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:41,Testability,log,logic,41,/// Helper utility that encapsulates the logic for canonicalizing a virtual; /// path and a path to copy from.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:126,Availability,redundant,redundant,126,"/// Replace with a (mostly) real path, or don't modify. Resolves symlinks; /// in the directory, using \a CachedDirs to avoid redundant lookups, but; /// leaves the filename as a possible symlink.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:106,Performance,Cache,CachedDirs,106,"/// Replace with a (mostly) real path, or don't modify. Resolves symlinks; /// in the directory, using \a CachedDirs to avoid redundant lookups, but; /// leaves the filename as a possible symlink.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:120,Safety,avoid,avoid,120,"/// Replace with a (mostly) real path, or don't modify. Resolves symlinks; /// in the directory, using \a CachedDirs to avoid redundant lookups, but; /// leaves the filename as a possible symlink.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:126,Safety,redund,redundant,126,"/// Replace with a (mostly) real path, or don't modify. Resolves symlinks; /// in the directory, using \a CachedDirs to avoid redundant lookups, but; /// leaves the filename as a possible symlink.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:96,Safety,abort,abort,96,"/// Copy the files into the root directory.; ///; /// When StopOnError is true (the default) we abort as soon as one file; /// cannot be copied. This is relatively common, for example when a file was; /// removed after it was added to the mapping.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h:57,Security,access,accessed,57,/// Create a VFS that uses \p Collector to collect files accessed via \p; /// BaseFS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h:28,Integrability,interface,interface,28,"/// FileOutputBuffer - This interface provides simple way to create an in-memory; /// buffer which will be written to a file. During the lifetime of these; /// objects, the content or existence of the specified file is undefined. That; /// is, creating an OutputBuffer for a file may immediately remove the file.; /// If the FileOutputBuffer is committed, the target file's content will become; /// the buffer content at the time of the commit. If the FileOutputBuffer is; /// not committed, the file will be deleted in the FileOutputBuffer destructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h:47,Usability,simpl,simple,47,"/// FileOutputBuffer - This interface provides simple way to create an in-memory; /// buffer which will be written to a file. During the lifetime of these; /// objects, the content or existence of the specified file is undefined. That; /// is, creating an OutputBuffer for a file may immediately remove the file.; /// If the FileOutputBuffer is committed, the target file's content will become; /// the buffer content at the time of the commit. If the FileOutputBuffer is; /// not committed, the file will be deleted in the FileOutputBuffer destructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h:455,Availability,error,error,455,"/// Factory method to create an OutputBuffer object which manages a read/write; /// buffer of the specified size. When committed, the buffer will be written; /// to the file at the specified path.; ///; /// When F_modify is specified and \p FilePath refers to an existing on-disk; /// file \p Size may be set to -1, in which case the entire file is used.; /// Otherwise, the file shrinks or grows as necessary based on the value of; /// \p Size. It is an error to specify F_modify and Size=-1 if \p FilePath; /// does not exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h:104,Availability,alive,alive,104,/// This removes the temporary file (unless it already was committed); /// but keeps the memory mapping alive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:745,Availability,error,error,745,"//===- llvm/Support/FileSystem.h - File System OS Concept -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the llvm::sys::fs namespace. It is designed after; // TR2/boost filesystem (v3), but modified to remove exception handling and the; // path class.; //; // All functions return an error_code and their actual work via the last out; // argument. The out argument is defined if and only if errc::success is; // returned. A function may return any error code in the generic or system; // category. However, they shall be equivalent to any error conditions listed; // in each functions respective documentation if the condition applies. [ note:; // this does not guarantee that error_code will be in the set of explicitly; // listed codes, but it does guarantee that if any of the explicitly listed; // errors occur, the correct error_code will be used ]. All functions may; // return errc::not_enough_memory if there is not enough memory to complete the; // operation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:836,Availability,error,error,836,"//===- llvm/Support/FileSystem.h - File System OS Concept -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the llvm::sys::fs namespace. It is designed after; // TR2/boost filesystem (v3), but modified to remove exception handling and the; // path class.; //; // All functions return an error_code and their actual work via the last out; // argument. The out argument is defined if and only if errc::success is; // returned. A function may return any error code in the generic or system; // category. However, they shall be equivalent to any error conditions listed; // in each functions respective documentation if the condition applies. [ note:; // this does not guarantee that error_code will be in the set of explicitly; // listed codes, but it does guarantee that if any of the explicitly listed; // errors occur, the correct error_code will be used ]. All functions may; // return errc::not_enough_memory if there is not enough memory to complete the; // operation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:1099,Availability,error,errors,1099,"//===- llvm/Support/FileSystem.h - File System OS Concept -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the llvm::sys::fs namespace. It is designed after; // TR2/boost filesystem (v3), but modified to remove exception handling and the; // path class.; //; // All functions return an error_code and their actual work via the last out; // argument. The out argument is defined if and only if errc::success is; // returned. A function may return any error code in the generic or system; // category. However, they shall be equivalent to any error conditions listed; // in each functions respective documentation if the condition applies. [ note:; // this does not guarantee that error_code will be in the set of explicitly; // listed codes, but it does guarantee that if any of the explicitly listed; // errors occur, the correct error_code will be used ]. All functions may; // return errc::not_enough_memory if there is not enough memory to complete the; // operation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:3,Safety,Avoid,Avoid,3,// Avoid UB by explicitly truncating the (unsigned) ~ result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:13,Security,access,access,13,/// The file access time as reported from the underlying file system.; ///; /// Also see comments on \c getLastModificationTime() related to the precision; /// of the returned value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:242,Availability,error,error,242,"/// Create all the non-existent directories in path.; ///; /// @param path Directories to create.; /// @returns errc::success if is_directory(path), otherwise a platform; /// specific error_code. If IgnoreExisting is false, also returns; /// error if the directory already existed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:221,Availability,error,error,221,"/// Create the directory in path.; ///; /// @param path Directory to create.; /// @returns errc::success if is_directory(path), otherwise a platform; /// specific error_code. If IgnoreExisting is false, also returns; /// error if the directory already existed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:90,Integrability,depend,depending,90,"/// Create a link from \a from to \a to.; ///; /// The link may be a soft or a hard link, depending on the platform. The caller; /// may not assume which one. Currently on windows it creates a hard link since; /// soft links require extra privileges. On unix, it creates a soft link since; /// hard links don't work on SMB file systems.; ///; /// @param to The path to hard link to.; /// @param from The path to hard link from. This is created.; /// @returns errc::success if the link was created, otherwise a platform; /// specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:59,Availability,error,error,59,"/// Create a hard link from \a from to \a to, or return an error.; ///; /// @param to The path to hard link to.; /// @param from The path to hard link from. This is created.; /// @returns errc::success if the link was created, otherwise a platform; /// specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:186,Availability,error,error,186,"/// Remove path. Equivalent to POSIX remove().; ///; /// @param path Input path.; /// @returns errc::success if path has been removed or didn't exist, otherwise a; /// platform-specific error code. If IgnoreNonExisting is false, also; /// returns error if the file didn't exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:247,Availability,error,error,247,"/// Remove path. Equivalent to POSIX remove().; ///; /// @param path Input path.; /// @returns errc::success if path has been removed or didn't exist, otherwise a; /// platform-specific error code. If IgnoreNonExisting is false, also; /// returns error if the file didn't exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:175,Availability,error,error,175,"/// Recursively delete a directory.; ///; /// @param path Input path.; /// @returns errc::success if path has been removed or didn't exist, otherwise a; /// platform-specific error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:236,Modifiability,extend,extends,236,"/// Resize \p FD to \p Size before mapping \a mapped_file_region::readwrite. On; /// non-Windows, this calls \a resize_file(). On Windows, this is a no-op,; /// since the subsequent mapping (via \c CreateFileMapping) automatically; /// extends the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:19,Security,hash,hash,19,"/// Compute an MD5 hash of a file's contents.; ///; /// @param FD Input file descriptor.; /// @returns An MD5Result with the hash computed, if successful, otherwise a; /// std::error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:125,Security,hash,hash,125,"/// Compute an MD5 hash of a file's contents.; ///; /// @param FD Input file descriptor.; /// @returns An MD5Result with the hash computed, if successful, otherwise a; /// std::error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:20,Security,access,accessed,20,"/// Can the file be accessed?; ///; /// @param Path Input path.; /// @returns errc::success if the path can be accessed, otherwise a; /// platform-specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:111,Security,access,accessed,111,"/// Can the file be accessed?; ///; /// @param Path Input path.; /// @returns errc::success if the path can be accessed, otherwise a; /// platform-specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:128,Testability,assert,assert,128,"/// Do file_status's represent the same thing?; ///; /// @param A Input file_status.; /// @param B Input file_status.; ///; /// assert(status_known(A) || status_known(B));; ///; /// @returns True if A and B both represent the same file system entity, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:49,Testability,assert,assert,49,"/// Do paths represent the same thing?; ///; /// assert(status_known(A) || status_known(B));; ///; /// @param A Input path A.; /// @param B Input path B.; /// @param result Set to true if stat(A) and stat(B) have the same device and; /// inode (or equivalent).; /// @returns errc::success if result has been successfully set, otherwise a; /// platform-specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:95,Availability,error,error,95,/// Simpler version of equivalent for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Usability,Simpl,Simpler,4,/// Simpler version of equivalent for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:93,Availability,error,error,93,/// Simpler version of is_local for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Usability,Simpl,Simpler,4,/// Simpler version of is_local for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:127,Availability,error,error,127,/// Simpler version of is_local accepting an open file descriptor for; /// clients that don't need to differentiate between an error and false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Usability,Simpl,Simpler,4,/// Simpler version of is_local accepting an open file descriptor for; /// clients that don't need to differentiate between an error and false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:97,Availability,error,error,97,/// Simpler version of is_directory for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Usability,Simpl,Simpler,4,/// Simpler version of is_directory for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:100,Availability,error,error,100,/// Simpler version of is_regular_file for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Usability,Simpl,Simpler,4,/// Simpler version of is_regular_file for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:100,Availability,error,error,100,/// Simpler version of is_symlink_file for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Usability,Simpl,Simpler,4,/// Simpler version of is_symlink_file for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:52,Availability,avail,available,52,/// A version for when a file descriptor is already available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:52,Availability,avail,available,52,/// A version for when a file descriptor is already available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:27,Availability,mask,mask,27,/// Get file creation mode mask of the process.; ///; /// @returns Mask reported by umask(2); /// @note There is no umask on Windows. This function returns 0 always; /// on Windows. This function does not return an error_code because; /// umask(2) never fails. It is not thread safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:67,Availability,Mask,Mask,67,/// Get file creation mode mask of the process.; ///; /// @returns Mask reported by umask(2); /// @note There is no umask on Windows. This function returns 0 always; /// on Windows. This function does not return an error_code because; /// umask(2) never fails. It is not thread safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:278,Safety,safe,safe,278,/// Get file creation mode mask of the process.; ///; /// @returns Mask reported by umask(2); /// @note There is no umask on Windows. This function returns 0 always; /// on Windows. This function does not return an error_code because; /// umask(2) never fails. It is not thread safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:247,Availability,avail,available,247,"/// Set the file modification and access time.; ///; /// @returns errc::success if the file times were successfully set, otherwise a; /// platform-specific error_code or errc::function_not_supported on; /// platforms where the functionality isn't available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:34,Security,access,access,34,"/// Set the file modification and access time.; ///; /// @returns errc::success if the file times were successfully set, otherwise a; /// platform-specific error_code or errc::function_not_supported on; /// platforms where the functionality isn't available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:57,Security,access,access,57,/// Simpler version that sets both file modification and access time to the same; /// time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Usability,Simpl,Simpler,4,/// Simpler version that sets both file modification and access time to the same; /// time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:14,Availability,avail,available,14,/// Is status available?; ///; /// @param s Input file status.; /// @returns True if status() != status_error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:14,Availability,avail,available,14,"/// Is status available?; ///; /// @param path Input path.; /// @param result Set to true if status() != status_error.; /// @returns errc::success if result has been successfully set, otherwise a; /// platform-specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:28,Deployability,update,updated,28,/// Force files Atime to be updated on access. Only makes a difference on; /// Windows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:39,Security,access,access,39,/// Force files Atime to be updated on access. Only makes a difference on; /// Windows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Usability,Simpl,Simpler,4,/// Simpler version for clients that don't want an open file. An empty; /// file will still be created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:228,Availability,error,errors,228,/// Represents a temporary file.; ///; /// The temporary file must be eventually discarded or given a final name and; /// kept.; ///; /// The destructor doesn't implicitly discard because there is no way to; /// properly handle errors in a destructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:60,Energy Efficiency,schedul,schedules,60,/// This creates a temporary file with createUniqueFile and schedules it for; /// deletion with sys::RemoveFileOnSignal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Usability,Simpl,Simpler,4,/// Simpler version for clients that don't want an open file. An empty; /// file will still be created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:82,Performance,race condition,race conditions,82,"/// Get a unique name, not currently exisiting in the filesystem. Subject; /// to race conditions, prefer to use createUniqueFile instead.; ///; /// Similar to createUniqueFile, but instead of creating a file only; /// checks if it exists. This function is subject to race conditions, if you; /// want to use the returned name to actually create a file, use; /// createUniqueFile instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:268,Performance,race condition,race conditions,268,"/// Get a unique name, not currently exisiting in the filesystem. Subject; /// to race conditions, prefer to use createUniqueFile instead.; ///; /// Similar to createUniqueFile, but instead of creating a file only; /// checks if it exists. This function is subject to race conditions, if you; /// want to use the returned name to actually create a file, use; /// createUniqueFile instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:97,Performance,race condition,race conditions,97,"/// Get a unique temporary file name, not currently exisiting in the; /// filesystem. Subject to race conditions, prefer to use createTemporaryFile; /// instead.; ///; /// Similar to createTemporaryFile, but instead of creating a file only; /// checks if it exists. This function is subject to race conditions, if you; /// want to use the returned name to actually create a file, use; /// createTemporaryFile instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:294,Performance,race condition,race conditions,294,"/// Get a unique temporary file name, not currently exisiting in the; /// filesystem. Subject to race conditions, prefer to use createTemporaryFile; /// instead.; ///; /// Similar to createTemporaryFile, but instead of creating a file only; /// checks if it exists. This function is subject to race conditions, if you; /// want to use the returned name to actually create a file, use; /// createTemporaryFile instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:65,Security,access,access,65,"/// @brief Opens a file with the specified creation disposition, access mode,; /// and flags and returns a file descriptor.; ///; /// The caller is responsible for closing the file descriptor once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param ResultFD If the file could be opened successfully, its descriptor; /// is stored in this location. Otherwise, this is set to -1.; /// @param Disp Value specifying the existing-file behavior.; /// @param Access Value specifying whether to open the file in read, write, or; /// read-write mode.; /// @param Flags Additional flags.; /// @param Mode The access permissions of the file, represented in octal.; /// @returns errc::success if \a Name has been opened, otherwise a; /// platform-specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:518,Security,Access,Access,518,"/// @brief Opens a file with the specified creation disposition, access mode,; /// and flags and returns a file descriptor.; ///; /// The caller is responsible for closing the file descriptor once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param ResultFD If the file could be opened successfully, its descriptor; /// is stored in this location. Otherwise, this is set to -1.; /// @param Disp Value specifying the existing-file behavior.; /// @param Access Value specifying whether to open the file in read, write, or; /// read-write mode.; /// @param Flags Additional flags.; /// @param Mode The access permissions of the file, represented in octal.; /// @returns errc::success if \a Name has been opened, otherwise a; /// platform-specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:665,Security,access,access,665,"/// @brief Opens a file with the specified creation disposition, access mode,; /// and flags and returns a file descriptor.; ///; /// The caller is responsible for closing the file descriptor once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param ResultFD If the file could be opened successfully, its descriptor; /// is stored in this location. Otherwise, this is set to -1.; /// @param Disp Value specifying the existing-file behavior.; /// @param Access Value specifying whether to open the file in read, write, or; /// read-write mode.; /// @param Flags Additional flags.; /// @param Mode The access permissions of the file, represented in octal.; /// @returns errc::success if \a Name has been opened, otherwise a; /// platform-specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:65,Security,access,access,65,"/// @brief Opens a file with the specified creation disposition, access mode,; /// and flags and returns a platform-specific file object.; ///; /// The caller is responsible for closing the file object once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param Disp Value specifying the existing-file behavior.; /// @param Access Value specifying whether to open the file in read, write, or; /// read-write mode.; /// @param Flags Additional flags.; /// @param Mode The access permissions of the file, represented in octal.; /// @returns errc::success if \a Name has been opened, otherwise a; /// platform-specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:387,Security,Access,Access,387,"/// @brief Opens a file with the specified creation disposition, access mode,; /// and flags and returns a platform-specific file object.; ///; /// The caller is responsible for closing the file object once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param Disp Value specifying the existing-file behavior.; /// @param Access Value specifying whether to open the file in read, write, or; /// read-write mode.; /// @param Flags Additional flags.; /// @param Mode The access permissions of the file, represented in octal.; /// @returns errc::success if \a Name has been opened, otherwise a; /// platform-specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:534,Security,access,access,534,"/// @brief Opens a file with the specified creation disposition, access mode,; /// and flags and returns a platform-specific file object.; ///; /// The caller is responsible for closing the file object once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param Disp Value specifying the existing-file behavior.; /// @param Access Value specifying whether to open the file in read, write, or; /// read-write mode.; /// @param Flags Additional flags.; /// @param Mode The access permissions of the file, represented in octal.; /// @returns errc::success if \a Name has been opened, otherwise a; /// platform-specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:38,Availability,error,error,38,"/// Return an open handle to standard error. On Unix, this is typically FD 2.; /// Returns kInvalidFile when the stream is closed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:196,Availability,error,error,196,"/// Reads \p Buf.size() bytes from \p FileHandle into \p Buf. Returns the number; /// of bytes actually read. On Unix, this is equivalent to `return ::read(FD,; /// Buf.data(), Buf.size())`, with error reporting. Returns 0 when reaching EOF.; ///; /// @param FileHandle File to read from.; /// @param Buf Buffer to read into.; /// @returns The number of bytes read, or error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:369,Availability,error,error,369,"/// Reads \p Buf.size() bytes from \p FileHandle into \p Buf. Returns the number; /// of bytes actually read. On Unix, this is equivalent to `return ::read(FD,; /// Buf.data(), Buf.size())`, with error reporting. Returns 0 when reaching EOF.; ///; /// @param FileHandle File to read from.; /// @param Buf Buffer to read into.; /// @returns The number of bytes read, or error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:155,Availability,Error,Error,155,"/// Reads from \p FileHandle until EOF, appending to \p Buffer in chunks of; /// size \p ChunkSize.; ///; /// This calls \a readNativeFile() in a loop. On Error, previous chunks that; /// were read successfully are left in \p Buffer and returned.; ///; /// Note: For reading the final chunk at EOF, \p Buffer's capacity needs extra; /// storage of \p ChunkSize.; ///; /// \param FileHandle File to read from.; /// \param Buffer Where to put the file content.; /// \param ChunkSize Size of chunks.; /// \returns The error if EOF was not found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:515,Availability,error,error,515,"/// Reads from \p FileHandle until EOF, appending to \p Buffer in chunks of; /// size \p ChunkSize.; ///; /// This calls \a readNativeFile() in a loop. On Error, previous chunks that; /// were read successfully are left in \p Buffer and returned.; ///; /// Note: For reading the final chunk at EOF, \p Buffer's capacity needs extra; /// storage of \p ChunkSize.; ///; /// \param FileHandle File to read from.; /// \param Buffer Where to put the file content.; /// \param ChunkSize Size of chunks.; /// \returns The error if EOF was not found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:101,Availability,avail,available,101,"/// Reads \p Buf.size() bytes from \p FileHandle at offset \p Offset into \p; /// Buf. If 'pread' is available, this will use that, otherwise it will use; /// 'lseek'. Returns the number of bytes actually read. Returns 0 when reaching; /// EOF.; ///; /// @param FileHandle File to read from.; /// @param Buf Buffer to read into.; /// @param Offset Offset into the file at which the read should occur.; /// @returns The number of bytes read, or error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:444,Availability,error,error,444,"/// Reads \p Buf.size() bytes from \p FileHandle at offset \p Offset into \p; /// Buf. If 'pread' is available, this will use that, otherwise it will use; /// 'lseek'. Returns the number of bytes actually read. Returns 0 when reaching; /// EOF.; ///; /// @param FileHandle File to read from.; /// @param Buf Buffer to read into.; /// @param Offset Offset into the file at which the read should occur.; /// @returns The number of bytes read, or error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:655,Security,access,access,655,"/// @brief Opens the file with the given name in a write-only or read-write; /// mode, returning its open file descriptor. If the file does not exist, it; /// is created.; ///; /// The caller is responsible for closing the file descriptor once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param ResultFD If the file could be opened successfully, its descriptor; /// is stored in this location. Otherwise, this is set to -1.; /// @param Flags Additional flags used to determine whether the file should be; /// opened in, for example, read-write or in write-only mode.; /// @param Mode The access permissions of the file, represented in octal.; /// @returns errc::success if \a Name has been opened, otherwise a; /// platform-specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:665,Availability,error,error,665,"/// @brief Opens the file with the given name in a write-only or read-write; /// mode, returning its open file descriptor. If the file does not exist, it; /// is created.; ///; /// The caller is responsible for closing the freeing the file once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param Flags Additional flags used to determine whether the file should be; /// opened in, for example, read-write or in write-only mode.; /// @param Mode The access permissions of the file, represented in octal.; /// @returns a platform-specific file descriptor if \a Name has been opened,; /// otherwise an error object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:515,Security,access,access,515,"/// @brief Opens the file with the given name in a write-only or read-write; /// mode, returning its open file descriptor. If the file does not exist, it; /// is created.; ///; /// The caller is responsible for closing the freeing the file once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param Flags Additional flags used to determine whether the file should be; /// opened in, for example, read-write or in write-only mode.; /// @param Mode The access permissions of the file, represented in octal.; /// @returns a platform-specific file descriptor if \a Name has been opened,; /// otherwise an error object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:655,Security,access,access,655,"/// @brief Opens the file with the given name in a write-only or read-write; /// mode, returning its open file descriptor. If the file does not exist, it; /// is created.; ///; /// The caller is responsible for closing the file descriptor once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param ResultFD If the file could be opened successfully, its descriptor; /// is stored in this location. Otherwise, this is set to -1.; /// @param Flags Additional flags used to determine whether the file should be; /// opened in, for example, read-write or in write-only mode.; /// @param Mode The access permissions of the file, represented in octal.; /// @returns errc::success if \a Name has been opened, otherwise a; /// platform-specific error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:665,Availability,error,error,665,"/// @brief Opens the file with the given name in a write-only or read-write; /// mode, returning its open file descriptor. If the file does not exist, it; /// is created.; ///; /// The caller is responsible for closing the freeing the file once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param Flags Additional flags used to determine whether the file should be; /// opened in, for example, read-write or in write-only mode.; /// @param Mode The access permissions of the file, represented in octal.; /// @returns a platform-specific file descriptor if \a Name has been opened,; /// otherwise an error object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:515,Security,access,access,515,"/// @brief Opens the file with the given name in a write-only or read-write; /// mode, returning its open file descriptor. If the file does not exist, it; /// is created.; ///; /// The caller is responsible for closing the freeing the file once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param Flags Additional flags used to determine whether the file should be; /// opened in, for example, read-write or in write-only mode.; /// @param Mode The access permissions of the file, represented in octal.; /// @returns a platform-specific file descriptor if \a Name has been opened,; /// otherwise an error object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:535,Availability,error,error,535,"/// @brief Opens the file with the given name in a read-only mode, returning; /// its open file descriptor.; ///; /// The caller is responsible for closing the freeing the file once they are; /// finished with it.; ///; /// @param Name The path of the file to open, relative or absolute.; /// @param RealPath If nonnull, extra work is done to determine the real path; /// of the opened file, and that path is stored in this; /// location.; /// @returns a platform-specific file descriptor if \a Name has been opened,; /// otherwise an error object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:675,Availability,failure,failure,675,"/// Try to locks the file during the specified time.; ///; /// This function implements advisory locking on entire file. If it returns; /// <em>errc::success</em>, the file is locked by the calling process. Until the; /// process unlocks the file by calling \a unlockFile, all attempts to lock the; /// same file will fail/block. The process that locked the file may assume that; /// none of other processes read or write this file, provided that all processes; /// lock the file prior to accessing its content.; ///; /// @param FD The descriptor representing the file to lock.; /// @param Timeout Time in milliseconds that the process should wait before; /// reporting lock failure. Zero value means try to get lock only; /// once.; /// @returns errc::success if lock is successfully obtained,; /// errc::no_lock_available if the file cannot be locked, or platform-specific; /// error_code otherwise.; ///; /// @note Care should be taken when using this function in a multithreaded; /// context, as it may not prevent other threads in the same process from; /// obtaining a lock on the same file, even if they are using a different file; /// descriptor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:590,Safety,Timeout,Timeout,590,"/// Try to locks the file during the specified time.; ///; /// This function implements advisory locking on entire file. If it returns; /// <em>errc::success</em>, the file is locked by the calling process. Until the; /// process unlocks the file by calling \a unlockFile, all attempts to lock the; /// same file will fail/block. The process that locked the file may assume that; /// none of other processes read or write this file, provided that all processes; /// lock the file prior to accessing its content.; ///; /// @param FD The descriptor representing the file to lock.; /// @param Timeout Time in milliseconds that the process should wait before; /// reporting lock failure. Zero value means try to get lock only; /// once.; /// @returns errc::success if lock is successfully obtained,; /// errc::no_lock_available if the file cannot be locked, or platform-specific; /// error_code otherwise.; ///; /// @note Care should be taken when using this function in a multithreaded; /// context, as it may not prevent other threads in the same process from; /// obtaining a lock on the same file, even if they are using a different file; /// descriptor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:489,Security,access,accessing,489,"/// Try to locks the file during the specified time.; ///; /// This function implements advisory locking on entire file. If it returns; /// <em>errc::success</em>, the file is locked by the calling process. Until the; /// process unlocks the file by calling \a unlockFile, all attempts to lock the; /// same file will fail/block. The process that locked the file may assume that; /// none of other processes read or write this file, provided that all processes; /// lock the file prior to accessing its content.; ///; /// @param FD The descriptor representing the file to lock.; /// @param Timeout Time in milliseconds that the process should wait before; /// reporting lock failure. Zero value means try to get lock only; /// once.; /// @returns errc::success if lock is successfully obtained,; /// errc::no_lock_available if the file cannot be locked, or platform-specific; /// error_code otherwise.; ///; /// @note Care should be taken when using this function in a multithreaded; /// context, as it may not prevent other threads in the same process from; /// obtaining a lock on the same file, even if they are using a different file; /// descriptor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:141,Deployability,release,released,141,/// Unlock the file.; ///; /// @param FD The descriptor representing the file to unlock.; /// @returns errc::success if lock is successfully released or platform-specific; /// error_code otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:98,Availability,error,error,98,"/// @brief Close the file object. This should be used instead of ::close for; /// portability. On error, the caller should assume the file is closed, as is; /// the case for Process::SafelyCloseFileDescriptor; ///; /// @param F On input, this is the file to close. On output, the file is; /// set to kInvalidFile.; ///; /// @returns An error code if closing the file failed. Typically, an error here; /// means that the filesystem may have failed to perform some buffered writes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:336,Availability,error,error,336,"/// @brief Close the file object. This should be used instead of ::close for; /// portability. On error, the caller should assume the file is closed, as is; /// the case for Process::SafelyCloseFileDescriptor; ///; /// @param F On input, this is the file to close. On output, the file is; /// set to kInvalidFile.; ///; /// @returns An error code if closing the file failed. Typically, an error here; /// means that the filesystem may have failed to perform some buffered writes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:389,Availability,error,error,389,"/// @brief Close the file object. This should be used instead of ::close for; /// portability. On error, the caller should assume the file is closed, as is; /// the case for Process::SafelyCloseFileDescriptor; ///; /// @param F On input, this is the file to close. On output, the file is; /// set to kInvalidFile.; ///; /// @returns An error code if closing the file failed. Typically, an error here; /// means that the filesystem may have failed to perform some buffered writes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:82,Modifiability,portab,portability,82,"/// @brief Close the file object. This should be used instead of ::close for; /// portability. On error, the caller should assume the file is closed, as is; /// the case for Process::SafelyCloseFileDescriptor; ///; /// @param F On input, this is the file to close. On output, the file is; /// set to kInvalidFile.; ///; /// @returns An error code if closing the file failed. Typically, an error here; /// means that the filesystem may have failed to perform some buffered writes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:450,Performance,perform,perform,450,"/// @brief Close the file object. This should be used instead of ::close for; /// portability. On error, the caller should assume the file is closed, as is; /// the case for Process::SafelyCloseFileDescriptor; ///; /// @param F On input, this is the file to close. On output, the file is; /// set to kInvalidFile.; ///; /// @returns An error code if closing the file failed. Typically, an error here; /// means that the filesystem may have failed to perform some buffered writes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:183,Safety,Safe,SafelyCloseFileDescriptor,183,"/// @brief Close the file object. This should be used instead of ::close for; /// portability. On error, the caller should assume the file is closed, as is; /// the case for Process::SafelyCloseFileDescriptor; ///; /// @param F On input, this is the file to close. On output, the file is; /// set to kInvalidFile.; ///; /// @returns An error code if closing the file failed. Typically, an error here; /// means that the filesystem may have failed to perform some buffered writes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:238,Availability,error,error,238,"/// @brief Change ownership of a file.; ///; /// @param Owner The owner of the file to change to.; /// @param Group The group of the file to change to.; /// @returns errc::success if successfully updated file ownership, otherwise an; /// error code is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:196,Deployability,update,updated,196,"/// @brief Change ownership of a file.; ///; /// @param Owner The owner of the file to change to.; /// @param Group The group of the file to change to.; /// @returns errc::success if successfully updated file ownership, otherwise an; /// error code is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:317,Availability,avail,available,317,"/// Get disk space usage information.; ///; /// Note: Users must be careful about ""Time Of Check, Time Of Use"" kind of bug.; /// Note: Windows reports results according to the quota allocated to the user.; ///; /// @param Path Input path.; /// @returns a space_info structure filled with the capacity, free, and; /// available space on the device \a Path is on. A platform specific error_code; /// is returned on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:413,Availability,error,error,413,"/// Get disk space usage information.; ///; /// Note: Users must be careful about ""Time Of Check, Time Of Use"" kind of bug.; /// Note: Windows reports results according to the quota allocated to the user.; ///; /// @param Path Input path.; /// @returns a space_info structure filled with the capacity, free, and; /// available space on the device \a Path is on. A platform specific error_code; /// is returned on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:182,Energy Efficiency,allocate,allocated,182,"/// Get disk space usage information.; ///; /// Note: Users must be careful about ""Time Of Check, Time Of Use"" kind of bug.; /// Note: Windows reports results according to the quota allocated to the user.; ///; /// @param Path Input path.; /// @returns a space_info structure filled with the capacity, free, and; /// available space on the device \a Path is on. A platform specific error_code; /// is returned on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:14,Security,access,access,14,///< May only access map via const_data as read only.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:9,Security,access,access,9,///< May access map via data and modify it. Written to path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:57,Availability,avail,available,57,"// FIXME: different platforms make different information available ""for free""; // when traversing a directory. The design of this class wraps most of the; // information in basic_file_status, so on platforms where we can't populate; // that whole structure, callers end up paying for a stat().; // std::filesystem::directory_entry may be a better model.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:136,Integrability,wrap,wraps,136,"// FIXME: different platforms make different information available ""for free""; // when traversing a directory. The design of this class wraps most of the; // information in basic_file_status, so on platforms where we can't populate; // that whole structure, callers end up paying for a stat().; // std::filesystem::directory_entry may be a better model.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:6,Availability,avail,available,6,// If available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:216,Availability,error,error,216,// end namespace detail; /// directory_iterator - Iterates through the entries in path. There is no; /// operator++ because we need an error_code. If it's really needed we can make; /// it call report_fatal_error on error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:115,Availability,down,down,115,// end namespace detail; /// recursive_directory_iterator - Same as directory_iterator except for it; /// recurses down into child directories.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:16,Availability,down,down,16,/// Does not go down into the current directory_entry.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h:149,Availability,error,error,149,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if; /// the files match, 1 if they are different, and 2 if there is a file error.; /// This function allows you to specify an absolute and relative FP error that; /// is allowed to exist. If you specify a string to fill in for the error; /// option, it will set the string to an error message if an error occurs, or; /// if the files are different.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h:225,Availability,error,error,225,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if; /// the files match, 1 if they are different, and 2 if there is a file error.; /// This function allows you to specify an absolute and relative FP error that; /// is allowed to exist. If you specify a string to fill in for the error; /// option, it will set the string to an error message if an error occurs, or; /// if the files are different.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h:305,Availability,error,error,305,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if; /// the files match, 1 if they are different, and 2 if there is a file error.; /// This function allows you to specify an absolute and relative FP error that; /// is allowed to exist. If you specify a string to fill in for the error; /// option, it will set the string to an error message if an error occurs, or; /// if the files are different.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h:353,Availability,error,error,353,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if; /// the files match, 1 if they are different, and 2 if there is a file error.; /// This function allows you to specify an absolute and relative FP error that; /// is allowed to exist. If you specify a string to fill in for the error; /// option, it will set the string to an error message if an error occurs, or; /// if the files are different.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h:373,Availability,error,error,373,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if; /// the files match, 1 if they are different, and 2 if there is a file error.; /// This function allows you to specify an absolute and relative FP error that; /// is allowed to exist. If you specify a string to fill in for the error; /// option, it will set the string to an error message if an error occurs, or; /// if the files are different.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h:359,Integrability,message,message,359,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if; /// the files match, 1 if they are different, and 2 if there is a file error.; /// This function allows you to specify an absolute and relative FP error that; /// is allowed to exist. If you specify a string to fill in for the error; /// option, it will set the string to an error message if an error occurs, or; /// if the files are different.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h:66,Energy Efficiency,allocate,allocated,66,"/// FileRemover - This class is a simple object meant to be stack allocated.; /// If an exception is thrown from a region, the object removes the filename; /// specified (if deleteIt is true).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h:34,Usability,simpl,simple,34,"/// FileRemover - This class is a simple object meant to be stack allocated.; /// If an exception is thrown from a region, the object removes the filename; /// specified (if deleteIt is true).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h:4,Deployability,release,releaseFile,4,/// releaseFile - Take ownership of the file away from the FileRemover so it; /// will not be removed when the object is destroyed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h:18,Energy Efficiency,Efficient,Efficient,18,"//===- Format.h - Efficient printf-style formatting for streams -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the format() function, which can be used with other; // LLVM subsystems to provide printf-style formatting. This gives all the power; // and risk of printf. This can be used like this (with raw_ostreams as an; // example):; //; // OS << ""mynumber: "" << format(""%4.5f"", 1234.412) << '\n';; //; // Or if you prefer:; //; // OS << format(""mynumber: %4.5f\n"", 1234.412);; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h:531,Energy Efficiency,power,power,531,"//===- Format.h - Efficient printf-style formatting for streams -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the format() function, which can be used with other; // LLVM subsystems to provide printf-style formatting. This gives all the power; // and risk of printf. This can be used like this (with raw_ostreams as an; // example):; //; // OS << ""mynumber: "" << format(""%4.5f"", 1234.412) << '\n';; //; // Or if you prefer:; //; // OS << format(""mynumber: %4.5f\n"", 1234.412);; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h:545,Safety,risk,risk,545,"//===- Format.h - Efficient printf-style formatting for streams -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the format() function, which can be used with other; // LLVM subsystems to provide printf-style formatting. This gives all the power; // and risk of printf. This can be used like this (with raw_ostreams as an; // example):; //; // OS << ""mynumber: "" << format(""%4.5f"", 1234.412) << '\n';; //; // Or if you prefer:; //; // OS << format(""mynumber: %4.5f\n"", 1234.412);; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h:12,Modifiability,polymorphi,polymorphic,12,// Disallow polymorphic deletion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h:288,Security,validat,validate,288,"/// These are templated helper classes used by the format function that; /// capture the object to be formatted and the format string. When actually; /// printed, this synthesizes the string into a temporary buffer provided and; /// returns whether or not it is big enough.; // Helper to validate that format() parameters are scalars or pointers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h:176,Usability,simpl,simplify,176,"/// These are helper functions used to produce formatted output. They use; /// template type deduction to construct the appropriate instance of the; /// format_object class to simplify their construction.; ///; /// This is typically used like:; /// \code; /// OS << format(""%0.4f"", myfloat) << '\n';; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Format.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatAdapters.h:9,Availability,Error,Error,9,// llvm::Error values must be consumed before being destroyed.; // Wrapping an error in fmt_consume explicitly indicates that the formatv_object; // should take ownership and consume it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatAdapters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatAdapters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatAdapters.h:79,Availability,error,error,79,// llvm::Error values must be consumed before being destroyed.; // Wrapping an error in fmt_consume explicitly indicates that the formatv_object; // should take ownership and consume it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatAdapters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatAdapters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatAdapters.h:67,Integrability,Wrap,Wrapping,67,// llvm::Error values must be consumed before being destroyed.; // Wrapping an error in fmt_consume explicitly indicates that the formatv_object; // should take ownership and consume it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatAdapters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatAdapters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h:1017,Availability,error,error,1017,"/// Implementation of format_provider<T> for ranges.; ///; /// This will print an arbitrary range as a delimited sequence of items.; ///; /// The options string of a range type has the grammar:; ///; /// range_style ::= [separator] [element_style]; /// separator ::= ""$"" delimeted_expr; /// element_style ::= ""@"" delimeted_expr; /// delimeted_expr ::= ""["" expr ""]"" | ""("" expr "")"" | ""<"" expr "">""; /// expr ::= <any string not containing delimeter>; ///; /// where the separator expression is the string to insert between consecutive; /// items in the range and the argument expression is the Style specification to; /// be used when formatting the underlying type. The default separator if; /// unspecified is ' ' (space). The syntax of the argument expression follows; /// whatever grammar is dictated by the format provider or format adapter used; /// to format the value type.; ///; /// Note that attempting to format an `iterator_range<T>` where no format; /// provider can be found for T will result in a compile error.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h:835,Energy Efficiency,adapt,adapter,835,"/// Implementation of format_provider<T> for ranges.; ///; /// This will print an arbitrary range as a delimited sequence of items.; ///; /// The options string of a range type has the grammar:; ///; /// range_style ::= [separator] [element_style]; /// separator ::= ""$"" delimeted_expr; /// element_style ::= ""@"" delimeted_expr; /// delimeted_expr ::= ""["" expr ""]"" | ""("" expr "")"" | ""<"" expr "">""; /// expr ::= <any string not containing delimeter>; ///; /// where the separator expression is the string to insert between consecutive; /// items in the range and the argument expression is the Style specification to; /// be used when formatting the underlying type. The default separator if; /// unspecified is ' ' (space). The syntax of the argument expression follows; /// whatever grammar is dictated by the format provider or format adapter used; /// to format the value type.; ///; /// Note that attempting to format an `iterator_range<T>` where no format; /// provider can be found for T will result in a compile error.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h:835,Integrability,adapter,adapter,835,"/// Implementation of format_provider<T> for ranges.; ///; /// This will print an arbitrary range as a delimited sequence of items.; ///; /// The options string of a range type has the grammar:; ///; /// range_style ::= [separator] [element_style]; /// separator ::= ""$"" delimeted_expr; /// element_style ::= ""@"" delimeted_expr; /// delimeted_expr ::= ""["" expr ""]"" | ""("" expr "")"" | ""<"" expr "">""; /// expr ::= <any string not containing delimeter>; ///; /// where the separator expression is the string to insert between consecutive; /// items in the range and the argument expression is the Style specification to; /// be used when formatting the underlying type. The default separator if; /// unspecified is ' ' (space). The syntax of the argument expression follows; /// whatever grammar is dictated by the format provider or format adapter used; /// to format the value type.; ///; /// Note that attempting to format an `iterator_range<T>` where no format; /// provider can be found for T will result in a compile error.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h:835,Modifiability,adapt,adapter,835,"/// Implementation of format_provider<T> for ranges.; ///; /// This will print an arbitrary range as a delimited sequence of items.; ///; /// The options string of a range type has the grammar:; ///; /// range_style ::= [separator] [element_style]; /// separator ::= ""$"" delimeted_expr; /// element_style ::= ""@"" delimeted_expr; /// delimeted_expr ::= ""["" expr ""]"" | ""("" expr "")"" | ""<"" expr "">""; /// expr ::= <any string not containing delimeter>; ///; /// where the separator expression is the string to insert between consecutive; /// items in the range and the argument expression is the Style specification to; /// be used when formatting the underlying type. The default separator if; /// unspecified is ' ' (space). The syntax of the argument expression follows; /// whatever grammar is dictated by the format provider or format adapter used; /// to format the value type.; ///; /// Note that attempting to format an `iterator_range<T>` where no format; /// provider can be found for T will result in a compile error.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:47,Integrability,wrap,wraps,47,"/// formatted_raw_ostream - A raw_ostream that wraps another one and keeps track; /// of line and column position, allowing padding out to specific column; /// boundaries and querying the number of lines written to the stream. This; /// assumes that the contents of the stream is valid UTF-8 encoded text. This; /// doesn't attempt to handle everything Unicode can do (combining characters,; /// right-to-left markers, etc), but should cover the cases likely to appear in; /// source code or diagnostic messages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:503,Integrability,message,messages,503,"/// formatted_raw_ostream - A raw_ostream that wraps another one and keeps track; /// of line and column position, allowing padding out to specific column; /// boundaries and querying the number of lines written to the stream. This; /// assumes that the contents of the stream is valid UTF-8 encoded text. This; /// doesn't attempt to handle everything Unicode can do (combining characters,; /// right-to-left markers, etc), but should cover the cases likely to appear in; /// source code or diagnostic messages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:113,Safety,safe,safe,113,"/// ComputePosition - Examine the given output buffer and figure out the new; /// position after output. This is safe to call multiple times on the same; /// buffer, as it records the most recently scanned character and resumes from; /// there when the buffer has not been flushed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:220,Usability,resume,resumes,220,"/// ComputePosition - Examine the given output buffer and figure out the new; /// position after output. This is safe to call multiple times on the same; /// buffer, as it records the most recently scanned character and resumes from; /// there when the buffer has not been flushed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:4,Deployability,Update,UpdatePosition,4,"/// UpdatePosition - scan the characters in [Ptr, Ptr+Size), and update the; /// line and column numbers. Unlike ComputePosition, this must be called; /// exactly once on each region of the buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:65,Deployability,update,update,65,"/// UpdatePosition - scan the characters in [Ptr, Ptr+Size), and update the; /// line and column numbers. Unlike ComputePosition, this must be called; /// exactly once on each region of the buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:30,Modifiability,inherit,inherits,30,"// This formatted_raw_ostream inherits from raw_ostream, so it'll do its; // own buffering, and it doesn't need or want TheStream to do another; // layer of buffering underneath. Resize the buffer to what TheStream; // had been using, and tell TheStream not to do its own buffering.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:76,Availability,error,error,76,"/// formatted_raw_ostream - Open the specified file for; /// writing. If an error occurs, information about the error is; /// put into ErrorInfo, and the stream should be immediately; /// destroyed; the string will be empty if no error occurred.; ///; /// As a side effect, the given Stream is set to be Unbuffered.; /// This is because formatted_raw_ostream does its own buffering,; /// so it doesn't want another layer of buffering to be happening; /// underneath it.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:112,Availability,error,error,112,"/// formatted_raw_ostream - Open the specified file for; /// writing. If an error occurs, information about the error is; /// put into ErrorInfo, and the stream should be immediately; /// destroyed; the string will be empty if no error occurred.; ///; /// As a side effect, the given Stream is set to be Unbuffered.; /// This is because formatted_raw_ostream does its own buffering,; /// so it doesn't want another layer of buffering to be happening; /// underneath it.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:135,Availability,Error,ErrorInfo,135,"/// formatted_raw_ostream - Open the specified file for; /// writing. If an error occurs, information about the error is; /// put into ErrorInfo, and the stream should be immediately; /// destroyed; the string will be empty if no error occurred.; ///; /// As a side effect, the given Stream is set to be Unbuffered.; /// This is because formatted_raw_ostream does its own buffering,; /// so it doesn't want another layer of buffering to be happening; /// underneath it.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:230,Availability,error,error,230,"/// formatted_raw_ostream - Open the specified file for; /// writing. If an error occurs, information about the error is; /// put into ErrorInfo, and the stream should be immediately; /// destroyed; the string will be empty if no error occurred.; ///; /// As a side effect, the given Stream is set to be Unbuffered.; /// This is because formatted_raw_ostream does its own buffering,; /// so it doesn't want another layer of buffering to be happening; /// underneath it.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:84,Availability,error,error,84,"/// ferrs() - This returns a reference to a formatted_raw_ostream for; /// standard error. Use it like: ferrs() << ""foo"" << ""bar"";",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:26,Energy Efficiency,Efficient,Efficient,26,"//===- FormatVariadic.h - Efficient type-safe string formatting --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the formatv() function which can be used with other LLVM; // subsystems to provide printf-like formatting, but with improved safety and; // flexibility. The result of `formatv` is an object which can be streamed to; // a raw_ostream or converted to a std::string or llvm::SmallString.; //; // // Convert to std::string.; // std::string S = formatv(""{0} {1}"", 1234.412, ""test"").str();; //; // // Convert to llvm::SmallString; // SmallString<8> S = formatv(""{0} {1}"", 1234.412, ""test"").sstr<8>();; //; // // Stream to an existing raw_ostream.; // OS << formatv(""{0} {1}"", 1234.412, ""test"");; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:41,Safety,safe,safe,41,"//===- FormatVariadic.h - Efficient type-safe string formatting --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the formatv() function which can be used with other LLVM; // subsystems to provide printf-like formatting, but with improved safety and; // flexibility. The result of `formatv` is an object which can be streamed to; // a raw_ostream or converted to a std::string or llvm::SmallString.; //; // // Convert to std::string.; // std::string S = formatv(""{0} {1}"", 1234.412, ""test"").str();; //; // // Convert to llvm::SmallString; // SmallString<8> S = formatv(""{0} {1}"", 1234.412, ""test"").sstr<8>();; //; // // Stream to an existing raw_ostream.; // OS << formatv(""{0} {1}"", 1234.412, ""test"");; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:529,Safety,safe,safety,529,"//===- FormatVariadic.h - Efficient type-safe string formatting --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the formatv() function which can be used with other LLVM; // subsystems to provide printf-like formatting, but with improved safety and; // flexibility. The result of `formatv` is an object which can be streamed to; // a raw_ostream or converted to a std::string or llvm::SmallString.; //; // // Convert to std::string.; // std::string S = formatv(""{0} {1}"", 1234.412, ""test"").str();; //; // // Convert to llvm::SmallString; // SmallString<8> S = formatv(""{0} {1}"", 1234.412, ""test"").sstr<8>();; //; // // Stream to an existing raw_ostream.; // OS << formatv(""{0} {1}"", 1234.412, ""test"");; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:774,Testability,test,test,774,"//===- FormatVariadic.h - Efficient type-safe string formatting --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the formatv() function which can be used with other LLVM; // subsystems to provide printf-like formatting, but with improved safety and; // flexibility. The result of `formatv` is an object which can be streamed to; // a raw_ostream or converted to a std::string or llvm::SmallString.; //; // // Convert to std::string.; // std::string S = formatv(""{0} {1}"", 1234.412, ""test"").str();; //; // // Convert to llvm::SmallString; // SmallString<8> S = formatv(""{0} {1}"", 1234.412, ""test"").sstr<8>();; //; // // Stream to an existing raw_ostream.; // OS << formatv(""{0} {1}"", 1234.412, ""test"");; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:881,Testability,test,test,881,"//===- FormatVariadic.h - Efficient type-safe string formatting --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the formatv() function which can be used with other LLVM; // subsystems to provide printf-like formatting, but with improved safety and; // flexibility. The result of `formatv` is an object which can be streamed to; // a raw_ostream or converted to a std::string or llvm::SmallString.; //; // // Convert to std::string.; // std::string S = formatv(""{0} {1}"", 1234.412, ""test"").str();; //; // // Convert to llvm::SmallString; // SmallString<8> S = formatv(""{0} {1}"", 1234.412, ""test"").sstr<8>();; //; // // Stream to an existing raw_ostream.; // OS << formatv(""{0} {1}"", 1234.412, ""test"");; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:985,Testability,test,test,985,"//===- FormatVariadic.h - Efficient type-safe string formatting --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the formatv() function which can be used with other LLVM; // subsystems to provide printf-like formatting, but with improved safety and; // flexibility. The result of `formatv` is an object which can be streamed to; // a raw_ostream or converted to a std::string or llvm::SmallString.; //; // // Convert to std::string.; // std::string S = formatv(""{0} {1}"", 1234.412, ""test"").str();; //; // // Convert to llvm::SmallString; // SmallString<8> S = formatv(""{0} {1}"", 1234.412, ""test"").sstr<8>();; //; // // Stream to an existing raw_ostream.; // OS << formatv(""{0} {1}"", 1234.412, ""test"");; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:29,Energy Efficiency,adapt,adapters,29,"// Storage for the parameter adapters. Since the base class erases the type; // of the parameters, we have to own the storage for the parameters here, and; // have the base class store type-erased pointers into this tuple.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:29,Integrability,adapter,adapters,29,"// Storage for the parameter adapters. Since the base class erases the type; // of the parameters, we have to own the storage for the parameters here, and; // have the base class store type-erased pointers into this tuple.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:29,Modifiability,adapt,adapters,29,"// Storage for the parameter adapters. Since the base class erases the type; // of the parameters, we have to own the storage for the parameters here, and; // have the base class store type-erased pointers into this tuple.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:288,Integrability,wrap,wrapping,288,"// The parameters are stored in a std::tuple, which does not provide runtime; // indexing capabilities. In order to enable runtime indexing, we use this; // structure to put the parameters into a std::array. Since the parameters; // are not all the same type, we use some type-erasure by wrapping the; // parameters in a template class that derives from a non-template superclass.; // Essentially, we are converting a std::tuple<Derived<Ts...>> to a; // std::array<Base*>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:731,Availability,avail,available,731,"// Format text given a format string and replacement parameters.; //; // ===General Description===; //; // Formats textual output. `Fmt` is a string consisting of one or more; // replacement sequences with the following grammar:; //; // rep_field ::= ""{"" index ["","" layout] ["":"" format] ""}""; // index ::= <non-negative integer>; // layout ::= [[[char]loc]width]; // format ::= <any string not containing ""{"" or ""}"">; // char ::= <any character except ""{"" or ""}"">; // loc ::= ""-"" | ""="" | ""+""; // width ::= <positive integer>; //; // index - A non-negative integer specifying the index of the item in the; // parameter pack to print. Any other value is invalid.; // layout - A string controlling how the field is laid out within the available; // space.; // format - A type-dependent string used to provide additional options to; // the formatting operation. Refer to the documentation of the; // various individual format providers for per-type options.; // char - The padding character. Defaults to ' ' (space). Only valid if; // `loc` is also specified.; // loc - Where to print the formatted text within the field. Only valid if; // `width` is also specified.; // '-' : The field is left aligned within the available space.; // '=' : The field is centered within the available space.; // '+' : The field is right aligned within the available space (this; // is the default).; // width - The width of the field within which to print the formatted text.; // If this is less than the required length then the `char` and `loc`; // fields are ignored, and the field is printed with no leading or; // trailing padding. If this is greater than the required length,; // then the text is output according to the value of `loc`, and padded; // as appropriate on the left and/or right by `char`.; //; // ===Special Characters===; //; // The characters '{' and '}' are reserved and cannot appear anywhere within a; // replacement sequence. Outside of a replacement sequence, in order to print; // a literal '{' ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:1209,Availability,avail,available,1209,"quences with the following grammar:; //; // rep_field ::= ""{"" index ["","" layout] ["":"" format] ""}""; // index ::= <non-negative integer>; // layout ::= [[[char]loc]width]; // format ::= <any string not containing ""{"" or ""}"">; // char ::= <any character except ""{"" or ""}"">; // loc ::= ""-"" | ""="" | ""+""; // width ::= <positive integer>; //; // index - A non-negative integer specifying the index of the item in the; // parameter pack to print. Any other value is invalid.; // layout - A string controlling how the field is laid out within the available; // space.; // format - A type-dependent string used to provide additional options to; // the formatting operation. Refer to the documentation of the; // various individual format providers for per-type options.; // char - The padding character. Defaults to ' ' (space). Only valid if; // `loc` is also specified.; // loc - Where to print the formatted text within the field. Only valid if; // `width` is also specified.; // '-' : The field is left aligned within the available space.; // '=' : The field is centered within the available space.; // '+' : The field is right aligned within the available space (this; // is the default).; // width - The width of the field within which to print the formatted text.; // If this is less than the required length then the `char` and `loc`; // fields are ignored, and the field is printed with no leading or; // trailing padding. If this is greater than the required length,; // then the text is output according to the value of `loc`, and padded; // as appropriate on the left and/or right by `char`.; //; // ===Special Characters===; //; // The characters '{' and '}' are reserved and cannot appear anywhere within a; // replacement sequence. Outside of a replacement sequence, in order to print; // a literal '{' it must be doubled as ""{{"".; //; // ===Parameter Indexing===; //; // `index` specifies the index of the parameter in the parameter pack to format; // into the output. Note that it is possible ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:1269,Availability,avail,available,1269,"index ["","" layout] ["":"" format] ""}""; // index ::= <non-negative integer>; // layout ::= [[[char]loc]width]; // format ::= <any string not containing ""{"" or ""}"">; // char ::= <any character except ""{"" or ""}"">; // loc ::= ""-"" | ""="" | ""+""; // width ::= <positive integer>; //; // index - A non-negative integer specifying the index of the item in the; // parameter pack to print. Any other value is invalid.; // layout - A string controlling how the field is laid out within the available; // space.; // format - A type-dependent string used to provide additional options to; // the formatting operation. Refer to the documentation of the; // various individual format providers for per-type options.; // char - The padding character. Defaults to ' ' (space). Only valid if; // `loc` is also specified.; // loc - Where to print the formatted text within the field. Only valid if; // `width` is also specified.; // '-' : The field is left aligned within the available space.; // '=' : The field is centered within the available space.; // '+' : The field is right aligned within the available space (this; // is the default).; // width - The width of the field within which to print the formatted text.; // If this is less than the required length then the `char` and `loc`; // fields are ignored, and the field is printed with no leading or; // trailing padding. If this is greater than the required length,; // then the text is output according to the value of `loc`, and padded; // as appropriate on the left and/or right by `char`.; //; // ===Special Characters===; //; // The characters '{' and '}' are reserved and cannot appear anywhere within a; // replacement sequence. Outside of a replacement sequence, in order to print; // a literal '{' it must be doubled as ""{{"".; //; // ===Parameter Indexing===; //; // `index` specifies the index of the parameter in the parameter pack to format; // into the output. Note that it is possible to refer to the same parameter; // index multiple times in a g",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:1334,Availability,avail,available,1334,"/ layout ::= [[[char]loc]width]; // format ::= <any string not containing ""{"" or ""}"">; // char ::= <any character except ""{"" or ""}"">; // loc ::= ""-"" | ""="" | ""+""; // width ::= <positive integer>; //; // index - A non-negative integer specifying the index of the item in the; // parameter pack to print. Any other value is invalid.; // layout - A string controlling how the field is laid out within the available; // space.; // format - A type-dependent string used to provide additional options to; // the formatting operation. Refer to the documentation of the; // various individual format providers for per-type options.; // char - The padding character. Defaults to ' ' (space). Only valid if; // `loc` is also specified.; // loc - Where to print the formatted text within the field. Only valid if; // `width` is also specified.; // '-' : The field is left aligned within the available space.; // '=' : The field is centered within the available space.; // '+' : The field is right aligned within the available space (this; // is the default).; // width - The width of the field within which to print the formatted text.; // If this is less than the required length then the `char` and `loc`; // fields are ignored, and the field is printed with no leading or; // trailing padding. If this is greater than the required length,; // then the text is output according to the value of `loc`, and padded; // as appropriate on the left and/or right by `char`.; //; // ===Special Characters===; //; // The characters '{' and '}' are reserved and cannot appear anywhere within a; // replacement sequence. Outside of a replacement sequence, in order to print; // a literal '{' it must be doubled as ""{{"".; //; // ===Parameter Indexing===; //; // `index` specifies the index of the parameter in the parameter pack to format; // into the output. Note that it is possible to refer to the same parameter; // index multiple times in a given format string. This makes it possible to; // output the same value mult",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:3497,Availability,error,error,3497," are reserved and cannot appear anywhere within a; // replacement sequence. Outside of a replacement sequence, in order to print; // a literal '{' it must be doubled as ""{{"".; //; // ===Parameter Indexing===; //; // `index` specifies the index of the parameter in the parameter pack to format; // into the output. Note that it is possible to refer to the same parameter; // index multiple times in a given format string. This makes it possible to; // output the same value multiple times without passing it multiple times to the; // function. For example:; //; // formatv(""{0} {1} {0}"", ""a"", ""bb""); //; // would yield the string ""abba"". This can be convenient when it is expensive; // to compute the value of the parameter, and you would otherwise have had to; // save it to a temporary.; //; // ===Formatter Search===; //; // For a given parameter of type T, the following steps are executed in order; // until a match is found:; //; // 1. If the parameter is of class type, and inherits from format_adapter,; // Then format() is invoked on it to produce the formatted output. The; // implementation should write the formatted text into `Stream`.; // 2. If there is a suitable template specialization of format_provider<>; // for type T containing a method whose signature is:; // void format(const T &Obj, raw_ostream &Stream, StringRef Options); // Then this method is invoked as described in Step 1.; // 3. If an appropriate operator<< for raw_ostream exists, it will be used.; // For this to work, (raw_ostream& << const T&) must return raw_ostream&.; //; // If a match cannot be found through either of the above methods, a compiler; // error is generated.; //; // ===Invalid Format String Handling===; //; // In the case of a format string which does not match the grammar described; // above, the output is undefined. With asserts enabled, LLVM will trigger an; // assertion. Otherwise, it will try to do something reasonable, but in general; // the details of what that is are undefined.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:772,Integrability,depend,dependent,772,"// Format text given a format string and replacement parameters.; //; // ===General Description===; //; // Formats textual output. `Fmt` is a string consisting of one or more; // replacement sequences with the following grammar:; //; // rep_field ::= ""{"" index ["","" layout] ["":"" format] ""}""; // index ::= <non-negative integer>; // layout ::= [[[char]loc]width]; // format ::= <any string not containing ""{"" or ""}"">; // char ::= <any character except ""{"" or ""}"">; // loc ::= ""-"" | ""="" | ""+""; // width ::= <positive integer>; //; // index - A non-negative integer specifying the index of the item in the; // parameter pack to print. Any other value is invalid.; // layout - A string controlling how the field is laid out within the available; // space.; // format - A type-dependent string used to provide additional options to; // the formatting operation. Refer to the documentation of the; // various individual format providers for per-type options.; // char - The padding character. Defaults to ' ' (space). Only valid if; // `loc` is also specified.; // loc - Where to print the formatted text within the field. Only valid if; // `width` is also specified.; // '-' : The field is left aligned within the available space.; // '=' : The field is centered within the available space.; // '+' : The field is right aligned within the available space (this; // is the default).; // width - The width of the field within which to print the formatted text.; // If this is less than the required length then the `char` and `loc`; // fields are ignored, and the field is printed with no leading or; // trailing padding. If this is greater than the required length,; // then the text is output according to the value of `loc`, and padded; // as appropriate on the left and/or right by `char`.; //; // ===Special Characters===; //; // The characters '{' and '}' are reserved and cannot appear anywhere within a; // replacement sequence. Outside of a replacement sequence, in order to print; // a literal '{' ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:2834,Modifiability,inherit,inherits,2834," are reserved and cannot appear anywhere within a; // replacement sequence. Outside of a replacement sequence, in order to print; // a literal '{' it must be doubled as ""{{"".; //; // ===Parameter Indexing===; //; // `index` specifies the index of the parameter in the parameter pack to format; // into the output. Note that it is possible to refer to the same parameter; // index multiple times in a given format string. This makes it possible to; // output the same value multiple times without passing it multiple times to the; // function. For example:; //; // formatv(""{0} {1} {0}"", ""a"", ""bb""); //; // would yield the string ""abba"". This can be convenient when it is expensive; // to compute the value of the parameter, and you would otherwise have had to; // save it to a temporary.; //; // ===Formatter Search===; //; // For a given parameter of type T, the following steps are executed in order; // until a match is found:; //; // 1. If the parameter is of class type, and inherits from format_adapter,; // Then format() is invoked on it to produce the formatted output. The; // implementation should write the formatted text into `Stream`.; // 2. If there is a suitable template specialization of format_provider<>; // for type T containing a method whose signature is:; // void format(const T &Obj, raw_ostream &Stream, StringRef Options); // Then this method is invoked as described in Step 1.; // 3. If an appropriate operator<< for raw_ostream exists, it will be used.; // For this to work, (raw_ostream& << const T&) must return raw_ostream&.; //; // If a match cannot be found through either of the above methods, a compiler; // error is generated.; //; // ===Invalid Format String Handling===; //; // In the case of a format string which does not match the grammar described; // above, the output is undefined. With asserts enabled, LLVM will trigger an; // assertion. Otherwise, it will try to do something reasonable, but in general; // the details of what that is are undefined.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:3685,Testability,assert,asserts,3685," are reserved and cannot appear anywhere within a; // replacement sequence. Outside of a replacement sequence, in order to print; // a literal '{' it must be doubled as ""{{"".; //; // ===Parameter Indexing===; //; // `index` specifies the index of the parameter in the parameter pack to format; // into the output. Note that it is possible to refer to the same parameter; // index multiple times in a given format string. This makes it possible to; // output the same value multiple times without passing it multiple times to the; // function. For example:; //; // formatv(""{0} {1} {0}"", ""a"", ""bb""); //; // would yield the string ""abba"". This can be convenient when it is expensive; // to compute the value of the parameter, and you would otherwise have had to; // save it to a temporary.; //; // ===Formatter Search===; //; // For a given parameter of type T, the following steps are executed in order; // until a match is found:; //; // 1. If the parameter is of class type, and inherits from format_adapter,; // Then format() is invoked on it to produce the formatted output. The; // implementation should write the formatted text into `Stream`.; // 2. If there is a suitable template specialization of format_provider<>; // for type T containing a method whose signature is:; // void format(const T &Obj, raw_ostream &Stream, StringRef Options); // Then this method is invoked as described in Step 1.; // 3. If an appropriate operator<< for raw_ostream exists, it will be used.; // For this to work, (raw_ostream& << const T&) must return raw_ostream&.; //; // If a match cannot be found through either of the above methods, a compiler; // error is generated.; //; // ===Invalid Format String Handling===; //; // In the case of a format string which does not match the grammar described; // above, the output is undefined. With asserts enabled, LLVM will trigger an; // assertion. Otherwise, it will try to do something reasonable, but in general; // the details of what that is are undefined.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:3727,Testability,assert,assertion,3727," are reserved and cannot appear anywhere within a; // replacement sequence. Outside of a replacement sequence, in order to print; // a literal '{' it must be doubled as ""{{"".; //; // ===Parameter Indexing===; //; // `index` specifies the index of the parameter in the parameter pack to format; // into the output. Note that it is possible to refer to the same parameter; // index multiple times in a given format string. This makes it possible to; // output the same value multiple times without passing it multiple times to the; // function. For example:; //; // formatv(""{0} {1} {0}"", ""a"", ""bb""); //; // would yield the string ""abba"". This can be convenient when it is expensive; // to compute the value of the parameter, and you would otherwise have had to; // save it to a temporary.; //; // ===Formatter Search===; //; // For a given parameter of type T, the following steps are executed in order; // until a match is found:; //; // 1. If the parameter is of class type, and inherits from format_adapter,; // Then format() is invoked on it to produce the formatted output. The; // implementation should write the formatted text into `Stream`.; // 2. If there is a suitable template specialization of format_provider<>; // for type T containing a method whose signature is:; // void format(const T &Obj, raw_ostream &Stream, StringRef Options); // Then this method is invoked as described in Step 1.; // 3. If an appropriate operator<< for raw_ostream exists, it will be used.; // For this to work, (raw_ostream& << const T&) must return raw_ostream&.; //; // If a match cannot be found through either of the above methods, a compiler; // error is generated.; //; // ===Invalid Format String Handling===; //; // In the case of a format string which does not match the grammar described; // above, the output is undefined. With asserts enabled, LLVM will trigger an; // assertion. Otherwise, it will try to do something reasonable, but in general; // the details of what that is are undefined.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h:3,Testability,Test,Test,3,"// Test if format_provider<T> is defined on T and contains a member function; // with the signature:; // static void format(const T&, raw_stream &, StringRef);; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h:3,Testability,Test,Test,3,// Test if raw_ostream& << T -> raw_ostream& is findable via ADL.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h:3,Usability,Simpl,Simple,3,// Simple template that decides whether a type T should use the member-function; // based format() invocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h:155,Testability,test,test,155,"// Simple template that decides whether a type T should use the format_provider; // based format() invocation. The member function takes priority, so this test; // will only be true if there is not ALSO a format member.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h:3,Usability,Simpl,Simple,3,"// Simple template that decides whether a type T should use the format_provider; // based format() invocation. The member function takes priority, so this test; // will only be true if there is not ALSO a format member.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h:3,Usability,Simpl,Simple,3,// Simple template that decides whether a type T should use the operator<<; // based format() invocation. This takes last priority.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h:3,Usability,Simpl,Simple,3,// Simple template that decides whether a type T has neither a member-function; // nor format_provider based implementation that it can use. Mostly used so; // that the compiler spits out a nice diagnostic when a type with no format; // implementation can be located.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h:27,Availability,Error,Error,27,"// If the caller passed an Error by value, then stream_operator_format_adapter; // would be responsible for consuming it.; // Make the caller opt into this by calling fmt_consume().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:438,Energy Efficiency,efficient,efficiently,438,"//===- GenericDomTree.h - Generic dominator trees for graphs ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines a set of templates that efficiently compute a dominator; /// tree over a generic graph. This is used typically in LLVM for fast; /// dominance queries on the CFG, but is fully generic w.r.t. the underlying; /// graph types.; ///; /// Unlike ADT/* graph algorithms, generic dominator tree has more requirements; /// on the graph's NodeRef. The NodeRef should be a pointer and,; /// either NodeRef->getParent() must return the parent node that is also a; /// pointer or DomTreeNodeTraits needs to be specialized.; ///; /// FIXME: Maybe GenericDomTree needs a TreeTraits, instead of GraphTraits.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:146,Deployability,update,updateDFSNumbers,146,/// getDFSNumIn/getDFSNumOut - These return the DFS visitation order for nodes; /// in the dominator tree. They are only guaranteed valid if; /// updateDFSNumbers() has been called.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:7,Integrability,rout,routines,7,// The routines below are provided in a separate header but referenced here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:49,Deployability,update,update,49,"// If we end up with too many slow queries, just update the; // DFS numbers on the theory that we are going to keep querying.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:508,Availability,redundant,redundant,508,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1183,Availability,redundant,redundant,1183,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:90,Deployability,update,update,90,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:280,Deployability,update,update,280,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:368,Deployability,update,updates,368,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:411,Deployability,update,update,411,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:451,Deployability,update,updates,451,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:601,Deployability,update,updates,601,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1164,Deployability,update,updates,1164,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1281,Deployability,update,updater,1281,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1351,Deployability,update,update,1351,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1492,Deployability,update,updates,1492,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1619,Deployability,Update,UpdateType,1619,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1649,Deployability,update,updates,1649,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1769,Deployability,Update,Updates,1769,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1800,Deployability,update,updates,1800,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1866,Deployability,update,updates,1866,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:264,Performance,perform,perform,264,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:436,Performance,perform,performing,436,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:489,Performance,optimiz,optimizes,489,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1366,Performance,optimiz,optimized,1366,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1811,Performance,perform,perform,1811,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:508,Safety,redund,redundant,508,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:926,Safety,safe,safe,926,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1183,Safety,redund,redundant,1183,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:1305,Safety,detect,detect,1305,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:708,Testability,log,logically,708,"//===--------------------------------------------------------------------===//; // API to update (Post)DominatorTree information based on modifications to; // the CFG...; /// Inform the dominator tree about a sequence of CFG edge insertions and; /// deletions and perform a batch update on the tree.; ///; /// This function should be used when there were multiple CFG updates after; /// the last dominator tree update. It takes care of performing the updates; /// in sync with the CFG and optimizes away the redundant operations that; /// cancel each other.; /// The functions expects the sequence of updates to be balanced. Eg.:; /// - {{Insert, A, B}, {Delete, A, B}, {Insert, A, B}} is fine, because; /// logically it results in a single insertions.; /// - {{Insert, A, B}, {Insert, A, B}} is invalid, because it doesn't make; /// sense to insert the same edge twice.; ///; /// What's more, the functions assumes that it's safe to ask every node in the; /// CFG about its children and inverse children. This implies that deletions; /// of CFG edges must not delete the CFG nodes before calling this function.; ///; /// The applyUpdates function can reorder the updates and remove redundant; /// ones internally (as long as it is done in a deterministic fashion). The; /// batch updater is also able to detect sequences of zero and exactly one; /// update -- it's optimized to do less work in these cases.; ///; /// Note that for postdominators it automatically takes care of applying; /// updates on reverse edges internally (so there's no need to swap the; /// From and To pointers when constructing DominatorTree::UpdateType).; /// The type of updates is the same for DomTreeBase<T> and PostDomTreeBase<T>; /// with the same template parameter T.; ///; /// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:11,Deployability,Update,Updates,11,/// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; /// \param PostViewUpdates An ordered sequence of update to perform in order; /// to obtain a post-view of the CFG. The DT will be updated assuming the; /// obtained PostViewCFG is the desired end state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:42,Deployability,update,updates,42,/// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; /// \param PostViewUpdates An ordered sequence of update to perform in order; /// to obtain a post-view of the CFG. The DT will be updated assuming the; /// obtained PostViewCFG is the desired end state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:108,Deployability,update,updates,108,/// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; /// \param PostViewUpdates An ordered sequence of update to perform in order; /// to obtain a post-view of the CFG. The DT will be updated assuming the; /// obtained PostViewCFG is the desired end state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:201,Deployability,update,update,201,/// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; /// \param PostViewUpdates An ordered sequence of update to perform in order; /// to obtain a post-view of the CFG. The DT will be updated assuming the; /// obtained PostViewCFG is the desired end state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:282,Deployability,update,updated,282,/// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; /// \param PostViewUpdates An ordered sequence of update to perform in order; /// to obtain a post-view of the CFG. The DT will be updated assuming the; /// obtained PostViewCFG is the desired end state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:53,Performance,perform,perform,53,/// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; /// \param PostViewUpdates An ordered sequence of update to perform in order; /// to obtain a post-view of the CFG. The DT will be updated assuming the; /// obtained PostViewCFG is the desired end state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:211,Performance,perform,perform,211,/// \param Updates An ordered sequence of updates to perform. The current CFG; /// and the reverse of these updates provides the pre-view of the CFG.; /// \param PostViewUpdates An ordered sequence of update to perform in order; /// to obtain a post-view of the CFG. The DT will be updated assuming the; /// obtained PostViewCFG is the desired end state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:29,Deployability,Update,Updates,29,"// PreViewCFG needs to merge Updates and PostViewCFG. The updates in; // Updates need to be reversed, and match the direction in PostViewCFG.; // The PostViewCFG is created with updates reversed (equivalent to changes; // made to the CFG), so the PreViewCFG needs all the updates reverse; // applied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:58,Deployability,update,updates,58,"// PreViewCFG needs to merge Updates and PostViewCFG. The updates in; // Updates need to be reversed, and match the direction in PostViewCFG.; // The PostViewCFG is created with updates reversed (equivalent to changes; // made to the CFG), so the PreViewCFG needs all the updates reverse; // applied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:73,Deployability,Update,Updates,73,"// PreViewCFG needs to merge Updates and PostViewCFG. The updates in; // Updates need to be reversed, and match the direction in PostViewCFG.; // The PostViewCFG is created with updates reversed (equivalent to changes; // made to the CFG), so the PreViewCFG needs all the updates reverse; // applied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:178,Deployability,update,updates,178,"// PreViewCFG needs to merge Updates and PostViewCFG. The updates in; // Updates need to be reversed, and match the direction in PostViewCFG.; // The PostViewCFG is created with updates reversed (equivalent to changes; // made to the CFG), so the PreViewCFG needs all the updates reverse; // applied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:272,Deployability,update,updates,272,"// PreViewCFG needs to merge Updates and PostViewCFG. The updates in; // Updates need to be reversed, and match the direction in PostViewCFG.; // The PostViewCFG is created with updates reversed (equivalent to changes; // made to the CFG), so the PreViewCFG needs all the updates reverse; // applied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:61,Deployability,update,update,61,/// Inform the dominator tree about a CFG edge insertion and update the tree.; ///; /// This function has to be called just before or just after making the update; /// on the actual CFG. There cannot be any other updates that the dominator; /// tree doesn't know about.; ///; /// Note that for postdominators it automatically takes care of inserting; /// a reverse edge internally (so there's no need to swap the parameters).; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:156,Deployability,update,update,156,/// Inform the dominator tree about a CFG edge insertion and update the tree.; ///; /// This function has to be called just before or just after making the update; /// on the actual CFG. There cannot be any other updates that the dominator; /// tree doesn't know about.; ///; /// Note that for postdominators it automatically takes care of inserting; /// a reverse edge internally (so there's no need to swap the parameters).; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:213,Deployability,update,updates,213,/// Inform the dominator tree about a CFG edge insertion and update the tree.; ///; /// This function has to be called just before or just after making the update; /// on the actual CFG. There cannot be any other updates that the dominator; /// tree doesn't know about.; ///; /// Note that for postdominators it automatically takes care of inserting; /// a reverse edge internally (so there's no need to swap the parameters).; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:60,Deployability,update,update,60,/// Inform the dominator tree about a CFG edge deletion and update the tree.; ///; /// This function has to be called just after making the update on the actual; /// CFG. An internal functions checks if the edge doesn't exist in the CFG in; /// DEBUG mode. There cannot be any other updates that the; /// dominator tree doesn't know about.; ///; /// Note that for postdominators it automatically takes care of deleting; /// a reverse edge internally (so there's no need to swap the parameters).; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:140,Deployability,update,update,140,/// Inform the dominator tree about a CFG edge deletion and update the tree.; ///; /// This function has to be called just after making the update on the actual; /// CFG. An internal functions checks if the edge doesn't exist in the CFG in; /// DEBUG mode. There cannot be any other updates that the; /// dominator tree doesn't know about.; ///; /// Note that for postdominators it automatically takes care of deleting; /// a reverse edge internally (so there's no need to swap the parameters).; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:283,Deployability,update,updates,283,/// Inform the dominator tree about a CFG edge deletion and update the tree.; ///; /// This function has to be called just after making the update on the actual; /// CFG. An internal functions checks if the edge doesn't exist in the CFG in; /// DEBUG mode. There cannot be any other updates that the; /// dominator tree doesn't know about.; ///; /// Note that for postdominators it automatically takes care of deleting; /// a reverse edge internally (so there's no need to swap the parameters).; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:54,Deployability,update,update,54,/// changeImmediateDominator - This method is used to update the dominator; /// tree information when a node's immediate dominator changes.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:15,Deployability,update,update,15,// Remember to update PostDominatorTree roots.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:59,Deployability,Update,Update,59,/// splitBlock - BB is split and now it has one successor. Update dominator; /// tree to reflect this change.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:4,Deployability,update,updateDFSNumbers,4,/// updateDFSNumbers - Assign In and Out numbers to the nodes while walking; /// dominator tree in dfs order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:48,Deployability,Update,Update,48,// NewBB is split and now it has one successor. Update dominator tree to; // reflect this change.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h:102,Deployability,Update,Update,102,"// If NewBB strictly dominates other blocks, then it is now the immediate; // dominator of NewBBSucc. Update the dominator tree as appropriate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:1253,Deployability,update,updates,1253,"//===- GenericDomTreeConstruction.h - Dominator Calculation ------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Generic dominator tree construction - this file provides routines to; /// construct immediate dominator information for a flow-graph based on the; /// Semi-NCA algorithm described in this dissertation:; ///; /// [1] Linear-Time Algorithms for Dominators and Related Problems; /// Loukas Georgiadis, Princeton University, November 2005, pp. 21-23:; /// ftp://ftp.cs.princeton.edu/reports/2005/737.pdf; ///; /// Semi-NCA algorithm runs in O(n^2) worst-case time but usually slightly; /// faster than Simple Lengauer-Tarjan in practice.; ///; /// O(n^2) worst cases happen when the computation of nearest common ancestors; /// requires O(n) average time, which is very unlikely in real world. If this; /// ever turns out to be an issue, consider implementing a hybrid algorithm; /// that uses SLT to perform full constructions and SemiNCA for incremental; /// updates.; ///; /// The file uses the Depth Based Search algorithm to perform incremental; /// updates (insertion and deletions). The implemented algorithm is based on; /// this publication:; ///; /// [2] An Experimental Study of Dynamic Dominators; /// Loukas Georgiadis, et al., April 12 2016, pp. 5-7, 9-10:; /// https://arxiv.org/pdf/1604.02711.pdf; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:1347,Deployability,update,updates,1347,"//===- GenericDomTreeConstruction.h - Dominator Calculation ------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Generic dominator tree construction - this file provides routines to; /// construct immediate dominator information for a flow-graph based on the; /// Semi-NCA algorithm described in this dissertation:; ///; /// [1] Linear-Time Algorithms for Dominators and Related Problems; /// Loukas Georgiadis, Princeton University, November 2005, pp. 21-23:; /// ftp://ftp.cs.princeton.edu/reports/2005/737.pdf; ///; /// Semi-NCA algorithm runs in O(n^2) worst-case time but usually slightly; /// faster than Simple Lengauer-Tarjan in practice.; ///; /// O(n^2) worst cases happen when the computation of nearest common ancestors; /// requires O(n) average time, which is very unlikely in real world. If this; /// ever turns out to be an issue, consider implementing a hybrid algorithm; /// that uses SLT to perform full constructions and SemiNCA for incremental; /// updates.; ///; /// The file uses the Depth Based Search algorithm to perform incremental; /// updates (insertion and deletions). The implemented algorithm is based on; /// this publication:; ///; /// [2] An Experimental Study of Dynamic Dominators; /// Loukas Georgiadis, et al., April 12 2016, pp. 5-7, 9-10:; /// https://arxiv.org/pdf/1604.02711.pdf; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:453,Integrability,rout,routines,453,"//===- GenericDomTreeConstruction.h - Dominator Calculation ------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Generic dominator tree construction - this file provides routines to; /// construct immediate dominator information for a flow-graph based on the; /// Semi-NCA algorithm described in this dissertation:; ///; /// [1] Linear-Time Algorithms for Dominators and Related Problems; /// Loukas Georgiadis, Princeton University, November 2005, pp. 21-23:; /// ftp://ftp.cs.princeton.edu/reports/2005/737.pdf; ///; /// Semi-NCA algorithm runs in O(n^2) worst-case time but usually slightly; /// faster than Simple Lengauer-Tarjan in practice.; ///; /// O(n^2) worst cases happen when the computation of nearest common ancestors; /// requires O(n) average time, which is very unlikely in real world. If this; /// ever turns out to be an issue, consider implementing a hybrid algorithm; /// that uses SLT to perform full constructions and SemiNCA for incremental; /// updates.; ///; /// The file uses the Depth Based Search algorithm to perform incremental; /// updates (insertion and deletions). The implemented algorithm is based on; /// this publication:; ///; /// [2] An Experimental Study of Dynamic Dominators; /// Loukas Georgiadis, et al., April 12 2016, pp. 5-7, 9-10:; /// https://arxiv.org/pdf/1604.02711.pdf; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:1193,Performance,perform,perform,1193,"//===- GenericDomTreeConstruction.h - Dominator Calculation ------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Generic dominator tree construction - this file provides routines to; /// construct immediate dominator information for a flow-graph based on the; /// Semi-NCA algorithm described in this dissertation:; ///; /// [1] Linear-Time Algorithms for Dominators and Related Problems; /// Loukas Georgiadis, Princeton University, November 2005, pp. 21-23:; /// ftp://ftp.cs.princeton.edu/reports/2005/737.pdf; ///; /// Semi-NCA algorithm runs in O(n^2) worst-case time but usually slightly; /// faster than Simple Lengauer-Tarjan in practice.; ///; /// O(n^2) worst cases happen when the computation of nearest common ancestors; /// requires O(n) average time, which is very unlikely in real world. If this; /// ever turns out to be an issue, consider implementing a hybrid algorithm; /// that uses SLT to perform full constructions and SemiNCA for incremental; /// updates.; ///; /// The file uses the Depth Based Search algorithm to perform incremental; /// updates (insertion and deletions). The implemented algorithm is based on; /// this publication:; ///; /// [2] An Experimental Study of Dynamic Dominators; /// Loukas Georgiadis, et al., April 12 2016, pp. 5-7, 9-10:; /// https://arxiv.org/pdf/1604.02711.pdf; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:1322,Performance,perform,perform,1322,"//===- GenericDomTreeConstruction.h - Dominator Calculation ------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Generic dominator tree construction - this file provides routines to; /// construct immediate dominator information for a flow-graph based on the; /// Semi-NCA algorithm described in this dissertation:; ///; /// [1] Linear-Time Algorithms for Dominators and Related Problems; /// Loukas Georgiadis, Princeton University, November 2005, pp. 21-23:; /// ftp://ftp.cs.princeton.edu/reports/2005/737.pdf; ///; /// Semi-NCA algorithm runs in O(n^2) worst-case time but usually slightly; /// faster than Simple Lengauer-Tarjan in practice.; ///; /// O(n^2) worst cases happen when the computation of nearest common ancestors; /// requires O(n) average time, which is very unlikely in real world. If this; /// ever turns out to be an issue, consider implementing a hybrid algorithm; /// that uses SLT to perform full constructions and SemiNCA for incremental; /// updates.; ///; /// The file uses the Depth Based Search algorithm to perform incremental; /// updates (insertion and deletions). The implemented algorithm is based on; /// this publication:; ///; /// [2] An Experimental Study of Dynamic Dominators; /// Loukas Georgiadis, et al., April 12 2016, pp. 5-7, 9-10:; /// https://arxiv.org/pdf/1604.02711.pdf; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:894,Usability,Simpl,Simple,894,"//===- GenericDomTreeConstruction.h - Dominator Calculation ------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Generic dominator tree construction - this file provides routines to; /// construct immediate dominator information for a flow-graph based on the; /// Semi-NCA algorithm described in this dissertation:; ///; /// [1] Linear-Time Algorithms for Dominators and Related Problems; /// Loukas Georgiadis, Princeton University, November 2005, pp. 21-23:; /// ftp://ftp.cs.princeton.edu/reports/2005/737.pdf; ///; /// Semi-NCA algorithm runs in O(n^2) worst-case time but usually slightly; /// faster than Simple Lengauer-Tarjan in practice.; ///; /// O(n^2) worst cases happen when the computation of nearest common ancestors; /// requires O(n) average time, which is very unlikely in real world. If this; /// ever turns out to be an issue, consider implementing a hybrid algorithm; /// that uses SLT to perform full constructions and SemiNCA for incremental; /// updates.; ///; /// The file uses the Depth Based Search algorithm to perform incremental; /// updates (insertion and deletions). The implemented algorithm is based on; /// this publication:; ///; /// [2] An Experimental Study of Dynamic Dominators; /// Loukas Georgiadis, et al., April 12 2016, pp. 5-7, 9-10:; /// https://arxiv.org/pdf/1604.02711.pdf; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:9,Deployability,Update,Updates,9,// Note: Updates inside PreViewCFG are already legalized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:91,Deployability,update,update,91,// Remembers if the whole tree was recalculated at some point during the; // current batch update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:46,Deployability,update,update,46,"// If BUI is a nullptr, then there's no batch update in progress.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:68,Deployability,update,update,68,"// Don't reset the pointer to BatchUpdateInfo here -- if there's an update; // in progress, we need this information to continue it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:249,Performance,perform,performed,249,"// Custom DFS implementation which can skip nodes based on a provided; // predicate. It also collects ReverseChildren so that we don't have to spend; // time getting predecessors in SemiNCA.; //; // If IsReverse is set to true, the DFS walk will be performed backwards; // relative to IsPostDom -- using reverse edges for dominators and forward; // edges for postdominators.; //; // If SuccOrder is specified then in this order the DFS traverses the children; // otherwise the order is implied by the results of getChildren().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:427,Testability,log,log,427,"// V is a predecessor of W. eval() returns V if V < W, otherwise the minimum; // of sdom(U), where U > W and there is a virtual forest path from U to V. The; // virtual forest consists of linked edges of processed vertices.; //; // We can follow Parent pointers (virtual forest edges) to determine the; // ancestor U with minimum sdom(U). But it is slow and thus we employ the path; // compression technique to speed up to O(m*log(n)). Theoretically the virtual; // forest can be organized as balanced trees to achieve almost linear; // O(m*alpha(m,n)) running time. But it requires two auxiliary arrays (Size; // and Child) and is unlikely to be faster than the simple implementation.; //; // For each vertex V, its Label points to the vertex with the minimal sdom(U); // (Semi) in its path from V (included) to NodeToInfo[V].Parent (excluded).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:663,Usability,simpl,simple,663,"// V is a predecessor of W. eval() returns V if V < W, otherwise the minimum; // of sdom(U), where U > W and there is a virtual forest path from U to V. The; // virtual forest consists of linked edges of processed vertices.; //; // We can follow Parent pointers (virtual forest edges) to determine the; // ancestor U with minimum sdom(U). But it is slow and thus we employ the path; // compression technique to speed up to O(m*log(n)). Theoretically the virtual; // forest can be organized as balanced trees to achieve almost linear; // O(m*alpha(m,n)) running time. But it requires two auxiliary arrays (Size; // and Child) and is unlikely to be faster than the simple implementation.; //; // For each vertex V, its Label points to the vertex with the minimal sdom(U); // (Semi) in its path from V (included) to NodeToInfo[V].Parent (excluded).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:64,Deployability,update,update,64,// Path compression. Point each vertex's Parent to the root and update its; // Label if any of its ancestors (PInfo->Label) has a smaller Semi.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:218,Testability,log,logically,218,// PostDominatorTree always has a virtual root that represents a virtual CFG; // node that serves as a single exit from the function. All the other exits; // (CFG nodes with terminators and nodes in infinite loops are logically; // connected to this virtual CFG exit node).; // This functions maps a nullptr CFG node to the virtual root tree node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:123,Availability,redundant,redundant,123,// Finds all roots without relaying on the set of roots already stored in the; // tree.; // We define roots to be some non-redundant set of the CFG nodes,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:123,Safety,redund,redundant,123,// Finds all roots without relaying on the set of roots already stored in the; // tree.; // We define roots to be some non-redundant set of the CFG nodes,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:99,Deployability,update,update,99,"// It may happen that there are some new nodes in the CFG that are result of; // the ongoing batch update, but we cannot really pretend that they don't; // exist -- we won't see any outgoing or incoming edges to them, so it's; // fine to discover them here, as they would end up appearing in the CFG at; // some point anyway.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:365,Integrability,depend,depending,365,"// Make another DFS pass over all other nodes to find the; // reverse-unreachable blocks, and find the furthest paths we'll be able; // to make.; // Note that this looks N^2, but it's really 2N worst case, if every node; // is unreachable. This is because we are still going to only visit each; // unreachable node once, we may just visit it in two directions,; // depending on how lucky we get.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:404,Availability,redundant,redundant,404,"// This function only makes sense for postdominators.; // We define roots to be some set of CFG nodes where (reverse) DFS walks have; // to start in order to visit all the CFG nodes (including the; // reverse-unreachable ones).; // When the search for non-trivial roots is done it may happen that some of; // the non-trivial roots are reverse-reachable from other non-trivial roots,; // which makes them redundant. This function removes them from the set of; // input roots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:404,Safety,redund,redundant,404,"// This function only makes sense for postdominators.; // We define roots to be some set of CFG nodes where (reverse) DFS walks have; // to start in order to visit all the CFG nodes (including the; // reverse-unreachable ones).; // When the search for non-trivial roots is done it may happen that some of; // the non-trivial roots are reverse-reachable from other non-trivial roots,; // which makes them redundant. This function removes them from the set of; // input roots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:32,Availability,redundant,redundant,32,// Trivial roots are always non-redundant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:32,Safety,redund,redundant,32,// Trivial roots are always non-redundant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:10,Deployability,update,update,10,"// If the update is using the actual CFG, BUI is null. If it's using a view,; // BUI is non-null and the PreCFGView is used. When calculating from; // scratch, make the PreViewCFG equal to the PostCFGView, so Post is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:115,Deployability,update,update,115,"// This is rebuilding the whole tree, not incrementally, but PostViewBUI is; // used in case the caller needs a DT update with a CFGView.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:62,Modifiability,variab,variables,62,// Step #0: Number blocks in depth-first order and initialize variables used; // in later stages of the algorithm.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:10,Performance,queue,queue,10,"// Bucket queue of tree nodes ordered by descending level. For simplicity,; // we use a priority_queue here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:63,Usability,simpl,simplicity,63,"// Bucket queue of tree nodes ordered by descending level. For simplicity,; // we use a priority_queue here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:32,Deployability,update,update,32,"// To is not a root, nothing to update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:3,Deployability,Update,Updates,3,// Updates the set of roots after insertion or deletion. This ensures that; // roots are the same when after a series of updates and when the tree would; // be built from scratch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:121,Deployability,update,updates,121,// Updates the set of roots after insertion or deletion. This ensures that; // roots are the same when after a series of updates and when the tree would; // be built from scratch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:49,Deployability,update,update,49,// The tree has only trivial roots -- nothing to update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:25,Deployability,update,update,25,"// It may be possible to update the tree without recalculating it, but; // we do not know yet how to do it, and it happens rarely in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:202,Energy Efficiency,reduce,reduces,202,"// Based on Lemma 2.5 from [2], after insertion of (From,To), v is affected; // iff depth(NCD)+1 < depth(v) && a path P from To to v exists where every; // w on P s.t. depth(v) <= depth(w); //; // This reduces to a widest path problem (maximizing the depth of the; // minimum vertex in the path) which can be solved by a modified version of; // Dijkstra with a bucket queue (named depth-based search in [2]).; // To is in the path, so depth(NCD)+1 < depth(v) <= depth(To). Nothing; // affected if this does not hold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:368,Performance,queue,queue,368,"// Based on Lemma 2.5 from [2], after insertion of (From,To), v is affected; // iff depth(NCD)+1 < depth(v) && a path P from To to v exists where every; // w on P s.t. depth(v) <= depth(w); //; // This reduces to a widest path problem (maximizing the depth of the; // minimum vertex in the path) which can be solved by a modified version of; // Dijkstra with a bucket queue (named depth-based search in [2]).; // To is in the path, so depth(NCD)+1 < depth(v) <= depth(To). Nothing; // affected if this does not hold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:77,Performance,queue,queue,77,// The condition is satisfied (Succ is affected). Add Succ to the; // bucket queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:3,Deployability,Update,Updates,3,// Updates immediate dominators and levels after insertion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:147,Deployability,configurat,configuration,147,"// Ensure that the edge was in fact deleted from the CFG before informing; // the DomTree about it.; // The check is O(N), so run it only in debug configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:147,Modifiability,config,configuration,147,"// Ensure that the edge was in fact deleted from the CFG before informing; // the DomTree about it.; // The check is O(N), so run it only in debug configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:47,Deployability,Update,Updater,47,//~~; //===--------------------- DomTree Batch Updater --------------------------===; //~~,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:139,Deployability,update,updates,139,// Note: the PostViewCFG is only used when computing from scratch. It's data; // should already included in the PreViewCFG for incremental updates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:35,Deployability,update,update,35,// Take the fast path for a single update and avoid running the batch update; // machinery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:70,Deployability,update,update,70,// Take the fast path for a single update and avoid running the batch update; // machinery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:46,Safety,avoid,avoid,46,// Take the fast path for a single update and avoid running the batch update; // machinery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:52,Deployability,update,updates,52,"// Recalculate the DominatorTree when the number of updates; // exceeds a threshold, which usually makes direct updating slower than; // recalculation. We select this threshold proportional to the; // size of the DominatorTree. The constant is selected; // by choosing the one with an acceptable performance on some real-world; // inputs.; // Make unittests of the incremental algorithm work",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:296,Performance,perform,performance,296,"// Recalculate the DominatorTree when the number of updates; // exceeds a threshold, which usually makes direct updating slower than; // recalculation. We select this threshold proportional to the; // size of the DominatorTree. The constant is selected; // by choosing the one with an acceptable performance on some real-world; // inputs.; // Make unittests of the incremental algorithm work",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:75,Deployability,update,updates,75,"// If the DominatorTree was recalculated at some point, stop the batch; // updates. Full recalculations ignore batch updates and look at the actual; // CFG.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:117,Deployability,update,updates,117,"// If the DominatorTree was recalculated at some point, stop the batch; // updates. Full recalculations ignore batch updates and look at the actual; // CFG.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:20,Deployability,update,update,20,"// Popping the next update, will move the PreViewCFG to the next snapshot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:155,Availability,error,errors,155,"// FIXME: The LLVM_DEBUG macro only plays well with a modular; // build of LLVM when the header is marked as textual, but doing; // so causes redefinition errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:169,Testability,log,log,169,"// Check if the computed DFS numbers are correct. Note that DFS info may not; // be valid, and when that is the case, we don't verify the numbers.; // Running time: O(N log(N)).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:13,Integrability,rout,routines,13,"// The below routines verify the correctness of the dominator tree relative to; // the CFG it's coming from. A tree is a dominator tree iff it has two; // properties, called the parent property and the sibling property. Tarjan; // and Lengauer prove (but don't explicitly name) the properties as part of; // the proofs in their 1972 paper, but the proofs are mostly part of proving; // things about semidominators and idoms, and some of them are simply asserted; // based on even earlier papers (see, e.g., lemma 2). Some papers refer to; // these properties as ""valid"" and ""co-valid"". See, e.g., ""Dominators,; // directed bipolar orders, and independent spanning trees"" by Loukas; // Georgiadis and Robert E. Tarjan, as well as ""Dominator Tree Verification; // and Vertex-Disjoint Paths "" by the same authors.; // A very simple and direct explanation of these properties can be found in; // ""An Experimental Study of Dynamic Dominators"", found at; // https://arxiv.org/abs/1604.02711; // The easiest way to think of the parent property is that it's a requirement; // of being a dominator. Let's just take immediate dominators. For PARENT to; // be an immediate dominator of CHILD, all paths in the CFG must go through; // PARENT before they hit CHILD. This implies that if you were to cut PARENT; // out of the CFG, there should be no paths to CHILD that are reachable. If; // there are, then you now have a path from PARENT to CHILD that goes around; // PARENT and still reaches CHILD, which by definition, means PARENT can't be; // a dominator of CHILD (let alone an immediate one).; // The sibling property is similar. It says that for each pair of sibling; // nodes in the dominator tree (LEFT and RIGHT) , they must not dominate each; // other. If sibling LEFT dominated sibling RIGHT, it means there are no; // paths in the CFG from sibling LEFT to sibling RIGHT that do not go through; // LEFT, and thus, LEFT is really an ancestor (in the dominator tree) of; // RIGHT, not a sibling.; // It i",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:453,Testability,assert,asserted,453,"// The below routines verify the correctness of the dominator tree relative to; // the CFG it's coming from. A tree is a dominator tree iff it has two; // properties, called the parent property and the sibling property. Tarjan; // and Lengauer prove (but don't explicitly name) the properties as part of; // the proofs in their 1972 paper, but the proofs are mostly part of proving; // things about semidominators and idoms, and some of them are simply asserted; // based on even earlier papers (see, e.g., lemma 2). Some papers refer to; // these properties as ""valid"" and ""co-valid"". See, e.g., ""Dominators,; // directed bipolar orders, and independent spanning trees"" by Loukas; // Georgiadis and Robert E. Tarjan, as well as ""Dominator Tree Verification; // and Vertex-Disjoint Paths "" by the same authors.; // A very simple and direct explanation of these properties can be found in; // ""An Experimental Study of Dynamic Dominators"", found at; // https://arxiv.org/abs/1604.02711; // The easiest way to think of the parent property is that it's a requirement; // of being a dominator. Let's just take immediate dominators. For PARENT to; // be an immediate dominator of CHILD, all paths in the CFG must go through; // PARENT before they hit CHILD. This implies that if you were to cut PARENT; // out of the CFG, there should be no paths to CHILD that are reachable. If; // there are, then you now have a path from PARENT to CHILD that goes around; // PARENT and still reaches CHILD, which by definition, means PARENT can't be; // a dominator of CHILD (let alone an immediate one).; // The sibling property is similar. It says that for each pair of sibling; // nodes in the dominator tree (LEFT and RIGHT) , they must not dominate each; // other. If sibling LEFT dominated sibling RIGHT, it means there are no; // paths in the CFG from sibling LEFT to sibling RIGHT that do not go through; // LEFT, and thus, LEFT is really an ancestor (in the dominator tree) of; // RIGHT, not a sibling.; // It i",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:446,Usability,simpl,simply,446,"// The below routines verify the correctness of the dominator tree relative to; // the CFG it's coming from. A tree is a dominator tree iff it has two; // properties, called the parent property and the sibling property. Tarjan; // and Lengauer prove (but don't explicitly name) the properties as part of; // the proofs in their 1972 paper, but the proofs are mostly part of proving; // things about semidominators and idoms, and some of them are simply asserted; // based on even earlier papers (see, e.g., lemma 2). Some papers refer to; // these properties as ""valid"" and ""co-valid"". See, e.g., ""Dominators,; // directed bipolar orders, and independent spanning trees"" by Loukas; // Georgiadis and Robert E. Tarjan, as well as ""Dominator Tree Verification; // and Vertex-Disjoint Paths "" by the same authors.; // A very simple and direct explanation of these properties can be found in; // ""An Experimental Study of Dynamic Dominators"", found at; // https://arxiv.org/abs/1604.02711; // The easiest way to think of the parent property is that it's a requirement; // of being a dominator. Let's just take immediate dominators. For PARENT to; // be an immediate dominator of CHILD, all paths in the CFG must go through; // PARENT before they hit CHILD. This implies that if you were to cut PARENT; // out of the CFG, there should be no paths to CHILD that are reachable. If; // there are, then you now have a path from PARENT to CHILD that goes around; // PARENT and still reaches CHILD, which by definition, means PARENT can't be; // a dominator of CHILD (let alone an immediate one).; // The sibling property is similar. It says that for each pair of sibling; // nodes in the dominator tree (LEFT and RIGHT) , they must not dominate each; // other. If sibling LEFT dominated sibling RIGHT, it means there are no; // paths in the CFG from sibling LEFT to sibling RIGHT that do not go through; // LEFT, and thus, LEFT is really an ancestor (in the dominator tree) of; // RIGHT, not a sibling.; // It i",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:822,Usability,simpl,simple,822,"// The below routines verify the correctness of the dominator tree relative to; // the CFG it's coming from. A tree is a dominator tree iff it has two; // properties, called the parent property and the sibling property. Tarjan; // and Lengauer prove (but don't explicitly name) the properties as part of; // the proofs in their 1972 paper, but the proofs are mostly part of proving; // things about semidominators and idoms, and some of them are simply asserted; // based on even earlier papers (see, e.g., lemma 2). Some papers refer to; // these properties as ""valid"" and ""co-valid"". See, e.g., ""Dominators,; // directed bipolar orders, and independent spanning trees"" by Loukas; // Georgiadis and Robert E. Tarjan, as well as ""Dominator Tree Verification; // and Vertex-Disjoint Paths "" by the same authors.; // A very simple and direct explanation of these properties can be found in; // ""An Experimental Study of Dynamic Dominators"", found at; // https://arxiv.org/abs/1604.02711; // The easiest way to think of the parent property is that it's a requirement; // of being a dominator. Let's just take immediate dominators. For PARENT to; // be an immediate dominator of CHILD, all paths in the CFG must go through; // PARENT before they hit CHILD. This implies that if you were to cut PARENT; // out of the CFG, there should be no paths to CHILD that are reachable. If; // there are, then you now have a path from PARENT to CHILD that goes around; // PARENT and still reaches CHILD, which by definition, means PARENT can't be; // a dominator of CHILD (let alone an immediate one).; // The sibling property is similar. It says that for each pair of sibling; // nodes in the dominator tree (LEFT and RIGHT) , they must not dominate each; // other. If sibling LEFT dominated sibling RIGHT, it means there are no; // paths in the CFG from sibling LEFT to sibling RIGHT that do not go through; // LEFT, and thus, LEFT is really an ancestor (in the dominator tree) of; // RIGHT, not a sibling.; // It i",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:10,Deployability,Update,Updated,10,// FIXME: Updated to use the PreViewCFG and behave the same as until now.; // This behavior is however incorrect; this actually needs the PostViewCFG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:3,Usability,Simpl,Simplist,3,"// Simplist check is to compare against a new tree. This will also; // usefully print the old and new trees, if they are different.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:59,Testability,log,log,59,// Common checks to verify the properties of the tree. O(N log N) at worst.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:16,Integrability,depend,depending,16,// Extra checks depending on VerificationLevel. Up to O(N^3).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericIteratedDominanceFrontier.h:858,Modifiability,variab,variable,858,"//===- IteratedDominanceFrontier.h - Calculate IDF --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Compute iterated dominance frontiers using a linear time algorithm.; ///; /// The algorithm used here is based on:; ///; /// Sreedhar and Gao. A linear time algorithm for placing phi-nodes.; /// In Proceedings of the 22nd ACM SIGPLAN-SIGACT Symposium on Principles of; /// Programming Languages; /// POPL '95. ACM, New York, NY, 62-73.; ///; /// It has been modified to not explicitly use the DJ graph data structure and; /// to directly compute pruned SSA using per-variable liveness information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericIteratedDominanceFrontier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericIteratedDominanceFrontier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericIteratedDominanceFrontier.h:157,Performance,perform,performs,157,"/// Calculate iterated dominance frontiers; ///; /// This uses the linear-time phi algorithm based on DJ-graphs mentioned in; /// the file-level comment. It performs DF->IDF pruning using the live-in; /// set, to avoid computing the IDF for blocks where an inserted PHI node; /// would be dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericIteratedDominanceFrontier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericIteratedDominanceFrontier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericIteratedDominanceFrontier.h:213,Safety,avoid,avoid,213,"/// Calculate iterated dominance frontiers; ///; /// This uses the linear-time phi algorithm based on DJ-graphs mentioned in; /// the file-level comment. It performs DF->IDF pruning using the live-in; /// set, to avoid computing the IDF for blocks where an inserted PHI node; /// would be dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericIteratedDominanceFrontier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericIteratedDominanceFrontier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericIteratedDominanceFrontier.h:18,Performance,queue,queue,18,// Use a priority queue keyed on dominator tree level so that inserted nodes; // are handled from the bottom of the dominator tree upwards. We also augment; // the level with a DFS number to ensure that the blocks are ordered in a; // deterministic way.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericIteratedDominanceFrontier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericIteratedDominanceFrontier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:147,Safety,detect,detected,147,//===----------------------------------------------------------------------===//; /// Instances of this class are used to represent loops that are detected in the; /// flow graph.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:18,Integrability,interface,interface,18,/// This is a raw interface for bypassing addChildLoop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:21,Safety,detect,detect,21,"// LoopInfo does not detect irreducible control flow, just natural; // loops. That is, it is possible that there is cyclic control; // flow within the ""innermost loop"" or around the ""outermost; // loop"".; /// Return true if the loop does not contain any (natural) loops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:87,Energy Efficiency,efficient,efficiently,87,"/// Return a direct, mutable handle to the blocks vector so that we can; /// mutate it efficiently with techniques like `std::remove`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:84,Energy Efficiency,efficient,efficiently,84,"/// Return a direct, mutable handle to the blocks set so that we can; /// mutate it efficiently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:403,Availability,error,error,403,"/// Return true if this loop is no longer valid. The only valid use of this; /// helper is ""assert(L.isInvalid())"" or equivalent, since IsInvalid is set to; /// true by the destructor. In other words, if this accessor returns true,; /// the caller has already triggered UB by calling this accessor; and so it; /// can only be called in a context where a return value of true indicates a; /// programmer error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:209,Security,access,accessor,209,"/// Return true if this loop is no longer valid. The only valid use of this; /// helper is ""assert(L.isInvalid())"" or equivalent, since IsInvalid is set to; /// true by the destructor. In other words, if this accessor returns true,; /// the caller has already triggered UB by calling this accessor; and so it; /// can only be called in a context where a return value of true indicates a; /// programmer error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:289,Security,access,accessor,289,"/// Return true if this loop is no longer valid. The only valid use of this; /// helper is ""assert(L.isInvalid())"" or equivalent, since IsInvalid is set to; /// true by the destructor. In other words, if this accessor returns true,; /// the caller has already triggered UB by calling this accessor; and so it; /// can only be called in a context where a return value of true indicates a; /// programmer error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:92,Testability,assert,assert,92,"/// Return true if this loop is no longer valid. The only valid use of this; /// helper is ""assert(L.isInvalid())"" or equivalent, since IsInvalid is set to; /// true by the destructor. In other words, if this accessor returns true,; /// the caller has already triggered UB by calling this accessor; and so it; /// can only be called in a context where a return value of true indicates a; /// programmer error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:291,Modifiability,variab,variable,291,"//===--------------------------------------------------------------------===//; // APIs for simple analysis of the loop.; //; // Note that all of these methods can fail on general loops (ie, there may not; // be a preheader, etc). For best success, the loop simplification and; // induction variable canonicalization pass should be used to normalize loops; // for easy analysis. These methods assume canonical loops.; /// Return all blocks inside the loop that have successors outside of the; /// loop. These are the blocks _inside of the current loop_ which branch out.; /// The returned list is always unique.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:92,Usability,simpl,simple,92,"//===--------------------------------------------------------------------===//; // APIs for simple analysis of the loop.; //; // Note that all of these methods can fail on general loops (ie, there may not; // be a preheader, etc). For best success, the loop simplification and; // induction variable canonicalization pass should be used to normalize loops; // for easy analysis. These methods assume canonical loops.; /// Return all blocks inside the loop that have successors outside of the; /// loop. These are the blocks _inside of the current loop_ which branch out.; /// The returned list is always unique.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:258,Usability,simpl,simplification,258,"//===--------------------------------------------------------------------===//; // APIs for simple analysis of the loop.; //; // Note that all of these methods can fail on general loops (ie, there may not; // be a preheader, etc). For best success, the loop simplification and; // induction variable canonicalization pass should be used to normalize loops; // for easy analysis. These methods assume canonical loops.; /// Return all blocks inside the loop that have successors outside of the; /// loop. These are the blocks _inside of the current loop_ which branch out.; /// The returned list is always unique.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:191,Deployability,update,update,191,"//===--------------------------------------------------------------------===//; // APIs for updating loop information after changing the CFG; //; /// This method is used by other analyses to update loop information.; /// NewBB is set to be a new member of the current loop.; /// Because of this, it is added as a member of all parent loops, and is added; /// to the specified LoopInfo object as being in the current basic block. It; /// is not valid to replace the loop header with this method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:118,Deployability,update,updates,118,"/// This is used when splitting loops up. It replaces the OldChild entry in; /// our children list with NewChild, and updates the parent pointer of; /// OldChild to be null and the NewChild to be this loop.; /// This updates the loop depth of the new child.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:217,Deployability,update,updates,217,"/// This is used when splitting loops up. It replaces the OldChild entry in; /// our children list with NewChild, and updates the parent pointer of; /// OldChild to be null and the NewChild to be this loop.; /// This updates the loop depth of the new child.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:65,Deployability,update,updates,65,/// Add the specified loop to be a child of this loop.; /// This updates the loop depth of the new child.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:4,Integrability,interface,interface,4,"/// interface to reverse Blocks[from, end of loop] in this loop",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:4,Integrability,interface,interface,4,/// interface to do reserve() for Blocks,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:121,Deployability,update,update,121,"/// This removes the specified basic block from the current loop, updating the; /// Blocks as appropriate. This does not update the mapping in the LoopInfo; /// class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:130,Modifiability,polymorphi,polymorphism,130,/// Returns true if the loop is annotated parallel.; ///; /// Derived classes can override this method using static template; /// polymorphism.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:236,Safety,risk,risk,236,"// Since loop passes like SCEV are allowed to key analysis results off of; // `Loop` pointers, we cannot re-use pointers within a loop pass manager.; // This means loop passes should not be `delete` ing `Loop` objects directly; // (and risk a later `Loop` allocation re-using the address of a previous one); // but should be using LoopInfo::markAsRemoved, which keeps around the `Loop`; // pointer till the end of the lifetime of the `LoopInfo` object.; //; // To make it easier to follow this rule, we mark the destructor as; // non-public.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:14,Usability,clear,clear,14,// We have to clear the arguments top level loops as we've taken ownership.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:29,Integrability,interface,interface,29,/// iterator/begin/end - The interface to the top-level loops in the current; /// function.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h:94,Usability,simpl,simple,94,//===----------------------------------------------------------------------===//; // APIs for simple analysis of the loop. See header notes.; /// getExitingBlocks - Return all blocks inside the loop that have successors; /// outside of the loop. These are the blocks _inside of the current loop_; /// which branch out. The returned list is always unique.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h:215,Deployability,update,update,215,"//===----------------------------------------------------------------------===//; // APIs for updating loop information after changing the CFG; //; /// addBasicBlockToLoop - This method is used by other analyses to update loop; /// information. NewBB is set to be a new member of the current loop.; /// Because of this, it is added as a member of all parent loops, and is added; /// to the specified LoopInfo object as being in the current basic block. It; /// is not valid to replace the loop header with this method.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h:141,Deployability,update,updates,141,"/// replaceChildLoopWith - This is used when splitting loops up. It replaces; /// the OldChild entry in our children list with NewChild, and updates the; /// parent pointer of OldChild to be null and the NewChild to be this loop.; /// This updates the loop depth of the new child.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h:240,Deployability,update,updates,240,"/// replaceChildLoopWith - This is used when splitting loops up. It replaces; /// the OldChild entry in our children list with NewChild, and updates the; /// parent pointer of OldChild to be null and the NewChild to be this loop.; /// This updates the loop depth of the new child.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h:184,Integrability,depend,depend,184,//===----------------------------------------------------------------------===//; /// Stable LoopInfo Analysis - Build a loop tree using stable iterators so the; /// result does / not depend on use list (block predecessor) order.; ///; /// Discover a subloop with the specified backedges such that: All blocks within; /// this loop are mapped to this loop or a subloop. And all subloops within this; /// loop have their parent loop set to this loop or a subloop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h:3,Performance,Perform,Perform,3,// Perform a backward CFG traversal using a worklist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h:3,Performance,Perform,Perform,3,// Perform a backward CFG traversal to discover and map blocks in this loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h:3,Performance,Perform,Perform,3,// Perform a single forward CFG traversal to populate block and subloop; // vectors for all loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GlobPattern.h:53,Safety,avoid,avoid,53,"// Returns true for glob pattern ""*"". Can be used to avoid expensive; // preparation/acquisition of the input for match().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GlobPattern.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GlobPattern.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:410,Integrability,interface,interface,410,"//===- llvm/Support/GraphWriter.h - Write graph to a .dot file --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a simple interface that can be used to print out generic; // LLVM graphs to "".dot"" files. ""dot"" is a tool that is part of the AT&T; // graphviz package (http://www.research.att.com/sw/tools/graphviz/) which can; // be used to turn the files output by this interface into a variety of; // different graphics formats.; //; // Graphs do not need to implement any interface past what is already required; // by the GraphTraits template, but they can choose to implement specializations; // of the DOTGraphTraits template if they want to customize the graphs output in; // any way.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:657,Integrability,interface,interface,657,"//===- llvm/Support/GraphWriter.h - Write graph to a .dot file --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a simple interface that can be used to print out generic; // LLVM graphs to "".dot"" files. ""dot"" is a tool that is part of the AT&T; // graphviz package (http://www.research.att.com/sw/tools/graphviz/) which can; // be used to turn the files output by this interface into a variety of; // different graphics formats.; //; // Graphs do not need to implement any interface past what is already required; // by the GraphTraits template, but they can choose to implement specializations; // of the DOTGraphTraits template if they want to customize the graphs output in; // any way.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:761,Integrability,interface,interface,761,"//===- llvm/Support/GraphWriter.h - Write graph to a .dot file --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a simple interface that can be used to print out generic; // LLVM graphs to "".dot"" files. ""dot"" is a tool that is part of the AT&T; // graphviz package (http://www.research.att.com/sw/tools/graphviz/) which can; // be used to turn the files output by this interface into a variety of; // different graphics formats.; //; // Graphs do not need to implement any interface past what is already required; // by the GraphTraits template, but they can choose to implement specializations; // of the DOTGraphTraits template if they want to customize the graphs output in; // any way.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:403,Usability,simpl,simple,403,"//===- llvm/Support/GraphWriter.h - Write graph to a .dot file --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a simple interface that can be used to print out generic; // LLVM graphs to "".dot"" files. ""dot"" is a tool that is part of the AT&T; // graphviz package (http://www.research.att.com/sw/tools/graphviz/) which can; // be used to turn the files output by this interface into a variety of; // different graphics formats.; //; // Graphs do not need to implement any interface past what is already required; // by the GraphTraits template, but they can choose to implement specializations; // of the DOTGraphTraits template if they want to customize the graphs output in; // any way.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:45,Usability,Simpl,Simply,45,/// Get a color string for this node number. Simply round-robin selects; /// from a reasonable number of colors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:21,Integrability,message,messages,21,// Include truncated messages when counting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:31,Usability,simpl,simple,31,/// emitSimpleNode - Outputs a simple (non-record) node,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:37,Usability,simpl,simple,37,/// emitEdge - Output an edge from a simple node into the graph...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:54,Availability,error,error,54,// Writing over an existing file is not considered an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:55,Integrability,interface,interface,55,"//===- llvm/Support/HashBuilder.h - Convenient hashing interface-*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an interface allowing to conveniently build hashes of; // various data types, without relying on the underlying hasher type to know; // about hashed data types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:407,Integrability,interface,interface,407,"//===- llvm/Support/HashBuilder.h - Convenient hashing interface-*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an interface allowing to conveniently build hashes of; // various data types, without relying on the underlying hasher type to know; // about hashed data types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:20,Security,Hash,HashBuilder,20,"//===- llvm/Support/HashBuilder.h - Convenient hashing interface-*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an interface allowing to conveniently build hashes of; // various data types, without relying on the underlying hasher type to know; // about hashed data types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:47,Security,hash,hashing,47,"//===- llvm/Support/HashBuilder.h - Convenient hashing interface-*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an interface allowing to conveniently build hashes of; // various data types, without relying on the underlying hasher type to know; // about hashed data types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:448,Security,hash,hashes,448,"//===- llvm/Support/HashBuilder.h - Convenient hashing interface-*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an interface allowing to conveniently build hashes of; // various data types, without relying on the underlying hasher type to know; // about hashed data types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:516,Security,hash,hasher,516,"//===- llvm/Support/HashBuilder.h - Convenient hashing interface-*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an interface allowing to conveniently build hashes of; // various data types, without relying on the underlying hasher type to know; // about hashed data types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:546,Security,hash,hashed,546,"//===- llvm/Support/HashBuilder.h - Convenient hashing interface-*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an interface allowing to conveniently build hashes of; // various data types, without relying on the underlying hasher type to know; // about hashed data types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:51,Security,hash,hashed,51,/// Trait to indicate whether a type's bits can be hashed directly (after; /// endianness correction).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:50,Security,hash,hasher,50,"// namespace hashbuilder_detail; /// Declares the hasher member, and functions forwarding directly to the hasher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:106,Security,hash,hasher,106,"// namespace hashbuilder_detail; /// Declares the hasher member, and functions forwarding directly to the hasher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:25,Deployability,update,update,25,/// Forward to `HasherT::update(ArrayRef<uint8_t>)`.; ///; /// This may not take the size of `Data` into account.; /// Users of this function should pay attention to respect endianness; /// contraints.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:16,Security,Hash,HasherT,16,/// Forward to `HasherT::update(ArrayRef<uint8_t>)`.; ///; /// This may not take the size of `Data` into account.; /// Users of this function should pay attention to respect endianness; /// contraints.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:25,Deployability,update,update,25,/// Forward to `HasherT::update(ArrayRef<uint8_t>)`.; ///; /// This may not take the size of `Data` into account.; /// Users of this function should pay attention to respect endianness; /// contraints.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:16,Security,Hash,HasherT,16,/// Forward to `HasherT::update(ArrayRef<uint8_t>)`.; ///; /// This may not take the size of `Data` into account.; /// Users of this function should pay attention to respect endianness; /// contraints.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:37,Availability,avail,available,37,/// Forward to `HasherT::final()` if available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:16,Security,Hash,HasherT,16,/// Forward to `HasherT::final()` if available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:38,Availability,avail,available,38,/// Forward to `HasherT::result()` if available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:16,Security,Hash,HasherT,16,/// Forward to `HasherT::result()` if available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:396,Deployability,update,update,396,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1577,Deployability,update,update,1577," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:2201,Deployability,update,update,2201," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:4,Integrability,Interface,Interface,4,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:672,Integrability,interface,interface,672,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1381,Integrability,interface,interface,1381," is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1518,Integrability,interface,interface,1518," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1654,Modifiability,variab,variable-size,1654," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1890,Modifiability,variab,variable-size,1890," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1628,Safety,avoid,avoid,1628," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:22,Security,hash,hash,22,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:51,Security,hash,hasher,51,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:222,Security,hash,hashed,222,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:269,Security,hash,hashed,269,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:291,Security,hash,hasher,291,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:358,Security,hash,hasher,358,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:371,Security,Hash,HasherT,371,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:498,Security,hash,hasher,498,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:540,Security,Hash,HasherT,540,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:599,Security,Hash,HasherT,599,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:791,Security,hash,hashing,791,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:933,Security,hash,hashing,933,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1013,Security,hash,hash,1013,"/// Interface to help hash various types through a hasher type.; ///; /// Via provided specializations of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1156,Security,hash,hashing,1156," of `add`, `addRange`, and `addRangeElements`; /// functions, various types (e.g. `ArrayRef`, `StringRef`, etc.) can be hashed; /// without requiring any knowledge of hashed types from the hasher type.; ///; /// The only method expected from the templated hasher type `HasherT` is:; /// * void update(ArrayRef<uint8_t> Data); ///; /// Additionally, the following methods will be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `St",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1564,Security,hash,hasher,1564," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1940,Security,hash,hasher,1940," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1986,Security,hash,hash,1986," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:2038,Security,hash,hash,2038," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:2181,Security,hash,hasher,2181," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:2267,Security,hash,hash,2267," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:2429,Security,hash,hash,2429," be forwarded to the hasher type:; /// * decltype(std::declval<HasherT &>().final()) final(); /// * decltype(std::declval<HasherT &>().result()) result(); ///; /// From a user point of view, the interface provides the following:; /// * `template<typename T> add(const T &Value)`; /// The `add` function implements hashing of various types.; /// * `template <typename ItT> void addRange(ItT First, ItT Last)`; /// The `addRange` function is designed to aid hashing a range of values.; /// It explicitly adds the size of the range in the hash.; /// * `template <typename ItT> void addRangeElements(ItT First, ItT Last)`; /// The `addRangeElements` function is also designed to aid hashing a range of; /// values. In contrast to `addRange`, it **ignores** the size of the range,; /// behaving as if elements were added one at a time with `add`.; ///; /// User-defined `struct` types can participate in this interface by providing; /// an `addHash` templated function. See the associated template specialization; /// for details.; ///; /// This interface does not impose requirements on the hasher; /// `update(ArrayRef<uint8_t> Data)` method. We want to avoid collisions for; /// variable-size types; for example for; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// . Thus, specializations of `add` and `addHash` for variable-size types must; /// not assume that the hasher type considers the size as part of the hash; they; /// must explicitly add the size to the hash. See for example specializations; /// for `ArrayRef` and `StringRef`.; ///; /// Additionally, since types are eventually forwarded to the hasher's; /// `void update(ArrayRef<uint8_t>)` method, endianness plays a role in the hash; /// computation (for example when computing `add((int)123)`).; /// Specifiying a non-`native` `Endianness` template parameter allows to compute; /// stable hash across platforms with different endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:14,Security,hash,hashing,14,"/// Implement hashing for hashable data types, e.g. integral or enum values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:26,Security,hash,hashable,26,"/// Implement hashing for hashable data types, e.g. integral or enum values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:12,Security,hash,hashing,12,"/// Support hashing `ArrayRef`.; ///; /// `Value.size()` is taken into account to ensure cases like; /// ```; /// builder.add({1});; /// builder.add({2, 3});; /// ```; /// and; /// ```; /// builder.add({1, 2});; /// builder.add({3});; /// ```; /// do not collide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:94,Deployability,update,update,94,"// As of implementation time, simply calling `addRange(Value)` would also go; // through the `update` fast path. But that would rely on the implementation; // details of `ArrayRef::begin()` and `ArrayRef::end()`. Explicitly call; // `update` to guarantee the fast path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:234,Deployability,update,update,234,"// As of implementation time, simply calling `addRange(Value)` would also go; // through the `update` fast path. But that would rely on the implementation; // details of `ArrayRef::begin()` and `ArrayRef::end()`. Explicitly call; // `update` to guarantee the fast path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:30,Usability,simpl,simply,30,"// As of implementation time, simply calling `addRange(Value)` would also go; // through the `update` fast path. But that would rely on the implementation; // details of `ArrayRef::begin()` and `ArrayRef::end()`. Explicitly call; // `update` to guarantee the fast path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:12,Security,hash,hashing,12,"/// Support hashing `StringRef`.; ///; /// `Value.size()` is taken into account to ensure cases like; /// ```; /// builder.add(""a"");; /// builder.add(""bc"");; /// ```; /// and; /// ```; /// builder.add(""ab"");; /// builder.add(""c"");; /// ```; /// do not collide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:90,Deployability,update,update,90,"// As of implementation time, simply calling `addRange(Value)` would also go; // through `update`. But that would rely on the implementation of; // `StringRef::begin()` and `StringRef::end()`. Explicitly call `update` to; // guarantee the fast path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:210,Deployability,update,update,210,"// As of implementation time, simply calling `addRange(Value)` would also go; // through `update`. But that would rely on the implementation of; // `StringRef::begin()` and `StringRef::end()`. Explicitly call `update` to; // guarantee the fast path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:30,Usability,simpl,simply,30,"// As of implementation time, simply calling `addRange(Value)` would also go; // through `update`. But that would rely on the implementation of; // `StringRef::begin()` and `StringRef::end()`. Explicitly call `update` to; // guarantee the fast path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:874,Deployability,update,update,874,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1117,Deployability,update,update,1117,"s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llv",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1392,Deployability,update,update,1392,"plate <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const CustomContainer &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value.Size),; /// sizeof(Value.Size) + Value.Size * sizeof(Value.Elements[0])));; /// } else {; /// // `addRange` will take care of encoding the size.; /// HBuilder.addR",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:2244,Deployability,update,update,2244,"ndianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const CustomContainer &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value.Size),; /// sizeof(Value.Size) + Value.Size * sizeof(Value.Elements[0])));; /// } else {; /// // `addRange` will take care of encoding the size.; /// HBuilder.addRange(&Value.Elements[0], &Value.Elements[0] +; /// Value.Size);; /// }; /// }; /// };; /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1699,Modifiability,variab,variable-size,1699,"ndianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const CustomContainer &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value.Size),; /// sizeof(Value.Size) + Value.Size * sizeof(Value.Elements[0])));; /// } else {; /// // `addRange` will take care of encoding the size.; /// HBuilder.addRange(&Value.Elements[0], &Value.Elements[0] +; /// Value.Size);; /// }; /// }; /// };; /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1134,Performance,perform,performance,1134,"s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llv",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:705,Safety,avoid,avoid,705,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1649,Safety,avoid,avoid,1649,"ndianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const CustomContainer &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value.Size),; /// sizeof(Value.Size) + Value.Size * sizeof(Value.Elements[0])));; /// } else {; /// // `addRange` will take care of encoding the size.; /// HBuilder.addRange(&Value.Elements[0], &Value.Elements[0] +; /// Value.Size);; /// }; /// }; /// };; /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:14,Security,hash,hashing,14,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:104,Security,hash,hashing,104,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:117,Security,Hash,HashBuilder,117,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:218,Security,Hash,HasherT,218,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:274,Security,Hash,HashBuilder,274,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:286,Security,Hash,HasherT,286,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:486,Security,Hash,HasherT,486,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:542,Security,Hash,HashBuilder,542,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:554,Security,Hash,HasherT,554,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1074,Security,hash,hash,1074,"s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llv",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1180,Security,Hash,HasherT,1180,"(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const CustomContainer &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterp",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1243,Security,Hash,HashBuilder,1243,"(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const CustomContainer &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterp",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:1255,Security,Hash,HasherT,1255,"(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const CustomContainer &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterp",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:2035,Security,Hash,HasherT,2035,"ndianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const CustomContainer &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value.Size),; /// sizeof(Value.Size) + Value.Size * sizeof(Value.Elements[0])));; /// } else {; /// // `addRange` will take care of encoding the size.; /// HBuilder.addRange(&Value.Elements[0], &Value.Elements[0] +; /// Value.Size);; /// }; /// }; /// };; /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:2098,Security,Hash,HashBuilder,2098,"ndianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const CustomContainer &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value.Size),; /// sizeof(Value.Size) + Value.Size * sizeof(Value.Elements[0])));; /// } else {; /// // `addRange` will take care of encoding the size.; /// HBuilder.addRange(&Value.Elements[0], &Value.Elements[0] +; /// Value.Size);; /// }; /// }; /// };; /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:2110,Security,Hash,HasherT,2110,"ndianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = I;; /// }; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const CustomContainer &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value.Size),; /// sizeof(Value.Size) + Value.Size * sizeof(Value.Elements[0])));; /// } else {; /// // `addRange` will take care of encoding the size.; /// HBuilder.addRange(&Value.Elements[0], &Value.Elements[0] +; /// Value.Size);; /// }; /// }; /// };; /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:409,Usability,Simpl,SimpleStruct,409,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:597,Usability,Simpl,SimpleStruct,597,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:45,Usability,simpl,simply,45,"/// A convenenience variadic helper.; /// It simply iterates over its arguments, in order.; /// ```; /// add(Arg1, Arg2);; /// ```; /// is equivalent to; /// ```; /// add(Arg1); /// add(Arg2); /// ```",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:63,Security,hash,hash,63,/// Adjust `Value` for the target endianness and add it to the hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:15,Availability,avail,available,15,"// FIXME: Once available, specialize this function for `contiguous_iterator`s,; // and use it for `ArrayRef` and `StringRef`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InitLLVM.h:315,Deployability,install,installed,315,"// The main() functions in typical LLVM tools start with InitLLVM which does; // the following one-time initializations:; //; // 1. Setting up a signal handler so that pretty stack trace is printed out; // if a process crashes. A signal handler that exits when a failed write to; // a pipe occurs may optionally be installed: this is on-by-default.; //; // 2. Set up the global new-handler which is called when a memory allocation; // attempt fails.; //; // 3. If running on Windows, obtain command line arguments using a; // multibyte character-aware API and convert arguments into UTF-8; // encoding, so that you can assume that command line arguments are; // always encoded in UTF-8 on any platform.; //; // InitLLVM calls llvm_shutdown() on destruction, which cleans up; // ManagedStatic objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/InitLLVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InitLLVM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h:461,Performance,perform,perform,461,"/// < Invalid indicates there is no way to represent the cost as a; /// numeric value. This state exists to represent a possible issue,; /// e.g. if the cost-model knows the operation cannot be expanded; /// into a valid code-sequence by the code-generator. While some; /// passes may assert that the calculated cost must be valid, it is; /// up to individual passes how to interpret an Invalid cost. For; /// example, a transformation pass could choose not to perform a; /// transformation if the resulting cost would end up Invalid.; /// Because some passes may assert a cost is Valid, it is not; /// recommended to use Invalid costs to model 'Unknown'.; /// Note that Invalid is semantically different from a (very) high,; /// but valid cost, which intentionally indicates no issue, but; /// rather a strong preference not to select a certain operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h:285,Testability,assert,assert,285,"/// < Invalid indicates there is no way to represent the cost as a; /// numeric value. This state exists to represent a possible issue,; /// e.g. if the cost-model knows the operation cannot be expanded; /// into a valid code-sequence by the code-generator. While some; /// passes may assert that the calculated cost must be valid, it is; /// up to individual passes how to interpret an Invalid cost. For; /// example, a transformation pass could choose not to perform a; /// transformation if the resulting cost would end up Invalid.; /// Because some passes may assert a cost is Valid, it is not; /// recommended to use Invalid costs to model 'Unknown'.; /// Note that Invalid is semantically different from a (very) high,; /// but valid cost, which intentionally indicates no issue, but; /// rather a strong preference not to select a certain operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h:564,Testability,assert,assert,564,"/// < Invalid indicates there is no way to represent the cost as a; /// numeric value. This state exists to represent a possible issue,; /// e.g. if the cost-model knows the operation cannot be expanded; /// into a valid code-sequence by the code-generator. While some; /// passes may assert that the calculated cost must be valid, it is; /// up to individual passes how to interpret an Invalid cost. For; /// example, a transformation pass could choose not to perform a; /// transformation if the resulting cost would end up Invalid.; /// Because some passes may assert a cost is Valid, it is not; /// recommended to use Invalid costs to model 'Unknown'.; /// Note that Invalid is semantically different from a (very) high,; /// but valid cost, which intentionally indicates no issue, but; /// rather a strong preference not to select a certain operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h:178,Modifiability,inherit,inherits,178,"/// For all of the arithmetic operators provided here any invalid state is; /// perpetuated and cannot be removed. Once a cost becomes invalid it stays; /// invalid, and it also inherits any invalid state from the RHS.; /// Arithmetic work on the actual values is implemented with saturation,; /// to avoid overflow when using more extreme cost values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h:301,Safety,avoid,avoid,301,"/// For all of the arithmetic operators provided here any invalid state is; /// perpetuated and cannot be removed. Once a cost becomes invalid it stays; /// invalid, and it also inherits any invalid state from the RHS.; /// Arithmetic work on the actual values is implemented with saturation,; /// to avoid overflow when using more extreme cost values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h:166,Safety,avoid,avoids,166,/// For the comparison operators we have chosen to use lexicographical; /// ordering where valid costs are always considered to be less than invalid; /// costs. This avoids having to add asserts to the comparison operators that; /// the states are valid and users can test for validity of the cost; /// explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h:187,Testability,assert,asserts,187,/// For the comparison operators we have chosen to use lexicographical; /// ordering where valid costs are always considered to be less than invalid; /// costs. This avoids having to add asserts to the comparison operators that; /// the states are valid and users can test for validity of the cost; /// explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h:268,Testability,test,test,268,/// For the comparison operators we have chosen to use lexicographical; /// ordering where valid costs are always considered to be less than invalid; /// costs. This avoids having to add asserts to the comparison operators that; /// the states are valid and users can test for validity of the cost; /// explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:1855,Energy Efficiency,efficient,efficient,1855," Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; ///; /// \file; /// This file supports working with JSON data.; ///; /// It comprises:; ///; /// - classes which hold dynamically-typed parsed JSON structures; /// These are value types that can be composed, inspected, and modified.; /// See json::Value, and the related types json::Object and json::Array.; ///; /// - functions to parse JSON text into Values, and to serialize Values to text.; /// See parse(), operator<<, and format_provider.; ///; /// - a convention and helpers for mapping between json::Value and user-defined; /// types. See fromJSON(), ObjectMapper, and the class comment on Value.; ///; /// - an output API json::OStream which can emit JSON without materializing; /// all structures as json::Value.; ///; /// Typically, JSON data would be read from an external source, parsed into; /// a Value, and then converted into some native data structure before doing; /// real work on it. (And vice versa when writing).; ///; /// Other serialization mechanisms you may consider:; ///; /// - YAML is also text-based, and more human-readable than JSON. It's a more; /// complex format and data model, and YAML parsers aren't ubiquitous.; /// YAMLParser.h is a streaming parser suitable for parsing large documents; /// (including JSON, as YAML is a superset). It can be awkward to use; /// directly. YAML I/O (YAMLTraits.h) provides data mapping that is more; /// declarative than the toJSON/fromJSON conventions here.; ///; /// - LLVM bitstream is a space- and CPU- efficient binary format. Typically it; /// encodes LLVM IR (""bitcode""), but it can be a container for other data.; /// Low-level reader/writer libraries are in Bitstream/Bitstream*.h; ///; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:235,Availability,error,error,235,"// === String encodings ===; //; // JSON strings are character sequences (not byte sequences like std::string).; // We need to know the encoding, and for simplicity only support UTF-8.; //; // - When parsing, invalid UTF-8 is a syntax error like any other; //; // - When creating Values from strings, callers must ensure they are UTF-8.; // with asserts on, invalid UTF-8 will crash the program; // with asserts off, we'll substitute the replacement character (U+FFFD); // Callers can use json::isUTF8() and json::fixUTF8() for validation.; //; // - When retrieving strings from Values (e.g. asString()), the result will; // always be valid UTF-8.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:528,Security,validat,validation,528,"// === String encodings ===; //; // JSON strings are character sequences (not byte sequences like std::string).; // We need to know the encoding, and for simplicity only support UTF-8.; //; // - When parsing, invalid UTF-8 is a syntax error like any other; //; // - When creating Values from strings, callers must ensure they are UTF-8.; // with asserts on, invalid UTF-8 will crash the program; // with asserts off, we'll substitute the replacement character (U+FFFD); // Callers can use json::isUTF8() and json::fixUTF8() for validation.; //; // - When retrieving strings from Values (e.g. asString()), the result will; // always be valid UTF-8.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:346,Testability,assert,asserts,346,"// === String encodings ===; //; // JSON strings are character sequences (not byte sequences like std::string).; // We need to know the encoding, and for simplicity only support UTF-8.; //; // - When parsing, invalid UTF-8 is a syntax error like any other; //; // - When creating Values from strings, callers must ensure they are UTF-8.; // with asserts on, invalid UTF-8 will crash the program; // with asserts off, we'll substitute the replacement character (U+FFFD); // Callers can use json::isUTF8() and json::fixUTF8() for validation.; //; // - When retrieving strings from Values (e.g. asString()), the result will; // always be valid UTF-8.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:404,Testability,assert,asserts,404,"// === String encodings ===; //; // JSON strings are character sequences (not byte sequences like std::string).; // We need to know the encoding, and for simplicity only support UTF-8.; //; // - When parsing, invalid UTF-8 is a syntax error like any other; //; // - When creating Values from strings, callers must ensure they are UTF-8.; // with asserts on, invalid UTF-8 will crash the program; // with asserts off, we'll substitute the replacement character (U+FFFD); // Callers can use json::isUTF8() and json::fixUTF8() for validation.; //; // - When retrieving strings from Values (e.g. asString()), the result will; // always be valid UTF-8.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:154,Usability,simpl,simplicity,154,"// === String encodings ===; //; // JSON strings are character sequences (not byte sequences like std::string).; // We need to know the encoding, and for simplicity only support UTF-8.; //; // - When parsing, invalid UTF-8 is a syntax error like any other; //; // - When creating Values from strings, callers must ensure they are UTF-8.; // with asserts on, invalid UTF-8 will crash the program; // with asserts off, we'll substitute the replacement character (U+FFFD); // Callers can use json::isUTF8() and json::fixUTF8() for validation.; //; // - When retrieving strings from Values (e.g. asString()), the result will; // always be valid UTF-8.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:151,Availability,error,error,151,"/// Returns true if \p S is valid UTF-8, which is required for use as JSON.; /// If it returns false, \p Offset is set to a byte offset near the first error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:168,Testability,test,test,168,"/// Replaces invalid UTF-8 sequences in \p S with the replacement character; /// (U+FFFD). The returned string is valid UTF-8.; /// This is much slower than isUTF8, so test that first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:9,Security,access,accessors,9,// Typed accessors return std::nullopt/nullptr if; // - the property doesn't exist; // - or it has the wrong type,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:1856,Availability,error,error,1856,"s in a loop.; /// json::ary(Collection) converts all items in a collection to Values.; ///; /// === Inspecting values ===; ///; /// Each Value is one of the JSON kinds:; /// null (nullptr_t); /// boolean (bool); /// number (double, int64 or uint64); /// string (StringRef); /// array (json::Array); /// object (json::Object); ///; /// The kind can be queried directly, or implicitly via the typed accessors:; /// if (std::optional<StringRef> S = E.getAsString(); /// assert(E.kind() == Value::String);; ///; /// Array and Object also have typed indexing accessors for easy traversal:; /// Expected<Value> E = parse(R""( {""options"": {""font"": ""sans-serif""}} )"");; /// if (Object* O = E->getAsObject()); /// if (Object* Opts = O->getObject(""options"")); /// if (std::optional<StringRef> Font = Opts->getString(""font"")); /// assert(Opts->at(""font"").kind() == Value::String);; ///; /// === Converting JSON values to C++ types ===; ///; /// The convention is to have a deserializer function findable via ADL:; /// fromJSON(const json::Value&, T&, Path) -> bool; ///; /// The return value indicates overall success, and Path is used for precise; /// error reporting. (The Path::Root passed in at the top level fromJSON call; /// captures any nested error and can render it in context).; /// If conversion fails, fromJSON calls Path::report() and immediately returns.; /// This ensures that the first fatal error survives.; ///; /// Deserializers are provided for:; /// - bool; /// - int and int64_t; /// - double; /// - std::string; /// - vector<T>, where T is deserializable; /// - map<string, T>, where T is deserializable; /// - std::optional<T>, where T is deserializable; /// ObjectMapper can help writing fromJSON() functions for object types.; ///; /// For conversion in the other direction, the serializer function is:; /// toJSON(const T&) -> json::Value; /// If this exists, then it also allows constructing Value from T, and can; /// be used to serialize vector<T>, map<string, T>, and std::optiona",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:1955,Availability,error,error,1955,"number (double, int64 or uint64); /// string (StringRef); /// array (json::Array); /// object (json::Object); ///; /// The kind can be queried directly, or implicitly via the typed accessors:; /// if (std::optional<StringRef> S = E.getAsString(); /// assert(E.kind() == Value::String);; ///; /// Array and Object also have typed indexing accessors for easy traversal:; /// Expected<Value> E = parse(R""( {""options"": {""font"": ""sans-serif""}} )"");; /// if (Object* O = E->getAsObject()); /// if (Object* Opts = O->getObject(""options"")); /// if (std::optional<StringRef> Font = Opts->getString(""font"")); /// assert(Opts->at(""font"").kind() == Value::String);; ///; /// === Converting JSON values to C++ types ===; ///; /// The convention is to have a deserializer function findable via ADL:; /// fromJSON(const json::Value&, T&, Path) -> bool; ///; /// The return value indicates overall success, and Path is used for precise; /// error reporting. (The Path::Root passed in at the top level fromJSON call; /// captures any nested error and can render it in context).; /// If conversion fails, fromJSON calls Path::report() and immediately returns.; /// This ensures that the first fatal error survives.; ///; /// Deserializers are provided for:; /// - bool; /// - int and int64_t; /// - double; /// - std::string; /// - vector<T>, where T is deserializable; /// - map<string, T>, where T is deserializable; /// - std::optional<T>, where T is deserializable; /// ObjectMapper can help writing fromJSON() functions for object types.; ///; /// For conversion in the other direction, the serializer function is:; /// toJSON(const T&) -> json::Value; /// If this exists, then it also allows constructing Value from T, and can; /// be used to serialize vector<T>, map<string, T>, and std::optional<T>.; ///; /// === Serialization ===; ///; /// Values can be serialized to JSON:; /// 1) raw_ostream << Value // Basic formatting.; /// 2) raw_ostream << formatv(""{0}"", Value) // Basic formatting.; /// 3) raw_ostream",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:2112,Availability,error,error,2112,"ia the typed accessors:; /// if (std::optional<StringRef> S = E.getAsString(); /// assert(E.kind() == Value::String);; ///; /// Array and Object also have typed indexing accessors for easy traversal:; /// Expected<Value> E = parse(R""( {""options"": {""font"": ""sans-serif""}} )"");; /// if (Object* O = E->getAsObject()); /// if (Object* Opts = O->getObject(""options"")); /// if (std::optional<StringRef> Font = Opts->getString(""font"")); /// assert(Opts->at(""font"").kind() == Value::String);; ///; /// === Converting JSON values to C++ types ===; ///; /// The convention is to have a deserializer function findable via ADL:; /// fromJSON(const json::Value&, T&, Path) -> bool; ///; /// The return value indicates overall success, and Path is used for precise; /// error reporting. (The Path::Root passed in at the top level fromJSON call; /// captures any nested error and can render it in context).; /// If conversion fails, fromJSON calls Path::report() and immediately returns.; /// This ensures that the first fatal error survives.; ///; /// Deserializers are provided for:; /// - bool; /// - int and int64_t; /// - double; /// - std::string; /// - vector<T>, where T is deserializable; /// - map<string, T>, where T is deserializable; /// - std::optional<T>, where T is deserializable; /// ObjectMapper can help writing fromJSON() functions for object types.; ///; /// For conversion in the other direction, the serializer function is:; /// toJSON(const T&) -> json::Value; /// If this exists, then it also allows constructing Value from T, and can; /// be used to serialize vector<T>, map<string, T>, and std::optional<T>.; ///; /// === Serialization ===; ///; /// Values can be serialized to JSON:; /// 1) raw_ostream << Value // Basic formatting.; /// 2) raw_ostream << formatv(""{0}"", Value) // Basic formatting.; /// 3) raw_ostream << formatv(""{0:2}"", Value) // Pretty-print with indent 2.; ///; /// And parsed:; /// Expected<Value> E = json::parse(""[1, 2, null]"");; /// assert(E && E->kind() == Val",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:1112,Security,access,accessors,1112,"/// A Value is an JSON value of unknown type.; /// They can be copied, but should generally be moved.; ///; /// === Composing values ===; ///; /// You can implicitly construct Values from:; /// - strings: std::string, SmallString, formatv, StringRef, char*; /// (char*, and StringRef are references, not copies!); /// - numbers; /// - booleans; /// - null: nullptr; /// - arrays: {""foo"", 42.0, false}; /// - serializable things: types with toJSON(const T&)->Value, found by ADL; ///; /// They can also be constructed from object/array helpers:; /// - json::Object is a type like map<ObjectKey, Value>; /// - json::Array is a type like vector<Value>; /// These can be list-initialized, or used to build up collections in a loop.; /// json::ary(Collection) converts all items in a collection to Values.; ///; /// === Inspecting values ===; ///; /// Each Value is one of the JSON kinds:; /// null (nullptr_t); /// boolean (bool); /// number (double, int64 or uint64); /// string (StringRef); /// array (json::Array); /// object (json::Object); ///; /// The kind can be queried directly, or implicitly via the typed accessors:; /// if (std::optional<StringRef> S = E.getAsString(); /// assert(E.kind() == Value::String);; ///; /// Array and Object also have typed indexing accessors for easy traversal:; /// Expected<Value> E = parse(R""( {""options"": {""font"": ""sans-serif""}} )"");; /// if (Object* O = E->getAsObject()); /// if (Object* Opts = O->getObject(""options"")); /// if (std::optional<StringRef> Font = Opts->getString(""font"")); /// assert(Opts->at(""font"").kind() == Value::String);; ///; /// === Converting JSON values to C++ types ===; ///; /// The convention is to have a deserializer function findable via ADL:; /// fromJSON(const json::Value&, T&, Path) -> bool; ///; /// The return value indicates overall success, and Path is used for precise; /// error reporting. (The Path::Root passed in at the top level fromJSON call; /// captures any nested error and can render it in context).; /// If c",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:1269,Security,access,accessors,1269,"rays: {""foo"", 42.0, false}; /// - serializable things: types with toJSON(const T&)->Value, found by ADL; ///; /// They can also be constructed from object/array helpers:; /// - json::Object is a type like map<ObjectKey, Value>; /// - json::Array is a type like vector<Value>; /// These can be list-initialized, or used to build up collections in a loop.; /// json::ary(Collection) converts all items in a collection to Values.; ///; /// === Inspecting values ===; ///; /// Each Value is one of the JSON kinds:; /// null (nullptr_t); /// boolean (bool); /// number (double, int64 or uint64); /// string (StringRef); /// array (json::Array); /// object (json::Object); ///; /// The kind can be queried directly, or implicitly via the typed accessors:; /// if (std::optional<StringRef> S = E.getAsString(); /// assert(E.kind() == Value::String);; ///; /// Array and Object also have typed indexing accessors for easy traversal:; /// Expected<Value> E = parse(R""( {""options"": {""font"": ""sans-serif""}} )"");; /// if (Object* O = E->getAsObject()); /// if (Object* Opts = O->getObject(""options"")); /// if (std::optional<StringRef> Font = Opts->getString(""font"")); /// assert(Opts->at(""font"").kind() == Value::String);; ///; /// === Converting JSON values to C++ types ===; ///; /// The convention is to have a deserializer function findable via ADL:; /// fromJSON(const json::Value&, T&, Path) -> bool; ///; /// The return value indicates overall success, and Path is used for precise; /// error reporting. (The Path::Root passed in at the top level fromJSON call; /// captures any nested error and can render it in context).; /// If conversion fails, fromJSON calls Path::report() and immediately returns.; /// This ensures that the first fatal error survives.; ///; /// Deserializers are provided for:; /// - bool; /// - int and int64_t; /// - double; /// - std::string; /// - vector<T>, where T is deserializable; /// - map<string, T>, where T is deserializable; /// - std::optional<T>, where T is deserial",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:1182,Testability,assert,assert,1182,"alues from:; /// - strings: std::string, SmallString, formatv, StringRef, char*; /// (char*, and StringRef are references, not copies!); /// - numbers; /// - booleans; /// - null: nullptr; /// - arrays: {""foo"", 42.0, false}; /// - serializable things: types with toJSON(const T&)->Value, found by ADL; ///; /// They can also be constructed from object/array helpers:; /// - json::Object is a type like map<ObjectKey, Value>; /// - json::Array is a type like vector<Value>; /// These can be list-initialized, or used to build up collections in a loop.; /// json::ary(Collection) converts all items in a collection to Values.; ///; /// === Inspecting values ===; ///; /// Each Value is one of the JSON kinds:; /// null (nullptr_t); /// boolean (bool); /// number (double, int64 or uint64); /// string (StringRef); /// array (json::Array); /// object (json::Object); ///; /// The kind can be queried directly, or implicitly via the typed accessors:; /// if (std::optional<StringRef> S = E.getAsString(); /// assert(E.kind() == Value::String);; ///; /// Array and Object also have typed indexing accessors for easy traversal:; /// Expected<Value> E = parse(R""( {""options"": {""font"": ""sans-serif""}} )"");; /// if (Object* O = E->getAsObject()); /// if (Object* Opts = O->getObject(""options"")); /// if (std::optional<StringRef> Font = Opts->getString(""font"")); /// assert(Opts->at(""font"").kind() == Value::String);; ///; /// === Converting JSON values to C++ types ===; ///; /// The convention is to have a deserializer function findable via ADL:; /// fromJSON(const json::Value&, T&, Path) -> bool; ///; /// The return value indicates overall success, and Path is used for precise; /// error reporting. (The Path::Root passed in at the top level fromJSON call; /// captures any nested error and can render it in context).; /// If conversion fails, fromJSON calls Path::report() and immediately returns.; /// This ensures that the first fatal error survives.; ///; /// Deserializers are provided for:; /// - ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:1534,Testability,assert,assert,1534,"rays: {""foo"", 42.0, false}; /// - serializable things: types with toJSON(const T&)->Value, found by ADL; ///; /// They can also be constructed from object/array helpers:; /// - json::Object is a type like map<ObjectKey, Value>; /// - json::Array is a type like vector<Value>; /// These can be list-initialized, or used to build up collections in a loop.; /// json::ary(Collection) converts all items in a collection to Values.; ///; /// === Inspecting values ===; ///; /// Each Value is one of the JSON kinds:; /// null (nullptr_t); /// boolean (bool); /// number (double, int64 or uint64); /// string (StringRef); /// array (json::Array); /// object (json::Object); ///; /// The kind can be queried directly, or implicitly via the typed accessors:; /// if (std::optional<StringRef> S = E.getAsString(); /// assert(E.kind() == Value::String);; ///; /// Array and Object also have typed indexing accessors for easy traversal:; /// Expected<Value> E = parse(R""( {""options"": {""font"": ""sans-serif""}} )"");; /// if (Object* O = E->getAsObject()); /// if (Object* Opts = O->getObject(""options"")); /// if (std::optional<StringRef> Font = Opts->getString(""font"")); /// assert(Opts->at(""font"").kind() == Value::String);; ///; /// === Converting JSON values to C++ types ===; ///; /// The convention is to have a deserializer function findable via ADL:; /// fromJSON(const json::Value&, T&, Path) -> bool; ///; /// The return value indicates overall success, and Path is used for precise; /// error reporting. (The Path::Root passed in at the top level fromJSON call; /// captures any nested error and can render it in context).; /// If conversion fails, fromJSON calls Path::report() and immediately returns.; /// This ensures that the first fatal error survives.; ///; /// Deserializers are provided for:; /// - bool; /// - int and int64_t; /// - double; /// - std::string; /// - vector<T>, where T is deserializable; /// - map<string, T>, where T is deserializable; /// - std::optional<T>, where T is deserial",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:3072,Testability,assert,assert,3072," accessors:; /// if (std::optional<StringRef> S = E.getAsString(); /// assert(E.kind() == Value::String);; ///; /// Array and Object also have typed indexing accessors for easy traversal:; /// Expected<Value> E = parse(R""( {""options"": {""font"": ""sans-serif""}} )"");; /// if (Object* O = E->getAsObject()); /// if (Object* Opts = O->getObject(""options"")); /// if (std::optional<StringRef> Font = Opts->getString(""font"")); /// assert(Opts->at(""font"").kind() == Value::String);; ///; /// === Converting JSON values to C++ types ===; ///; /// The convention is to have a deserializer function findable via ADL:; /// fromJSON(const json::Value&, T&, Path) -> bool; ///; /// The return value indicates overall success, and Path is used for precise; /// error reporting. (The Path::Root passed in at the top level fromJSON call; /// captures any nested error and can render it in context).; /// If conversion fails, fromJSON calls Path::report() and immediately returns.; /// This ensures that the first fatal error survives.; ///; /// Deserializers are provided for:; /// - bool; /// - int and int64_t; /// - double; /// - std::string; /// - vector<T>, where T is deserializable; /// - map<string, T>, where T is deserializable; /// - std::optional<T>, where T is deserializable; /// ObjectMapper can help writing fromJSON() functions for object types.; ///; /// For conversion in the other direction, the serializer function is:; /// toJSON(const T&) -> json::Value; /// If this exists, then it also allows constructing Value from T, and can; /// be used to serialize vector<T>, map<string, T>, and std::optional<T>.; ///; /// === Serialization ===; ///; /// Values can be serialized to JSON:; /// 1) raw_ostream << Value // Basic formatting.; /// 2) raw_ostream << formatv(""{0}"", Value) // Basic formatting.; /// 3) raw_ostream << formatv(""{0:2}"", Value) // Pretty-print with indent 2.; ///; /// And parsed:; /// Expected<Value> E = json::parse(""[1, 2, null]"");; /// assert(E && E->kind() == Value::Array);",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:76,Integrability,depend,depending,76,"/// Number values can store both int64s and doubles at full precision,; /// depending on what they were constructed/parsed from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:9,Security,access,accessors,9,// Typed accessors return std::nullopt/nullptr if the Value is not of this; // type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:134,Energy Efficiency,efficient,efficiently,134,"// We allow moving from *const* Values, by marking all members as mutable!; // This hack is needed to support initializer-list syntax efficiently.; // (std::initializer_list<T> is a container of const T).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:156,Availability,error,error,156,"// Unpoisoning to prevent overwriting poisoned object (e.g., annotated short; // string). Objects that have had their memory poisoned may cause an ASan; // error if their memory is reused without calling their destructor.; // Unpoisoning the memory prevents this error from occurring.; // FIXME: This is a temporary solution to prevent buildbots from failing.; // The more appropriate approach would be to call the object's destructor; // to unpoison memory. This would prevent any potential memory leaks (long; // strings). Read for details:; // https://github.com/llvm/llvm-project/pull/79065#discussion_r1462621761",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:263,Availability,error,error,263,"// Unpoisoning to prevent overwriting poisoned object (e.g., annotated short; // string). Objects that have had their memory poisoned may cause an ASan; // error if their memory is reused without calling their destructor.; // Unpoisoning the memory prevents this error from occurring.; // FIXME: This is a temporary solution to prevent buildbots from failing.; // The more appropriate approach would be to call the object's destructor; // to unpoison memory. This would prevent any potential memory leaks (long; // strings). Read for details:; // https://github.com/llvm/llvm-project/pull/79065#discussion_r1462621761",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:111,Performance,optimiz,optimized,111,"/// ObjectKey is a used to capture keys in Object. Like Value but:; /// - only strings are allowed; /// - it's optimized for the string literal case (Owned == nullptr); /// Like Value, strings must be UTF-8. See isUTF8 documentation for details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:163,Availability,error,errors,163,"/// A ""cursor"" marking a position within a Value.; /// The Value is a tree, and this is the path from the root to the current node.; /// This is used to associate errors with particular subobjects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:128,Availability,error,error,128,"/// Records that the value at the current path is invalid.; /// Message is e.g. ""expected number"" and becomes part of the final error.; /// This overwrites any previously written error message in the root.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:179,Availability,error,error,179,"/// Records that the value at the current path is invalid.; /// Message is e.g. ""expected number"" and becomes part of the final error.; /// This overwrites any previously written error message in the root.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:64,Integrability,Message,Message,64,"/// Records that the value at the current path is invalid.; /// Message is e.g. ""expected number"" and becomes part of the final error.; /// This overwrites any previously written error message in the root.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:185,Integrability,message,message,185,"/// Records that the value at the current path is invalid.; /// Message is e.g. ""expected number"" and becomes part of the final error.; /// This overwrites any previously written error message in the root.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:92,Availability,error,error,92,/// The root is the trivial Path to the root value.; /// It also stores the latest reported error and the path where it occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:17,Availability,error,error,17,// Only valid in error state. Reversed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:21,Availability,error,error,21,"/// Returns the last error reported, or else a generic error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:55,Availability,error,error,55,"/// Returns the last error reported, or else a generic error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:34,Availability,error,error,34,"/// Print the root value with the error shown inline as a comment.; /// Unrelated parts of the value are elided for brevity, e.g.; /// {; /// ""id"": 42,; /// ""name"": /* expected string */ null,; /// ""properties"": { ... }; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:204,Availability,error,error,204,"/// Helper for mapping JSON objects onto protocol structs.; ///; /// Example:; /// \code; /// bool fromJSON(const Value &E, MyStruct &R, Path P) {; /// ObjectMapper O(E, P);; /// // When returning false, error details were already reported.; /// return O && O.map(""mandatory_field"", R.MandatoryField) &&; /// O.mapOptional(""optional_field"", R.OptionalField);; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:41,Integrability,protocol,protocol,41,"/// Helper for mapping JSON objects onto protocol structs.; ///; /// Example:; /// \code; /// bool fromJSON(const Value &E, MyStruct &R, Path P) {; /// ObjectMapper O(E, P);; /// // When returning false, error details were already reported.; /// return O && O.map(""mandatory_field"", R.MandatoryField) &&; /// O.mapOptional(""optional_field"", R.OptionalField);; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:57,Availability,error,error,57,"/// If O is not an object, this mapper is invalid and an error is reported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:87,Availability,error,error,87,"/// Maps a property to a field.; /// If the property is missing or invalid, reports an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:101,Availability,error,error,101,"/// Maps a property to a field, if it exists.; /// If the property exists and is invalid, reports an error.; /// (Optional requires special handling, because missing keys are OK).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:101,Availability,error,error,101,"/// Maps a property to a field, if it exists.; /// If the property exists and is invalid, reports an error.; /// If the property does not exist, Out is unchanged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:124,Availability,error,error,124,/// Version of parse() that converts the parsed value to the type T.; /// RootName describes the root object and is used in error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:130,Integrability,message,messages,130,/// Version of parse() that converts the parsed value to the type T.; /// RootName describes the root object and is used in error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:965,Modifiability,flexible,flexible,965,"/// json::OStream allows writing well-formed JSON without materializing; /// all structures as json::Value ahead of time.; /// It's faster, lower-level, and less safe than OS << json::Value.; /// It also allows emitting more constructs, such as comments.; ///; /// Only one ""top-level"" object can be written to a stream.; /// Simplest usage involves passing lambdas (Blocks) to fill in containers:; ///; /// json::OStream J(OS);; /// J.array([&]{; /// for (const Event &E : Events); /// J.object([&] {; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeArray(""participants"", [&] {; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// });; /// });; /// });; ///; /// This would produce JSON like:; ///; /// [; /// {; /// ""timestamp"": 19287398741,; /// ""participants"": [; /// ""King Kong"",; /// ""Miley Cyrus"",; /// ""Cleopatra""; /// ]; /// },; /// ...; /// ]; ///; /// The lower level begin/end methods (arrayBegin()) are more flexible but; /// care must be taken to pair them correctly:; ///; /// json::OStream J(OS);; // J.arrayBegin();; /// for (const Event &E : Events) {; /// J.objectBegin();; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeBegin(""participants"");; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// J.attributeEnd();; /// J.objectEnd();; /// }; /// J.arrayEnd();; ///; /// If the call sequence isn't valid JSON, asserts will fire in debug mode.; /// This can be mismatched begin()/end() pairs, trying to emit attributes inside; /// an array, and so on.; /// With asserts disabled, this is undefined behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:162,Safety,safe,safe,162,"/// json::OStream allows writing well-formed JSON without materializing; /// all structures as json::Value ahead of time.; /// It's faster, lower-level, and less safe than OS << json::Value.; /// It also allows emitting more constructs, such as comments.; ///; /// Only one ""top-level"" object can be written to a stream.; /// Simplest usage involves passing lambdas (Blocks) to fill in containers:; ///; /// json::OStream J(OS);; /// J.array([&]{; /// for (const Event &E : Events); /// J.object([&] {; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeArray(""participants"", [&] {; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// });; /// });; /// });; ///; /// This would produce JSON like:; ///; /// [; /// {; /// ""timestamp"": 19287398741,; /// ""participants"": [; /// ""King Kong"",; /// ""Miley Cyrus"",; /// ""Cleopatra""; /// ]; /// },; /// ...; /// ]; ///; /// The lower level begin/end methods (arrayBegin()) are more flexible but; /// care must be taken to pair them correctly:; ///; /// json::OStream J(OS);; // J.arrayBegin();; /// for (const Event &E : Events) {; /// J.objectBegin();; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeBegin(""participants"");; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// J.attributeEnd();; /// J.objectEnd();; /// }; /// J.arrayEnd();; ///; /// If the call sequence isn't valid JSON, asserts will fire in debug mode.; /// This can be mismatched begin()/end() pairs, trying to emit attributes inside; /// an array, and so on.; /// With asserts disabled, this is undefined behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:1418,Testability,assert,asserts,1418,"/// json::OStream allows writing well-formed JSON without materializing; /// all structures as json::Value ahead of time.; /// It's faster, lower-level, and less safe than OS << json::Value.; /// It also allows emitting more constructs, such as comments.; ///; /// Only one ""top-level"" object can be written to a stream.; /// Simplest usage involves passing lambdas (Blocks) to fill in containers:; ///; /// json::OStream J(OS);; /// J.array([&]{; /// for (const Event &E : Events); /// J.object([&] {; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeArray(""participants"", [&] {; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// });; /// });; /// });; ///; /// This would produce JSON like:; ///; /// [; /// {; /// ""timestamp"": 19287398741,; /// ""participants"": [; /// ""King Kong"",; /// ""Miley Cyrus"",; /// ""Cleopatra""; /// ]; /// },; /// ...; /// ]; ///; /// The lower level begin/end methods (arrayBegin()) are more flexible but; /// care must be taken to pair them correctly:; ///; /// json::OStream J(OS);; // J.arrayBegin();; /// for (const Event &E : Events) {; /// J.objectBegin();; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeBegin(""participants"");; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// J.attributeEnd();; /// J.objectEnd();; /// }; /// J.arrayEnd();; ///; /// If the call sequence isn't valid JSON, asserts will fire in debug mode.; /// This can be mismatched begin()/end() pairs, trying to emit attributes inside; /// an array, and so on.; /// With asserts disabled, this is undefined behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:1569,Testability,assert,asserts,1569,"/// json::OStream allows writing well-formed JSON without materializing; /// all structures as json::Value ahead of time.; /// It's faster, lower-level, and less safe than OS << json::Value.; /// It also allows emitting more constructs, such as comments.; ///; /// Only one ""top-level"" object can be written to a stream.; /// Simplest usage involves passing lambdas (Blocks) to fill in containers:; ///; /// json::OStream J(OS);; /// J.array([&]{; /// for (const Event &E : Events); /// J.object([&] {; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeArray(""participants"", [&] {; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// });; /// });; /// });; ///; /// This would produce JSON like:; ///; /// [; /// {; /// ""timestamp"": 19287398741,; /// ""participants"": [; /// ""King Kong"",; /// ""Miley Cyrus"",; /// ""Cleopatra""; /// ]; /// },; /// ...; /// ]; ///; /// The lower level begin/end methods (arrayBegin()) are more flexible but; /// care must be taken to pair them correctly:; ///; /// json::OStream J(OS);; // J.arrayBegin();; /// for (const Event &E : Events) {; /// J.objectBegin();; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeBegin(""participants"");; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// J.attributeEnd();; /// J.objectEnd();; /// }; /// J.arrayEnd();; ///; /// If the call sequence isn't valid JSON, asserts will fire in debug mode.; /// This can be mismatched begin()/end() pairs, trying to emit attributes inside; /// an array, and so on.; /// With asserts disabled, this is undefined behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:326,Usability,Simpl,Simplest,326,"/// json::OStream allows writing well-formed JSON without materializing; /// all structures as json::Value ahead of time.; /// It's faster, lower-level, and less safe than OS << json::Value.; /// It also allows emitting more constructs, such as comments.; ///; /// Only one ""top-level"" object can be written to a stream.; /// Simplest usage involves passing lambdas (Blocks) to fill in containers:; ///; /// json::OStream J(OS);; /// J.array([&]{; /// for (const Event &E : Events); /// J.object([&] {; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeArray(""participants"", [&] {; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// });; /// });; /// });; ///; /// This would produce JSON like:; ///; /// [; /// {; /// ""timestamp"": 19287398741,; /// ""participants"": [; /// ""King Kong"",; /// ""Miley Cyrus"",; /// ""Cleopatra""; /// ]; /// },; /// ...; /// ]; ///; /// The lower level begin/end methods (arrayBegin()) are more flexible but; /// care must be taken to pair them correctly:; ///; /// json::OStream J(OS);; // J.arrayBegin();; /// for (const Event &E : Events) {; /// J.objectBegin();; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeBegin(""participants"");; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// J.attributeEnd();; /// J.objectEnd();; /// }; /// J.arrayEnd();; ///; /// If the call sequence isn't valid JSON, asserts will fire in debug mode.; /// This can be mismatched begin()/end() pairs, trying to emit attributes inside; /// an array, and so on.; /// With asserts disabled, this is undefined behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:129,Security,validat,validation,129,/// Emit an externally-serialized value.; /// The caller must write exactly one valid JSON value to the provided stream.; /// No validation or formatting of this value occurs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h:101,Testability,assert,assertion,101,/// Returns the value when all bits have a known value. This just returns One; /// with a protective assertion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h:118,Modifiability,extend,extended,118,"/// Return known bits for an ""any"" extension of the value we're tracking,; /// where we don't know anything about the extended bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h:40,Deployability,update,updated,40,"/// Return KnownBits based on this, but updated given that the underlying; /// value is known to be greater than or equal to Val.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h:33,Modifiability,extend,extended,33,/// Compute known bits from sign-extended multiply-hi.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h:33,Modifiability,extend,extended,33,/// Compute known bits from zero-extended multiply-hi.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h:4,Deployability,Update,Update,4,/// Update known bits based on ANDing with RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h:4,Deployability,Update,Update,4,/// Update known bits based on ORing with RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h:4,Deployability,Update,Update,4,/// Update known bits based on XORing with RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h:64,Availability,error,error,64,"/// Utility function to decode a ULEB128 value.; ///; /// If \p error is non-null, it will point to a static error message,; /// if an error occured. It will not be modified on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h:109,Availability,error,error,109,"/// Utility function to decode a ULEB128 value.; ///; /// If \p error is non-null, it will point to a static error message,; /// if an error occured. It will not be modified on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h:135,Availability,error,error,135,"/// Utility function to decode a ULEB128 value.; ///; /// If \p error is non-null, it will point to a static error message,; /// if an error occured. It will not be modified on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h:115,Integrability,message,message,115,"/// Utility function to decode a ULEB128 value.; ///; /// If \p error is non-null, it will point to a static error message,; /// if an error occured. It will not be modified on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h:64,Availability,error,error,64,"/// Utility function to decode a SLEB128 value.; ///; /// If \p error is non-null, it will point to a static error message,; /// if an error occured. It will not be modified on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h:109,Availability,error,error,109,"/// Utility function to decode a SLEB128 value.; ///; /// If \p error is non-null, it will point to a static error message,; /// if an error occured. It will not be modified on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h:135,Availability,error,error,135,"/// Utility function to decode a SLEB128 value.; ///; /// If \p error is non-null, it will point to a static error message,; /// if an error occured. It will not be modified on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h:115,Integrability,message,message,115,"/// Utility function to decode a SLEB128 value.; ///; /// If \p error is non-null, it will point to a static error message,; /// if an error occured. It will not be modified on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h:8,Modifiability,extend,extend,8,// Sign extend negative numbers if needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LineIterator.h:110,Integrability,interface,interface,110,"/// A forward iterator which reads text lines from a buffer.; ///; /// This class provides a forward iterator interface for reading one line at; /// a time from a buffer. When default constructed the iterator will be the; /// ""end"" iterator.; ///; /// The iterator is aware of what line number it is currently processing. It; /// strips blank lines by default, and comment lines given a comment-starting; /// character.; ///; /// Note that this iterator requires the buffer to be nul terminated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LineIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LineIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:7,Availability,error,error,7,/// An error occurred while trying to create or find the lock; /// file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:53,Deployability,release,release,53,/// Describes the result of waiting for the owner to release the lock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:17,Deployability,release,released,17,/// The lock was released successfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:51,Deployability,release,release,51,/// Reached timeout while waiting for the owner to release the lock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:12,Safety,timeout,timeout,12,/// Reached timeout while waiting for the owner to release the lock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:44,Deployability,release,releases,44,"/// For a shared lock, wait until the owner releases the lock.; /// Total timeout for the file to appear is ~1.5 minutes.; /// \param MaxSeconds the maximum total wait time in seconds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:74,Safety,timeout,timeout,74,"/// For a shared lock, wait until the owner releases the lock.; /// Total timeout for the file to appear is ~1.5 minutes.; /// \param MaxSeconds the maximum total wait time in seconds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:8,Availability,error,error,8,"/// Get error message, or """" if there is no error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:44,Availability,error,error,44,"/// Get error message, or """" if there is no error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:14,Integrability,message,message,14,"/// Get error message, or """" if there is no error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:8,Availability,error,error,8,/// Set error and error message,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:18,Availability,error,error,18,/// Set error and error message,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h:24,Integrability,message,message,24,/// Set error and error message,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LockFileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h:53,Integrability,wrap,wrapper,53,"//===-- llvm/Support/ManagedStatic.h - Static Global wrapper ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ManagedStatic class and the llvm_shutdown() function.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h:446,Integrability,depend,depending,446,"// ManagedStatic must be initialized to zero, and it must *not* have a dynamic; // initializer because managed statics are often created while running other; // dynamic initializers. In standard C++11, the best way to accomplish this is; // with a constexpr default constructor. However, different versions of the; // Visual C++ compiler have had bugs where, even though the constructor may be; // constexpr, a dynamic initializer may be emitted depending on optimization; // settings. For the affected versions of MSVC, use the old linker; // initialization pattern of not providing a constructor and leaving the fields; // uninitialized. See http://llvm.org/PR41367 for details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h:459,Performance,optimiz,optimization,459,"// ManagedStatic must be initialized to zero, and it must *not* have a dynamic; // initializer because managed statics are often created while running other; // dynamic initializers. In standard C++11, the best way to accomplish this is; // with a constexpr default constructor. However, different versions of the; // Visual C++ compiler have had bugs where, even though the constructor may be; // constexpr, a dynamic initializer may be emitted depending on optimization; // settings. For the affected versions of MSVC, use the old linker; // initialization pattern of not providing a constructor and leaving the fields; // uninitialized. See http://llvm.org/PR41367 for details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h:40,Modifiability,variab,variable,40,"// This should only be used as a static variable, which guarantees that this; // will be zero initialized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h:3,Security,Access,Accessors,3,// Accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h:61,Modifiability,variab,variables,61,/// llvm_shutdown - Deallocate and destroy all ManagedStatic variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h:34,Usability,simpl,simple,34,/// llvm_shutdown_obj - This is a simple helper class that calls; /// llvm_shutdown() when it is destroyed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:35,Integrability,wrap,wraparound,35,"// This relies on two's complement wraparound when N == 64, so we convert to; // int64_t only at the very end to avoid UB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:113,Safety,avoid,avoid,113,"// This relies on two's complement wraparound when N == 64, so we convert to; // int64_t only at the very end to avoid UB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:37,Energy Efficiency,power,power,37,/// Return true if the argument is a power of two > 0.; /// Ex. isPowerOf2_32(0x00100000U) == true (32 bit edition.),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:37,Energy Efficiency,power,power,37,/// Return true if the argument is a power of two > 0 (64 bit edition.),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:177,Availability,Mask,MaskIdx,177,"/// Return true if the argument contains a non-empty sequence of ones with the; /// remainder zero (32 bit version.) Ex. isShiftedMask_32(0x0000FF00U) == true.; /// If true, \p MaskIdx will specify the index of the lowest set bit and \p; /// MaskLen is updated to specify the length of the mask, else neither are; /// updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:242,Availability,Mask,MaskLen,242,"/// Return true if the argument contains a non-empty sequence of ones with the; /// remainder zero (32 bit version.) Ex. isShiftedMask_32(0x0000FF00U) == true.; /// If true, \p MaskIdx will specify the index of the lowest set bit and \p; /// MaskLen is updated to specify the length of the mask, else neither are; /// updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:290,Availability,mask,mask,290,"/// Return true if the argument contains a non-empty sequence of ones with the; /// remainder zero (32 bit version.) Ex. isShiftedMask_32(0x0000FF00U) == true.; /// If true, \p MaskIdx will specify the index of the lowest set bit and \p; /// MaskLen is updated to specify the length of the mask, else neither are; /// updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:253,Deployability,update,updated,253,"/// Return true if the argument contains a non-empty sequence of ones with the; /// remainder zero (32 bit version.) Ex. isShiftedMask_32(0x0000FF00U) == true.; /// If true, \p MaskIdx will specify the index of the lowest set bit and \p; /// MaskLen is updated to specify the length of the mask, else neither are; /// updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:318,Deployability,update,updated,318,"/// Return true if the argument contains a non-empty sequence of ones with the; /// remainder zero (32 bit version.) Ex. isShiftedMask_32(0x0000FF00U) == true.; /// If true, \p MaskIdx will specify the index of the lowest set bit and \p; /// MaskLen is updated to specify the length of the mask, else neither are; /// updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:129,Availability,Mask,MaskIdx,129,"/// Return true if the argument contains a non-empty sequence of ones with the; /// remainder zero (64 bit version.) If true, \p MaskIdx will specify the index; /// of the lowest set bit and \p MaskLen is updated to specify the length of the; /// mask, else neither are updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:194,Availability,Mask,MaskLen,194,"/// Return true if the argument contains a non-empty sequence of ones with the; /// remainder zero (64 bit version.) If true, \p MaskIdx will specify the index; /// of the lowest set bit and \p MaskLen is updated to specify the length of the; /// mask, else neither are updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:247,Availability,mask,mask,247,"/// Return true if the argument contains a non-empty sequence of ones with the; /// remainder zero (64 bit version.) If true, \p MaskIdx will specify the index; /// of the lowest set bit and \p MaskLen is updated to specify the length of the; /// mask, else neither are updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:205,Deployability,update,updated,205,"/// Return true if the argument contains a non-empty sequence of ones with the; /// remainder zero (64 bit version.) If true, \p MaskIdx will specify the index; /// of the lowest set bit and \p MaskLen is updated to specify the length of the; /// mask, else neither are updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:270,Deployability,update,updated,270,"/// Return true if the argument contains a non-empty sequence of ones with the; /// remainder zero (64 bit version.) If true, \p MaskIdx will specify the index; /// of the lowest set bit and \p MaskLen is updated to specify the length of the; /// mask, else neither are updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:52,Energy Efficiency,power,powers,52,/// Compile time Log2.; /// Valid only for positive powers of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:21,Testability,log,log,21,"/// Return the floor log base 2 of the specified value, -1 if the value is zero.; /// (32 bit edition.); /// Ex. Log2_32(32) == 5, Log2_32(1) == 0, Log2_32(0) == -1, Log2_32(6) == 2",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:21,Testability,log,log,21,"/// Return the floor log base 2 of the specified value, -1 if the value is zero.; /// (64 bit edition.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:20,Testability,log,log,20,"/// Return the ceil log base 2 of the specified value, 32 if the value is zero.; /// (32 bit edition).; /// Ex. Log2_32_Ceil(32) == 5, Log2_32_Ceil(1) == 0, Log2_32_Ceil(6) == 3",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:20,Testability,log,log,20,"/// Return the ceil log base 2 of the specified value, 64 if the value is zero.; /// (64 bit edition.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:15,Energy Efficiency,power,power,15,"// The largest power of 2 that divides both A and B.; //; // Replace ""-Value"" by ""1+~Value"" in the following commented code to avoid; // MSVC warning C4146; // return (A | B) & -(A | B);",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:127,Safety,avoid,avoid,127,"// The largest power of 2 that divides both A and B.; //; // Replace ""-Value"" by ""1+~Value"" in the following commented code to avoid; // MSVC warning C4146; // return (A | B) & -(A | B);",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:21,Energy Efficiency,power,power,21,/// Returns the next power of two (in 64-bits) that is strictly greater than A.; /// Returns zero on overflow.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:16,Energy Efficiency,power,power,16,"/// Returns the power of two which is greater than or equal to the given value.; /// Essentially, it is a ceil operation across the domain of powers of two.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:142,Energy Efficiency,power,powers,142,"/// Returns the power of two which is greater than or equal to the given value.; /// Essentially, it is a ceil operation across the domain of powers of two.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:44,Availability,error,error,44,"// Replace unary minus to avoid compilation error on Windows:; // ""unary minus operator applied to unsigned type, result still unsigned""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:26,Safety,avoid,avoid,26,"// Replace unary minus to avoid compilation error on Windows:; // ""unary minus operator applied to unsigned type, result still unsigned""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:9,Modifiability,extend,extend,9,/// Sign-extend the number in the bottom B bits of X to a 32-bit integer.; /// Requires 0 < B <= 32.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:9,Modifiability,extend,extend,9,/// Sign-extend the number in the bottom B bits of X to a 32-bit integer.; /// Requires 0 < B <= 32.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:9,Modifiability,extend,extend,9,/// Sign-extend the number in the bottom B bits of X to a 64-bit integer.; /// Requires 0 < B <= 64.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:9,Modifiability,extend,extend,9,/// Sign-extend the number in the bottom B bits of X to a 64-bit integer.; /// Requires 0 < B <= 64.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:3,Performance,Perform,Perform,3,// Perform the unsigned addition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:3,Performance,Perform,Perform,3,// Perform the unsigned addition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:3,Performance,Perform,Perform,3,// Perform the unsigned multiplication on absolute values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:3,Usability,UX,UX,3,"// UX and UY are in [1, 2^n], where n is the number of digits.; // Check how the max allowed absolute value (2^n for negative, 2^(n-1) for; // positive) divided by an argument compares to the other.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:728,Deployability,release,released,728,"/* -*- C++ -*-; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * See md5.c for more information.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:161,Integrability,Message,Message-Digest,161,"/* -*- C++ -*-; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * See md5.c for more information.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:139,Security,Secur,Security,139,"/* -*- C++ -*-; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * See md5.c for more information.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:4,Deployability,Update,Updates,4,/// Updates the hash for the byte stream provided.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:16,Security,hash,hash,16,/// Updates the hash for the byte stream provided.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:4,Deployability,Update,Updates,4,/// Updates the hash for the StringRef provided.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:16,Security,hash,hash,16,/// Updates the hash for the StringRef provided.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:21,Security,hash,hash,21,/// Finishes off the hash and puts the result in result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:21,Security,hash,hash,21,"/// Finishes off the hash, and returns the 16-byte hash data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:51,Security,hash,hash,51,"/// Finishes off the hash, and returns the 16-byte hash data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:199,Deployability,update,update,199,"/// Finishes off the hash, and returns the 16-byte hash data.; /// This is suitable for getting the MD5 at any time without invalidating the; /// internal state, so that more calls can be made into `update`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:21,Security,hash,hash,21,"/// Finishes off the hash, and returns the 16-byte hash data.; /// This is suitable for getting the MD5 at any time without invalidating the; /// internal state, so that more calls can be made into `update`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:51,Security,hash,hash,51,"/// Finishes off the hash, and returns the 16-byte hash data.; /// This is suitable for getting the MD5 at any time without invalidating the; /// internal state, so that more calls can be made into `update`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:17,Security,hash,hash,17,/// Computes the hash for a given bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h:73,Security,hash,hash,73,/// Helper to compute and return lower 64 bits of the given string's MD5 hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MD5.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MD5.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h:552,Availability,failure,failure,552,"//===- MemAlloc.h - Memory allocation functions -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines counterparts of C library allocation functions defined in; /// the namespace 'std'. The new allocation functions crash on allocation; /// failure instead of returning null pointer.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h:4,Energy Efficiency,Allocate,Allocate,4,"/// Allocate a buffer of memory with the given size and alignment.; ///; /// When the compiler supports aligned operator new, this will use it to; /// handle even over-aligned allocations.; ///; /// However, this doesn't make any attempt to leverage the fancier techniques; /// like posix_memalign due to portability. It is mostly intended to allow; /// compatibility with platforms that, after aligned allocation was added, use; /// reduced default alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h:434,Energy Efficiency,reduce,reduced,434,"/// Allocate a buffer of memory with the given size and alignment.; ///; /// When the compiler supports aligned operator new, this will use it to; /// handle even over-aligned allocations.; ///; /// However, this doesn't make any attempt to leverage the fancier techniques; /// like posix_memalign due to portability. It is mostly intended to allow; /// compatibility with platforms that, after aligned allocation was added, use; /// reduced default alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h:305,Modifiability,portab,portability,305,"/// Allocate a buffer of memory with the given size and alignment.; ///; /// When the compiler supports aligned operator new, this will use it to; /// handle even over-aligned allocations.; ///; /// However, this doesn't make any attempt to leverage the fancier techniques; /// like posix_memalign due to portability. It is mostly intended to allow; /// compatibility with platforms that, after aligned allocation was added, use; /// reduced default alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h:249,Energy Efficiency,allocate,allocated,249,"/// Deallocate a buffer of memory with the given size and alignment.; ///; /// If supported, this will used the sized delete operator. Also if supported,; /// this will pass the alignment to the delete operator.; ///; /// The pointer must have been allocated with the corresponding new operator,; /// most likely using the above helper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:23,Energy Efficiency,allocate,allocated,23,/// The size as it was allocated. This is always greater or equal to the; /// size that was originally requested.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:320,Availability,reliab,reliable,320,"/// The \p MF_HUGE_HINT flag is used to indicate that the request for; /// a memory block should be satisfied with large pages if possible.; /// This is only a hint and small pages will be used as fallback.; ///; /// The presence or absence of this flag in the returned memory block; /// is (at least currently) *not* a reliable indicator that the memory; /// block will use or will not use large pages. On some systems a request; /// without this flag can be backed by large pages without this flag being; /// set, and on some other systems a request with this flag can fallback; /// to small pages without this flag being cleared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:624,Usability,clear,cleared,624,"/// The \p MF_HUGE_HINT flag is used to indicate that the request for; /// a memory block should be satisfied with large pages if possible.; /// This is only a hint and small pages will be used as fallback.; ///; /// The presence or absence of this flag in the returned memory block; /// is (at least currently) *not* a reliable indicator that the memory; /// block will use or will not use large pages. On some systems a request; /// without this flag can be backed by large pages without this flag being; /// set, and on some other systems a request with this flag can fallback; /// to small pages without this flag being cleared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:564,Availability,error,error,564,"/// This method allocates a block of memory that is suitable for loading; /// dynamically generated code (e.g. JIT). An attempt to allocate; /// \p NumBytes bytes of virtual memory is made.; /// \p NearBlock may point to an existing allocation in which case; /// an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address.; /// \p Flags is used to set the initial protection flags for the block; /// of the memory.; /// \p EC [out] returns an object describing any error that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the; /// system allocation granularity (64K on Windows, page size on Linux).; /// If the address following \p NearBlock is not so aligned, it will be; /// rounded up to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful,; /// otherwise a null MemoryBlock is with \p EC describing the error.; ///; /// Allocate mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:1154,Availability,error,error,1154,"/// This method allocates a block of memory that is suitable for loading; /// dynamically generated code (e.g. JIT). An attempt to allocate; /// \p NumBytes bytes of virtual memory is made.; /// \p NearBlock may point to an existing allocation in which case; /// an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address.; /// \p Flags is used to set the initial protection flags for the block; /// of the memory.; /// \p EC [out] returns an object describing any error that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the; /// system allocation granularity (64K on Windows, page size on Linux).; /// If the address following \p NearBlock is not so aligned, it will be; /// rounded up to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful,; /// otherwise a null MemoryBlock is with \p EC describing the error.; ///; /// Allocate mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:16,Energy Efficiency,allocate,allocates,16,"/// This method allocates a block of memory that is suitable for loading; /// dynamically generated code (e.g. JIT). An attempt to allocate; /// \p NumBytes bytes of virtual memory is made.; /// \p NearBlock may point to an existing allocation in which case; /// an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address.; /// \p Flags is used to set the initial protection flags for the block; /// of the memory.; /// \p EC [out] returns an object describing any error that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the; /// system allocation granularity (64K on Windows, page size on Linux).; /// If the address following \p NearBlock is not so aligned, it will be; /// rounded up to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful,; /// otherwise a null MemoryBlock is with \p EC describing the error.; ///; /// Allocate mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:131,Energy Efficiency,allocate,allocate,131,"/// This method allocates a block of memory that is suitable for loading; /// dynamically generated code (e.g. JIT). An attempt to allocate; /// \p NumBytes bytes of virtual memory is made.; /// \p NearBlock may point to an existing allocation in which case; /// an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address.; /// \p Flags is used to set the initial protection flags for the block; /// of the memory.; /// \p EC [out] returns an object describing any error that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the; /// system allocation granularity (64K on Windows, page size on Linux).; /// If the address following \p NearBlock is not so aligned, it will be; /// rounded up to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful,; /// otherwise a null MemoryBlock is with \p EC describing the error.; ///; /// Allocate mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:285,Energy Efficiency,allocate,allocate,285,"/// This method allocates a block of memory that is suitable for loading; /// dynamically generated code (e.g. JIT). An attempt to allocate; /// \p NumBytes bytes of virtual memory is made.; /// \p NearBlock may point to an existing allocation in which case; /// an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address.; /// \p Flags is used to set the initial protection flags for the block; /// of the memory.; /// \p EC [out] returns an object describing any error that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the; /// system allocation granularity (64K on Windows, page size on Linux).; /// If the address following \p NearBlock is not so aligned, it will be; /// rounded up to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful,; /// otherwise a null MemoryBlock is with \p EC describing the error.; ///; /// Allocate mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:347,Energy Efficiency,allocate,allocated,347,"/// This method allocates a block of memory that is suitable for loading; /// dynamically generated code (e.g. JIT). An attempt to allocate; /// \p NumBytes bytes of virtual memory is made.; /// \p NearBlock may point to an existing allocation in which case; /// an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address.; /// \p Flags is used to set the initial protection flags for the block; /// of the memory.; /// \p EC [out] returns an object describing any error that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the; /// system allocation granularity (64K on Windows, page size on Linux).; /// If the address following \p NearBlock is not so aligned, it will be; /// rounded up to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful,; /// otherwise a null MemoryBlock is with \p EC describing the error.; ///; /// Allocate mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:609,Energy Efficiency,allocate,allocate,609,"/// This method allocates a block of memory that is suitable for loading; /// dynamically generated code (e.g. JIT). An attempt to allocate; /// \p NumBytes bytes of virtual memory is made.; /// \p NearBlock may point to an existing allocation in which case; /// an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address.; /// \p Flags is used to set the initial protection flags for the block; /// of the memory.; /// \p EC [out] returns an object describing any error that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the; /// system allocation granularity (64K on Windows, page size on Linux).; /// If the address following \p NearBlock is not so aligned, it will be; /// rounded up to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful,; /// otherwise a null MemoryBlock is with \p EC describing the error.; ///; /// Allocate mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:691,Energy Efficiency,allocate,allocated,691,"/// This method allocates a block of memory that is suitable for loading; /// dynamically generated code (e.g. JIT). An attempt to allocate; /// \p NumBytes bytes of virtual memory is made.; /// \p NearBlock may point to an existing allocation in which case; /// an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address.; /// \p Flags is used to set the initial protection flags for the block; /// of the memory.; /// \p EC [out] returns an object describing any error that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the; /// system allocation granularity (64K on Windows, page size on Linux).; /// If the address following \p NearBlock is not so aligned, it will be; /// rounded up to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful,; /// otherwise a null MemoryBlock is with \p EC describing the error.; ///; /// Allocate mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:775,Energy Efficiency,allocate,allocated,775,"/// This method allocates a block of memory that is suitable for loading; /// dynamically generated code (e.g. JIT). An attempt to allocate; /// \p NumBytes bytes of virtual memory is made.; /// \p NearBlock may point to an existing allocation in which case; /// an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address.; /// \p Flags is used to set the initial protection flags for the block; /// of the memory.; /// \p EC [out] returns an object describing any error that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the; /// system allocation granularity (64K on Windows, page size on Linux).; /// If the address following \p NearBlock is not so aligned, it will be; /// rounded up to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful,; /// otherwise a null MemoryBlock is with \p EC describing the error.; ///; /// Allocate mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:1171,Energy Efficiency,Allocate,Allocate,1171,"/// This method allocates a block of memory that is suitable for loading; /// dynamically generated code (e.g. JIT). An attempt to allocate; /// \p NumBytes bytes of virtual memory is made.; /// \p NearBlock may point to an existing allocation in which case; /// an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address.; /// \p Flags is used to set the initial protection flags for the block; /// of the memory.; /// \p EC [out] returns an object describing any error that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the; /// system allocation granularity (64K on Windows, page size on Linux).; /// If the address following \p NearBlock is not so aligned, it will be; /// rounded up to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful,; /// otherwise a null MemoryBlock is with \p EC describing the error.; ///; /// Allocate mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:65,Performance,load,loading,65,"/// This method allocates a block of memory that is suitable for loading; /// dynamically generated code (e.g. JIT). An attempt to allocate; /// \p NumBytes bytes of virtual memory is made.; /// \p NearBlock may point to an existing allocation in which case; /// an attempt is made to allocate more memory near the existing block.; /// The actual allocated address is not guaranteed to be near the requested; /// address.; /// \p Flags is used to set the initial protection flags for the block; /// of the memory.; /// \p EC [out] returns an object describing any error that occurs.; ///; /// This method may allocate more than the number of bytes requested. The; /// actual number of bytes allocated is indicated in the returned; /// MemoryBlock.; ///; /// The start of the allocated block must be aligned with the; /// system allocation granularity (64K on Windows, page size on Linux).; /// If the address following \p NearBlock is not so aligned, it will be; /// rounded up to the next allocation granularity boundary.; ///; /// \r a non-null MemoryBlock if the function was successful,; /// otherwise a null MemoryBlock is with \p EC describing the error.; ///; /// Allocate mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:332,Availability,failure,failure,332,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any; /// memory block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.; ///; /// Release mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:346,Availability,error,error,346,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any; /// memory block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.; ///; /// Release mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:16,Deployability,release,releases,16,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any; /// memory block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.; ///; /// Release mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:130,Deployability,release,release,130,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any; /// memory block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.; ///; /// Release mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:226,Deployability,release,released,226,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any; /// memory block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.; ///; /// Release mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:372,Deployability,Release,Release,372,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any; /// memory block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.; ///; /// Release mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:52,Energy Efficiency,allocate,allocated,52,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any; /// memory block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.; ///; /// Release mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:76,Energy Efficiency,allocate,allocateMappedMemory,76,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any; /// memory block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.; ///; /// Release mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:160,Energy Efficiency,allocate,allocated,160,"/// This method releases a block of memory that was allocated with the; /// allocateMappedMemory method. It should not be used to release any; /// memory block allocated any other way.; /// \p Block describes the memory to be released.; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.; ///; /// Release mapped memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:653,Availability,failure,failure,653,"/// This method sets the protection flags for a block of memory to the; /// state specified by /p Flags. The behavior is not specified if the; /// memory was not allocated using the allocateMappedMemory method.; /// \p Block describes the memory block to be protected.; /// \p Flags specifies the new protection state to be assigned to the block.; ///; /// If \p Flags is MF_WRITE, the actual behavior varies; /// with the operating system (i.e. MF_READ | MF_WRITE on Windows) and the; /// target architecture (i.e. MF_WRITE -> MF_READ | MF_WRITE on i386).; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.; ///; /// Set memory protection state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:667,Availability,error,error,667,"/// This method sets the protection flags for a block of memory to the; /// state specified by /p Flags. The behavior is not specified if the; /// memory was not allocated using the allocateMappedMemory method.; /// \p Block describes the memory block to be protected.; /// \p Flags specifies the new protection state to be assigned to the block.; ///; /// If \p Flags is MF_WRITE, the actual behavior varies; /// with the operating system (i.e. MF_READ | MF_WRITE on Windows) and the; /// target architecture (i.e. MF_WRITE -> MF_READ | MF_WRITE on i386).; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.; ///; /// Set memory protection state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:162,Energy Efficiency,allocate,allocated,162,"/// This method sets the protection flags for a block of memory to the; /// state specified by /p Flags. The behavior is not specified if the; /// memory was not allocated using the allocateMappedMemory method.; /// \p Block describes the memory block to be protected.; /// \p Flags specifies the new protection state to be assigned to the block.; ///; /// If \p Flags is MF_WRITE, the actual behavior varies; /// with the operating system (i.e. MF_READ | MF_WRITE on Windows) and the; /// target architecture (i.e. MF_WRITE -> MF_READ | MF_WRITE on i386).; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.; ///; /// Set memory protection state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:182,Energy Efficiency,allocate,allocateMappedMemory,182,"/// This method sets the protection flags for a block of memory to the; /// state specified by /p Flags. The behavior is not specified if the; /// memory was not allocated using the allocateMappedMemory method.; /// \p Block describes the memory block to be protected.; /// \p Flags specifies the new protection state to be assigned to the block.; ///; /// If \p Flags is MF_WRITE, the actual behavior varies; /// with the operating system (i.e. MF_READ | MF_WRITE on Windows) and the; /// target architecture (i.e. MF_WRITE -> MF_READ | MF_WRITE on i386).; ///; /// \r error_success if the function was successful, or an error_code; /// describing the failure if an error occurred.; ///; /// Set memory protection state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:134,Performance,cache,cache,134,/// InvalidateInstructionCache - Before the JIT can run a block of code; /// that has been emitted it must invalidate the instruction cache on some; /// platforms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:23,Energy Efficiency,allocate,allocated,23,/// The size as it was allocated. This is always greater or equal to the; /// size that was originally requested.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:40,Integrability,Interface,Interface,40,"//===--- MemoryBuffer.h - Memory Buffer Interface ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the MemoryBuffer interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:418,Integrability,interface,interface,418,"//===--- MemoryBuffer.h - Memory Buffer Interface ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the MemoryBuffer interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:43,Integrability,depend,dependency,43,// Duplicated from FileSystem.h to avoid a dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:35,Safety,avoid,avoid,35,// Duplicated from FileSystem.h to avoid a dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:479,Energy Efficiency,efficient,efficient,479,"// namespace sys; /// This interface provides simple read-only access to a block of memory, and; /// provides simple methods for reading files and standard input into a memory; /// buffer. In addition to basic access to the characters in the file, this; /// interface guarantees you can read one character past the end of the file,; /// and that this character will read as '\0'.; ///; /// The '\0' guarantee is needed to support an optimization -- it's intended to; /// be more efficient for clients which are reading all the data to stop; /// reading when they encounter a '\0' than to continually check the file; /// position to see if it has reached the end of the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:27,Integrability,interface,interface,27,"// namespace sys; /// This interface provides simple read-only access to a block of memory, and; /// provides simple methods for reading files and standard input into a memory; /// buffer. In addition to basic access to the characters in the file, this; /// interface guarantees you can read one character past the end of the file,; /// and that this character will read as '\0'.; ///; /// The '\0' guarantee is needed to support an optimization -- it's intended to; /// be more efficient for clients which are reading all the data to stop; /// reading when they encounter a '\0' than to continually check the file; /// position to see if it has reached the end of the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:258,Integrability,interface,interface,258,"// namespace sys; /// This interface provides simple read-only access to a block of memory, and; /// provides simple methods for reading files and standard input into a memory; /// buffer. In addition to basic access to the characters in the file, this; /// interface guarantees you can read one character past the end of the file,; /// and that this character will read as '\0'.; ///; /// The '\0' guarantee is needed to support an optimization -- it's intended to; /// be more efficient for clients which are reading all the data to stop; /// reading when they encounter a '\0' than to continually check the file; /// position to see if it has reached the end of the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:433,Performance,optimiz,optimization,433,"// namespace sys; /// This interface provides simple read-only access to a block of memory, and; /// provides simple methods for reading files and standard input into a memory; /// buffer. In addition to basic access to the characters in the file, this; /// interface guarantees you can read one character past the end of the file,; /// and that this character will read as '\0'.; ///; /// The '\0' guarantee is needed to support an optimization -- it's intended to; /// be more efficient for clients which are reading all the data to stop; /// reading when they encounter a '\0' than to continually check the file; /// position to see if it has reached the end of the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:63,Security,access,access,63,"// namespace sys; /// This interface provides simple read-only access to a block of memory, and; /// provides simple methods for reading files and standard input into a memory; /// buffer. In addition to basic access to the characters in the file, this; /// interface guarantees you can read one character past the end of the file,; /// and that this character will read as '\0'.; ///; /// The '\0' guarantee is needed to support an optimization -- it's intended to; /// be more efficient for clients which are reading all the data to stop; /// reading when they encounter a '\0' than to continually check the file; /// position to see if it has reached the end of the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:210,Security,access,access,210,"// namespace sys; /// This interface provides simple read-only access to a block of memory, and; /// provides simple methods for reading files and standard input into a memory; /// buffer. In addition to basic access to the characters in the file, this; /// interface guarantees you can read one character past the end of the file,; /// and that this character will read as '\0'.; ///; /// The '\0' guarantee is needed to support an optimization -- it's intended to; /// be more efficient for clients which are reading all the data to stop; /// reading when they encounter a '\0' than to continually check the file; /// position to see if it has reached the end of the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:46,Usability,simpl,simple,46,"// namespace sys; /// This interface provides simple read-only access to a block of memory, and; /// provides simple methods for reading files and standard input into a memory; /// buffer. In addition to basic access to the characters in the file, this; /// interface guarantees you can read one character past the end of the file,; /// and that this character will read as '\0'.; ///; /// The '\0' guarantee is needed to support an optimization -- it's intended to; /// be more efficient for clients which are reading all the data to stop; /// reading when they encounter a '\0' than to continually check the file; /// position to see if it has reached the end of the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:110,Usability,simpl,simple,110,"// namespace sys; /// This interface provides simple read-only access to a block of memory, and; /// provides simple methods for reading files and standard input into a memory; /// buffer. In addition to basic access to the characters in the file, this; /// interface guarantees you can read one character past the end of the file,; /// and that this character will read as '\0'.; ///; /// The '\0' guarantee is needed to support an optimization -- it's intended to; /// be more efficient for clients which are reading all the data to stop; /// reading when they encounter a '\0' than to continually check the file; /// position to see if it has reached the end of the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:154,Security,access,access,154,"/// For read-only MemoryBuffer_MMap, mark the buffer as unused in the near; /// future and the kernel can free resources associated with it. Further; /// access is supported but may be expensive. This calls; /// madvise(MADV_DONTNEED) on read-only file mappings on *NIX systems. This; /// function should not be called on a writable buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:96,Performance,perform,performance,96,//===--------------------------------------------------------------------===//; // Provided for performance analysis.; //===--------------------------------------------------------------------===//; /// The kind of memory backing used to support the MemoryBuffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:80,Security,access,access,80,"/// This class is an extension of MemoryBuffer, which allows copy-on-write; /// access to the underlying contents. It only supports creation methods that; /// are guaranteed to produce a writable buffer. For example, mapping a file; /// read-only is not supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate a new MemoryBuffer of the specified size that is not initialized.; /// Note that the caller should initialize the memory allocated by this; /// method. The memory is owned by the MemoryBuffer object.; ///; /// \param Alignment Set to indicate that the buffer should be aligned to at; /// least the specified alignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:134,Energy Efficiency,allocate,allocated,134,/// Allocate a new MemoryBuffer of the specified size that is not initialized.; /// Note that the caller should initialize the memory allocated by this; /// method. The memory is owned by the MemoryBuffer object.; ///; /// \param Alignment Set to indicate that the buffer should be aligned to at; /// least the specified alignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate a new zero-initialized MemoryBuffer of the specified size. Note; /// that the caller need not initialize the memory allocated by this method.; /// The memory is owned by the MemoryBuffer object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:129,Energy Efficiency,allocate,allocated,129,/// Allocate a new zero-initialized MemoryBuffer of the specified size. Note; /// that the caller need not initialize the memory allocated by this method.; /// The memory is owned by the MemoryBuffer object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:67,Security,access,access,67,"/// This class is an extension of MemoryBuffer, which allows write access to; /// the underlying contents and committing those changes to the original source.; /// It only supports creation methods that are guaranteed to produce a writable; /// buffer. For example, mapping a file read-only is not supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBufferRef.h:418,Integrability,interface,interface,418,"//===- MemoryBufferRef.h - Memory Buffer Reference --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the MemoryBuffer interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MemoryBufferRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemoryBufferRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MipsABIFlags.h:3,Availability,Mask,Masks,3,// Masks for the ases word of an ABI flags structure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MipsABIFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MipsABIFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MipsABIFlags.h:3,Modifiability,Enhance,Enhanced,3,// Enhanced VA Scheme,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MipsABIFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MipsABIFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:38,Security,access,access,38,"/// Flags indicating whether a memory access modifies or references memory.; ///; /// This is no access at all, a modification, a reference, or both; /// a modification and a reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:97,Security,access,access,97,"/// Flags indicating whether a memory access modifies or references memory.; ///; /// This is no access at all, a modification, a reference, or both; /// a modification and a reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:8,Security,access,access,8,/// The access neither references nor modifies the value stored in memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:8,Security,access,access,8,/// The access may reference the value stored in memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:8,Security,access,access,8,/// The access may modify the value stored in memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:8,Security,access,access,8,/// The access may reference and may modify the value stored in memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:44,Security,access,access,44,/// The locations at which a function might access memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:4,Security,Access,Access,4,/// Access to memory via argument pointers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:38,Security,access,access,38,/// Create MemoryEffectsBase that can access only the given location with the; /// given ModRefInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:38,Security,access,access,38,/// Create MemoryEffectsBase that can access any location with the given; /// ModRefInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:43,Security,access,access,43,/// Create MemoryEffectsBase that can only access argument memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:43,Security,access,access,43,/// Create MemoryEffectsBase that can only access inaccessible memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:43,Security,access,access,43,/// Create MemoryEffectsBase that can only access inaccessible or argument; /// memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:26,Security,access,accesses,26,/// Whether this function accesses no memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:41,Security,access,accesses,41,/// Whether this function only (at most) accesses argument memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:30,Security,access,access,30,/// Whether this function may access argument memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:41,Security,access,accesses,41,/// Whether this function only (at most) accesses inaccessible memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:41,Security,access,accesses,41,/// Whether this function only (at most) accesses argument and inaccessible; /// memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:148,Integrability,interface,interface,148,"/// Summary of how a function affects memory in the program.; ///; /// Loads from constant globals are not considered memory accesses for this; /// interface. Also, functions may freely modify stack space local to their; /// invocation without having to report it through these interfaces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:278,Integrability,interface,interfaces,278,"/// Summary of how a function affects memory in the program.; ///; /// Loads from constant globals are not considered memory accesses for this; /// interface. Also, functions may freely modify stack space local to their; /// invocation without having to report it through these interfaces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:71,Performance,Load,Loads,71,"/// Summary of how a function affects memory in the program.; ///; /// Loads from constant globals are not considered memory accesses for this; /// interface. Also, functions may freely modify stack space local to their; /// invocation without having to report it through these interfaces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h:125,Security,access,accesses,125,"/// Summary of how a function affects memory in the program.; ///; /// Loads from constant globals are not considered memory accesses for this; /// interface. Also, functions may freely modify stack space local to their; /// invocation without having to report it through these interfaces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ModRef.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSP430AttributeParser.h:423,Integrability,rout,routines,423,"//===-- MSP430AttributeParser.h - MSP430 Attribute Parser -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains support routines for parsing MSP430 ELF build attributes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MSP430AttributeParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSP430AttributeParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h:48,Availability,Error,Error,48,"//===--- MSVCErrorWorkarounds.h - Enable future<Error> in MSVC --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // MSVC's promise/future implementation requires types to be default; // constructible, so this header provides analogues of Error an Expected; // that are default constructed in a safely destructible state.; //; // FIXME: Kill off this header and migrate all users to Error/Expected once we; // move to MSVC versions that support non-default-constructible types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h:505,Availability,Error,Error,505,"//===--- MSVCErrorWorkarounds.h - Enable future<Error> in MSVC --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // MSVC's promise/future implementation requires types to be default; // constructible, so this header provides analogues of Error an Expected; // that are default constructed in a safely destructible state.; //; // FIXME: Kill off this header and migrate all users to Error/Expected once we; // move to MSVC versions that support non-default-constructible types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h:649,Availability,Error,Error,649,"//===--- MSVCErrorWorkarounds.h - Enable future<Error> in MSVC --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // MSVC's promise/future implementation requires types to be default; // constructible, so this header provides analogues of Error an Expected; // that are default constructed in a safely destructible state.; //; // FIXME: Kill off this header and migrate all users to Error/Expected once we; // move to MSVC versions that support non-default-constructible types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h:561,Safety,safe,safely,561,"//===--- MSVCErrorWorkarounds.h - Enable future<Error> in MSVC --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // MSVC's promise/future implementation requires types to be default; // constructible, so this header provides analogues of Error an Expected; // that are default constructed in a safely destructible state.; //; // FIXME: Kill off this header and migrate all users to Error/Expected once we; // move to MSVC versions that support non-default-constructible types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h:33,Availability,Error,Error,33,// A default-constructible llvm::Error that is suitable for use with MSVC's; // std::future implementation which requires default constructible types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MSVCErrorWorkarounds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:37,Security,Hash,Hash,37,"//===--- OnDiskHashTable.h - On-Disk Hash Table Implementation --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines facilities for reading and writing on-disk hash tables.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:447,Security,hash,hash,447,"//===--- OnDiskHashTable.h - On-Disk Hash Table Implementation --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines facilities for reading and writing on-disk hash tables.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:210,Integrability,interface,interface,210,"/// Generates an on disk hash table.; ///; /// This needs an \c Info that handles storing values into the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleInfo {; /// public:; /// typedef ExampleKey key_type; // Must be copy constructible; /// typedef ExampleKey &key_type_ref;; /// typedef ExampleData data_type; // Must be copy constructible; /// typedef ExampleData &data_type_ref;; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Calculate the hash for Key; /// static hash_value_type ComputeHash(key_type_ref Key);; /// /// Return the lengths, in bytes, of the given Key/Data pair.; /// static std::pair<offset_type, offset_type>; /// EmitKeyDataLength(raw_ostream &Out, key_type_ref Key, data_type_ref Data);; /// /// Write Key to Out. KeyLen is the length from EmitKeyDataLength.; /// static void EmitKey(raw_ostream &Out, key_type_ref Key,; /// offset_type KeyLen);; /// /// Write Data to Out. DataLen is the length from EmitKeyDataLength.; /// static void EmitData(raw_ostream &Out, key_type_ref Key,; /// data_type_ref Data, offset_type DataLen);; /// /// Determine if two keys are equal. Optional, only needed by contains.; /// static bool EqualKey(key_type_ref Key1, key_type_ref Key2);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:25,Security,hash,hash,25,"/// Generates an on disk hash table.; ///; /// This needs an \c Info that handles storing values into the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleInfo {; /// public:; /// typedef ExampleKey key_type; // Must be copy constructible; /// typedef ExampleKey &key_type_ref;; /// typedef ExampleData data_type; // Must be copy constructible; /// typedef ExampleData &data_type_ref;; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Calculate the hash for Key; /// static hash_value_type ComputeHash(key_type_ref Key);; /// /// Return the lengths, in bytes, of the given Key/Data pair.; /// static std::pair<offset_type, offset_type>; /// EmitKeyDataLength(raw_ostream &Out, key_type_ref Key, data_type_ref Data);; /// /// Write Key to Out. KeyLen is the length from EmitKeyDataLength.; /// static void EmitKey(raw_ostream &Out, key_type_ref Key,; /// offset_type KeyLen);; /// /// Write Data to Out. DataLen is the length from EmitKeyDataLength.; /// static void EmitData(raw_ostream &Out, key_type_ref Key,; /// data_type_ref Data, offset_type DataLen);; /// /// Determine if two keys are equal. Optional, only needed by contains.; /// static bool EqualKey(key_type_ref Key1, key_type_ref Key2);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:106,Security,hash,hash,106,"/// Generates an on disk hash table.; ///; /// This needs an \c Info that handles storing values into the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleInfo {; /// public:; /// typedef ExampleKey key_type; // Must be copy constructible; /// typedef ExampleKey &key_type_ref;; /// typedef ExampleData data_type; // Must be copy constructible; /// typedef ExampleData &data_type_ref;; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Calculate the hash for Key; /// static hash_value_type ComputeHash(key_type_ref Key);; /// /// Return the lengths, in bytes, of the given Key/Data pair.; /// static std::pair<offset_type, offset_type>; /// EmitKeyDataLength(raw_ostream &Out, key_type_ref Key, data_type_ref Data);; /// /// Write Key to Out. KeyLen is the length from EmitKeyDataLength.; /// static void EmitKey(raw_ostream &Out, key_type_ref Key,; /// offset_type KeyLen);; /// /// Write Data to Out. DataLen is the length from EmitKeyDataLength.; /// static void EmitData(raw_ostream &Out, key_type_ref Key,; /// data_type_ref Data, offset_type DataLen);; /// /// Determine if two keys are equal. Optional, only needed by contains.; /// static bool EqualKey(key_type_ref Key1, key_type_ref Key2);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:149,Security,hash,hash,149,"/// Generates an on disk hash table.; ///; /// This needs an \c Info that handles storing values into the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleInfo {; /// public:; /// typedef ExampleKey key_type; // Must be copy constructible; /// typedef ExampleKey &key_type_ref;; /// typedef ExampleData data_type; // Must be copy constructible; /// typedef ExampleData &data_type_ref;; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Calculate the hash for Key; /// static hash_value_type ComputeHash(key_type_ref Key);; /// /// Return the lengths, in bytes, of the given Key/Data pair.; /// static std::pair<offset_type, offset_type>; /// EmitKeyDataLength(raw_ostream &Out, key_type_ref Key, data_type_ref Data);; /// /// Write Key to Out. KeyLen is the length from EmitKeyDataLength.; /// static void EmitKey(raw_ostream &Out, key_type_ref Key,; /// offset_type KeyLen);; /// /// Write Data to Out. DataLen is the length from EmitKeyDataLength.; /// static void EmitData(raw_ostream &Out, key_type_ref Key,; /// data_type_ref Data, offset_type DataLen);; /// /// Determine if two keys are equal. Optional, only needed by contains.; /// static bool EqualKey(key_type_ref Key1, key_type_ref Key2);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:540,Security,hash,hash,540,"/// Generates an on disk hash table.; ///; /// This needs an \c Info that handles storing values into the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleInfo {; /// public:; /// typedef ExampleKey key_type; // Must be copy constructible; /// typedef ExampleKey &key_type_ref;; /// typedef ExampleData data_type; // Must be copy constructible; /// typedef ExampleData &data_type_ref;; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Calculate the hash for Key; /// static hash_value_type ComputeHash(key_type_ref Key);; /// /// Return the lengths, in bytes, of the given Key/Data pair.; /// static std::pair<offset_type, offset_type>; /// EmitKeyDataLength(raw_ostream &Out, key_type_ref Key, data_type_ref Data);; /// /// Write Key to Out. KeyLen is the length from EmitKeyDataLength.; /// static void EmitKey(raw_ostream &Out, key_type_ref Key,; /// offset_type KeyLen);; /// /// Write Data to Out. DataLen is the length from EmitKeyDataLength.; /// static void EmitData(raw_ostream &Out, key_type_ref Key,; /// data_type_ref Data, offset_type DataLen);; /// /// Determine if two keys are equal. Optional, only needed by contains.; /// static bool EqualKey(key_type_ref Key1, key_type_ref Key2);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:666,Security,hash,hash,666,"/// Generates an on disk hash table.; ///; /// This needs an \c Info that handles storing values into the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleInfo {; /// public:; /// typedef ExampleKey key_type; // Must be copy constructible; /// typedef ExampleKey &key_type_ref;; /// typedef ExampleData data_type; // Must be copy constructible; /// typedef ExampleData &data_type_ref;; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Calculate the hash for Key; /// static hash_value_type ComputeHash(key_type_ref Key);; /// /// Return the lengths, in bytes, of the given Key/Data pair.; /// static std::pair<offset_type, offset_type>; /// EmitKeyDataLength(raw_ostream &Out, key_type_ref Key, data_type_ref Data);; /// /// Write Key to Out. KeyLen is the length from EmitKeyDataLength.; /// static void EmitKey(raw_ostream &Out, key_type_ref Key,; /// offset_type KeyLen);; /// /// Write Data to Out. DataLen is the length from EmitKeyDataLength.; /// static void EmitData(raw_ostream &Out, key_type_ref Key,; /// data_type_ref Data, offset_type DataLen);; /// /// Determine if two keys are equal. Optional, only needed by contains.; /// static bool EqualKey(key_type_ref Key1, key_type_ref Key2);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:25,Security,hash,hash,25,/// A single item in the hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:44,Security,hash,hash,44,/// A linked list of values in a particular hash bucket.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:40,Security,hash,hash,40,/// Insert an item into the appropriate hash bucket.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:15,Security,hash,hash,15,"/// Resize the hash table, moving the old entries into the new buckets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:88,Energy Efficiency,allocate,allocated,88,/// Insert an entry into the table.; ///; /// Uses the provided Info instead of a stack allocated one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:110,Energy Efficiency,allocate,allocated,110,"/// Emit the table to Out, which must not be at offset 0.; ///; /// Uses the provided Info instead of a stack allocated one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:556,Security,hash,hash,556,"// Now we're done adding entries, resize the bucket list if it's; // significantly too large. (This only happens if the number of; // entries is small and we're within our initial allocation of; // 64 buckets.) We aim for an occupancy ratio in [3/8, 3/4).; //; // As a special case, if there are two or fewer entries, just; // form a single bucket. A linear scan is fine in that case, and; // this is very common in C++ class lookup tables. This also; // guarantees we produce at least one bucket for an empty table.; //; // FIXME: Try computing a perfect hash function at this point.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:6,Testability,assert,asserts,6,"// In asserts mode, check that the users length matches the data they; // wrote.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:43,Security,hash,hashtable,43,// Pad with zeros so that we can start the hashtable at an aligned address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:12,Security,hash,hashtable,12,// Emit the hashtable itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:219,Integrability,interface,interface,219,"/// Provides lookup on an on disk hash table.; ///; /// This needs an \c Info that handles reading values from the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleLookupInfo {; /// public:; /// typedef ExampleData data_type;; /// typedef ExampleInternalKey internal_key_type; // The stored key type.; /// typedef ExampleKey external_key_type; // The type to pass to find().; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Compare two keys for equality.; /// static bool EqualKey(internal_key_type &Key1, internal_key_type &Key2);; /// /// Calculate the hash for the given key.; /// static hash_value_type ComputeHash(internal_key_type &IKey);; /// /// Translate from the semantic type of a key in the hash table to the; /// /// type that is actually stored and used for hashing and comparisons.; /// /// The internal and external types are often the same, in which case this; /// /// can simply return the passed in value.; /// static const internal_key_type &GetInternalKey(external_key_type &EKey);; /// /// Read the key and data length from Buffer, leaving it pointing at the; /// /// following byte.; /// static std::pair<offset_type, offset_type>; /// ReadKeyDataLength(const unsigned char *&Buffer);; /// /// Read the key from Buffer, given the KeyLen as reported from; /// /// ReadKeyDataLength.; /// const internal_key_type &ReadKey(const unsigned char *Buffer,; /// offset_type KeyLen);; /// /// Read the data for Key from Buffer, given the DataLen as reported from; /// /// ReadKeyDataLength.; /// data_type ReadData(StringRef Key, const unsigned char *Buffer,; /// offset_type DataLen);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:34,Security,hash,hash,34,"/// Provides lookup on an on disk hash table.; ///; /// This needs an \c Info that handles reading values from the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleLookupInfo {; /// public:; /// typedef ExampleData data_type;; /// typedef ExampleInternalKey internal_key_type; // The stored key type.; /// typedef ExampleKey external_key_type; // The type to pass to find().; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Compare two keys for equality.; /// static bool EqualKey(internal_key_type &Key1, internal_key_type &Key2);; /// /// Calculate the hash for the given key.; /// static hash_value_type ComputeHash(internal_key_type &IKey);; /// /// Translate from the semantic type of a key in the hash table to the; /// /// type that is actually stored and used for hashing and comparisons.; /// /// The internal and external types are often the same, in which case this; /// /// can simply return the passed in value.; /// static const internal_key_type &GetInternalKey(external_key_type &EKey);; /// /// Read the key and data length from Buffer, leaving it pointing at the; /// /// following byte.; /// static std::pair<offset_type, offset_type>; /// ReadKeyDataLength(const unsigned char *&Buffer);; /// /// Read the key from Buffer, given the KeyLen as reported from; /// /// ReadKeyDataLength.; /// const internal_key_type &ReadKey(const unsigned char *Buffer,; /// offset_type KeyLen);; /// /// Read the data for Key from Buffer, given the DataLen as reported from; /// /// ReadKeyDataLength.; /// data_type ReadData(StringRef Key, const unsigned char *Buffer,; /// offset_type DataLen);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:115,Security,hash,hash,115,"/// Provides lookup on an on disk hash table.; ///; /// This needs an \c Info that handles reading values from the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleLookupInfo {; /// public:; /// typedef ExampleData data_type;; /// typedef ExampleInternalKey internal_key_type; // The stored key type.; /// typedef ExampleKey external_key_type; // The type to pass to find().; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Compare two keys for equality.; /// static bool EqualKey(internal_key_type &Key1, internal_key_type &Key2);; /// /// Calculate the hash for the given key.; /// static hash_value_type ComputeHash(internal_key_type &IKey);; /// /// Translate from the semantic type of a key in the hash table to the; /// /// type that is actually stored and used for hashing and comparisons.; /// /// The internal and external types are often the same, in which case this; /// /// can simply return the passed in value.; /// static const internal_key_type &GetInternalKey(external_key_type &EKey);; /// /// Read the key and data length from Buffer, leaving it pointing at the; /// /// following byte.; /// static std::pair<offset_type, offset_type>; /// ReadKeyDataLength(const unsigned char *&Buffer);; /// /// Read the key from Buffer, given the KeyLen as reported from; /// /// ReadKeyDataLength.; /// const internal_key_type &ReadKey(const unsigned char *Buffer,; /// offset_type KeyLen);; /// /// Read the data for Key from Buffer, given the DataLen as reported from; /// /// ReadKeyDataLength.; /// data_type ReadData(StringRef Key, const unsigned char *Buffer,; /// offset_type DataLen);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:158,Security,hash,hash,158,"/// Provides lookup on an on disk hash table.; ///; /// This needs an \c Info that handles reading values from the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleLookupInfo {; /// public:; /// typedef ExampleData data_type;; /// typedef ExampleInternalKey internal_key_type; // The stored key type.; /// typedef ExampleKey external_key_type; // The type to pass to find().; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Compare two keys for equality.; /// static bool EqualKey(internal_key_type &Key1, internal_key_type &Key2);; /// /// Calculate the hash for the given key.; /// static hash_value_type ComputeHash(internal_key_type &IKey);; /// /// Translate from the semantic type of a key in the hash table to the; /// /// type that is actually stored and used for hashing and comparisons.; /// /// The internal and external types are often the same, in which case this; /// /// can simply return the passed in value.; /// static const internal_key_type &GetInternalKey(external_key_type &EKey);; /// /// Read the key and data length from Buffer, leaving it pointing at the; /// /// following byte.; /// static std::pair<offset_type, offset_type>; /// ReadKeyDataLength(const unsigned char *&Buffer);; /// /// Read the key from Buffer, given the KeyLen as reported from; /// /// ReadKeyDataLength.; /// const internal_key_type &ReadKey(const unsigned char *Buffer,; /// offset_type KeyLen);; /// /// Read the data for Key from Buffer, given the DataLen as reported from; /// /// ReadKeyDataLength.; /// data_type ReadData(StringRef Key, const unsigned char *Buffer,; /// offset_type DataLen);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:530,Security,hash,hash,530,"/// Provides lookup on an on disk hash table.; ///; /// This needs an \c Info that handles reading values from the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleLookupInfo {; /// public:; /// typedef ExampleData data_type;; /// typedef ExampleInternalKey internal_key_type; // The stored key type.; /// typedef ExampleKey external_key_type; // The type to pass to find().; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Compare two keys for equality.; /// static bool EqualKey(internal_key_type &Key1, internal_key_type &Key2);; /// /// Calculate the hash for the given key.; /// static hash_value_type ComputeHash(internal_key_type &IKey);; /// /// Translate from the semantic type of a key in the hash table to the; /// /// type that is actually stored and used for hashing and comparisons.; /// /// The internal and external types are often the same, in which case this; /// /// can simply return the passed in value.; /// static const internal_key_type &GetInternalKey(external_key_type &EKey);; /// /// Read the key and data length from Buffer, leaving it pointing at the; /// /// following byte.; /// static std::pair<offset_type, offset_type>; /// ReadKeyDataLength(const unsigned char *&Buffer);; /// /// Read the key from Buffer, given the KeyLen as reported from; /// /// ReadKeyDataLength.; /// const internal_key_type &ReadKey(const unsigned char *Buffer,; /// offset_type KeyLen);; /// /// Read the data for Key from Buffer, given the DataLen as reported from; /// /// ReadKeyDataLength.; /// data_type ReadData(StringRef Key, const unsigned char *Buffer,; /// offset_type DataLen);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:773,Security,hash,hash,773,"/// Provides lookup on an on disk hash table.; ///; /// This needs an \c Info that handles reading values from the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleLookupInfo {; /// public:; /// typedef ExampleData data_type;; /// typedef ExampleInternalKey internal_key_type; // The stored key type.; /// typedef ExampleKey external_key_type; // The type to pass to find().; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Compare two keys for equality.; /// static bool EqualKey(internal_key_type &Key1, internal_key_type &Key2);; /// /// Calculate the hash for the given key.; /// static hash_value_type ComputeHash(internal_key_type &IKey);; /// /// Translate from the semantic type of a key in the hash table to the; /// /// type that is actually stored and used for hashing and comparisons.; /// /// The internal and external types are often the same, in which case this; /// /// can simply return the passed in value.; /// static const internal_key_type &GetInternalKey(external_key_type &EKey);; /// /// Read the key and data length from Buffer, leaving it pointing at the; /// /// following byte.; /// static std::pair<offset_type, offset_type>; /// ReadKeyDataLength(const unsigned char *&Buffer);; /// /// Read the key from Buffer, given the KeyLen as reported from; /// /// ReadKeyDataLength.; /// const internal_key_type &ReadKey(const unsigned char *Buffer,; /// offset_type KeyLen);; /// /// Read the data for Key from Buffer, given the DataLen as reported from; /// /// ReadKeyDataLength.; /// data_type ReadData(StringRef Key, const unsigned char *Buffer,; /// offset_type DataLen);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:921,Security,hash,hash,921,"/// Provides lookup on an on disk hash table.; ///; /// This needs an \c Info that handles reading values from the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleLookupInfo {; /// public:; /// typedef ExampleData data_type;; /// typedef ExampleInternalKey internal_key_type; // The stored key type.; /// typedef ExampleKey external_key_type; // The type to pass to find().; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Compare two keys for equality.; /// static bool EqualKey(internal_key_type &Key1, internal_key_type &Key2);; /// /// Calculate the hash for the given key.; /// static hash_value_type ComputeHash(internal_key_type &IKey);; /// /// Translate from the semantic type of a key in the hash table to the; /// /// type that is actually stored and used for hashing and comparisons.; /// /// The internal and external types are often the same, in which case this; /// /// can simply return the passed in value.; /// static const internal_key_type &GetInternalKey(external_key_type &EKey);; /// /// Read the key and data length from Buffer, leaving it pointing at the; /// /// following byte.; /// static std::pair<offset_type, offset_type>; /// ReadKeyDataLength(const unsigned char *&Buffer);; /// /// Read the key from Buffer, given the KeyLen as reported from; /// /// ReadKeyDataLength.; /// const internal_key_type &ReadKey(const unsigned char *Buffer,; /// offset_type KeyLen);; /// /// Read the data for Key from Buffer, given the DataLen as reported from; /// /// ReadKeyDataLength.; /// data_type ReadData(StringRef Key, const unsigned char *Buffer,; /// offset_type DataLen);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:990,Security,hash,hashing,990,"/// Provides lookup on an on disk hash table.; ///; /// This needs an \c Info that handles reading values from the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleLookupInfo {; /// public:; /// typedef ExampleData data_type;; /// typedef ExampleInternalKey internal_key_type; // The stored key type.; /// typedef ExampleKey external_key_type; // The type to pass to find().; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Compare two keys for equality.; /// static bool EqualKey(internal_key_type &Key1, internal_key_type &Key2);; /// /// Calculate the hash for the given key.; /// static hash_value_type ComputeHash(internal_key_type &IKey);; /// /// Translate from the semantic type of a key in the hash table to the; /// /// type that is actually stored and used for hashing and comparisons.; /// /// The internal and external types are often the same, in which case this; /// /// can simply return the passed in value.; /// static const internal_key_type &GetInternalKey(external_key_type &EKey);; /// /// Read the key and data length from Buffer, leaving it pointing at the; /// /// following byte.; /// static std::pair<offset_type, offset_type>; /// ReadKeyDataLength(const unsigned char *&Buffer);; /// /// Read the key from Buffer, given the KeyLen as reported from; /// /// ReadKeyDataLength.; /// const internal_key_type &ReadKey(const unsigned char *Buffer,; /// offset_type KeyLen);; /// /// Read the data for Key from Buffer, given the DataLen as reported from; /// /// ReadKeyDataLength.; /// data_type ReadData(StringRef Key, const unsigned char *Buffer,; /// offset_type DataLen);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:1108,Usability,simpl,simply,1108,"/// Provides lookup on an on disk hash table.; ///; /// This needs an \c Info that handles reading values from the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleLookupInfo {; /// public:; /// typedef ExampleData data_type;; /// typedef ExampleInternalKey internal_key_type; // The stored key type.; /// typedef ExampleKey external_key_type; // The type to pass to find().; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Compare two keys for equality.; /// static bool EqualKey(internal_key_type &Key1, internal_key_type &Key2);; /// /// Calculate the hash for the given key.; /// static hash_value_type ComputeHash(internal_key_type &IKey);; /// /// Translate from the semantic type of a key in the hash table to the; /// /// type that is actually stored and used for hashing and comparisons.; /// /// The internal and external types are often the same, in which case this; /// /// can simply return the passed in value.; /// static const internal_key_type &GetInternalKey(external_key_type &EKey);; /// /// Read the key and data length from Buffer, leaving it pointing at the; /// /// following byte.; /// static std::pair<offset_type, offset_type>; /// ReadKeyDataLength(const unsigned char *&Buffer);; /// /// Read the key from Buffer, given the KeyLen as reported from; /// /// ReadKeyDataLength.; /// const internal_key_type &ReadKey(const unsigned char *Buffer,; /// offset_type KeyLen);; /// /// Read the data for Key from Buffer, given the DataLen as reported from; /// /// ReadKeyDataLength.; /// data_type ReadData(StringRef Key, const unsigned char *Buffer,; /// offset_type DataLen);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:64,Security,hash,hash,64,"/// Read the number of buckets and the number of entries from a hash table; /// produced by OnDiskHashTableGenerator::Emit, and advance the Buckets; /// pointer past them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:62,Security,hash,hash,62,/// Look up the stored data for a particular key with a known hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:42,Security,hash,hash,42,// Each bucket is just an offset into the hash table file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:12,Security,hash,hash,12,// Read the hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:15,Security,hash,hashes,15,"// Compare the hashes. If they are not the same, skip the entry entirely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:15,Security,hash,hash,15,"/// Create the hash table.; ///; /// \param Buckets is the beginning of the hash table itself, which follows; /// the payload of entire structure. This is the value returned by; /// OnDiskHashTableGenerator::Emit.; ///; /// \param Base is the point from which all offsets into the structure are; /// based. This is offset 0 in the stream that was used when Emitting the; /// table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:76,Security,hash,hash,76,"/// Create the hash table.; ///; /// \param Buckets is the beginning of the hash table itself, which follows; /// the payload of entire structure. This is the value returned by; /// OnDiskHashTableGenerator::Emit.; ///; /// \param Base is the point from which all offsets into the structure are; /// based. This is offset 0 in the stream that was used when Emitting the; /// table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:50,Security,hash,hash,50,/// Provides lookup and iteration over an on disk hash table.; ///; /// \copydetails llvm::OnDiskChainedHashTable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:12,Security,hash,hash,12,// Skip the hash.; // Determine the length of the key and the data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:65,Security,hash,hash,65,/// Get the start of the item as written by the trait (after the hash and; /// immediately before the key and value length).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:15,Security,hash,hash,15,"/// Create the hash table.; ///; /// \param Buckets is the beginning of the hash table itself, which follows; /// the payload of entire structure. This is the value returned by; /// OnDiskHashTableGenerator::Emit.; ///; /// \param Payload is the beginning of the data contained in the table. This; /// is Base plus any padding or header data that was stored, ie, the offset; /// that the stream was at when calling Emit.; ///; /// \param Base is the point from which all offsets into the structure are; /// based. This is offset 0 in the stream that was used when Emitting the; /// table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:76,Security,hash,hash,76,"/// Create the hash table.; ///; /// \param Buckets is the beginning of the hash table itself, which follows; /// the payload of entire structure. This is the value returned by; /// OnDiskHashTableGenerator::Emit.; ///; /// \param Payload is the beginning of the data contained in the table. This; /// is Base plus any padding or header data that was stored, ie, the offset; /// that the stream was at when calling Emit.; ///; /// \param Base is the point from which all offsets into the structure are; /// based. This is offset 0 in the stream that was used when Emitting the; /// table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:1007,Energy Efficiency,allocate,allocated,1007,"//===-- OptimizedStructLayout.h - Struct layout algorithm ---------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file provides an interface for laying out a sequence of fields; /// as a struct in a way that attempts to minimizes the total space; /// requirements of the struct while still satisfying the layout; /// requirements of the individual fields. The resulting layout may be; /// substantially more compact than simply laying out the fields in their; /// original order.; ///; /// Fields may be pre-assigned fixed offsets. They may also be given sizes; /// that are not multiples of their alignments. There is no currently no; /// way to describe that a field has interior padding that other fields may; /// be allocated into.; ///; /// This algorithm does not claim to be ""optimal"" for several reasons:; ///; /// - First, it does not guarantee that the result is minimal in size.; /// There is no known efficient algoorithm to achieve minimality for; /// unrestricted inputs. Nonetheless, this algorithm; ///; /// - Second, there are other ways that a struct layout could be optimized; /// besides space usage, such as locality. This layout may have a mixed; /// impact on locality: less overall memory may be used, but adjacent; /// fields in the original array may be moved further from one another.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:1200,Energy Efficiency,efficient,efficient,1200,"//===-- OptimizedStructLayout.h - Struct layout algorithm ---------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file provides an interface for laying out a sequence of fields; /// as a struct in a way that attempts to minimizes the total space; /// requirements of the struct while still satisfying the layout; /// requirements of the individual fields. The resulting layout may be; /// substantially more compact than simply laying out the fields in their; /// original order.; ///; /// Fields may be pre-assigned fixed offsets. They may also be given sizes; /// that are not multiples of their alignments. There is no currently no; /// way to describe that a field has interior padding that other fields may; /// be allocated into.; ///; /// This algorithm does not claim to be ""optimal"" for several reasons:; ///; /// - First, it does not guarantee that the result is minimal in size.; /// There is no known efficient algoorithm to achieve minimality for; /// unrestricted inputs. Nonetheless, this algorithm; ///; /// - Second, there are other ways that a struct layout could be optimized; /// besides space usage, such as locality. This layout may have a mixed; /// impact on locality: less overall memory may be used, but adjacent; /// fields in the original array may be moved further from one another.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:418,Integrability,interface,interface,418,"//===-- OptimizedStructLayout.h - Struct layout algorithm ---------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file provides an interface for laying out a sequence of fields; /// as a struct in a way that attempts to minimizes the total space; /// requirements of the struct while still satisfying the layout; /// requirements of the individual fields. The resulting layout may be; /// substantially more compact than simply laying out the fields in their; /// original order.; ///; /// Fields may be pre-assigned fixed offsets. They may also be given sizes; /// that are not multiples of their alignments. There is no currently no; /// way to describe that a field has interior padding that other fields may; /// be allocated into.; ///; /// This algorithm does not claim to be ""optimal"" for several reasons:; ///; /// - First, it does not guarantee that the result is minimal in size.; /// There is no known efficient algoorithm to achieve minimality for; /// unrestricted inputs. Nonetheless, this algorithm; ///; /// - Second, there are other ways that a struct layout could be optimized; /// besides space usage, such as locality. This layout may have a mixed; /// impact on locality: less overall memory may be used, but adjacent; /// fields in the original array may be moved further from one another.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:8,Performance,Optimiz,OptimizedStructLayout,8,"//===-- OptimizedStructLayout.h - Struct layout algorithm ---------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file provides an interface for laying out a sequence of fields; /// as a struct in a way that attempts to minimizes the total space; /// requirements of the struct while still satisfying the layout; /// requirements of the individual fields. The resulting layout may be; /// substantially more compact than simply laying out the fields in their; /// original order.; ///; /// Fields may be pre-assigned fixed offsets. They may also be given sizes; /// that are not multiples of their alignments. There is no currently no; /// way to describe that a field has interior padding that other fields may; /// be allocated into.; ///; /// This algorithm does not claim to be ""optimal"" for several reasons:; ///; /// - First, it does not guarantee that the result is minimal in size.; /// There is no known efficient algoorithm to achieve minimality for; /// unrestricted inputs. Nonetheless, this algorithm; ///; /// - Second, there are other ways that a struct layout could be optimized; /// besides space usage, such as locality. This layout may have a mixed; /// impact on locality: less overall memory may be used, but adjacent; /// fields in the original array may be moved further from one another.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:1372,Performance,optimiz,optimized,1372,"//===-- OptimizedStructLayout.h - Struct layout algorithm ---------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file provides an interface for laying out a sequence of fields; /// as a struct in a way that attempts to minimizes the total space; /// requirements of the struct while still satisfying the layout; /// requirements of the individual fields. The resulting layout may be; /// substantially more compact than simply laying out the fields in their; /// original order.; ///; /// Fields may be pre-assigned fixed offsets. They may also be given sizes; /// that are not multiples of their alignments. There is no currently no; /// way to describe that a field has interior padding that other fields may; /// be allocated into.; ///; /// This algorithm does not claim to be ""optimal"" for several reasons:; ///; /// - First, it does not guarantee that the result is minimal in size.; /// There is no known efficient algoorithm to achieve minimality for; /// unrestricted inputs. Nonetheless, this algorithm; ///; /// - Second, there are other ways that a struct layout could be optimized; /// besides space usage, such as locality. This layout may have a mixed; /// impact on locality: less overall memory may be used, but adjacent; /// fields in the original array may be moved further from one another.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:708,Usability,simpl,simply,708,"//===-- OptimizedStructLayout.h - Struct layout algorithm ---------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file provides an interface for laying out a sequence of fields; /// as a struct in a way that attempts to minimizes the total space; /// requirements of the struct while still satisfying the layout; /// requirements of the individual fields. The resulting layout may be; /// substantially more compact than simply laying out the fields in their; /// original order.; ///; /// Fields may be pre-assigned fixed offsets. They may also be given sizes; /// that are not multiples of their alignments. There is no currently no; /// way to describe that a field has interior padding that other fields may; /// be allocated into.; ///; /// This algorithm does not claim to be ""optimal"" for several reasons:; ///; /// - First, it does not guarantee that the result is minimal in size.; /// There is no known efficient algoorithm to achieve minimality for; /// unrestricted inputs. Nonetheless, this algorithm; ///; /// - Second, there are other ways that a struct layout could be optimized; /// besides space usage, such as locality. This layout may have a mixed; /// impact on locality: less overall memory may be used, but adjacent; /// fields in the original array may be moved further from one another.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:81,Modifiability,Flexible,FlexibleOffset,81,"/// The offset of this field in the final layout. If this is; /// initialized to FlexibleOffset, layout will overwrite it with; /// the assigned offset of the field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:1710,Deployability,release,releases,1710,"hould ""block out"" those gaps by e.g.; /// just creating a single fixed-offset field that represents the; /// entire ""header"".; ///; /// - The size of a field is not required to be a multiple of, or even; /// greater than, the field's required alignment. The only constraint; /// on fields is that they must not be zero-sized.; ///; /// To simplify the implementation, any fixed-offset fields in the; /// layout must appear at the start of the field array, and they must; /// be ordered by increasing offset.; ///; /// The algorithm will produce a guaranteed-minimal layout with no; /// interior padding in the following ""C-style"" case:; ///; /// - every field's size is a multiple of its required alignment and; /// - either no fields have initially fixed offsets, or the fixed-offset; /// fields have no interior padding and end at an offset that is at; /// least as aligned as all the flexible-offset fields.; ///; /// Otherwise, while the algorithm will make a best-effort attempt to; /// avoid padding, it cannot guarantee a minimal layout, as there is; /// no known efficient algorithm for doing so.; ///; /// The layout produced by this algorithm may not be stable across LLVM; /// releases. Do not use this anywhere where ABI stability is required.; ///; /// Flexible-offset fields with the same size and alignment will be ordered; /// the same way they were in the initial array. Otherwise the current; /// algorithm makes no effort to preserve the initial order of; /// flexible-offset fields.; ///; /// On return, all fields will have been assigned a fixed offset, and the; /// array will be sorted in order of ascending offsets. Note that this; /// means that the fixed-offset fields may no longer form a strict prefix; /// if there's any padding before they end.; ///; /// The return value is the total size of the struct and its required; /// alignment. Note that the total size is not rounded up to a multiple; /// of the required alignment; clients which require this can do so easily.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:433,Energy Efficiency,allocate,allocate,433,"/// Compute a layout for a struct containing the given fields, making a; /// best-effort attempt to minimize the amount of space required.; ///; /// Two features are supported which require a more careful solution; /// than the well-known ""sort by decreasing alignment"" solution:; ///; /// - Fields may be assigned a fixed offset in the layout. If there are; /// gaps among the fixed-offset fields, the algorithm may attempt; /// to allocate flexible-offset fields into those gaps. If that's; /// undesirable, the caller should ""block out"" those gaps by e.g.; /// just creating a single fixed-offset field that represents the; /// entire ""header"".; ///; /// - The size of a field is not required to be a multiple of, or even; /// greater than, the field's required alignment. The only constraint; /// on fields is that they must not be zero-sized.; ///; /// To simplify the implementation, any fixed-offset fields in the; /// layout must appear at the start of the field array, and they must; /// be ordered by increasing offset.; ///; /// The algorithm will produce a guaranteed-minimal layout with no; /// interior padding in the following ""C-style"" case:; ///; /// - every field's size is a multiple of its required alignment and; /// - either no fields have initially fixed offsets, or the fixed-offset; /// fields have no interior padding and end at an offset that is at; /// least as aligned as all the flexible-offset fields.; ///; /// Otherwise, while the algorithm will make a best-effort attempt to; /// avoid padding, it cannot guarantee a minimal layout, as there is; /// no known efficient algorithm for doing so.; ///; /// The layout produced by this algorithm may not be stable across LLVM; /// releases. Do not use this anywhere where ABI stability is required.; ///; /// Flexible-offset fields with the same size and alignment will be ordered; /// the same way they were in the initial array. Otherwise the current; /// algorithm makes no effort to preserve the initial order of; /// ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:1593,Energy Efficiency,efficient,efficient,1593,"hould ""block out"" those gaps by e.g.; /// just creating a single fixed-offset field that represents the; /// entire ""header"".; ///; /// - The size of a field is not required to be a multiple of, or even; /// greater than, the field's required alignment. The only constraint; /// on fields is that they must not be zero-sized.; ///; /// To simplify the implementation, any fixed-offset fields in the; /// layout must appear at the start of the field array, and they must; /// be ordered by increasing offset.; ///; /// The algorithm will produce a guaranteed-minimal layout with no; /// interior padding in the following ""C-style"" case:; ///; /// - every field's size is a multiple of its required alignment and; /// - either no fields have initially fixed offsets, or the fixed-offset; /// fields have no interior padding and end at an offset that is at; /// least as aligned as all the flexible-offset fields.; ///; /// Otherwise, while the algorithm will make a best-effort attempt to; /// avoid padding, it cannot guarantee a minimal layout, as there is; /// no known efficient algorithm for doing so.; ///; /// The layout produced by this algorithm may not be stable across LLVM; /// releases. Do not use this anywhere where ABI stability is required.; ///; /// Flexible-offset fields with the same size and alignment will be ordered; /// the same way they were in the initial array. Otherwise the current; /// algorithm makes no effort to preserve the initial order of; /// flexible-offset fields.; ///; /// On return, all fields will have been assigned a fixed offset, and the; /// array will be sorted in order of ascending offsets. Note that this; /// means that the fixed-offset fields may no longer form a strict prefix; /// if there's any padding before they end.; ///; /// The return value is the total size of the struct and its required; /// alignment. Note that the total size is not rounded up to a multiple; /// of the required alignment; clients which require this can do so easily.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:442,Modifiability,flexible,flexible-offset,442,"/// Compute a layout for a struct containing the given fields, making a; /// best-effort attempt to minimize the amount of space required.; ///; /// Two features are supported which require a more careful solution; /// than the well-known ""sort by decreasing alignment"" solution:; ///; /// - Fields may be assigned a fixed offset in the layout. If there are; /// gaps among the fixed-offset fields, the algorithm may attempt; /// to allocate flexible-offset fields into those gaps. If that's; /// undesirable, the caller should ""block out"" those gaps by e.g.; /// just creating a single fixed-offset field that represents the; /// entire ""header"".; ///; /// - The size of a field is not required to be a multiple of, or even; /// greater than, the field's required alignment. The only constraint; /// on fields is that they must not be zero-sized.; ///; /// To simplify the implementation, any fixed-offset fields in the; /// layout must appear at the start of the field array, and they must; /// be ordered by increasing offset.; ///; /// The algorithm will produce a guaranteed-minimal layout with no; /// interior padding in the following ""C-style"" case:; ///; /// - every field's size is a multiple of its required alignment and; /// - either no fields have initially fixed offsets, or the fixed-offset; /// fields have no interior padding and end at an offset that is at; /// least as aligned as all the flexible-offset fields.; ///; /// Otherwise, while the algorithm will make a best-effort attempt to; /// avoid padding, it cannot guarantee a minimal layout, as there is; /// no known efficient algorithm for doing so.; ///; /// The layout produced by this algorithm may not be stable across LLVM; /// releases. Do not use this anywhere where ABI stability is required.; ///; /// Flexible-offset fields with the same size and alignment will be ordered; /// the same way they were in the initial array. Otherwise the current; /// algorithm makes no effort to preserve the initial order of; /// ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:1409,Modifiability,flexible,flexible-offset,1409,"ll-known ""sort by decreasing alignment"" solution:; ///; /// - Fields may be assigned a fixed offset in the layout. If there are; /// gaps among the fixed-offset fields, the algorithm may attempt; /// to allocate flexible-offset fields into those gaps. If that's; /// undesirable, the caller should ""block out"" those gaps by e.g.; /// just creating a single fixed-offset field that represents the; /// entire ""header"".; ///; /// - The size of a field is not required to be a multiple of, or even; /// greater than, the field's required alignment. The only constraint; /// on fields is that they must not be zero-sized.; ///; /// To simplify the implementation, any fixed-offset fields in the; /// layout must appear at the start of the field array, and they must; /// be ordered by increasing offset.; ///; /// The algorithm will produce a guaranteed-minimal layout with no; /// interior padding in the following ""C-style"" case:; ///; /// - every field's size is a multiple of its required alignment and; /// - either no fields have initially fixed offsets, or the fixed-offset; /// fields have no interior padding and end at an offset that is at; /// least as aligned as all the flexible-offset fields.; ///; /// Otherwise, while the algorithm will make a best-effort attempt to; /// avoid padding, it cannot guarantee a minimal layout, as there is; /// no known efficient algorithm for doing so.; ///; /// The layout produced by this algorithm may not be stable across LLVM; /// releases. Do not use this anywhere where ABI stability is required.; ///; /// Flexible-offset fields with the same size and alignment will be ordered; /// the same way they were in the initial array. Otherwise the current; /// algorithm makes no effort to preserve the initial order of; /// flexible-offset fields.; ///; /// On return, all fields will have been assigned a fixed offset, and the; /// array will be sorted in order of ascending offsets. Note that this; /// means that the fixed-offset fields may no longer ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:1788,Modifiability,Flexible,Flexible-offset,1788,"hould ""block out"" those gaps by e.g.; /// just creating a single fixed-offset field that represents the; /// entire ""header"".; ///; /// - The size of a field is not required to be a multiple of, or even; /// greater than, the field's required alignment. The only constraint; /// on fields is that they must not be zero-sized.; ///; /// To simplify the implementation, any fixed-offset fields in the; /// layout must appear at the start of the field array, and they must; /// be ordered by increasing offset.; ///; /// The algorithm will produce a guaranteed-minimal layout with no; /// interior padding in the following ""C-style"" case:; ///; /// - every field's size is a multiple of its required alignment and; /// - either no fields have initially fixed offsets, or the fixed-offset; /// fields have no interior padding and end at an offset that is at; /// least as aligned as all the flexible-offset fields.; ///; /// Otherwise, while the algorithm will make a best-effort attempt to; /// avoid padding, it cannot guarantee a minimal layout, as there is; /// no known efficient algorithm for doing so.; ///; /// The layout produced by this algorithm may not be stable across LLVM; /// releases. Do not use this anywhere where ABI stability is required.; ///; /// Flexible-offset fields with the same size and alignment will be ordered; /// the same way they were in the initial array. Otherwise the current; /// algorithm makes no effort to preserve the initial order of; /// flexible-offset fields.; ///; /// On return, all fields will have been assigned a fixed offset, and the; /// array will be sorted in order of ascending offsets. Note that this; /// means that the fixed-offset fields may no longer form a strict prefix; /// if there's any padding before they end.; ///; /// The return value is the total size of the struct and its required; /// alignment. Note that the total size is not rounded up to a multiple; /// of the required alignment; clients which require this can do so easily.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:2001,Modifiability,flexible,flexible-offset,2001,"hould ""block out"" those gaps by e.g.; /// just creating a single fixed-offset field that represents the; /// entire ""header"".; ///; /// - The size of a field is not required to be a multiple of, or even; /// greater than, the field's required alignment. The only constraint; /// on fields is that they must not be zero-sized.; ///; /// To simplify the implementation, any fixed-offset fields in the; /// layout must appear at the start of the field array, and they must; /// be ordered by increasing offset.; ///; /// The algorithm will produce a guaranteed-minimal layout with no; /// interior padding in the following ""C-style"" case:; ///; /// - every field's size is a multiple of its required alignment and; /// - either no fields have initially fixed offsets, or the fixed-offset; /// fields have no interior padding and end at an offset that is at; /// least as aligned as all the flexible-offset fields.; ///; /// Otherwise, while the algorithm will make a best-effort attempt to; /// avoid padding, it cannot guarantee a minimal layout, as there is; /// no known efficient algorithm for doing so.; ///; /// The layout produced by this algorithm may not be stable across LLVM; /// releases. Do not use this anywhere where ABI stability is required.; ///; /// Flexible-offset fields with the same size and alignment will be ordered; /// the same way they were in the initial array. Otherwise the current; /// algorithm makes no effort to preserve the initial order of; /// flexible-offset fields.; ///; /// On return, all fields will have been assigned a fixed offset, and the; /// array will be sorted in order of ascending offsets. Note that this; /// means that the fixed-offset fields may no longer form a strict prefix; /// if there's any padding before they end.; ///; /// The return value is the total size of the struct and its required; /// alignment. Note that the total size is not rounded up to a multiple; /// of the required alignment; clients which require this can do so easily.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:1514,Safety,avoid,avoid,1514,"hould ""block out"" those gaps by e.g.; /// just creating a single fixed-offset field that represents the; /// entire ""header"".; ///; /// - The size of a field is not required to be a multiple of, or even; /// greater than, the field's required alignment. The only constraint; /// on fields is that they must not be zero-sized.; ///; /// To simplify the implementation, any fixed-offset fields in the; /// layout must appear at the start of the field array, and they must; /// be ordered by increasing offset.; ///; /// The algorithm will produce a guaranteed-minimal layout with no; /// interior padding in the following ""C-style"" case:; ///; /// - every field's size is a multiple of its required alignment and; /// - either no fields have initially fixed offsets, or the fixed-offset; /// fields have no interior padding and end at an offset that is at; /// least as aligned as all the flexible-offset fields.; ///; /// Otherwise, while the algorithm will make a best-effort attempt to; /// avoid padding, it cannot guarantee a minimal layout, as there is; /// no known efficient algorithm for doing so.; ///; /// The layout produced by this algorithm may not be stable across LLVM; /// releases. Do not use this anywhere where ABI stability is required.; ///; /// Flexible-offset fields with the same size and alignment will be ordered; /// the same way they were in the initial array. Otherwise the current; /// algorithm makes no effort to preserve the initial order of; /// flexible-offset fields.; ///; /// On return, all fields will have been assigned a fixed offset, and the; /// array will be sorted in order of ascending offsets. Note that this; /// means that the fixed-offset fields may no longer form a strict prefix; /// if there's any padding before they end.; ///; /// The return value is the total size of the struct and its required; /// alignment. Note that the total size is not rounded up to a multiple; /// of the required alignment; clients which require this can do so easily.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:861,Usability,simpl,simplify,861,"/// Compute a layout for a struct containing the given fields, making a; /// best-effort attempt to minimize the amount of space required.; ///; /// Two features are supported which require a more careful solution; /// than the well-known ""sort by decreasing alignment"" solution:; ///; /// - Fields may be assigned a fixed offset in the layout. If there are; /// gaps among the fixed-offset fields, the algorithm may attempt; /// to allocate flexible-offset fields into those gaps. If that's; /// undesirable, the caller should ""block out"" those gaps by e.g.; /// just creating a single fixed-offset field that represents the; /// entire ""header"".; ///; /// - The size of a field is not required to be a multiple of, or even; /// greater than, the field's required alignment. The only constraint; /// on fields is that they must not be zero-sized.; ///; /// To simplify the implementation, any fixed-offset fields in the; /// layout must appear at the start of the field array, and they must; /// be ordered by increasing offset.; ///; /// The algorithm will produce a guaranteed-minimal layout with no; /// interior padding in the following ""C-style"" case:; ///; /// - every field's size is a multiple of its required alignment and; /// - either no fields have initially fixed offsets, or the fixed-offset; /// fields have no interior padding and end at an offset that is at; /// least as aligned as all the flexible-offset fields.; ///; /// Otherwise, while the algorithm will make a best-effort attempt to; /// avoid padding, it cannot guarantee a minimal layout, as there is; /// no known efficient algorithm for doing so.; ///; /// The layout produced by this algorithm may not be stable across LLVM; /// releases. Do not use this anywhere where ABI stability is required.; ///; /// Flexible-offset fields with the same size and alignment will be ordered; /// the same way they were in the initial array. Otherwise the current; /// algorithm makes no effort to preserve the initial order of; /// ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:58,Integrability,rout,routines,58,// Strategy for the default executor used by the parallel routines provided by; // this file. It defaults to using all hardware threads and should be; // initialized before the first use of parallel routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:199,Integrability,rout,routines,199,// Strategy for the default executor used by the parallel routines provided by; // this file. It defaults to using all hardware threads and should be; // initialized before the first use of parallel routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:33,Modifiability,variab,variables,33,// Direct access to thread_local variables from a different DLL isn't; // possible with Windows Native TLS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:10,Security,access,access,10,// Direct access to thread_local variables from a different DLL isn't; // possible with Windows Native TLS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:54,Integrability,wrap,wrapper,54,"// Don't access this directly, use the getThreadIndex wrapper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:9,Security,access,access,9,"// Don't access this directly, use the getThreadIndex wrapper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:240,Availability,avail,available,240,"// TaskGroup has a relatively high overhead, so we want to reduce; // the number of spawn() calls. We'll create up to 1024 tasks here.; // (Note that 1024 is an arbitrary number. This code probably needs; // improving to take the number of available cores into account.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:59,Energy Efficiency,reduce,reduce,59,"// TaskGroup has a relatively high overhead, so we want to reduce; // the number of spawn() calls. We'll create up to 1024 tasks here.; // (Note that 1024 is an arbitrary number. This code probably needs; // improving to take the number of available cores into account.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:62,Energy Efficiency,schedul,scheduling,62,// Limit the number of tasks to MaxTasksPerGroup to limit job scheduling; // overhead on large inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:3,Energy Efficiency,Reduce,Reduce,3,// Reduce the result of transformation eagerly within each task.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:9,Integrability,wrap,wrappers,9,// Range wrappers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:31,Availability,error,error,31,"// Parallel for-each, but with error handling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:83,Availability,Error,Error,83,"// The transform_reduce algorithm requires that the initial value be copyable.; // Error objects are uncopyable. We only need to copy initial success values,; // so work around this mismatch via the C API. The C API represents success; // values with a null pointer. The joinErrors discards null values and joins; // multiple errors into an ErrorList.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:326,Availability,error,errors,326,"// The transform_reduce algorithm requires that the initial value be copyable.; // Error objects are uncopyable. We only need to copy initial success values,; // so work around this mismatch via the C API. The C API represents success; // values with a null pointer. The joinErrors discards null values and joins; // multiple errors into an ErrorList.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h:341,Availability,Error,ErrorList,341,"// The transform_reduce algorithm requires that the initial value be copyable.; // Error objects are uncopyable. We only need to copy initial success values,; // so work around this mismatch via the C API. The C API represents success; // values with a null pointer. The joinErrors discards null values and joins; // multiple errors into an ErrorList.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Parallel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h:11,Availability,redundant,redundant,11,"/// Remove redundant leading ""./"" pieces and consecutive separators.; ///; /// @param path Input path.; /// @result The cleaned-up \a path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Path.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h:11,Safety,redund,redundant,11,"/// Remove redundant leading ""./"" pieces and consecutive separators.; ///; /// @param path Input path.; /// @result The cleaned-up \a path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Path.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h:165,Availability,reboot,reboot,165,"/// Get the typical temporary directory for the system, e.g.,; /// ""/var/tmp"" or ""C:/TEMP""; ///; /// @param erasedOnReboot Whether to favor a path that is erased on reboot; /// rather than one that potentially persists longer. This parameter will be; /// ignored if the user or system has set the typical environment variable; /// (e.g., TEMP on Windows, TMPDIR on *nix) to specify a temporary directory.; ///; /// @param result Holds the resulting path name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Path.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h:317,Modifiability,variab,variable,317,"/// Get the typical temporary directory for the system, e.g.,; /// ""/var/tmp"" or ""C:/TEMP""; ///; /// @param erasedOnReboot Whether to favor a path that is erased on reboot; /// rather than one that potentially persists longer. This parameter will be; /// ignored if the user or system has set the typical environment variable; /// (e.g., TEMP on Windows, TMPDIR on *nix) to specify a temporary directory.; ///; /// @param result Holds the resulting path name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Path.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h:63,Deployability,configurat,configurations,63,"/// Get the directory where packages should read user-specific configurations.; /// e.g. $XDG_CONFIG_HOME.; ///; /// @param result Holds the resulting path name.; /// @result True if the appropriate path was determined, it need not exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Path.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h:63,Modifiability,config,configurations,63,"/// Get the directory where packages should read user-specific configurations.; /// e.g. $XDG_CONFIG_HOME.; ///; /// @param result Holds the resulting path name.; /// @result True if the appropriate path was determined, it need not exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Path.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h:28,Deployability,install,installed,28,"/// Get the directory where installed packages should put their; /// machine-local cache, e.g. $XDG_CACHE_HOME.; ///; /// @param result Holds the resulting path name.; /// @result True if the appropriate path was determined, it need not exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Path.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h:83,Performance,cache,cache,83,"/// Get the directory where installed packages should put their; /// machine-local cache, e.g. $XDG_CACHE_HOME.; ///; /// @param result Holds the resulting path name.; /// @result True if the appropriate path was determined, it need not exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Path.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h:111,Integrability,wrap,wraps,111,"/// PerThreadAllocator is used in conjunction with ThreadPoolExecutor to allow; /// per-thread allocations. It wraps a possibly thread-unsafe allocator,; /// e.g. BumpPtrAllocator. PerThreadAllocator must be used with only main thread; /// or threads created by ThreadPoolExecutor, as it utilizes getThreadIndex,; /// which is set by ThreadPoolExecutor. To work properly, ThreadPoolExecutor; /// should be initialized before PerThreadAllocator is created.; /// TODO: The same approach might be implemented for ThreadPool.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h:135,Safety,unsafe,unsafe,135,"/// PerThreadAllocator is used in conjunction with ThreadPoolExecutor to allow; /// per-thread allocations. It wraps a possibly thread-unsafe allocator,; /// e.g. BumpPtrAllocator. PerThreadAllocator must be used with only main thread; /// or threads created by ThreadPoolExecutor, as it utilizes getThreadIndex,; /// which is set by ThreadPoolExecutor. To work properly, ThreadPoolExecutor; /// should be initialized before PerThreadAllocator is created.; /// TODO: The same approach might be implemented for ThreadPool.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate \a Size bytes of \a Alignment aligned memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h:49,Energy Efficiency,allocate,allocated,49,/// Deallocate \a Ptr to \a Size bytes of memory allocated by this; /// allocator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h:11,Energy Efficiency,allocate,allocated,11,/// Return allocated size by all allocators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PerThreadBumpPtrAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h:21,Modifiability,Plugin,PluginLoader,21,"//===-- llvm/Support/PluginLoader.h - Plugin Loader for Tools ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A tool can #include this file to get a -load option that allows the user to; // load arbitrary shared objects into the tool's address space. Note that this; // header can only be included by a program ONCE, so it should never to used by; // library authors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h:38,Modifiability,Plugin,Plugin,38,"//===-- llvm/Support/PluginLoader.h - Plugin Loader for Tools ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A tool can #include this file to get a -load option that allows the user to; // load arbitrary shared objects into the tool's address space. Note that this; // header can only be included by a program ONCE, so it should never to used by; // library authors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h:45,Performance,Load,Loader,45,"//===-- llvm/Support/PluginLoader.h - Plugin Loader for Tools ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A tool can #include this file to get a -load option that allows the user to; // load arbitrary shared objects into the tool's address space. Note that this; // header can only be included by a program ONCE, so it should never to used by; // library authors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h:423,Performance,load,load,423,"//===-- llvm/Support/PluginLoader.h - Plugin Loader for Tools ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A tool can #include this file to get a -load option that allows the user to; // load arbitrary shared objects into the tool's address space. Note that this; // header can only be included by a program ONCE, so it should never to used by; // library authors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h:463,Performance,load,load,463,"//===-- llvm/Support/PluginLoader.h - Plugin Loader for Tools ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A tool can #include this file to get a -load option that allows the user to; // load arbitrary shared objects into the tool's address space. Note that this; // header can only be included by a program ONCE, so it should never to used by; // library authors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h:56,Performance,load,load,56,// This causes operator= above to be invoked for every -load option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PluginLoader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h:85,Integrability,wrap,wrappers,85,/// A traits type that is used to handle pointer types and things that are just; /// wrappers for pointers as a uniform entity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h:281,Safety,avoid,avoid,281,"/// Note, we assume here that void* is related to raw malloc'ed memory and; /// that malloc returns objects at least 4-byte aligned. However, this may be; /// wrong, or pointers may be from something other than malloc. In this case,; /// you should specify a real typed pointer or avoid this template.; ///; /// All clients should use assertions to do a run-time check to ensure that; /// this is actually true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h:335,Testability,assert,assertions,335,"/// Note, we assume here that void* is related to raw malloc'ed memory and; /// that malloc returns objects at least 4-byte aligned. However, this may be; /// wrong, or pointers may be from something other than malloc. In this case,; /// you should specify a real typed pointer or avoid this template.; ///; /// All clients should use assertions to do a run-time check to ensure that; /// this is actually true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h:15,Availability,avail,available,15,// No bits are available!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PointerLikeTypeTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h:36,Integrability,message,message,36,/// Replaces the generic bug report message that is output upon; /// a crash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h:23,Integrability,message,message,23,/// Get the bug report message that will be output upon a crash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h:337,Availability,recover,recovered,337,"/// Restores the topmost element of the ""pretty"" stack state to State, which; /// should come from a previous call to SavePrettyStackState(). This is; /// useful when using a CrashRecoveryContext in code that also uses; /// PrettyStackTraceEntries, to make sure the stack that's printed if a crash; /// happens after a crash that's been recovered by CrashRecoveryContext; /// doesn't have frames on it that were added in code unwound by the; /// CrashRecoveryContext.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h:337,Safety,recover,recovered,337,"/// Restores the topmost element of the ""pretty"" stack state to State, which; /// should come from a previous call to SavePrettyStackState(). This is; /// useful when using a CrashRecoveryContext in code that also uses; /// PrettyStackTraceEntries, to make sure the stack that's printed if a crash; /// happens after a crash that's been recovered by CrashRecoveryContext; /// doesn't have frames on it that were added in code unwound by the; /// CrashRecoveryContext.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/PrettyStackTrace.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Printable.h:11,Integrability,wrap,wrapper,11,"/// Simple wrapper around std::function<void(raw_ostream&)>.; /// This class is useful to construct print helpers for raw_ostream.; ///; /// Example:; /// Printable printRegister(unsigned Register) {; /// return Printable([Register](raw_ostream &OS) {; /// OS << getRegisterName(Register);; /// });; /// }; /// ... OS << printRegister(Register); ...; ///; /// Implementation note: Ideally this would just be a typedef, but doing so; /// leads to operator << being ambiguous as function has matching constructors; /// in some STL versions. I have seen the problem on gcc 4.6 libstdc++ and; /// microsoft STL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Printable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Printable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Printable.h:4,Usability,Simpl,Simple,4,"/// Simple wrapper around std::function<void(raw_ostream&)>.; /// This class is useful to construct print helpers for raw_ostream.; ///; /// Example:; /// Printable printRegister(unsigned Register) {; /// return Printable([Register](raw_ostream &OS) {; /// OS << getRegisterName(Register);; /// });; /// }; /// ... OS << printRegister(Register); ...; ///; /// Implementation note: Ideally this would just be a typedef, but doing so; /// leads to operator << being ambiguous as function has matching constructors; /// in some STL versions. I have seen the problem on gcc 4.6 libstdc++ and; /// microsoft STL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Printable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Printable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:916,Integrability,interface,interfaces,916,"//===- llvm/Support/Process.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Provides a library for accessing information about this process and other; /// processes on the operating system. Also provides means of spawning; /// subprocess for commands. The design of this library is modeled after the; /// proposed design of the Boost.Process library, and is design specifically to; /// follow the style of standard libraries and potentially become a proposal; /// for a standard library.; ///; /// This file declares the llvm::sys::Process class which contains a collection; /// of legacy static interfaces for extracting various information about the; /// current process. The goal is to migrate users of this API over to the new; /// interfaces.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:1056,Integrability,interface,interfaces,1056,"//===- llvm/Support/Process.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Provides a library for accessing information about this process and other; /// processes on the operating system. Also provides means of spawning; /// subprocess for commands. The design of this library is modeled after the; /// proposed design of the Boost.Process library, and is design specifically to; /// follow the style of standard libraries and potentially become a proposal; /// for a standard library.; ///; /// This file declares the llvm::sys::Process class which contains a collection; /// of legacy static interfaces for extracting various information about the; /// current process. The goal is to migrate users of this API over to the new; /// interfaces.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:419,Security,access,accessing,419,"//===- llvm/Support/Process.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Provides a library for accessing information about this process and other; /// processes on the operating system. Also provides means of spawning; /// subprocess for commands. The design of this library is modeled after the; /// proposed design of the Boost.Process library, and is design specifically to; /// follow the style of standard libraries and potentially become a proposal; /// for a standard library.; ///; /// This file declares the llvm::sys::Process class which contains a collection; /// of legacy static interfaces for extracting various information about the; /// current process. The goal is to migrate users of this API over to the new; /// interfaces.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:27,Integrability,interface,interfaces,27,/// A collection of legacy interfaces for querying information about the; /// current executing process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:89,Availability,error,error,89,"/// Get the process's page size.; /// This may fail if the underlying syscall returns an error. In most cases,; /// page size information is used for optimization, and this error can be; /// safely discarded by calling consumeError, and an estimated page size; /// substituted instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:173,Availability,error,error,173,"/// Get the process's page size.; /// This may fail if the underlying syscall returns an error. In most cases,; /// page size information is used for optimization, and this error can be; /// safely discarded by calling consumeError, and an estimated page size; /// substituted instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:150,Performance,optimiz,optimization,150,"/// Get the process's page size.; /// This may fail if the underlying syscall returns an error. In most cases,; /// page size information is used for optimization, and this error can be; /// safely discarded by calling consumeError, and an estimated page size; /// substituted instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:191,Safety,safe,safely,191,"/// Get the process's page size.; /// This may fail if the underlying syscall returns an error. In most cases,; /// page size information is used for optimization, and this error can be; /// safely discarded by calling consumeError, and an estimated page size; /// substituted instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:253,Energy Efficiency,power,power,253,"/// Get the process's estimated page size.; /// This function always succeeds, but if the underlying syscall to determine; /// the page size fails then this will silently return an estimated page size.; /// The estimated page size is guaranteed to be a power of 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:98,Energy Efficiency,allocate,allocated,98,"/// Return process memory usage.; /// This static function will return the total amount of memory allocated; /// by the process. This only counts the memory allocated via the malloc,; /// calloc and realloc functions and includes any ""free"" holes in the; /// allocated space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:157,Energy Efficiency,allocate,allocated,157,"/// Return process memory usage.; /// This static function will return the total amount of memory allocated; /// by the process. This only counts the memory allocated via the malloc,; /// calloc and realloc functions and includes any ""free"" holes in the; /// allocated space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:259,Energy Efficiency,allocate,allocated,259,"/// Return process memory usage.; /// This static function will return the total amount of memory allocated; /// by the process. This only counts the memory allocated via the malloc,; /// calloc and realloc functions and includes any ""free"" holes in the; /// allocated space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:41,Modifiability,variab,variable,41,// This function returns the environment variable \arg name's value as a UTF-8; // string. \arg Name is assumed to be in UTF-8 encoding too.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:107,Modifiability,variab,variable,107,"/// This function searches for an existing file in the list of directories; /// in a PATH like environment variable, and returns the first file found,; /// according to the order of the entries in the PATH like environment; /// variable. If an ignore list is specified, then any folder which is in; /// the PATH like environment variable but is also in IgnoreList is not; /// considered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:228,Modifiability,variab,variable,228,"/// This function searches for an existing file in the list of directories; /// in a PATH like environment variable, and returns the first file found,; /// according to the order of the entries in the PATH like environment; /// variable. If an ignore list is specified, then any folder which is in; /// the PATH like environment variable but is also in IgnoreList is not; /// considered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:329,Modifiability,variab,variable,329,"/// This function searches for an existing file in the list of directories; /// in a PATH like environment variable, and returns the first file found,; /// according to the order of the entries in the PATH like environment; /// variable. If an ignore list is specified, then any folder which is in; /// the PATH like environment variable but is also in IgnoreList is not; /// considered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:85,Availability,error,error,85,"// This functions ensures that the standard file descriptors (input, output,; // and error) are properly mapped to a file descriptor before we use any of; // them. This should only be called by standalone programs, library; // components should not call this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:17,Safety,safe,safely,17,"// This function safely closes a file descriptor. It is not safe to retry; // close(2) when it returns with errno equivalent to EINTR; this is because; // *nixen cannot agree if the file descriptor is, in fact, closed when this; // occurs.; //; // N.B. Some operating systems, due to thread cancellation, cannot properly; // guarantee that it will or will not be closed one way or the other!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:60,Safety,safe,safe,60,"// This function safely closes a file descriptor. It is not safe to retry; // close(2) when it returns with errno equivalent to EINTR; this is because; // *nixen cannot agree if the file descriptor is, in fact, closed when this; // occurs.; //; // N.B. Some operating systems, due to thread cancellation, cannot properly; // guarantee that it will or will not be closed one way or the other!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:45,Availability,error,error,45,"/// This function determines if the standard error is connected to a; /// ""tty"" or ""console"" window. That is, the output would be displayed to; /// the user rather than being put on a pipe or stored in a file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:261,Integrability,rout,routine,261,"/// This function determines the number of columns in the window; /// if standard output is connected to a ""tty"" or ""console""; /// window. If standard output is not connected to a tty or; /// console, or if the number of columns cannot be determined,; /// this routine returns zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:82,Availability,error,error,82,"/// This function determines the number of columns in the window; /// if standard error is connected to a ""tty"" or ""console""; /// window. If standard error is not connected to a tty or; /// console, or if the number of columns cannot be determined,; /// this routine returns zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:150,Availability,error,error,150,"/// This function determines the number of columns in the window; /// if standard error is connected to a ""tty"" or ""console""; /// window. If standard error is not connected to a tty or; /// console, or if the number of columns cannot be determined,; /// this routine returns zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:259,Integrability,rout,routine,259,"/// This function determines the number of columns in the window; /// if standard error is connected to a ""tty"" or ""console""; /// window. If standard error is not connected to a tty or; /// console, or if the number of columns cannot be determined,; /// this routine returns zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:77,Availability,error,error,77,"/// This function determines whether the terminal connected to standard; /// error supports colors. If standard error is not connected to a; /// terminal, this function returns false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:112,Availability,error,error,112,"/// This function determines whether the terminal connected to standard; /// error supports colors. If standard error is not connected to a; /// terminal, this function returns false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:167,Safety,safe,safe,167,/// Enables or disables whether ANSI escape sequences are used to output; /// colors. This only has an effect on Windows.; /// Note: Setting this option is not thread-safe and should only be done; /// during initialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:120,Usability,resume,resume,120,"/// Equivalent to ::exit(), except when running inside a CrashRecoveryContext.; /// In that case, the control flow will resume after RunSafely(), like for a; /// crash, rather than exiting the current process.; /// Use \arg NoCleanup for calling _exit() instead of exit().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:64,Modifiability,variab,variables,64,/// This is the OS-specific separator for PATH like environment variables:; // a colon on Unix or a semicolon on Windows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:13,Integrability,depend,dependent,13,"/// Platform-dependent process object.; /// The return code, set after execution.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:683,Availability,error,error,683,"/// Find the first executable file \p Name in \p Paths.; ///; /// This does not perform hashing as a shell would but instead stats each PATH; /// entry individually so should generally be avoided. Core LLVM library; /// functions and options should instead require fully specified paths.; ///; /// \param Name name of the executable to find. If it contains any system; /// slashes, it will be returned as is.; /// \param Paths optional list of paths to search for \p Name. If empty it; /// will use the system PATH environment instead.; ///; /// \returns The fully qualified path to the first \p Name in \p Paths if it; /// exists. \p Name if \p Name has slashes in it. Otherwise an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:80,Performance,perform,perform,80,"/// Find the first executable file \p Name in \p Paths.; ///; /// This does not perform hashing as a shell would but instead stats each PATH; /// entry individually so should generally be avoided. Core LLVM library; /// functions and options should instead require fully specified paths.; ///; /// \param Name name of the executable to find. If it contains any system; /// slashes, it will be returned as is.; /// \param Paths optional list of paths to search for \p Name. If empty it; /// will use the system PATH environment instead.; ///; /// \returns The fully qualified path to the first \p Name in \p Paths if it; /// exists. \p Name if \p Name has slashes in it. Otherwise an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:188,Safety,avoid,avoided,188,"/// Find the first executable file \p Name in \p Paths.; ///; /// This does not perform hashing as a shell would but instead stats each PATH; /// entry individually so should generally be avoided. Core LLVM library; /// functions and options should instead require fully specified paths.; ///; /// \param Name name of the executable to find. If it contains any system; /// slashes, it will be returned as is.; /// \param Paths optional list of paths to search for \p Name. If empty it; /// will use the system PATH environment instead.; ///; /// \returns The fully qualified path to the first \p Name in \p Paths if it; /// exists. \p Name if \p Name has slashes in it. Otherwise an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:88,Security,hash,hashing,88,"/// Find the first executable file \p Name in \p Paths.; ///; /// This does not perform hashing as a shell would but instead stats each PATH; /// entry individually so should generally be avoided. Core LLVM library; /// functions and options should instead require fully specified paths.; ///; /// \param Name name of the executable to find. If it contains any system; /// slashes, it will be returned as is.; /// \param Paths optional list of paths to search for \p Name. If empty it; /// will use the system PATH environment instead.; ///; /// \returns The fully qualified path to the first \p Name in \p Paths if it; /// exists. \p Name if \p Name has slashes in it. Otherwise an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:202,Availability,error,error,202,"// These functions change the specified standard stream (stdin or stdout) mode; // based on the Flags. They return errc::success if the specified stream was; // changed. Otherwise, a platform dependent error is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:192,Integrability,depend,dependent,192,"// These functions change the specified standard stream (stdin or stdout) mode; // based on the Flags. They return errc::success if the specified stream was; // changed. Otherwise, a platform dependent error is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:192,Availability,error,error,192,// These functions change the specified standard stream (stdin or stdout) to; // binary mode. They return errc::success if the specified stream; // was changed. Otherwise a platform dependent error is returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:182,Integrability,depend,dependent,182,// These functions change the specified standard stream (stdin or stdout) to; // binary mode. They return errc::success if the specified stream; // was changed. Otherwise a platform dependent error is returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:579,Availability,failure,failure,579,"/// This function executes the program using the arguments provided. The; /// invoked program will inherit the stdin, stdout, and stderr file; /// descriptors, the environment and other configuration settings of the; /// invoking program.; /// This function waits for the program to finish, so should be avoided in; /// library functions that aren't expected to block. Consider using; /// ExecuteNoWait() instead.; /// \returns an integer result code indicating the status of the program.; /// A zero or positive value indicates the result code of the program.; /// -1 indicates failure to execute; /// -2 indicates a crash during execution or timeout",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:186,Deployability,configurat,configuration,186,"/// This function executes the program using the arguments provided. The; /// invoked program will inherit the stdin, stdout, and stderr file; /// descriptors, the environment and other configuration settings of the; /// invoking program.; /// This function waits for the program to finish, so should be avoided in; /// library functions that aren't expected to block. Consider using; /// ExecuteNoWait() instead.; /// \returns an integer result code indicating the status of the program.; /// A zero or positive value indicates the result code of the program.; /// -1 indicates failure to execute; /// -2 indicates a crash during execution or timeout",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:99,Modifiability,inherit,inherit,99,"/// This function executes the program using the arguments provided. The; /// invoked program will inherit the stdin, stdout, and stderr file; /// descriptors, the environment and other configuration settings of the; /// invoking program.; /// This function waits for the program to finish, so should be avoided in; /// library functions that aren't expected to block. Consider using; /// ExecuteNoWait() instead.; /// \returns an integer result code indicating the status of the program.; /// A zero or positive value indicates the result code of the program.; /// -1 indicates failure to execute; /// -2 indicates a crash during execution or timeout",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:186,Modifiability,config,configuration,186,"/// This function executes the program using the arguments provided. The; /// invoked program will inherit the stdin, stdout, and stderr file; /// descriptors, the environment and other configuration settings of the; /// invoking program.; /// This function waits for the program to finish, so should be avoided in; /// library functions that aren't expected to block. Consider using; /// ExecuteNoWait() instead.; /// \returns an integer result code indicating the status of the program.; /// A zero or positive value indicates the result code of the program.; /// -1 indicates failure to execute; /// -2 indicates a crash during execution or timeout",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:304,Safety,avoid,avoided,304,"/// This function executes the program using the arguments provided. The; /// invoked program will inherit the stdin, stdout, and stderr file; /// descriptors, the environment and other configuration settings of the; /// invoking program.; /// This function waits for the program to finish, so should be avoided in; /// library functions that aren't expected to block. Consider using; /// ExecuteNoWait() instead.; /// \returns an integer result code indicating the status of the program.; /// A zero or positive value indicates the result code of the program.; /// -1 indicates failure to execute; /// -2 indicates a crash during execution or timeout",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:644,Safety,timeout,timeout,644,"/// This function executes the program using the arguments provided. The; /// invoked program will inherit the stdin, stdout, and stderr file; /// descriptors, the environment and other configuration settings of the; /// invoking program.; /// This function waits for the program to finish, so should be avoided in; /// library functions that aren't expected to block. Consider using; /// ExecuteNoWait() instead.; /// \returns an integer result code indicating the status of the program.; /// A zero or positive value indicates the result code of the program.; /// -1 indicates failure to execute; /// -2 indicates a crash during execution or timeout",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:448,Modifiability,portab,portable,448,"///<; ///< An array of optional paths. Should have a size of zero or three.; ///< If the array is empty, no redirections are performed.; ///< Otherwise, the inferior process's stdin(0), stdout(1), and stderr(2); ///< will be redirected to the corresponding paths, if the optional path; ///< is present (not \c std::nullopt).; ///< When an empty path is passed in, the corresponding file descriptor; ///< will be disconnected (ie, /dev/null'd) in a portable way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:125,Performance,perform,performed,125,"///<; ///< An array of optional paths. Should have a size of zero or three.; ///< If the array is empty, no redirections are performed.; ///< Otherwise, the inferior process's stdin(0), stdout(1), and stderr(2); ///< will be redirected to the corresponding paths, if the optional path; ///< is present (not \c std::nullopt).; ///< When an empty path is passed in, the corresponding file descriptor; ///< will be disconnected (ie, /dev/null'd) in a portable way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:68,Energy Efficiency,allocate,allocated,68,"///< If non-zero, this specifies max. amount; ///< of memory can be allocated by process. If memory usage will be; ///< higher limit, the child is killed and this call returns. If zero; ///< - no memory limit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:73,Availability,error,error,73,"///< If non-zero, provides a pointer to a; ///< string instance in which error messages will be returned. If the; ///< string is non-empty upon return an error occurred while invoking the; ///< program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:154,Availability,error,error,154,"///< If non-zero, provides a pointer to a; ///< string instance in which error messages will be returned. If the; ///< string is non-empty upon return an error occurred while invoking the; ///< program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:79,Integrability,message,messages,79,"///< If non-zero, provides a pointer to a; ///< string instance in which error messages will be returned. If the; ///< string is non-empty upon return an error occurred while invoking the; ///< program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:310,Safety,avoid,avoid,310,"/// Similar to ExecuteAndWait, but returns immediately.; /// @returns The \see ProcessInfo of the newly launched process.; /// \note On Microsoft Windows systems, users will need to either call; /// \see Wait until the process finished execution or win32 CloseHandle() API; /// on ProcessInfo.ProcessHandle to avoid memory leaks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:65,Performance,perform,perform,65,"/// UTF-8 is the LLVM native encoding, being the same as ""do not perform; /// encoding conversion"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:364,Performance,perform,perform,364,"///< If std::nullopt, waits until; ///< child has terminated.; ///< If a value, this specifies the amount of time to wait for the child; ///< process. If the time expires, and \p Polling is false, the child is; ///< killed and this < function returns. If the time expires and \p; ///< Polling is true, the child is resumed.; ///<; ///< If zero, this function will perform a non-blocking; ///< wait on the child process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:315,Usability,resume,resumed,315,"///< If std::nullopt, waits until; ///< child has terminated.; ///< If a value, this specifies the amount of time to wait for the child; ///< process. If the time expires, and \p Polling is false, the child is; ///< killed and this < function returns. If the time expires and \p; ///< Polling is true, the child is resumed.; ///<; ///< If zero, this function will perform a non-blocking; ///< wait on the child process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:73,Availability,error,error,73,"///< If non-zero, provides a pointer to a; ///< string instance in which error messages will be returned. If the; ///< string is non-empty upon return an error occurred while invoking the; ///< program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:154,Availability,error,error,154,"///< If non-zero, provides a pointer to a; ///< string instance in which error messages will be returned. If the; ///< string is non-empty upon return an error occurred while invoking the; ///< program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:79,Integrability,message,messages,79,"///< If non-zero, provides a pointer to a; ///< string instance in which error messages will be returned. If the; ///< string is non-empty upon return an error occurred while invoking the; ///< program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:41,Safety,timeout,timeout,41,"///< If true, do not kill the process on timeout.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RandomNumberGenerator.h:536,Security,secur,secure,536,"//==- llvm/Support/RandomNumberGenerator.h - RNG for diversity ---*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an abstraction for deterministic random number; // generation (RNG). Note that the current implementation is not; // cryptographically secure as it uses the C++11 <random> facilities.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RandomNumberGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RandomNumberGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RandomNumberGenerator.h:170,Modifiability,portab,portable,170,"// 64-bit Mersenne Twister by Matsumoto and Nishimura, 2000; // http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine; // This RNG is deterministically portable across C++11; // implementations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RandomNumberGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RandomNumberGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:221,Usability,simpl,simple,221,"// end namespace sys; /// This class implements an extremely fast bulk output stream that can *only*; /// output to a stream. It does not support seeking, reopening, rewinding, line; /// buffered disciplines etc. It is a simple buffer that outputs; /// a chunk at a time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:730,Deployability,install,installs,730,"/// The buffer is handled in such a way that the buffer is; /// uninitialized, unbuffered, or out of space when OutBufCur >=; /// OutBufEnd. Thus a single comparison suffices to determine if we; /// need to take the slow path to write a single character.; ///; /// The buffer is in one of three states:; /// 1. Unbuffered (BufferMode == Unbuffered); /// 1. Uninitialized (BufferMode != Unbuffered && OutBufStart == 0).; /// 2. Buffered (BufferMode != Unbuffered && OutBufStart != 0 &&; /// OutBufEnd - OutBufStart >= 1).; ///; /// If buffered, then the raw_ostream owns the buffer if (BufferMode ==; /// InternalBuffer); otherwise the buffer has been set via SetBuffer and is; /// managed by the subclass.; ///; /// If a subclass installs an external buffer using SetBuffer then it can wait; /// for a \see write_impl() call to handle the data which has been put into; /// this buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:83,Deployability,Configurat,Configuration,83,"//===--------------------------------------------------------------------===//; // Configuration Interface; //===--------------------------------------------------------------------===//; /// If possible, pre-allocate \p ExtraSize bytes for stream data.; /// i.e. it extends internal buffers to keep additional ExtraSize bytes.; /// So that the stream could keep at least tell() + ExtraSize bytes; /// without re-allocations. reserveExtraSpace() does not change; /// the size/data of the stream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:209,Energy Efficiency,allocate,allocate,209,"//===--------------------------------------------------------------------===//; // Configuration Interface; //===--------------------------------------------------------------------===//; /// If possible, pre-allocate \p ExtraSize bytes for stream data.; /// i.e. it extends internal buffers to keep additional ExtraSize bytes.; /// So that the stream could keep at least tell() + ExtraSize bytes; /// without re-allocations. reserveExtraSpace() does not change; /// the size/data of the stream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:97,Integrability,Interface,Interface,97,"//===--------------------------------------------------------------------===//; // Configuration Interface; //===--------------------------------------------------------------------===//; /// If possible, pre-allocate \p ExtraSize bytes for stream data.; /// i.e. it extends internal buffers to keep additional ExtraSize bytes.; /// So that the stream could keep at least tell() + ExtraSize bytes; /// without re-allocations. reserveExtraSpace() does not change; /// the size/data of the stream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:83,Modifiability,Config,Configuration,83,"//===--------------------------------------------------------------------===//; // Configuration Interface; //===--------------------------------------------------------------------===//; /// If possible, pre-allocate \p ExtraSize bytes for stream data.; /// i.e. it extends internal buffers to keep additional ExtraSize bytes.; /// So that the stream could keep at least tell() + ExtraSize bytes; /// without re-allocations. reserveExtraSpace() does not change; /// the size/data of the stream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:267,Modifiability,extend,extends,267,"//===--------------------------------------------------------------------===//; // Configuration Interface; //===--------------------------------------------------------------------===//; /// If possible, pre-allocate \p ExtraSize bytes for stream data.; /// i.e. it extends internal buffers to keep additional ExtraSize bytes.; /// So that the stream could keep at least tell() + ExtraSize bytes; /// without re-allocations. reserveExtraSpace() does not change; /// the size/data of the stream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:41,Energy Efficiency,allocate,allocated,41,// Otherwise just return the size of the allocated buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:105,Integrability,rout,routine,105,"/// Set the stream to be unbuffered. When unbuffered, the stream will flush; /// after every write. This routine will also flush the buffer immediately; /// when the stream is being set to unbuffered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:95,Integrability,Interface,Interface,95,//===--------------------------------------------------------------------===//; // Data Output Interface; //===--------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:368,Modifiability,rewrite,rewrite,368,"// When using `char8_t *` integers or pointers are written to the ostream; // instead of UTF-8 code as one might expect. This might lead to unexpected; // behavior, especially as `u8""""` literals are of type `char8_t*` instead of; // type `char_t*` from C++20 onwards. Thus we disallow using them with; // raw_ostreams.; // If you have u8"""" literals to stream, you can rewrite them as ordinary; // literals with escape sequences; // e.g. replace `u8""\u00a0""` by `""\xc2\xa0""`; // or use `reinterpret_cast`:; // e.g. replace `u8""\u00a0""` by `reinterpret_cast<const char *>(u8""\u00a0"")`",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:100,Usability,simpl,simplify,100,"// Inline fast path, particularly for constant strings where a sufficiently; // smart compiler will simplify strlen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:3,Safety,Avoid,Avoid,3,"// Avoid the fast path, it would only increase code size for a marginal win.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:92,Integrability,Interface,Interface,92,//===--------------------------------------------------------------------===//; // Subclass Interface; //===--------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:266,Deployability,install,install,266,/// The is the piece of the class that is implemented by subclasses. This; /// writes the \p Size bytes starting at; /// \p Ptr to the underlying stream.; ///; /// This function is guaranteed to only be called at a point at which it is; /// safe for the subclass to install a new buffer via SetBuffer.; ///; /// \param Ptr The start of the data to be written. For buffered streams this; /// is guaranteed to be the start of the buffer.; ///; /// \param Size The number of bytes to be written.; ///; /// \invariant { Size > 0 },MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:241,Safety,safe,safe,241,/// The is the piece of the class that is implemented by subclasses. This; /// writes the \p Size bytes starting at; /// \p Ptr to the underlying stream.; ///; /// This function is guaranteed to only be called at a point at which it is; /// safe for the subclass to install a new buffer via SetBuffer.; ///; /// \param Ptr The start of the data to be written. For buffered streams this; /// is guaranteed to be the start of the buffer.; ///; /// \param Size The number of bytes to be written.; ///; /// \invariant { Size > 0 },MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:14,Energy Efficiency,efficient,efficient,14,/// Return an efficient buffer size for the underlying output mechanism.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:91,Integrability,Interface,Interface,91,//===--------------------------------------------------------------------===//; // Private Interface; //===--------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:4,Deployability,Install,Install,4,/// Install the given buffer and mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:173,Deployability,patch,patch,173,"/// An abstract base class for streams implementations that also support a; /// pwrite operation. This is useful for code that can mostly stream out data,; /// but needs to patch in a header that needs to know the output size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:53,Performance,perform,perform,53,"// /dev/null always reports a pos of 0, so we cannot perform this check; // in that case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:17,Energy Efficiency,efficient,efficient,17,/// Determine an efficient buffer size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:43,Availability,error,error,43,/// Set the flag indicating that an output error has been encountered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:3,Deployability,Update,Update,3,// Update the file position by increasing \p Delta.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:47,Availability,error,error,47,"/// Open the specified file for writing. If an error occurs, information; /// about the error is put into EC, and the stream should be immediately; /// destroyed;; /// \p Flags allows optional flags to control how the file will be opened.; ///; /// As a special case, if Filename is ""-"", then the stream will use; /// STDOUT_FILENO instead of opening a file. This will not close the stdout; /// descriptor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:88,Availability,error,error,88,"/// Open the specified file for writing. If an error occurs, information; /// about the error is put into EC, and the stream should be immediately; /// destroyed;; /// \p Flags allows optional flags to control how the file will be opened.; ///; /// As a special case, if Filename is ""-"", then the stream will use; /// STDOUT_FILENO instead of opening a file. This will not close the stdout; /// descriptor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:90,Availability,error,error,90,"/// Return the value of the flag in this raw_fd_ostream indicating whether an; /// output error has been encountered.; /// This doesn't implicitly flush any pending output. Also, it doesn't; /// guarantee to detect all errors unless the stream has been closed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:219,Availability,error,errors,219,"/// Return the value of the flag in this raw_fd_ostream indicating whether an; /// output error has been encountered.; /// This doesn't implicitly flush any pending output. Also, it doesn't; /// guarantee to detect all errors unless the stream has been closed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:208,Safety,detect,detect,208,"/// Return the value of the flag in this raw_fd_ostream indicating whether an; /// output error has been encountered.; /// This doesn't implicitly flush any pending output. Also, it doesn't; /// guarantee to detect all errors unless the stream has been closed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:54,Availability,error,error,54,"/// Set the flag read by has_error() to false. If the error flag is set at the; /// time when this raw_ostream's destructor is called, report_fatal_error is; /// called to report the error. Use clear_error() after handling the error to; /// avoid this behavior.; ///; /// ""Errors should never pass silently.; /// Unless explicitly silenced.""; /// - from The Zen of Python, by Tim Peters; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:183,Availability,error,error,183,"/// Set the flag read by has_error() to false. If the error flag is set at the; /// time when this raw_ostream's destructor is called, report_fatal_error is; /// called to report the error. Use clear_error() after handling the error to; /// avoid this behavior.; ///; /// ""Errors should never pass silently.; /// Unless explicitly silenced.""; /// - from The Zen of Python, by Tim Peters; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:227,Availability,error,error,227,"/// Set the flag read by has_error() to false. If the error flag is set at the; /// time when this raw_ostream's destructor is called, report_fatal_error is; /// called to report the error. Use clear_error() after handling the error to; /// avoid this behavior.; ///; /// ""Errors should never pass silently.; /// Unless explicitly silenced.""; /// - from The Zen of Python, by Tim Peters; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:273,Availability,Error,Errors,273,"/// Set the flag read by has_error() to false. If the error flag is set at the; /// time when this raw_ostream's destructor is called, report_fatal_error is; /// called to report the error. Use clear_error() after handling the error to; /// avoid this behavior.; ///; /// ""Errors should never pass silently.; /// Unless explicitly silenced.""; /// - from The Zen of Python, by Tim Peters; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:241,Safety,avoid,avoid,241,"/// Set the flag read by has_error() to false. If the error flag is set at the; /// time when this raw_ostream's destructor is called, report_fatal_error is; /// called to report the error. Use clear_error() after handling the error to; /// avoid this behavior.; ///; /// ""Errors should never pass silently.; /// Unless explicitly silenced.""; /// - from The Zen of Python, by Tim Peters; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:182,Availability,error,error,182,"/// Locks the underlying file.; ///; /// @returns RAII object that releases the lock upon leaving the scope, if the; /// locking was successful. Otherwise returns corresponding; /// error code.; ///; /// The function blocks the current thread until the lock become available or; /// error occurs.; ///; /// Possible use of this function may be as follows:; ///; /// @code{.cpp}; /// if (auto L = stream.lock()) {; /// // ... do action that require file to be locked.; /// } else {; /// handleAllErrors(std::move(L.takeError()), [&](ErrorInfoBase &EIB) {; /// // ... handle lock error.; /// });; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:265,Availability,avail,available,265,"/// Locks the underlying file.; ///; /// @returns RAII object that releases the lock upon leaving the scope, if the; /// locking was successful. Otherwise returns corresponding; /// error code.; ///; /// The function blocks the current thread until the lock become available or; /// error occurs.; ///; /// Possible use of this function may be as follows:; ///; /// @code{.cpp}; /// if (auto L = stream.lock()) {; /// // ... do action that require file to be locked.; /// } else {; /// handleAllErrors(std::move(L.takeError()), [&](ErrorInfoBase &EIB) {; /// // ... handle lock error.; /// });; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:283,Availability,error,error,283,"/// Locks the underlying file.; ///; /// @returns RAII object that releases the lock upon leaving the scope, if the; /// locking was successful. Otherwise returns corresponding; /// error code.; ///; /// The function blocks the current thread until the lock become available or; /// error occurs.; ///; /// Possible use of this function may be as follows:; ///; /// @code{.cpp}; /// if (auto L = stream.lock()) {; /// // ... do action that require file to be locked.; /// } else {; /// handleAllErrors(std::move(L.takeError()), [&](ErrorInfoBase &EIB) {; /// // ... handle lock error.; /// });; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:532,Availability,Error,ErrorInfoBase,532,"/// Locks the underlying file.; ///; /// @returns RAII object that releases the lock upon leaving the scope, if the; /// locking was successful. Otherwise returns corresponding; /// error code.; ///; /// The function blocks the current thread until the lock become available or; /// error occurs.; ///; /// Possible use of this function may be as follows:; ///; /// @code{.cpp}; /// if (auto L = stream.lock()) {; /// // ... do action that require file to be locked.; /// } else {; /// handleAllErrors(std::move(L.takeError()), [&](ErrorInfoBase &EIB) {; /// // ... handle lock error.; /// });; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:578,Availability,error,error,578,"/// Locks the underlying file.; ///; /// @returns RAII object that releases the lock upon leaving the scope, if the; /// locking was successful. Otherwise returns corresponding; /// error code.; ///; /// The function blocks the current thread until the lock become available or; /// error occurs.; ///; /// Possible use of this function may be as follows:; ///; /// @code{.cpp}; /// if (auto L = stream.lock()) {; /// // ... do action that require file to be locked.; /// } else {; /// handleAllErrors(std::move(L.takeError()), [&](ErrorInfoBase &EIB) {; /// // ... handle lock error.; /// });; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:67,Deployability,release,releases,67,"/// Locks the underlying file.; ///; /// @returns RAII object that releases the lock upon leaving the scope, if the; /// locking was successful. Otherwise returns corresponding; /// error code.; ///; /// The function blocks the current thread until the lock become available or; /// error occurs.; ///; /// Possible use of this function may be as follows:; ///; /// @code{.cpp}; /// if (auto L = stream.lock()) {; /// // ... do action that require file to be locked.; /// } else {; /// handleAllErrors(std::move(L.takeError()), [&](ErrorInfoBase &EIB) {; /// // ... handle lock error.; /// });; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:218,Availability,error,error,218,"/// Tries to lock the underlying file within the specified period.; ///; /// @returns RAII object that releases the lock upon leaving the scope, if the; /// locking was successful. Otherwise returns corresponding; /// error code.; ///; /// It is used as @ref lock.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:103,Deployability,release,releases,103,"/// Tries to lock the underlying file within the specified period.; ///; /// @returns RAII object that releases the lock upon leaving the scope, if the; /// locking was successful. Otherwise returns corresponding; /// error code.; ///; /// It is used as @ref lock.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:59,Availability,error,error,59,"/// This returns a reference to a raw_ostream for standard error.; /// Use it like: errs() << ""foo"" << ""bar"";; /// By default, the stream is tied to stdout to ensure stdout is flushed before; /// stderr is written, to ensure the error messages are written in their; /// expected place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:229,Availability,error,error,229,"/// This returns a reference to a raw_ostream for standard error.; /// Use it like: errs() << ""foo"" << ""bar"";; /// By default, the stream is tied to stdout to ensure stdout is flushed before; /// stderr is written, to ensure the error messages are written in their; /// expected place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:235,Integrability,message,messages,235,"/// This returns a reference to a raw_ostream for standard error.; /// Use it like: errs() << ""foo"" << ""bar"";; /// By default, the stream is tied to stdout to ensure stdout is flushed before; /// stderr is written, to ensure the error messages are written in their; /// expected place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:52,Usability,simpl,simply,52,/// This returns a reference to a raw_ostream which simply discards output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:63,Availability,error,error,63,"/// Open the specified file for reading/writing/seeking. If an error occurs,; /// information about the error is put into EC, and the stream should be; /// immediately destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:104,Availability,error,error,104,"/// Open the specified file for reading/writing/seeking. If an error occurs,; /// information about the error is put into EC, and the stream should be; /// immediately destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:308,Availability,error,error,308,"/// This reads the \p Size bytes into a buffer pointed by \p Ptr.; ///; /// \param Ptr The start of the buffer to hold data to be read.; ///; /// \param Size The number of bytes to be read.; ///; /// On success, the number of bytes read is returned, and the file position is; /// advanced by this number. On error, -1 is returned, use error() to get the; /// error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:335,Availability,error,error,335,"/// This reads the \p Size bytes into a buffer pointed by \p Ptr.; ///; /// \param Ptr The start of the buffer to hold data to be read.; ///; /// \param Size The number of bytes to be read.; ///; /// On success, the number of bytes read is returned, and the file position is; /// advanced by this number. On error, -1 is returned, use error() to get the; /// error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:359,Availability,error,error,359,"/// This reads the \p Size bytes into a buffer pointed by \p Ptr.; ///; /// \param Ptr The start of the buffer to hold data to be read.; ///; /// \param Size The number of bytes to be read.; ///; /// On success, the number of bytes read is returned, and the file position is; /// advanced by this number. On error, -1 is returned, use error() to get the; /// error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:314,Availability,error,errors,314,"//===----------------------------------------------------------------------===//; // Output Stream Adaptors; //===----------------------------------------------------------------------===//; /// A raw_ostream that writes to an std::string. This is a simple adaptor; /// class. This class does not encounter output errors.; /// raw_string_ostream operates without a buffer, delegating all memory; /// management to the std::string. Thus the std::string is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:99,Energy Efficiency,Adapt,Adaptors,99,"//===----------------------------------------------------------------------===//; // Output Stream Adaptors; //===----------------------------------------------------------------------===//; /// A raw_ostream that writes to an std::string. This is a simple adaptor; /// class. This class does not encounter output errors.; /// raw_string_ostream operates without a buffer, delegating all memory; /// management to the std::string. Thus the std::string is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:257,Energy Efficiency,adapt,adaptor,257,"//===----------------------------------------------------------------------===//; // Output Stream Adaptors; //===----------------------------------------------------------------------===//; /// A raw_ostream that writes to an std::string. This is a simple adaptor; /// class. This class does not encounter output errors.; /// raw_string_ostream operates without a buffer, delegating all memory; /// management to the std::string. Thus the std::string is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:99,Modifiability,Adapt,Adaptors,99,"//===----------------------------------------------------------------------===//; // Output Stream Adaptors; //===----------------------------------------------------------------------===//; /// A raw_ostream that writes to an std::string. This is a simple adaptor; /// class. This class does not encounter output errors.; /// raw_string_ostream operates without a buffer, delegating all memory; /// management to the std::string. Thus the std::string is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:257,Modifiability,adapt,adaptor,257,"//===----------------------------------------------------------------------===//; // Output Stream Adaptors; //===----------------------------------------------------------------------===//; /// A raw_ostream that writes to an std::string. This is a simple adaptor; /// class. This class does not encounter output errors.; /// raw_string_ostream operates without a buffer, delegating all memory; /// management to the std::string. Thus the std::string is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:250,Usability,simpl,simple,250,"//===----------------------------------------------------------------------===//; // Output Stream Adaptors; //===----------------------------------------------------------------------===//; /// A raw_ostream that writes to an std::string. This is a simple adaptor; /// class. This class does not encounter output errors.; /// raw_string_ostream operates without a buffer, delegating all memory; /// management to the std::string. Thus the std::string is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:66,Usability,simpl,simply,66,/// Returns the string's reference. In most cases it is better to simply use; /// the underlying std::string directly.; /// TODO: Consider removing this API.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:138,Availability,error,errors,138,"/// A raw_ostream that writes to an SmallVector or SmallString. This is a; /// simple adaptor class. This class does not encounter output errors.; /// raw_svector_ostream operates without a buffer, delegating all memory; /// management to the SmallString. Thus the SmallString is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:86,Energy Efficiency,adapt,adaptor,86,"/// A raw_ostream that writes to an SmallVector or SmallString. This is a; /// simple adaptor class. This class does not encounter output errors.; /// raw_svector_ostream operates without a buffer, delegating all memory; /// management to the SmallString. Thus the SmallString is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:86,Modifiability,adapt,adaptor,86,"/// A raw_ostream that writes to an SmallVector or SmallString. This is a; /// simple adaptor class. This class does not encounter output errors.; /// raw_svector_ostream operates without a buffer, delegating all memory; /// management to the SmallString. Thus the SmallString is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:79,Usability,simpl,simple,79,"/// A raw_ostream that writes to an SmallVector or SmallString. This is a; /// simple adaptor class. This class does not encounter output errors.; /// raw_svector_ostream operates without a buffer, delegating all memory; /// management to the SmallString. Thus the SmallString is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:143,Safety,avoid,avoid,143,/// Construct a new raw_svector_ostream.; ///; /// \param O The vector to write to; this should generally have at least 128; /// bytes free to avoid any extraneous memory overhead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:50,Safety,avoid,avoid,50,"// Turn off buffering on OS, which we now own, to avoid allocating a buffer; // when the destructor writes only to be immediately flushed again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h:39,Energy Efficiency,adapt,adaptor,39,"//===- raw_os_ostream.h - std::ostream adaptor for raw_ostream --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the raw_os_ostream class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h:39,Modifiability,adapt,adaptor,39,"//===- raw_os_ostream.h - std::ostream adaptor for raw_ostream --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the raw_os_ostream class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h:133,Availability,error,errors,133,/// raw_os_ostream - A raw_ostream that writes to an std::ostream. This is a; /// simple adaptor class. It does not check for output errors; clients should; /// use the underlying stream to detect errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h:197,Availability,error,errors,197,/// raw_os_ostream - A raw_ostream that writes to an std::ostream. This is a; /// simple adaptor class. It does not check for output errors; clients should; /// use the underlying stream to detect errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h:89,Energy Efficiency,adapt,adaptor,89,/// raw_os_ostream - A raw_ostream that writes to an std::ostream. This is a; /// simple adaptor class. It does not check for output errors; clients should; /// use the underlying stream to detect errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h:89,Modifiability,adapt,adaptor,89,/// raw_os_ostream - A raw_ostream that writes to an std::ostream. This is a; /// simple adaptor class. It does not check for output errors; clients should; /// use the underlying stream to detect errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h:190,Safety,detect,detect,190,/// raw_os_ostream - A raw_ostream that writes to an std::ostream. This is a; /// simple adaptor class. It does not check for output errors; clients should; /// use the underlying stream to detect errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h:82,Usability,simpl,simple,82,/// raw_os_ostream - A raw_ostream that writes to an std::ostream. This is a; /// simple adaptor class. It does not check for output errors; clients should; /// use the underlying stream to detect errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_sha1_ostream.h:23,Security,hash,hash,23,/// A raw_ostream that hash the content using the sha1 algorithm.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_sha1_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_sha1_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_sha1_ostream.h:28,Security,hash,hash,28,/// Return the current SHA1 hash for the content of the stream,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/raw_sha1_ostream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_sha1_ostream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h:141,Usability,clear,clear,141,"// If this fails, either the callee has lost track of some allocation,; // or the callee isn't tracking allocations and should just call; // clear() before deleting the Recycler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h:12,Deployability,Release,Release,12,/// clear - Release all the tracked allocations to the allocator. The; /// recycler must be free of any tracked allocations before being; /// deleted; calling clear is one way to ensure this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h:4,Usability,clear,clear,4,/// clear - Release all the tracked allocations to the allocator. The; /// recycler must be free of any tracked allocations before being; /// deleted; calling clear is one way to ensure this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h:159,Usability,clear,clear,159,/// clear - Release all the tracked allocations to the allocator. The; /// recycler must be free of any tracked allocations before being; /// deleted; calling clear is one way to ensure this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h:173,Performance,cache,cache,173,"/// Special case for BumpPtrAllocator which has an empty Deallocate(); /// function.; ///; /// There is no need to traverse the free list, pulling all the objects into; /// cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h:36,Integrability,wrap,wraps,36,"/// RecyclingAllocator - This class wraps an Allocator, adding the; /// functionality of recycling deleted objects.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h:20,Integrability,wrap,wrapped,20,/// Allocator - The wrapped allocator.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate - Return a pointer to storage for an object of type; /// SubClass. The storage may be either newly allocated or recycled.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h:112,Energy Efficiency,allocate,allocated,112,/// Allocate - Return a pointer to storage for an object of type; /// SubClass. The storage may be either newly allocated or recycled.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h:17,Deployability,Release,Release,17,/// Deallocate - Release storage for the pointed-to object. The; /// storage will be kept track of and may be recycled.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RecyclingAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:459,Modifiability,Extend,Extended,459,"//===-- Regex.h - Regular Expression matcher implementation -*- C++ -*-----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a POSIX regular expression matcher. Both Basic and; // Extended POSIX regular expressions (ERE) are supported. EREs were extended; // to support backreferences in matches.; // This implementation also supports matching strings with embedded NUL chars.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:525,Modifiability,extend,extended,525,"//===-- Regex.h - Regular Expression matcher implementation -*- C++ -*-----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a POSIX regular expression matcher. Both Basic and; // Extended POSIX regular expressions (ERE) are supported. EREs were extended; // to support backreferences in matches.; // This implementation also supports matching strings with embedded NUL chars.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:26,Modifiability,extend,extended,26,"/// By default, the POSIX extended regular expression (ERE) syntax is; /// assumed. Pass this flag to turn on basic regular expressions (BRE); /// instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:26,Availability,error,error,26,"/// isValid - returns the error encountered during regex compilation, if; /// any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:281,Availability,Error,Error,281,"/// matches - Match the regex against a given \p String.; ///; /// \param Matches - If given, on a successful match this will be filled in; /// with references to the matched group expressions (inside \p String),; /// the first group is always the entire pattern.; ///; /// \param Error - If non-null, any errors in the matching will be recorded; /// as a non-empty string. If there is no error, it will be an empty string.; ///; /// This returns true on a successful match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:306,Availability,error,errors,306,"/// matches - Match the regex against a given \p String.; ///; /// \param Matches - If given, on a successful match this will be filled in; /// with references to the matched group expressions (inside \p String),; /// the first group is always the entire pattern.; ///; /// \param Error - If non-null, any errors in the matching will be recorded; /// as a non-empty string. If there is no error, it will be an empty string.; ///; /// This returns true on a successful match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:389,Availability,error,error,389,"/// matches - Match the regex against a given \p String.; ///; /// \param Matches - If given, on a successful match this will be filled in; /// with references to the matched group expressions (inside \p String),; /// the first group is always the entire pattern.; ///; /// \param Error - If non-null, any errors in the matching will be recorded; /// as a non-empty string. If there is no error, it will be an empty string.; ///; /// This returns true on a successful match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:406,Availability,Error,Error,406,"/// sub - Return the result of replacing the first match of the regex in; /// \p String with the \p Repl string. Backreferences like ""\0"" and ""\g<1>""; /// in the replacement string are replaced with the appropriate match; /// substring.; ///; /// Note that the replacement string has backslash escaping performed on; /// it. Invalid backreferences are ignored (replaced by empty strings).; ///; /// \param Error If non-null, any errors in the substitution (invalid; /// backreferences, trailing backslashes) will be recorded as a non-empty; /// string. If there is no error, it will be an empty string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:429,Availability,error,errors,429,"/// sub - Return the result of replacing the first match of the regex in; /// \p String with the \p Repl string. Backreferences like ""\0"" and ""\g<1>""; /// in the replacement string are replaced with the appropriate match; /// substring.; ///; /// Note that the replacement string has backslash escaping performed on; /// it. Invalid backreferences are ignored (replaced by empty strings).; ///; /// \param Error If non-null, any errors in the substitution (invalid; /// backreferences, trailing backslashes) will be recorded as a non-empty; /// string. If there is no error, it will be an empty string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:568,Availability,error,error,568,"/// sub - Return the result of replacing the first match of the regex in; /// \p String with the \p Repl string. Backreferences like ""\0"" and ""\g<1>""; /// in the replacement string are replaced with the appropriate match; /// substring.; ///; /// Note that the replacement string has backslash escaping performed on; /// it. Invalid backreferences are ignored (replaced by empty strings).; ///; /// \param Error If non-null, any errors in the substitution (invalid; /// backreferences, trailing backslashes) will be recorded as a non-empty; /// string. If there is no error, it will be an empty string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:303,Performance,perform,performed,303,"/// sub - Return the result of replacing the first match of the regex in; /// \p String with the \p Repl string. Backreferences like ""\0"" and ""\g<1>""; /// in the replacement string are replaced with the appropriate match; /// substring.; ///; /// Note that the replacement string has backslash escaping performed on; /// it. Invalid backreferences are ignored (replaced by empty strings).; ///; /// \param Error If non-null, any errors in the substitution (invalid; /// backreferences, trailing backslashes) will be recorded as a non-empty; /// string. If there is no error, it will be an empty string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:47,Modifiability,extend,extended,47,"/// If this function returns true, ^Str$ is an extended regular; /// expression that matches Str and only Str.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h:36,Modifiability,plugin,plugin,36,"//=== Registry.h - Linker-supported plugin registries -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines a registry template for discovering pluggable modules.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h:6,Usability,simpl,simple,6,"/// A simple registry entry which provides only a name, description, and; /// no-argument constructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h:44,Integrability,interface,interface,44,/// Add a node to the Registry: this is the interface between the plugin and; /// the executable.; ///; /// This function is exported by the executable and called by the plugin to; /// add a node to the executable's registry. Therefore it's not defined here; /// to avoid it being instantiated in the plugin and is instead defined in; /// the executable (see LLVM_INSTANTIATE_REGISTRY below).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h:66,Modifiability,plugin,plugin,66,/// Add a node to the Registry: this is the interface between the plugin and; /// the executable.; ///; /// This function is exported by the executable and called by the plugin to; /// add a node to the executable's registry. Therefore it's not defined here; /// to avoid it being instantiated in the plugin and is instead defined in; /// the executable (see LLVM_INSTANTIATE_REGISTRY below).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h:170,Modifiability,plugin,plugin,170,/// Add a node to the Registry: this is the interface between the plugin and; /// the executable.; ///; /// This function is exported by the executable and called by the plugin to; /// add a node to the executable's registry. Therefore it's not defined here; /// to avoid it being instantiated in the plugin and is instead defined in; /// the executable (see LLVM_INSTANTIATE_REGISTRY below).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h:301,Modifiability,plugin,plugin,301,/// Add a node to the Registry: this is the interface between the plugin and; /// the executable.; ///; /// This function is exported by the executable and called by the plugin to; /// add a node to the executable's registry. Therefore it's not defined here; /// to avoid it being instantiated in the plugin and is instead defined in; /// the executable (see LLVM_INSTANTIATE_REGISTRY below).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h:266,Safety,avoid,avoid,266,/// Add a node to the Registry: this is the interface between the plugin and; /// the executable.; ///; /// This function is exported by the executable and called by the plugin to; /// add a node to the executable's registry. Therefore it's not defined here; /// to avoid it being instantiated in the plugin and is instead defined in; /// the executable (see LLVM_INSTANTIATE_REGISTRY below).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h:41,Safety,avoid,avoid,41,"// begin is not defined here in order to avoid usage of an undefined static; // data member, instead it's instantiated by LLVM_INSTANTIATE_REGISTRY.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RISCVISAInfo.h:165,Availability,error,error,165,"/// Parse RISC-V ISA info from an arch string that is already in normalized; /// form (as defined in the psABI). Unlike parseArchString, this function; /// will not error for unrecognized extension names or extension versions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RISCVISAInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RISCVISAInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:12,Deployability,Release,Releases,12,/// @}; /// Releases and removes the lock; /// Destructor,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:196,Availability,error,error,196,"/// Attempts to unconditionally acquire the lock in reader mode. If the; /// lock is held by a writer, this method will wait until it can acquire; /// the lock.; /// @returns false if any kind of error occurs, true otherwise.; /// Unconditionally acquire the lock in reader mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:84,Availability,error,error,84,"/// Attempts to release the lock in reader mode.; /// @returns false if any kind of error occurs, true otherwise.; /// Unconditionally release the lock in reader mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:16,Deployability,release,release,16,"/// Attempts to release the lock in reader mode.; /// @returns false if any kind of error occurs, true otherwise.; /// Unconditionally release the lock in reader mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:135,Deployability,release,release,135,"/// Attempts to release the lock in reader mode.; /// @returns false if any kind of error occurs, true otherwise.; /// Unconditionally release the lock in reader mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:199,Availability,error,error,199,"/// Attempts to unconditionally acquire the lock in reader mode. If the; /// lock is held by any readers, this method will wait until it can; /// acquire the lock.; /// @returns false if any kind of error occurs, true otherwise.; /// Unconditionally acquire the lock in writer mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:84,Availability,error,error,84,"/// Attempts to release the lock in writer mode.; /// @returns false if any kind of error occurs, true otherwise.; /// Unconditionally release the lock in write mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:16,Deployability,release,release,16,"/// Attempts to release the lock in writer mode.; /// @returns false if any kind of error occurs, true otherwise.; /// Unconditionally release the lock in write mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:135,Deployability,release,release,135,"/// Attempts to release the lock in writer mode.; /// @returns false if any kind of error occurs, true otherwise.; /// Unconditionally release the lock in write mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h:25,Integrability,Depend,Dependent,25,//@}; /// @name Platform Dependent Data; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/RWMutex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SaveAndRestore.h:70,Modifiability,variab,variable,70,/// A utility class that uses RAII to save and restore the value of a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SaveAndRestore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SaveAndRestore.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SaveAndRestore.h:21,Usability,guid,guides,21,// User-defined CTAD guides.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SaveAndRestore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SaveAndRestore.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:722,Usability,simpl,simple,722,"//===- llvm/Support/ScaledNumber.h - Support for scaled numbers -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains functions (and a class) useful for working with scaled; // numbers -- in particular, pairs of integers where one represents digits and; // another represents a scale. The functions are helpers and live in the; // namespace ScaledNumbers. The class ScaledNumber is useful for modelling; // certain cost metrics that need simple, integer-like semantics that are easy; // to reason about.; //; // These might remind you of soft-floats. If you want one of those, you're in; // the wrong place. Look at include/llvm/ADT/APFloat.h instead.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:34,Availability,down,down,34,/// Adjust a 64-bit scaled number down to the appropriate width.; ///; /// \pre Adding 64 to \c Scale will not overflow INT16_MAX.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:157,Availability,down,down,157,"/// Implementation of getLg() and friends.; ///; /// Returns the rounded lg of \c Digits*2^Scale and an int specifying whether; /// this was rounded up (1), down (-1), or exact (0).; ///; /// Returns \c INT32_MIN when \c Digits is zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:79,Testability,test,testing,79,"// Check inputs up front. This is only relevant if addition overflows, but; // testing here should catch more bugs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:2278,Integrability,wrap,wrapper,2278,"lling certain cost; /// metrics.; ///; /// The number is split into a signed scale and unsigned digits. The number; /// represented is \c getDigits()*2^getScale(). In this way, the digits are; /// much like the mantissa in the x87 long double, but there is no canonical; /// form so the same number can be represented by many bit representations.; ///; /// ScaledNumber is templated on the underlying integer type for digits, which; /// is expected to be unsigned.; ///; /// Unlike APFloat, ScaledNumber does not model architecture floating point; /// behaviour -- while this might make it a little faster and easier to reason; /// about, it certainly makes it more dangerous for general numerics.; ///; /// ScaledNumber is totally ordered. However, there is no canonical form, so; /// there are multiple representations of most scalars. E.g.:; ///; /// ScaledNumber(8u, 0) == ScaledNumber(4u, 1); /// ScaledNumber(4u, 1) == ScaledNumber(2u, 2); /// ScaledNumber(2u, 2) == ScaledNumber(1u, 3); ///; /// ScaledNumber implements most arithmetic operations. Precision is kept; /// where possible. Uses simple saturation arithmetic, so that operations; /// saturate to 0.0 or getLargest() rather than under or overflowing. It has; /// some extra arithmetic for unit inversion. 0.0/0.0 is defined to be 0.0.; /// Any other division by 0.0 is defined to be getLargest().; ///; /// As a convenience for modifying the exponent, left and right shifting are; /// both implemented, and both interpret negative shifts as positive shifts in; /// the opposite direction.; ///; /// Scales are limited to the range accepted by x87 long double. This makes; /// it trivial to add functionality to convert to APFloat (this is already; /// relied on for the implementation of printing).; ///; /// Possible (and conflicting) future directions:; ///; /// 1. Turn this into a wrapper around \a APFloat.; /// 2. Share the algorithm implementations with \a APFloat.; /// 3. Allow \a ScaledNumber to represent a signed number.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:4,Usability,Simpl,Simple,4,"/// Simple representation of a scaled number.; ///; /// ScaledNumber is a number represented by digits and a scale. It uses simple; /// saturation arithmetic and every operation is well-defined for every value.; /// It's somewhat similar in behaviour to a soft-float, but is *not* a; /// replacement for one. If you're doing numerics, look at \a APFloat instead.; /// Nevertheless, we've found these semantics useful for modelling certain cost; /// metrics.; ///; /// The number is split into a signed scale and unsigned digits. The number; /// represented is \c getDigits()*2^getScale(). In this way, the digits are; /// much like the mantissa in the x87 long double, but there is no canonical; /// form so the same number can be represented by many bit representations.; ///; /// ScaledNumber is templated on the underlying integer type for digits, which; /// is expected to be unsigned.; ///; /// Unlike APFloat, ScaledNumber does not model architecture floating point; /// behaviour -- while this might make it a little faster and easier to reason; /// about, it certainly makes it more dangerous for general numerics.; ///; /// ScaledNumber is totally ordered. However, there is no canonical form, so; /// there are multiple representations of most scalars. E.g.:; ///; /// ScaledNumber(8u, 0) == ScaledNumber(4u, 1); /// ScaledNumber(4u, 1) == ScaledNumber(2u, 2); /// ScaledNumber(2u, 2) == ScaledNumber(1u, 3); ///; /// ScaledNumber implements most arithmetic operations. Precision is kept; /// where possible. Uses simple saturation arithmetic, so that operations; /// saturate to 0.0 or getLargest() rather than under or overflowing. It has; /// some extra arithmetic for unit inversion. 0.0/0.0 is defined to be 0.0.; /// Any other division by 0.0 is defined to be getLargest().; ///; /// As a convenience for modifying the exponent, left and right shifting are; /// both implemented, and both interpret negative shifts as positive shifts in; /// the opposite direction.; ///; /// Scales ar",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:124,Usability,simpl,simple,124,"/// Simple representation of a scaled number.; ///; /// ScaledNumber is a number represented by digits and a scale. It uses simple; /// saturation arithmetic and every operation is well-defined for every value.; /// It's somewhat similar in behaviour to a soft-float, but is *not* a; /// replacement for one. If you're doing numerics, look at \a APFloat instead.; /// Nevertheless, we've found these semantics useful for modelling certain cost; /// metrics.; ///; /// The number is split into a signed scale and unsigned digits. The number; /// represented is \c getDigits()*2^getScale(). In this way, the digits are; /// much like the mantissa in the x87 long double, but there is no canonical; /// form so the same number can be represented by many bit representations.; ///; /// ScaledNumber is templated on the underlying integer type for digits, which; /// is expected to be unsigned.; ///; /// Unlike APFloat, ScaledNumber does not model architecture floating point; /// behaviour -- while this might make it a little faster and easier to reason; /// about, it certainly makes it more dangerous for general numerics.; ///; /// ScaledNumber is totally ordered. However, there is no canonical form, so; /// there are multiple representations of most scalars. E.g.:; ///; /// ScaledNumber(8u, 0) == ScaledNumber(4u, 1); /// ScaledNumber(4u, 1) == ScaledNumber(2u, 2); /// ScaledNumber(2u, 2) == ScaledNumber(1u, 3); ///; /// ScaledNumber implements most arithmetic operations. Precision is kept; /// where possible. Uses simple saturation arithmetic, so that operations; /// saturate to 0.0 or getLargest() rather than under or overflowing. It has; /// some extra arithmetic for unit inversion. 0.0/0.0 is defined to be 0.0.; /// Any other division by 0.0 is defined to be getLargest().; ///; /// As a convenience for modifying the exponent, left and right shifting are; /// both implemented, and both interpret negative shifts as positive shifts in; /// the opposite direction.; ///; /// Scales ar",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:1524,Usability,simpl,simple,1524,"lling certain cost; /// metrics.; ///; /// The number is split into a signed scale and unsigned digits. The number; /// represented is \c getDigits()*2^getScale(). In this way, the digits are; /// much like the mantissa in the x87 long double, but there is no canonical; /// form so the same number can be represented by many bit representations.; ///; /// ScaledNumber is templated on the underlying integer type for digits, which; /// is expected to be unsigned.; ///; /// Unlike APFloat, ScaledNumber does not model architecture floating point; /// behaviour -- while this might make it a little faster and easier to reason; /// about, it certainly makes it more dangerous for general numerics.; ///; /// ScaledNumber is totally ordered. However, there is no canonical form, so; /// there are multiple representations of most scalars. E.g.:; ///; /// ScaledNumber(8u, 0) == ScaledNumber(4u, 1); /// ScaledNumber(4u, 1) == ScaledNumber(2u, 2); /// ScaledNumber(2u, 2) == ScaledNumber(1u, 3); ///; /// ScaledNumber implements most arithmetic operations. Precision is kept; /// where possible. Uses simple saturation arithmetic, so that operations; /// saturate to 0.0 or getLargest() rather than under or overflowing. It has; /// some extra arithmetic for unit inversion. 0.0/0.0 is defined to be 0.0.; /// Any other division by 0.0 is defined to be getLargest().; ///; /// As a convenience for modifying the exponent, left and right shifting are; /// both implemented, and both interpret negative shifts as positive shifts in; /// the opposite direction.; ///; /// Scales are limited to the range accepted by x87 long double. This makes; /// it trivial to add functionality to convert to APFloat (this is already; /// relied on for the implementation of printing).; ///; /// Possible (and conflicting) future directions:; ///; /// 1. Turn this into a wrapper around \a APFloat.; /// 2. Share the algorithm implementations with \a APFloat.; /// 3. Allow \a ScaledNumber to represent a signed number.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:74,Usability,simpl,simple,74,"/// Convert to the given integer type.; ///; /// Convert to \c IntT using simple saturating arithmetic, truncating if; /// necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:8,Testability,log,log,8,"/// The log base 2, rounded.; ///; /// Get the lg of the scalar. lg 0 is defined to be INT32_MIN.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:8,Testability,log,log,8,"/// The log base 2, rounded towards INT32_MIN.; ///; /// Get the lg floor. lg 0 is defined to be INT32_MIN.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:8,Testability,log,log,8,"/// The log base 2, rounded towards INT32_MAX.; ///; /// Get the lg ceiling. lg 0 is defined to be INT32_MIN.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:349,Availability,avail,available,349,"/// Convert to a decimal representation in a string.; ///; /// Convert to a string. Uses scientific notation for very large/small; /// numbers. Scientific notation is used roughly for numbers outside of the; /// range 2^-64 through 2^64.; ///; /// \c Precision indicates the number of decimal digits of precision to use;; /// 0 requests the maximum available.; ///; /// As a special case to make debugging easier, if the number is small enough; /// to convert without scientific notation and has more than \c Precision; /// digits before the decimal place, it's printed accurately to the first; /// digit past zero. E.g., assuming 10 digits of precision:; ///; /// 98765432198.7654... => 98765432198.8; /// 8765432198.7654... => 8765432198.8; /// 765432198.7654... => 765432198.8; /// 65432198.7654... => 65432198.77; /// 5432198.7654... => 5432198.765",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScopedPrinter.h:6,Safety,avoid,avoid,6,// To avoid sign-extension we have to explicitly cast to the appropriate; // unsigned type. The overloads are here so that every type that is implicitly; // convertible to an integer (including enums and endian helpers) can be used; // without requiring type traits or call-site changes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ScopedPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScopedPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h:482,Integrability,wrap,wrapping,482,"//==- SHA1.h - SHA1 implementation for LLVM --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This code is taken from public domain; // (http://oauth.googlecode.com/svn/code/c/liboauth/src/sha1.c); // and modified by wrapping it in a C++ interface for LLVM,; // and removing unnecessary code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h:503,Integrability,interface,interface,503,"//==- SHA1.h - SHA1 implementation for LLVM --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This code is taken from public domain; // (http://oauth.googlecode.com/svn/code/c/liboauth/src/sha1.c); // and modified by wrapping it in a C++ interface for LLVM,; // and removing unnecessary code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h:17,Integrability,wrap,wrap,17,/// A class that wrap the SHA1 algorithm.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h:235,Deployability,update,update,235,/// Return the current raw 160-bits SHA1 for the digested data; /// since the last call to init(). This is suitable for getting the SHA1 at; /// any time without invalidating the internal state so that more calls can be; /// made into update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h:31,Security,hash,hash,31,/// Returns a raw 160-bit SHA1 hash for the given data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA1.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h:378,Security,Secur,Secure,378,"//====- SHA256.cpp - SHA256 implementation ---*- C++ -* ======//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /*; * The SHA-256 Secure Hash Standard was published by NIST in 2002.; *; * http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf; *; * The implementation is based on nacl's sha256 implementation [0] and LLVM's; * pre-exsiting SHA1 code [1].; *; * [0] https://hyperelliptic.org/nacl/nacl-20110221.tar.bz2 (public domain; * code); * [1] llvm/lib/Support/SHA1.{h,cpp}; */; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h:385,Security,Hash,Hash,385,"//====- SHA256.cpp - SHA256 implementation ---*- C++ -* ======//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /*; * The SHA-256 Secure Hash Standard was published by NIST in 2002.; *; * http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf; *; * The implementation is based on nacl's sha256 implementation [0] and LLVM's; * pre-exsiting SHA1 code [1].; *; * [0] https://hyperelliptic.org/nacl/nacl-20110221.tar.bz2 (public domain; * code); * [1] llvm/lib/Support/SHA1.{h,cpp}; */; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h:239,Deployability,update,update,239,/// Return the current raw 256-bits SHA256 for the digested; /// data since the last call to init(). This is suitable for getting the; /// SHA256 at any time without invalidating the internal state so that more; /// calls can be made into update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h:33,Security,hash,hash,33,/// Returns a raw 256-bit SHA256 hash for the given data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SHA256.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h:12,Availability,error,error,12,"/// When an error signal (such as SIGABRT or SIGSEGV) is delivered to the; /// process, print a stack trace and then exit.; /// Print a stack trace if a fatal signal occurs.; /// \param Argv0 the current binary name, used to find the symbolizer; /// relative to the current binary before searching $PATH; can be; /// StringRef(), in which case we will only search $PATH.; /// \param DisableCrashReporting if \c true, disable the normal crash; /// reporting mechanisms on the underlying operating system.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Signals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h:40,Safety,abort,abort,40,/// Add a function to be called when an abort/kill signal is delivered to the; /// process. The handler can have a cookie passed to it to identify what; /// instance of the handler it is.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Signals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h:466,Deployability,install,installed,466,"/// This function registers a function to be called when the user ""interrupts""; /// the program (typically by pressing ctrl-c). When the user interrupts the; /// program, the specified interrupt function is called instead of the program; /// being killed, and the interrupt function automatically disabled.; ///; /// Note that interrupt functions are not allowed to call any non-reentrant; /// functions. An null interrupt function pointer disables the current; /// installed function. Note also that the handler may be executed on a; /// different thread on some platforms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Signals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h:360,Deployability,install,installed,360,"/// Registers a function to be called when an ""info"" signal is delivered to; /// the process.; ///; /// On POSIX systems, this will be SIGUSR1; on systems that have it, SIGINFO; /// will also be used (typically ctrl-t).; ///; /// Note that signal handlers are not allowed to call any non-reentrant; /// functions. An null function pointer disables the current installed; /// function. Note also that the handler may be executed on a different; /// thread on some platforms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Signals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h:272,Deployability,install,install,272,"/// Registers a function to be called in a ""one-shot"" manner when a pipe; /// signal is delivered to the process (i.e., on a failed write to a pipe).; /// After the pipe signal is handled once, the handler is unregistered.; ///; /// The LLVM signal handling code will not install any handler for the pipe; /// signal unless one is provided with this API (see \ref; /// DefaultOneShotPipeSignalHandler). This handler must be provided before; /// any other LLVM signal handlers are installed: the \ref InitLLVM; /// constructor has a flag that can simplify this setup.; ///; /// Note that the handler is not allowed to call any non-reentrant; /// functions. A null handler pointer disables the current installed; /// function. Note also that the handler may be executed on a; /// different thread on some platforms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Signals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h:480,Deployability,install,installed,480,"/// Registers a function to be called in a ""one-shot"" manner when a pipe; /// signal is delivered to the process (i.e., on a failed write to a pipe).; /// After the pipe signal is handled once, the handler is unregistered.; ///; /// The LLVM signal handling code will not install any handler for the pipe; /// signal unless one is provided with this API (see \ref; /// DefaultOneShotPipeSignalHandler). This handler must be provided before; /// any other LLVM signal handlers are installed: the \ref InitLLVM; /// constructor has a flag that can simplify this setup.; ///; /// Note that the handler is not allowed to call any non-reentrant; /// functions. A null handler pointer disables the current installed; /// function. Note also that the handler may be executed on a; /// different thread on some platforms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Signals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h:700,Deployability,install,installed,700,"/// Registers a function to be called in a ""one-shot"" manner when a pipe; /// signal is delivered to the process (i.e., on a failed write to a pipe).; /// After the pipe signal is handled once, the handler is unregistered.; ///; /// The LLVM signal handling code will not install any handler for the pipe; /// signal unless one is provided with this API (see \ref; /// DefaultOneShotPipeSignalHandler). This handler must be provided before; /// any other LLVM signal handlers are installed: the \ref InitLLVM; /// constructor has a flag that can simplify this setup.; ///; /// Note that the handler is not allowed to call any non-reentrant; /// functions. A null handler pointer disables the current installed; /// function. Note also that the handler may be executed on a; /// different thread on some platforms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Signals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h:546,Usability,simpl,simplify,546,"/// Registers a function to be called in a ""one-shot"" manner when a pipe; /// signal is delivered to the process (i.e., on a failed write to a pipe).; /// After the pipe signal is handled once, the handler is unregistered.; ///; /// The LLVM signal handling code will not install any handler for the pipe; /// signal unless one is provided with this API (see \ref; /// DefaultOneShotPipeSignalHandler). This handler must be provided before; /// any other LLVM signal handlers are installed: the \ref InitLLVM; /// constructor has a flag that can simplify this setup.; ///; /// Note that the handler is not allowed to call any non-reentrant; /// functions. A null handler pointer disables the current installed; /// function. Note also that the handler may be executed on a; /// different thread on some platforms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Signals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h:65,Availability,error,error,65,"/// On Unix systems and Windows, this function exits with an ""IO error"" exit; /// code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Signals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h:323,Availability,failure,failure,323,/// This function does the following:; /// - clean up any temporary files registered with RemoveFileOnSignal(); /// - dump the callstack from the exception context; /// - call any relevant interrupt/signal handlers; /// - create a core/mini dump of the exception context whenever possible; /// Context is a system-specific failure context: it is the signal type on; /// Unix; the ExceptionContext on Windows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Signals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SmallVectorMemoryBuffer.h:404,Integrability,wrap,wrapper,404,"//===- SmallVectorMemoryBuffer.h --------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares a wrapper class to hold the memory into which an; // object will be generated.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SmallVectorMemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SmallVectorMemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SmallVectorMemoryBuffer.h:75,Energy Efficiency,efficient,efficient,75,"/// SmallVector-backed MemoryBuffer instance.; ///; /// This class enables efficient construction of MemoryBuffers from SmallVector; /// instances. This is useful for MCJIT and Orc, where object files are streamed; /// into SmallVectors, then inspected using ObjectFile (which takes a; /// MemoryBuffer).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SmallVectorMemoryBuffer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SmallVectorMemoryBuffer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h:79,Integrability,wrap,wrapping,79,"/// Generic base class for SMT Solvers; ///; /// This class is responsible for wrapping all sorts and expression generation,; /// through the mk* methods. It also provides methods to create SMT expressions; /// straight from clang's AST, through the from* methods.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h:24,Testability,log,logical,24,/// Creates a bitvector logical shift left operation,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h:24,Testability,log,logical,24,/// Creates a bitvector logical shift right operation,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h:21,Availability,avail,available,21,"// If the a model is available, returns the value of a given bitvector symbol",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h:21,Availability,avail,available,21,"// If the a model is available, returns the value of a given boolean symbol",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SMTAPI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:462,Usability,simpl,simple,462,"//===- SourceMgr.h - Manager for Source Buffers & Diagnostics ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the SMDiagnostic and SourceMgr classes. This; // provides a simple substrate for diagnostics, #include handling, and other low; // level things for simple parsers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:550,Usability,simpl,simple,550,"//===- SourceMgr.h - Manager for Source Buffers & Diagnostics ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the SMDiagnostic and SourceMgr classes. This; // provides a simple substrate for diagnostics, #include handling, and other low; // level things for simple parsers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:318,Availability,Error,Error,318,"/// Search for a file with the specified name in the current directory or in; /// one of the IncludeDirs, and try to open it **without** adding to the; /// SourceMgr. If the opened file is intended to be added to the source; /// manager, prefer `AddIncludeFile` instead.; ///; /// If no file is found, this returns an Error, otherwise it returns the; /// buffer of the stacked file. The full path to the included file can be; /// found in \p IncludedFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:173,Availability,error,error,173,/// Emit a message about the specified location with the specified string.; ///; /// \param ShowColors Display colored messages if output is a terminal and; /// the default error handler is used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:11,Integrability,message,message,11,/// Emit a message about the specified location with the specified string.; ///; /// \param ShowColors Display colored messages if output is a terminal and; /// the default error handler is used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:119,Integrability,message,messages,119,/// Emit a message about the specified location with the specified string.; ///; /// \param ShowColors Display colored messages if output is a terminal and; /// the default error handler is used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:170,Availability,error,error,170,/// Emits a manually-constructed diagnostic to the given output stream.; ///; /// \param ShowColors Display colored messages if output is a terminal and; /// the default error handler is used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:116,Integrability,message,messages,116,/// Emits a manually-constructed diagnostic to the given output stream.; ///; /// \param ShowColors Display colored messages if output is a terminal and; /// the default error handler is used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:147,Availability,error,error,147,"/// Return an SMDiagnostic at the specified location with the specified; /// string.; ///; /// \param Msg If non-null, the kind of message (e.g., ""error"") which is; /// prefixed to the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:131,Integrability,message,message,131,"/// Return an SMDiagnostic at the specified location with the specified; /// string.; ///; /// \param Msg If non-null, the kind of message (e.g., ""error"") which is; /// prefixed to the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:185,Integrability,message,message,185,"/// Return an SMDiagnostic at the specified location with the specified; /// string.; ///; /// \param Msg If non-null, the kind of message (e.g., ""error"") which is; /// prefixed to the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:170,Integrability,message,message,170,/// Prints the names of included files and the line of the file they were; /// included from. A diagnostic handler can use this before printing its; /// custom formatted message.; ///; /// \param IncludeLoc The location of the include.; /// \param OS the raw_ostream to print on.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:70,Availability,error,error,70,"// Diagnostic with no location (e.g. file not found, command line arg error).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:50,Security,sanitiz,sanitizers,50,"//===-- SpecialCaseList.h - special case list for sanitizers ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //===----------------------------------------------------------------------===//; //; // This file implements a Special Case List for code sanitizers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:429,Security,sanitiz,sanitizers,429,"//===-- SpecialCaseList.h - special case list for sanitizers ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //===----------------------------------------------------------------------===//; //; // This file implements a Special Case List for code sanitizers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:1237,Safety,detect,detection,1237,"/// This is a utility class used to parse user-provided text files with; /// ""special case lists"" for code sanitizers. Such files are used to; /// define an ""ABI list"" for DataFlowSanitizer and allow/exclusion lists for; /// sanitizers like AddressSanitizer or UndefinedBehaviorSanitizer.; ///; /// Empty lines and lines starting with ""#"" are ignored. Sections are defined; /// using a '[section_name]' header and can be used to specify sanitizers the; /// entries below it apply to. Section names are globs, and; /// entries without a section header match all sections (e.g. an '[*]' header; /// is assumed.); /// The remaining lines should have the form:; /// prefix:glob_pattern[=category]; /// If category is not specified, it is assumed to be empty string.; /// Definitions of ""prefix"" and ""category"" are sanitizer-specific. For example,; /// sanitizer exclusion support prefixes ""src"", ""mainfile"", ""fun"" and ""global"".; /// ""glob_pattern"" defines source files, main files, functions or globals which; /// shouldn't be instrumented.; /// Examples of categories:; /// ""functional"": used in DFSan to list functions with pure functional; /// semantics.; /// ""init"": used in ASan exclusion list to disable initialization-order bugs; /// detection for certain globals or source files.; /// Full special case list file example:; /// ---; /// [address]; /// # Excluded items:; /// fun:*_ZN4base6subtle*; /// global:*global_with_bad_access_or_initialization*; /// global:*global_with_initialization_issues*=init; /// type:*Namespace::ClassName*=init; /// src:file_with_tricky_code.cc; /// src:ignore-global-initializers-issues.cc=init; /// mainfile:main_file.cc; ///; /// [dataflow]; /// # Functions with pure functional semantics:; /// fun:cos=functional; /// fun:sin=functional; /// ---",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:107,Security,sanitiz,sanitizers,107,"/// This is a utility class used to parse user-provided text files with; /// ""special case lists"" for code sanitizers. Such files are used to; /// define an ""ABI list"" for DataFlowSanitizer and allow/exclusion lists for; /// sanitizers like AddressSanitizer or UndefinedBehaviorSanitizer.; ///; /// Empty lines and lines starting with ""#"" are ignored. Sections are defined; /// using a '[section_name]' header and can be used to specify sanitizers the; /// entries below it apply to. Section names are globs, and; /// entries without a section header match all sections (e.g. an '[*]' header; /// is assumed.); /// The remaining lines should have the form:; /// prefix:glob_pattern[=category]; /// If category is not specified, it is assumed to be empty string.; /// Definitions of ""prefix"" and ""category"" are sanitizer-specific. For example,; /// sanitizer exclusion support prefixes ""src"", ""mainfile"", ""fun"" and ""global"".; /// ""glob_pattern"" defines source files, main files, functions or globals which; /// shouldn't be instrumented.; /// Examples of categories:; /// ""functional"": used in DFSan to list functions with pure functional; /// semantics.; /// ""init"": used in ASan exclusion list to disable initialization-order bugs; /// detection for certain globals or source files.; /// Full special case list file example:; /// ---; /// [address]; /// # Excluded items:; /// fun:*_ZN4base6subtle*; /// global:*global_with_bad_access_or_initialization*; /// global:*global_with_initialization_issues*=init; /// type:*Namespace::ClassName*=init; /// src:file_with_tricky_code.cc; /// src:ignore-global-initializers-issues.cc=init; /// mainfile:main_file.cc; ///; /// [dataflow]; /// # Functions with pure functional semantics:; /// fun:cos=functional; /// fun:sin=functional; /// ---",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:225,Security,sanitiz,sanitizers,225,"/// This is a utility class used to parse user-provided text files with; /// ""special case lists"" for code sanitizers. Such files are used to; /// define an ""ABI list"" for DataFlowSanitizer and allow/exclusion lists for; /// sanitizers like AddressSanitizer or UndefinedBehaviorSanitizer.; ///; /// Empty lines and lines starting with ""#"" are ignored. Sections are defined; /// using a '[section_name]' header and can be used to specify sanitizers the; /// entries below it apply to. Section names are globs, and; /// entries without a section header match all sections (e.g. an '[*]' header; /// is assumed.); /// The remaining lines should have the form:; /// prefix:glob_pattern[=category]; /// If category is not specified, it is assumed to be empty string.; /// Definitions of ""prefix"" and ""category"" are sanitizer-specific. For example,; /// sanitizer exclusion support prefixes ""src"", ""mainfile"", ""fun"" and ""global"".; /// ""glob_pattern"" defines source files, main files, functions or globals which; /// shouldn't be instrumented.; /// Examples of categories:; /// ""functional"": used in DFSan to list functions with pure functional; /// semantics.; /// ""init"": used in ASan exclusion list to disable initialization-order bugs; /// detection for certain globals or source files.; /// Full special case list file example:; /// ---; /// [address]; /// # Excluded items:; /// fun:*_ZN4base6subtle*; /// global:*global_with_bad_access_or_initialization*; /// global:*global_with_initialization_issues*=init; /// type:*Namespace::ClassName*=init; /// src:file_with_tricky_code.cc; /// src:ignore-global-initializers-issues.cc=init; /// mainfile:main_file.cc; ///; /// [dataflow]; /// # Functions with pure functional semantics:; /// fun:cos=functional; /// fun:sin=functional; /// ---",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:437,Security,sanitiz,sanitizers,437,"/// This is a utility class used to parse user-provided text files with; /// ""special case lists"" for code sanitizers. Such files are used to; /// define an ""ABI list"" for DataFlowSanitizer and allow/exclusion lists for; /// sanitizers like AddressSanitizer or UndefinedBehaviorSanitizer.; ///; /// Empty lines and lines starting with ""#"" are ignored. Sections are defined; /// using a '[section_name]' header and can be used to specify sanitizers the; /// entries below it apply to. Section names are globs, and; /// entries without a section header match all sections (e.g. an '[*]' header; /// is assumed.); /// The remaining lines should have the form:; /// prefix:glob_pattern[=category]; /// If category is not specified, it is assumed to be empty string.; /// Definitions of ""prefix"" and ""category"" are sanitizer-specific. For example,; /// sanitizer exclusion support prefixes ""src"", ""mainfile"", ""fun"" and ""global"".; /// ""glob_pattern"" defines source files, main files, functions or globals which; /// shouldn't be instrumented.; /// Examples of categories:; /// ""functional"": used in DFSan to list functions with pure functional; /// semantics.; /// ""init"": used in ASan exclusion list to disable initialization-order bugs; /// detection for certain globals or source files.; /// Full special case list file example:; /// ---; /// [address]; /// # Excluded items:; /// fun:*_ZN4base6subtle*; /// global:*global_with_bad_access_or_initialization*; /// global:*global_with_initialization_issues*=init; /// type:*Namespace::ClassName*=init; /// src:file_with_tricky_code.cc; /// src:ignore-global-initializers-issues.cc=init; /// mainfile:main_file.cc; ///; /// [dataflow]; /// # Functions with pure functional semantics:; /// fun:cos=functional; /// fun:sin=functional; /// ---",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:810,Security,sanitiz,sanitizer-specific,810,"/// This is a utility class used to parse user-provided text files with; /// ""special case lists"" for code sanitizers. Such files are used to; /// define an ""ABI list"" for DataFlowSanitizer and allow/exclusion lists for; /// sanitizers like AddressSanitizer or UndefinedBehaviorSanitizer.; ///; /// Empty lines and lines starting with ""#"" are ignored. Sections are defined; /// using a '[section_name]' header and can be used to specify sanitizers the; /// entries below it apply to. Section names are globs, and; /// entries without a section header match all sections (e.g. an '[*]' header; /// is assumed.); /// The remaining lines should have the form:; /// prefix:glob_pattern[=category]; /// If category is not specified, it is assumed to be empty string.; /// Definitions of ""prefix"" and ""category"" are sanitizer-specific. For example,; /// sanitizer exclusion support prefixes ""src"", ""mainfile"", ""fun"" and ""global"".; /// ""glob_pattern"" defines source files, main files, functions or globals which; /// shouldn't be instrumented.; /// Examples of categories:; /// ""functional"": used in DFSan to list functions with pure functional; /// semantics.; /// ""init"": used in ASan exclusion list to disable initialization-order bugs; /// detection for certain globals or source files.; /// Full special case list file example:; /// ---; /// [address]; /// # Excluded items:; /// fun:*_ZN4base6subtle*; /// global:*global_with_bad_access_or_initialization*; /// global:*global_with_initialization_issues*=init; /// type:*Namespace::ClassName*=init; /// src:file_with_tricky_code.cc; /// src:ignore-global-initializers-issues.cc=init; /// mainfile:main_file.cc; ///; /// [dataflow]; /// # Functions with pure functional semantics:; /// fun:cos=functional; /// fun:sin=functional; /// ---",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:848,Security,sanitiz,sanitizer,848,"/// This is a utility class used to parse user-provided text files with; /// ""special case lists"" for code sanitizers. Such files are used to; /// define an ""ABI list"" for DataFlowSanitizer and allow/exclusion lists for; /// sanitizers like AddressSanitizer or UndefinedBehaviorSanitizer.; ///; /// Empty lines and lines starting with ""#"" are ignored. Sections are defined; /// using a '[section_name]' header and can be used to specify sanitizers the; /// entries below it apply to. Section names are globs, and; /// entries without a section header match all sections (e.g. an '[*]' header; /// is assumed.); /// The remaining lines should have the form:; /// prefix:glob_pattern[=category]; /// If category is not specified, it is assumed to be empty string.; /// Definitions of ""prefix"" and ""category"" are sanitizer-specific. For example,; /// sanitizer exclusion support prefixes ""src"", ""mainfile"", ""fun"" and ""global"".; /// ""glob_pattern"" defines source files, main files, functions or globals which; /// shouldn't be instrumented.; /// Examples of categories:; /// ""functional"": used in DFSan to list functions with pure functional; /// semantics.; /// ""init"": used in ASan exclusion list to disable initialization-order bugs; /// detection for certain globals or source files.; /// Full special case list file example:; /// ---; /// [address]; /// # Excluded items:; /// fun:*_ZN4base6subtle*; /// global:*global_with_bad_access_or_initialization*; /// global:*global_with_initialization_issues*=init; /// type:*Namespace::ClassName*=init; /// src:file_with_tricky_code.cc; /// src:ignore-global-initializers-issues.cc=init; /// mainfile:main_file.cc; ///; /// [dataflow]; /// # Functions with pure functional semantics:; /// fun:cos=functional; /// fun:sin=functional; /// ---",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:56,Availability,failure,failure,56,"/// Parses the special case list entries from files. On failure, returns; /// 0 and writes an error message to string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:94,Availability,error,error,94,"/// Parses the special case list entries from files. On failure, returns; /// 0 and writes an error message to string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:100,Integrability,message,message,100,"/// Parses the special case list entries from files. On failure, returns; /// 0 and writes an error message to string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:58,Availability,failure,failure,58,"/// Parses the special case list from a memory buffer. On failure, returns; /// 0 and writes an error message to string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:96,Availability,error,error,96,"/// Parses the special case list from a memory buffer. On failure, returns; /// 0 and writes an error message to string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:102,Integrability,message,message,102,"/// Parses the special case list from a memory buffer. On failure, returns; /// 0 and writes an error message to string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:56,Availability,failure,failure,56,"/// Parses the special case list entries from files. On failure, reports a; /// fatal error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h:86,Availability,error,error,86,"/// Parses the special case list entries from files. On failure, reports a; /// fatal error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/StringSaver.h:306,Performance,perform,performs,306,"/// Saves strings in the provided stable storage and returns a StringRef with a; /// stable character pointer. Saving the same string yields the same StringRef.; ///; /// Compared to StringSaver, it does more work but avoids saving the same string; /// multiple times.; ///; /// Compared to StringPool, it performs fewer allocations but doesn't support; /// refcounting/deletion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/StringSaver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/StringSaver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/StringSaver.h:218,Safety,avoid,avoids,218,"/// Saves strings in the provided stable storage and returns a StringRef with a; /// stable character pointer. Saving the same string yields the same StringRef.; ///; /// Compared to StringSaver, it does more work but avoids saving the same string; /// multiple times.; ///; /// Compared to StringPool, it performs fewer allocations but doesn't support; /// refcounting/deletion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/StringSaver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/StringSaver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h:1472,Availability,avail,available,1472,"//===- llvm/ADT/SuffixTree.h - Tree for substrings --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // A data structure for fast substring queries.; //; // Suffix trees represent the suffixes of their input strings in their leaves.; // A suffix tree is a type of compressed trie structure where each node; // represents an entire substring rather than a single character. Each leaf; // of the tree is a suffix.; //; // A suffix tree can be seen as a type of state machine where each state is a; // substring of the full string. The tree is structured so that, for a string; // of length N, there are exactly N leaves in the tree. This structure allows; // us to quickly find repeated substrings of the input string.; //; // In this implementation, a ""string"" is a vector of unsigned integers.; // These integers may result from hashing some data type. A suffix tree can; // contain 1 or many strings, which can then be queried as one large string.; //; // The suffix tree is implemented using Ukkonen's algorithm for linear-time; // suffix tree construction. Ukkonen's algorithm is explained in more detail; // in the paper by Esko Ukkonen ""On-line construction of suffix trees. The; // paper is available at; //; // https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h:1104,Security,hash,hashing,1104,"//===- llvm/ADT/SuffixTree.h - Tree for substrings --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // A data structure for fast substring queries.; //; // Suffix trees represent the suffixes of their input strings in their leaves.; // A suffix tree is a type of compressed trie structure where each node; // represents an entire substring rather than a single character. Each leaf; // of the tree is a suffix.; //; // A suffix tree can be seen as a type of state machine where each state is a; // substring of the full string. The tree is structured so that, for a string; // of length N, there are exactly N leaves in the tree. This structure allows; // us to quickly find repeated substrings of the input string.; //; // In this implementation, a ""string"" is a vector of unsigned integers.; // These integers may result from hashing some data type. A suffix tree can; // contain 1 or many strings, which can then be queried as one large string.; //; // The suffix tree is implemented using Ukkonen's algorithm for linear-time; // suffix tree construction. Ukkonen's algorithm is explained in more detail; // in the paper by Esko Ukkonen ""On-line construction of suffix trees. The; // paper is available at; //; // https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate a leaf node and add it to the tree.; ///; /// \param Parent The parent of this node.; /// \param StartIdx The start index of this node's associated string.; /// \param Edge The label on the edge leaving \p Parent to this node.; ///; /// \returns A pointer to the allocated leaf node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h:276,Energy Efficiency,allocate,allocated,276,/// Allocate a leaf node and add it to the tree.; ///; /// \param Parent The parent of this node.; /// \param StartIdx The start index of this node's associated string.; /// \param Edge The label on the edge leaving \p Parent to this node.; ///; /// \returns A pointer to the allocated leaf node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate an internal node and add it to the tree.; ///; /// \param Parent The parent of this node. Only null when allocating the root.; /// \param StartIdx The start index of this node's associated string.; /// \param EndIdx The end index of this node's associated string.; /// \param Edge The label on the edge leaving \p Parent to this node.; ///; /// \returns A pointer to the allocated internal node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h:384,Energy Efficiency,allocate,allocated,384,/// Allocate an internal node and add it to the tree.; ///; /// \param Parent The parent of this node. Only null when allocating the root.; /// \param StartIdx The start index of this node's associated string.; /// \param EndIdx The end index of this node's associated string.; /// \param Edge The label on the edge leaving \p Parent to this node.; ///; /// \returns A pointer to the allocated internal node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate the root node and add it to the tree.; ///; /// \returns A pointer to the root.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTree.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTreeNode.h:205,Deployability,update,update,205,"/// The end index of this node's substring in the main string.; ///; /// Every leaf node must have its \p EndIdx incremented at the end of every; /// step in the construction algorithm. To avoid having to update O(N); /// nodes individually at the end of every step, the end index is stored; /// as a pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SuffixTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTreeNode.h:189,Safety,avoid,avoid,189,"/// The end index of this node's substring in the main string.; ///; /// Every leaf node must have its \p EndIdx incremented at the end of every; /// step in the construction algorithm. To avoid having to update O(N); /// nodes individually at the end of every step, the end index is stored; /// as a pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SuffixTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTreeNode.h:205,Deployability,update,update,205,"/// The end index of this node's substring in the main string.; ///; /// Every leaf node must have its \p EndIdx incremented at the end of every; /// step in the construction algorithm. To avoid having to update O(N); /// nodes individually at the end of every step, the end index is stored; /// as a pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SuffixTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTreeNode.h:189,Safety,avoid,avoid,189,"/// The end index of this node's substring in the main string.; ///; /// Every leaf node must have its \p EndIdx incremented at the end of every; /// step in the construction algorithm. To avoid having to update O(N); /// nodes individually at the end of every step, the end index is stored; /// as a pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SuffixTreeNode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SuffixTreeNode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SwapByteOrder.h:37,Performance,optimiz,optimized,37,"//===- SwapByteOrder.h - Generic and optimized byte swaps -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares generic and optimized functions to swap the byte order of; // an integral type.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SwapByteOrder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SwapByteOrder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SwapByteOrder.h:414,Performance,optimiz,optimized,414,"//===- SwapByteOrder.h - Generic and optimized byte swaps -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares generic and optimized functions to swap the byte order of; // an integral type.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SwapByteOrder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SwapByteOrder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SystemUtils.h:101,Integrability,message,message,101,"/// Determine if the raw_ostream provided is connected to a terminal. If so,; /// generate a warning message to errs() advising against display of bitcode; /// and return true. Otherwise just return false.; /// Check for output written to a console",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/SystemUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SystemUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:63,Availability,avail,available,63,// Declare all of the target-initialization functions that are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:66,Availability,avail,available,66,// Declare all of the target-MC-initialization functions that are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:22,Availability,avail,available,22,// Declare all of the available assembly printer initialization functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:22,Availability,avail,available,22,// Declare all of the available assembly parser initialization functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:22,Availability,avail,available,22,// Declare all of the available disassembler initialization functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:22,Availability,avail,available,22,// Declare all of the available TargetMCA initialization functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:105,Availability,avail,available,105,"/// InitializeAllTargetInfos - The main program should call this function if; /// it wants access to all available targets that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:177,Availability,avail,available,177,"/// InitializeAllTargetInfos - The main program should call this function if; /// it wants access to all available targets that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:136,Modifiability,config,configured,136,"/// InitializeAllTargetInfos - The main program should call this function if; /// it wants access to all available targets that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:91,Security,access,access,91,"/// InitializeAllTargetInfos - The main program should call this function if; /// it wants access to all available targets that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:101,Availability,avail,available,101,"/// InitializeAllTargets - The main program should call this function if it; /// wants access to all available target machines that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:181,Availability,avail,available,181,"/// InitializeAllTargets - The main program should call this function if it; /// wants access to all available target machines that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:140,Modifiability,config,configured,140,"/// InitializeAllTargets - The main program should call this function if it; /// wants access to all available target machines that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:87,Security,access,access,87,"/// InitializeAllTargets - The main program should call this function if it; /// wants access to all available target machines that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:103,Availability,avail,available,103,"/// InitializeAllTargetMCs - The main program should call this function if it; /// wants access to all available target MC that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:177,Availability,avail,available,177,"/// InitializeAllTargetMCs - The main program should call this function if it; /// wants access to all available target MC that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:136,Modifiability,config,configured,136,"/// InitializeAllTargetMCs - The main program should call this function if it; /// wants access to all available target MC that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:89,Security,access,access,89,"/// InitializeAllTargetMCs - The main program should call this function if it; /// wants access to all available target MC that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:162,Availability,avail,available,162,"/// InitializeAllAsmPrinters - The main program should call this function if; /// it wants all asm printers that LLVM is configured to support, to make them; /// available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:121,Modifiability,config,configured,121,"/// InitializeAllAsmPrinters - The main program should call this function if; /// it wants all asm printers that LLVM is configured to support, to make them; /// available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:160,Availability,avail,available,160,"/// InitializeAllAsmParsers - The main program should call this function if it; /// wants all asm parsers that LLVM is configured to support, to make them; /// available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:119,Modifiability,config,configured,119,"/// InitializeAllAsmParsers - The main program should call this function if it; /// wants all asm parsers that LLVM is configured to support, to make them; /// available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:165,Availability,avail,available,165,"/// InitializeAllDisassemblers - The main program should call this function if; /// it wants all disassemblers that LLVM is configured to support, to make; /// them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:124,Modifiability,config,configured,124,"/// InitializeAllDisassemblers - The main program should call this function if; /// it wants all disassemblers that LLVM is configured to support, to make; /// them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/thread.h:32,Integrability,Wrap,Wrapper,32,"//===-- llvm/Support/thread.h - Wrapper for <thread> ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header is a wrapper for <thread> that works around problems with the; // MSVC headers when exceptions are disabled. It also provides llvm::thread,; // which is either a typedef of std::thread or a replacement that calls the; // function synchronously depending on the value of LLVM_ENABLE_THREADS.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/thread.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/thread.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/thread.h:400,Integrability,wrap,wrapper,400,"//===-- llvm/Support/thread.h - Wrapper for <thread> ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header is a wrapper for <thread> that works around problems with the; // MSVC headers when exceptions are disabled. It also provides llvm::thread,; // which is either a typedef of std::thread or a replacement that calls the; // function synchronously depending on the value of LLVM_ENABLE_THREADS.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/thread.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/thread.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/thread.h:639,Integrability,depend,depending,639,"//===-- llvm/Support/thread.h - Wrapper for <thread> ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header is a wrapper for <thread> that works around problems with the; // MSVC headers when exceptions are disabled. It also provides llvm::thread,; // which is either a typedef of std::thread or a replacement that calls the; // function synchronously depending on the value of LLVM_ENABLE_THREADS.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/thread.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/thread.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/thread.h:38,Integrability,interface,interface,38,/// LLVM thread following std::thread interface with added constructor to; /// specify stack size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/thread.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/thread.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/thread.h:83,Integrability,interface,interface,83,// !LLVM_ON_UNIX && !_WIN32; /// std::thread backed implementation of llvm::thread interface that ignores the; /// stack size request.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/thread.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/thread.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:441,Performance,multi-thread,multi-threaded,441,"//===-- llvm/Support/Threading.h - Control multithreading mode --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares helper functions for running LLVM in a multi-threaded; // environment.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:156,Energy Efficiency,Power,PowerPC,156,"// std::call_once from libc++ is used on all Unix platforms. Other; // implementations like libstdc++ are known to have problems on NetBSD,; // OpenBSD and PowerPC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:54,Performance,multi-thread,multi-threading,54,"/// Returns true if LLVM is compiled with support for multi-threading, and; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:35,Availability,avail,available,35,"// The default value (0) means all available threads should be used,; // taking the affinity mask into account. If set, this value only represents; // a suggested high bound, the runtime might choose a lower value (not; // higher).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:93,Availability,mask,mask,93,"// The default value (0) means all available threads should be used,; // taking the affinity mask into account. If set, this value only represents; // a suggested high bound, the runtime might choose a lower value (not; // higher).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:22,Availability,avail,available,22,/// Retrieves the max available threads for the current strategy. This; /// accounts for affinity masks and takes advantage of all CPU sockets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:98,Availability,mask,masks,98,/// Retrieves the max available threads for the current strategy. This; /// accounts for affinity masks and takes advantage of all CPU sockets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:192,Energy Efficiency,allocate,allocate,192,"/// Build a strategy from a number of threads as a string provided in \p Num.; /// When Num is above the max number of threads specified by the \p Default; /// strategy, we attempt to equally allocate the threads on all CPU sockets.; /// ""0"" or an empty string will return the \p Default strategy.; /// ""all"" for using all hardware threads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:267,Availability,avail,available,267,"/// Returns a thread strategy for tasks requiring significant memory or other; /// resources. To be used for workloads where hardware_concurrency() proves to; /// be less efficient. Avoid this strategy if doing lots of I/O. Currently; /// based on physical cores, if available for the host system, otherwise falls; /// back to hardware_concurrency(). Returns 1 when LLVM is configured with; /// LLVM_ENABLE_THREADS = OFF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:171,Energy Efficiency,efficient,efficient,171,"/// Returns a thread strategy for tasks requiring significant memory or other; /// resources. To be used for workloads where hardware_concurrency() proves to; /// be less efficient. Avoid this strategy if doing lots of I/O. Currently; /// based on physical cores, if available for the host system, otherwise falls; /// back to hardware_concurrency(). Returns 1 when LLVM is configured with; /// LLVM_ENABLE_THREADS = OFF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:374,Modifiability,config,configured,374,"/// Returns a thread strategy for tasks requiring significant memory or other; /// resources. To be used for workloads where hardware_concurrency() proves to; /// be less efficient. Avoid this strategy if doing lots of I/O. Currently; /// based on physical cores, if available for the host system, otherwise falls; /// back to hardware_concurrency(). Returns 1 when LLVM is configured with; /// LLVM_ENABLE_THREADS = OFF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:182,Safety,Avoid,Avoid,182,"/// Returns a thread strategy for tasks requiring significant memory or other; /// resources. To be used for workloads where hardware_concurrency() proves to; /// be less efficient. Avoid this strategy if doing lots of I/O. Currently; /// based on physical cores, if available for the host system, otherwise falls; /// back to hardware_concurrency(). Returns 1 when LLVM is configured with; /// LLVM_ENABLE_THREADS = OFF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:48,Availability,avail,available,48,"/// Returns a default thread strategy where all available hardware resources; /// are to be used, except for those initially excluded by an affinity mask.; /// This function takes affinity into consideration. Returns 1 when LLVM is; /// configured with LLVM_ENABLE_THREADS=OFF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:149,Availability,mask,mask,149,"/// Returns a default thread strategy where all available hardware resources; /// are to be used, except for those initially excluded by an affinity mask.; /// This function takes affinity into consideration. Returns 1 when LLVM is; /// configured with LLVM_ENABLE_THREADS=OFF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:237,Modifiability,config,configured,237,"/// Returns a default thread strategy where all available hardware resources; /// are to be used, except for those initially excluded by an affinity mask.; /// This function takes affinity into consideration. Returns 1 when LLVM is; /// configured with LLVM_ENABLE_THREADS=OFF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:186,Modifiability,portab,portable,186,"/// Return the current thread id, as used in various OS system calls.; /// Note that not all platforms guarantee that the value returned will be; /// unique across the entire system, so portable code should not assume; /// this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:367,Availability,failure,failure,367,"/// Set the name of the current thread. Setting a thread's name can; /// be helpful for enabling useful diagnostics under a debugger or when; /// logging. The level of support for setting a thread's name varies; /// wildly across operating systems, and we only make a best effort to; /// perform the operation on supported platforms. No indication of success; /// or failure is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:288,Performance,perform,perform,288,"/// Set the name of the current thread. Setting a thread's name can; /// be helpful for enabling useful diagnostics under a debugger or when; /// logging. The level of support for setting a thread's name varies; /// wildly across operating systems, and we only make a best effort to; /// perform the operation on supported platforms. No indication of success; /// or failure is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:146,Testability,log,logging,146,"/// Set the name of the current thread. Setting a thread's name can; /// be helpful for enabling useful diagnostics under a debugger or when; /// logging. The level of support for setting a thread's name varies; /// wildly across operating systems, and we only make a best effort to; /// perform the operation on supported platforms. No indication of success; /// or failure is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:14,Availability,mask,mask,14,"/// Returns a mask that represents on which hardware thread, core, CPU, NUMA; /// group, the calling thread can be executed. On Windows, threads cannot; /// cross CPU sockets boundaries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:51,Testability,log,logical,51,"/// Returns how many physical cores (as opposed to logical cores returned from; /// thread::hardware_concurrency(), which includes hyperthreads).; /// Returns -1 if unknown for the current host system.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:134,Energy Efficiency,energy,energy,134,/// Lower the current thread's priority as much as possible. Can be used; /// for long-running tasks that are not time critical; more energy-; /// efficient than Low.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:147,Energy Efficiency,efficient,efficient,147,/// Lower the current thread's priority as much as possible. Can be used; /// for long-running tasks that are not time critical; more energy-; /// efficient than Low.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:153,Performance,latency,latency-insensitive,153,"/// Lower the current thread's priority such that it does not affect; /// foreground tasks significantly. This is a good default for long-; /// running, latency-insensitive tasks to make sure cpu is not hogged; /// by this task.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:53,Energy Efficiency,schedul,scheduling,53,/// Restore the current thread's priority to default scheduling priority.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:135,Availability,alive,alive,135,"/// A ThreadPool for asynchronous parallel execution on a defined number of; /// threads.; ///; /// The pool keeps a vector of threads alive, waiting on a condition variable; /// for some work to become available.; ///; /// It is possible to reuse one thread pool for different groups of tasks; /// by grouping tasks using ThreadPoolTaskGroup. All tasks are processed using; /// the same queue, but it is possible to wait only for a specific group of; /// tasks to finish.; ///; /// It is also possible for worker threads to submit new tasks and wait for; /// them. Note that this may result in a deadlock in cases such as when a task; /// (directly or indirectly) tries to wait for its own completion, or when all; /// available threads are used up by tasks waiting for a task that has no thread; /// left to run on (this includes waiting on the returned future). It should be; /// generally safe to wait() for a group as long as groups do not form a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:203,Availability,avail,available,203,"/// A ThreadPool for asynchronous parallel execution on a defined number of; /// threads.; ///; /// The pool keeps a vector of threads alive, waiting on a condition variable; /// for some work to become available.; ///; /// It is possible to reuse one thread pool for different groups of tasks; /// by grouping tasks using ThreadPoolTaskGroup. All tasks are processed using; /// the same queue, but it is possible to wait only for a specific group of; /// tasks to finish.; ///; /// It is also possible for worker threads to submit new tasks and wait for; /// them. Note that this may result in a deadlock in cases such as when a task; /// (directly or indirectly) tries to wait for its own completion, or when all; /// available threads are used up by tasks waiting for a task that has no thread; /// left to run on (this includes waiting on the returned future). It should be; /// generally safe to wait() for a group as long as groups do not form a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:720,Availability,avail,available,720,"/// A ThreadPool for asynchronous parallel execution on a defined number of; /// threads.; ///; /// The pool keeps a vector of threads alive, waiting on a condition variable; /// for some work to become available.; ///; /// It is possible to reuse one thread pool for different groups of tasks; /// by grouping tasks using ThreadPoolTaskGroup. All tasks are processed using; /// the same queue, but it is possible to wait only for a specific group of; /// tasks to finish.; ///; /// It is also possible for worker threads to submit new tasks and wait for; /// them. Note that this may result in a deadlock in cases such as when a task; /// (directly or indirectly) tries to wait for its own completion, or when all; /// available threads are used up by tasks waiting for a task that has no thread; /// left to run on (this includes waiting on the returned future). It should be; /// generally safe to wait() for a group as long as groups do not form a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:165,Modifiability,variab,variable,165,"/// A ThreadPool for asynchronous parallel execution on a defined number of; /// threads.; ///; /// The pool keeps a vector of threads alive, waiting on a condition variable; /// for some work to become available.; ///; /// It is possible to reuse one thread pool for different groups of tasks; /// by grouping tasks using ThreadPoolTaskGroup. All tasks are processed using; /// the same queue, but it is possible to wait only for a specific group of; /// tasks to finish.; ///; /// It is also possible for worker threads to submit new tasks and wait for; /// them. Note that this may result in a deadlock in cases such as when a task; /// (directly or indirectly) tries to wait for its own completion, or when all; /// available threads are used up by tasks waiting for a task that has no thread; /// left to run on (this includes waiting on the returned future). It should be; /// generally safe to wait() for a group as long as groups do not form a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:388,Performance,queue,queue,388,"/// A ThreadPool for asynchronous parallel execution on a defined number of; /// threads.; ///; /// The pool keeps a vector of threads alive, waiting on a condition variable; /// for some work to become available.; ///; /// It is possible to reuse one thread pool for different groups of tasks; /// by grouping tasks using ThreadPoolTaskGroup. All tasks are processed using; /// the same queue, but it is possible to wait only for a specific group of; /// tasks to finish.; ///; /// It is also possible for worker threads to submit new tasks and wait for; /// them. Note that this may result in a deadlock in cases such as when a task; /// (directly or indirectly) tries to wait for its own completion, or when all; /// available threads are used up by tasks waiting for a task that has no thread; /// left to run on (this includes waiting on the returned future). It should be; /// generally safe to wait() for a group as long as groups do not form a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:893,Safety,safe,safe,893,"/// A ThreadPool for asynchronous parallel execution on a defined number of; /// threads.; ///; /// The pool keeps a vector of threads alive, waiting on a condition variable; /// for some work to become available.; ///; /// It is possible to reuse one thread pool for different groups of tasks; /// by grouping tasks using ThreadPoolTaskGroup. All tasks are processed using; /// the same queue, but it is possible to wait only for a specific group of; /// tasks to finish.; ///; /// It is also possible for worker threads to submit new tasks and wait for; /// them. Note that this may result in a deadlock in cases such as when a task; /// (directly or indirectly) tries to wait for its own completion, or when all; /// available threads are used up by tasks waiting for a task that has no thread; /// left to run on (this includes waiting on the returned future). It should be; /// generally safe to wait() for a group as long as groups do not form a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:230,Availability,mask,mask,230,"/// Construct a pool using the hardware strategy \p S for mapping hardware; /// execution resources (threads, cores, CPUs); /// Defaults to using the maximum execution resources in the system, but; /// accounting for the affinity mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:91,Availability,error,error,91,/// Blocking wait for all the threads to complete and the queue to be empty.; /// It is an error to try to add new tasks while blocking on this call.; /// Calling wait() from a task would deadlock waiting for itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:58,Performance,queue,queue,58,/// Blocking wait for all the threads to complete and the queue to be empty.; /// It is an error to try to add new tasks while blocking on this call.; /// Calling wait() from a task would deadlock waiting for itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:47,Integrability,wrap,wrapper,47,/// Helpers to create a promise and a callable wrapper of \p Task that sets; /// the result of the promise. Returns the callable and a future to access the; /// result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:145,Security,access,access,145,/// Helpers to create a promise and a callable wrapper of \p Task that sets; /// the result of the promise. Returns the callable and a future to access the; /// result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:121,Performance,Queue,QueueLock,121,/// Returns true if all tasks in the given group have finished (nullptr means; /// all tasks regardless of their group). QueueLock must be locked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:4,Integrability,Wrap,Wrap,4,/// Wrap the Task in a std::function<void()> that sets the result of the; /// corresponding future.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:12,Performance,queue,queue,12,// Lock the queue and push the new task,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:3,Integrability,Wrap,Wrap,3,// Wrap the future so that both ThreadPool::wait() can operate and the; // returned future can be sync'ed on.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:20,Security,access,access,20,/// Lock protecting access to the Threads vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:50,Performance,queue,queue,50,/// Locking and signaling for accessing the Tasks queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:30,Security,access,accessing,30,/// Locking and signaling for accessing the Tasks queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:29,Modifiability,variab,variable,29,// avoids warning for unused variable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:3,Safety,avoid,avoids,3,// avoids warning for unused variable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadSafeAllocator.h:26,Energy Efficiency,adapt,adaptor,26,"/// Thread-safe allocator adaptor. Uses a spin lock on the assumption that; /// contention here is extremely rare.; ///; /// TODO: Using a spin lock on every allocation can be quite expensive when; /// contention is high. Since this is mainly used for BumpPtrAllocator and; /// SpecificBumpPtrAllocator, it'd be better to have a specific thread-safe; /// BumpPtrAllocator implementation that only use a fair lock when allocating a; /// new slab but otherwise using atomic and be lock-free.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadSafeAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadSafeAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadSafeAllocator.h:26,Modifiability,adapt,adaptor,26,"/// Thread-safe allocator adaptor. Uses a spin lock on the assumption that; /// contention here is extremely rare.; ///; /// TODO: Using a spin lock on every allocation can be quite expensive when; /// contention is high. Since this is mainly used for BumpPtrAllocator and; /// SpecificBumpPtrAllocator, it'd be better to have a specific thread-safe; /// BumpPtrAllocator implementation that only use a fair lock when allocating a; /// new slab but otherwise using atomic and be lock-free.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadSafeAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadSafeAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadSafeAllocator.h:11,Safety,safe,safe,11,"/// Thread-safe allocator adaptor. Uses a spin lock on the assumption that; /// contention here is extremely rare.; ///; /// TODO: Using a spin lock on every allocation can be quite expensive when; /// contention is high. Since this is mainly used for BumpPtrAllocator and; /// SpecificBumpPtrAllocator, it'd be better to have a specific thread-safe; /// BumpPtrAllocator implementation that only use a fair lock when allocating a; /// new slab but otherwise using atomic and be lock-free.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadSafeAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadSafeAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadSafeAllocator.h:345,Safety,safe,safe,345,"/// Thread-safe allocator adaptor. Uses a spin lock on the assumption that; /// contention here is extremely rare.; ///; /// TODO: Using a spin lock on every allocation can be quite expensive when; /// contention is high. Since this is mainly used for BumpPtrAllocator and; /// SpecificBumpPtrAllocator, it'd be better to have a specific thread-safe; /// BumpPtrAllocator implementation that only use a fair lock when allocating a; /// new slab but otherwise using atomic and be lock-free.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ThreadSafeAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadSafeAllocator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h:510,Availability,avail,available,510,"//===- llvm/Support/TimeProfiler.h - Hierarchical Time Profiler -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides lightweight and dependency-free machinery to trace execution; // time around arbitrary code. Two API flavors are available.; //; // The primary API uses a RAII object to trigger tracing:; //; // \code; // {; // TimeTraceScope scope(""my_event_name"");; // ...my code...; // }; // \endcode; //; // If the code to be profiled does not have a natural lexical scope then; // it is also possible to start and end events with respect to an implicit; // per-thread stack of profiling entries:; //; // \code; // timeTraceProfilerBegin(""my_event_name"");; // ...my code...; // timeTraceProfilerEnd(); // must be called on all control flow paths; // \endcode; //; // Time profiling entries can be given an arbitrary name and, optionally,; // an arbitrary 'detail' string. The resulting trace will include 'Total'; // entries summing the time spent for each name. Thus, it's best to choose; // names to be fairly generic, and rely on the detail field to capture; // everything else of interest.; //; // To avoid lifetime issues name and detail strings are copied into the event; // entries at their time of creation. Care should be taken to make string; // construction cheap to prevent 'Heisenperf' effects. In particular, the; // 'detail' argument may be a string-returning closure:; //; // \code; // int n;; // {; // TimeTraceScope scope(""my_event_name"",; // [n]() { return (Twine(""x="") + Twine(n)).str(); });; // ...my code...; // }; // \endcode; // The closure will not be called if tracing is disabled. Otherwise, the; // resulting string will be directly moved into the entry.; //; // The main process should be",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h:2411,Availability,avail,available,2411," arbitrary 'detail' string. The resulting trace will include 'Total'; // entries summing the time spent for each name. Thus, it's best to choose; // names to be fairly generic, and rely on the detail field to capture; // everything else of interest.; //; // To avoid lifetime issues name and detail strings are copied into the event; // entries at their time of creation. Care should be taken to make string; // construction cheap to prevent 'Heisenperf' effects. In particular, the; // 'detail' argument may be a string-returning closure:; //; // \code; // int n;; // {; // TimeTraceScope scope(""my_event_name"",; // [n]() { return (Twine(""x="") + Twine(n)).str(); });; // ...my code...; // }; // \endcode; // The closure will not be called if tracing is disabled. Otherwise, the; // resulting string will be directly moved into the entry.; //; // The main process should begin with a timeTraceProfilerInitialize, and; // finish with timeTraceProfileWrite and timeTraceProfilerCleanup calls.; // Each new thread should begin with a timeTraceProfilerInitialize, and; // finish with a timeTraceProfilerFinishThread call.; //; // Timestamps come from std::chrono::stable_clock. Note that threads need; // not see the same time from that clock, and the resolution may not be; // the best available.; //; // Currently, there are a number of compatible viewers:; // - chrome://tracing is the original chromium trace viewer.; // - http://ui.perfetto.dev is the replacement for the above, under active; // development by Google as part of the 'Perfetto' project.; // - https://www.speedscope.app/ has also been reported as an option.; //; // Future work:; // - Support akin to LLVM_DEBUG for runtime enable/disable of named tracing; // families for non-debug builds which wish to support optional tracing.; // - Evaluate the detail closures at profile write time to avoid; // stringification costs interfering with tracing.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h:413,Integrability,depend,dependency-free,413,"//===- llvm/Support/TimeProfiler.h - Hierarchical Time Profiler -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides lightweight and dependency-free machinery to trace execution; // time around arbitrary code. Two API flavors are available.; //; // The primary API uses a RAII object to trigger tracing:; //; // \code; // {; // TimeTraceScope scope(""my_event_name"");; // ...my code...; // }; // \endcode; //; // If the code to be profiled does not have a natural lexical scope then; // it is also possible to start and end events with respect to an implicit; // per-thread stack of profiling entries:; //; // \code; // timeTraceProfilerBegin(""my_event_name"");; // ...my code...; // timeTraceProfilerEnd(); // must be called on all control flow paths; // \endcode; //; // Time profiling entries can be given an arbitrary name and, optionally,; // an arbitrary 'detail' string. The resulting trace will include 'Total'; // entries summing the time spent for each name. Thus, it's best to choose; // names to be fairly generic, and rely on the detail field to capture; // everything else of interest.; //; // To avoid lifetime issues name and detail strings are copied into the event; // entries at their time of creation. Care should be taken to make string; // construction cheap to prevent 'Heisenperf' effects. In particular, the; // 'detail' argument may be a string-returning closure:; //; // \code; // int n;; // {; // TimeTraceScope scope(""my_event_name"",; // [n]() { return (Twine(""x="") + Twine(n)).str(); });; // ...my code...; // }; // \endcode; // The closure will not be called if tracing is disabled. Otherwise, the; // resulting string will be directly moved into the entry.; //; // The main process should be",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h:1389,Safety,avoid,avoid,1389," to trace execution; // time around arbitrary code. Two API flavors are available.; //; // The primary API uses a RAII object to trigger tracing:; //; // \code; // {; // TimeTraceScope scope(""my_event_name"");; // ...my code...; // }; // \endcode; //; // If the code to be profiled does not have a natural lexical scope then; // it is also possible to start and end events with respect to an implicit; // per-thread stack of profiling entries:; //; // \code; // timeTraceProfilerBegin(""my_event_name"");; // ...my code...; // timeTraceProfilerEnd(); // must be called on all control flow paths; // \endcode; //; // Time profiling entries can be given an arbitrary name and, optionally,; // an arbitrary 'detail' string. The resulting trace will include 'Total'; // entries summing the time spent for each name. Thus, it's best to choose; // names to be fairly generic, and rely on the detail field to capture; // everything else of interest.; //; // To avoid lifetime issues name and detail strings are copied into the event; // entries at their time of creation. Care should be taken to make string; // construction cheap to prevent 'Heisenperf' effects. In particular, the; // 'detail' argument may be a string-returning closure:; //; // \code; // int n;; // {; // TimeTraceScope scope(""my_event_name"",; // [n]() { return (Twine(""x="") + Twine(n)).str(); });; // ...my code...; // }; // \endcode; // The closure will not be called if tracing is disabled. Otherwise, the; // resulting string will be directly moved into the entry.; //; // The main process should begin with a timeTraceProfilerInitialize, and; // finish with timeTraceProfileWrite and timeTraceProfilerCleanup calls.; // Each new thread should begin with a timeTraceProfilerInitialize, and; // finish with a timeTraceProfilerFinishThread call.; //; // Timestamps come from std::chrono::stable_clock. Note that threads need; // not see the same time from that clock, and the resolution may not be; // the best available.; //; // Currentl",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h:2985,Safety,avoid,avoid,2985," arbitrary 'detail' string. The resulting trace will include 'Total'; // entries summing the time spent for each name. Thus, it's best to choose; // names to be fairly generic, and rely on the detail field to capture; // everything else of interest.; //; // To avoid lifetime issues name and detail strings are copied into the event; // entries at their time of creation. Care should be taken to make string; // construction cheap to prevent 'Heisenperf' effects. In particular, the; // 'detail' argument may be a string-returning closure:; //; // \code; // int n;; // {; // TimeTraceScope scope(""my_event_name"",; // [n]() { return (Twine(""x="") + Twine(n)).str(); });; // ...my code...; // }; // \endcode; // The closure will not be called if tracing is disabled. Otherwise, the; // resulting string will be directly moved into the entry.; //; // The main process should begin with a timeTraceProfilerInitialize, and; // finish with timeTraceProfileWrite and timeTraceProfilerCleanup calls.; // Each new thread should begin with a timeTraceProfilerInitialize, and; // finish with a timeTraceProfilerFinishThread call.; //; // Timestamps come from std::chrono::stable_clock. Note that threads need; // not see the same time from that clock, and the resolution may not be; // the best available.; //; // Currently, there are a number of compatible viewers:; // - chrome://tracing is the original chromium trace viewer.; // - http://ui.perfetto.dev is the replacement for the above, under active; // development by Google as part of the 'Perfetto' project.; // - https://www.speedscope.app/ has also been reported as an option.; //; // Future work:; // - Support akin to LLVM_DEBUG for runtime enable/disable of named tracing; // families for non-debug builds which wish to support optional tracing.; // - Evaluate the detail closures at profile write time to avoid; // stringification costs interfering with tracing.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h:103,Modifiability,variab,variable,103,/// Initialize the time trace profiler.; /// This sets up the global \p TimeTraceProfilerInstance; /// variable to be the profiler instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h:216,Availability,failure,failure,216,"/// Write profiling data to a file.; /// The function will write to \p PreferredFileName if provided, if not; /// then will write to \p FallbackFileName appending .time-trace.; /// Returns a StringError indicating a failure if the function is; /// unable to open the file for writing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h:12,Energy Efficiency,allocate,allocated,12,///< Memory allocated (in bytes).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h:310,Availability,error,error,310,"/// This class is used to track the amount of time spent between invocations of; /// its startTimer()/stopTimer() methods. Given appropriate OS support it can; /// also keep track of the RSS of the program at various points. By default,; /// the Timer will print the amount of time it has captured to standard error; /// when the last timer is destroyed, otherwise it is printed when its; /// TimerGroup is destroyed. Timers do not print their information if they are; /// never started.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h:27,Modifiability,variab,variable,27,///< The name of this time variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h:30,Modifiability,variab,variable,30,///< Description of this time variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h:4,Usability,Clear,Clear,4,/// Clear the timer state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h:269,Performance,perform,performance,269,"/// This class is basically a combination of TimeRegion and Timer. It allows; /// you to declare a new timer, AND specify the region to time, all in one; /// statement. All timers with the same name are merged. This is primarily; /// used for debugging and for hunting performance problems.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h:4,Usability,Clear,Clear,4,/// Clear all timers in this group.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h:4,Usability,Clear,Clear,4,"/// Clear out all timers. This is mostly used to disable automatic; /// printing on shutdown, when timers have already been printed explicitly; /// using \c printAll or \c printJSONValues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ToolOutputFile.h:188,Deployability,install,installs,188,/// This class is declared before the raw_fd_ostream so that it is constructed; /// before the raw_fd_ostream is constructed and destructed after the; /// raw_fd_ostream is destructed. It installs cleanups in its constructor and; /// uninstalls them in its destructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ToolOutputFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ToolOutputFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ToolOutputFile.h:102,Deployability,Install,Installer,102,"/// Storage for the stream, if we're owning our own stream. This is; /// intentionally declared after Installer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/ToolOutputFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ToolOutputFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:913,Energy Efficiency,allocate,allocated,913,"//===--- TrailingObjects.h - Variable-length classes ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This header defines support for implementing classes that have; /// some trailing object (or arrays of objects) appended to them. The; /// main purpose is to make it obvious where this idiom is being used,; /// and to make the usage more idiomatic and more difficult to get; /// wrong.; ///; /// The TrailingObject template abstracts away the reinterpret_cast,; /// pointer arithmetic, and size calculations used for the allocation; /// and access of appended arrays of objects, and takes care that they; /// are all allocated at their required alignment. Additionally, it; /// ensures that the base type is final -- deriving from a class that; /// expects data appended immediately after it is typically not safe.; ///; /// Users are expected to derive from this template, and provide; /// numTrailingObjects implementations for each trailing type except; /// the last, e.g. like this sample:; ///; /// \code; /// class VarLengthObj : private TrailingObjects<VarLengthObj, int, double> {; /// friend TrailingObjects;; ///; /// unsigned NumInts, NumDoubles;; /// size_t numTrailingObjects(OverloadToken<int>) const { return NumInts; }; /// };; /// \endcode; ///; /// You can access the appended arrays via 'getTrailingObjects', and; /// determine the size needed for allocation via; /// 'additionalSizeToAlloc' and 'totalSizeToAlloc'.; ///; /// All the methods implemented by this class are intended for use; /// by the implementation of the class, not as part of its interface; /// (thus, private inheritance is suggested).; ///; //===---------------------------------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:1864,Integrability,interface,interface,1864,"- TrailingObjects.h - Variable-length classes ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This header defines support for implementing classes that have; /// some trailing object (or arrays of objects) appended to them. The; /// main purpose is to make it obvious where this idiom is being used,; /// and to make the usage more idiomatic and more difficult to get; /// wrong.; ///; /// The TrailingObject template abstracts away the reinterpret_cast,; /// pointer arithmetic, and size calculations used for the allocation; /// and access of appended arrays of objects, and takes care that they; /// are all allocated at their required alignment. Additionally, it; /// ensures that the base type is final -- deriving from a class that; /// expects data appended immediately after it is typically not safe.; ///; /// Users are expected to derive from this template, and provide; /// numTrailingObjects implementations for each trailing type except; /// the last, e.g. like this sample:; ///; /// \code; /// class VarLengthObj : private TrailingObjects<VarLengthObj, int, double> {; /// friend TrailingObjects;; ///; /// unsigned NumInts, NumDoubles;; /// size_t numTrailingObjects(OverloadToken<int>) const { return NumInts; }; /// };; /// \endcode; ///; /// You can access the appended arrays via 'getTrailingObjects', and; /// determine the size needed for allocation via; /// 'additionalSizeToAlloc' and 'totalSizeToAlloc'.; ///; /// All the methods implemented by this class are intended for use; /// by the implementation of the class, not as part of its interface; /// (thus, private inheritance is suggested).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:29,Modifiability,Variab,Variable-length,29,"//===--- TrailingObjects.h - Variable-length classes ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This header defines support for implementing classes that have; /// some trailing object (or arrays of objects) appended to them. The; /// main purpose is to make it obvious where this idiom is being used,; /// and to make the usage more idiomatic and more difficult to get; /// wrong.; ///; /// The TrailingObject template abstracts away the reinterpret_cast,; /// pointer arithmetic, and size calculations used for the allocation; /// and access of appended arrays of objects, and takes care that they; /// are all allocated at their required alignment. Additionally, it; /// ensures that the base type is final -- deriving from a class that; /// expects data appended immediately after it is typically not safe.; ///; /// Users are expected to derive from this template, and provide; /// numTrailingObjects implementations for each trailing type except; /// the last, e.g. like this sample:; ///; /// \code; /// class VarLengthObj : private TrailingObjects<VarLengthObj, int, double> {; /// friend TrailingObjects;; ///; /// unsigned NumInts, NumDoubles;; /// size_t numTrailingObjects(OverloadToken<int>) const { return NumInts; }; /// };; /// \endcode; ///; /// You can access the appended arrays via 'getTrailingObjects', and; /// determine the size needed for allocation via; /// 'additionalSizeToAlloc' and 'totalSizeToAlloc'.; ///; /// All the methods implemented by this class are intended for use; /// by the implementation of the class, not as part of its interface; /// (thus, private inheritance is suggested).; ///; //===---------------------------------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:1894,Modifiability,inherit,inheritance,1894,"- TrailingObjects.h - Variable-length classes ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This header defines support for implementing classes that have; /// some trailing object (or arrays of objects) appended to them. The; /// main purpose is to make it obvious where this idiom is being used,; /// and to make the usage more idiomatic and more difficult to get; /// wrong.; ///; /// The TrailingObject template abstracts away the reinterpret_cast,; /// pointer arithmetic, and size calculations used for the allocation; /// and access of appended arrays of objects, and takes care that they; /// are all allocated at their required alignment. Additionally, it; /// ensures that the base type is final -- deriving from a class that; /// expects data appended immediately after it is typically not safe.; ///; /// Users are expected to derive from this template, and provide; /// numTrailingObjects implementations for each trailing type except; /// the last, e.g. like this sample:; ///; /// \code; /// class VarLengthObj : private TrailingObjects<VarLengthObj, int, double> {; /// friend TrailingObjects;; ///; /// unsigned NumInts, NumDoubles;; /// size_t numTrailingObjects(OverloadToken<int>) const { return NumInts; }; /// };; /// \endcode; ///; /// You can access the appended arrays via 'getTrailingObjects', and; /// determine the size needed for allocation via; /// 'additionalSizeToAlloc' and 'totalSizeToAlloc'.; ///; /// All the methods implemented by this class are intended for use; /// by the implementation of the class, not as part of its interface; /// (thus, private inheritance is suggested).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:1105,Safety,safe,safe,1105,"- TrailingObjects.h - Variable-length classes ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This header defines support for implementing classes that have; /// some trailing object (or arrays of objects) appended to them. The; /// main purpose is to make it obvious where this idiom is being used,; /// and to make the usage more idiomatic and more difficult to get; /// wrong.; ///; /// The TrailingObject template abstracts away the reinterpret_cast,; /// pointer arithmetic, and size calculations used for the allocation; /// and access of appended arrays of objects, and takes care that they; /// are all allocated at their required alignment. Additionally, it; /// ensures that the base type is final -- deriving from a class that; /// expects data appended immediately after it is typically not safe.; ///; /// Users are expected to derive from this template, and provide; /// numTrailingObjects implementations for each trailing type except; /// the last, e.g. like this sample:; ///; /// \code; /// class VarLengthObj : private TrailingObjects<VarLengthObj, int, double> {; /// friend TrailingObjects;; ///; /// unsigned NumInts, NumDoubles;; /// size_t numTrailingObjects(OverloadToken<int>) const { return NumInts; }; /// };; /// \endcode; ///; /// You can access the appended arrays via 'getTrailingObjects', and; /// determine the size needed for allocation via; /// 'additionalSizeToAlloc' and 'totalSizeToAlloc'.; ///; /// All the methods implemented by this class are intended for use; /// by the implementation of the class, not as part of its interface; /// (thus, private inheritance is suggested).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:837,Security,access,access,837,"//===--- TrailingObjects.h - Variable-length classes ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This header defines support for implementing classes that have; /// some trailing object (or arrays of objects) appended to them. The; /// main purpose is to make it obvious where this idiom is being used,; /// and to make the usage more idiomatic and more difficult to get; /// wrong.; ///; /// The TrailingObject template abstracts away the reinterpret_cast,; /// pointer arithmetic, and size calculations used for the allocation; /// and access of appended arrays of objects, and takes care that they; /// are all allocated at their required alignment. Additionally, it; /// ensures that the base type is final -- deriving from a class that; /// expects data appended immediately after it is typically not safe.; ///; /// Users are expected to derive from this template, and provide; /// numTrailingObjects implementations for each trailing type except; /// the last, e.g. like this sample:; ///; /// \code; /// class VarLengthObj : private TrailingObjects<VarLengthObj, int, double> {; /// friend TrailingObjects;; ///; /// unsigned NumInts, NumDoubles;; /// size_t numTrailingObjects(OverloadToken<int>) const { return NumInts; }; /// };; /// \endcode; ///; /// You can access the appended arrays via 'getTrailingObjects', and; /// determine the size needed for allocation via; /// 'additionalSizeToAlloc' and 'totalSizeToAlloc'.; ///; /// All the methods implemented by this class are intended for use; /// by the implementation of the class, not as part of its interface; /// (thus, private inheritance is suggested).; ///; //===---------------------------------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:1571,Security,access,access,1571,"- TrailingObjects.h - Variable-length classes ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This header defines support for implementing classes that have; /// some trailing object (or arrays of objects) appended to them. The; /// main purpose is to make it obvious where this idiom is being used,; /// and to make the usage more idiomatic and more difficult to get; /// wrong.; ///; /// The TrailingObject template abstracts away the reinterpret_cast,; /// pointer arithmetic, and size calculations used for the allocation; /// and access of appended arrays of objects, and takes care that they; /// are all allocated at their required alignment. Additionally, it; /// ensures that the base type is final -- deriving from a class that; /// expects data appended immediately after it is typically not safe.; ///; /// Users are expected to derive from this template, and provide; /// numTrailingObjects implementations for each trailing type except; /// the last, e.g. like this sample:; ///; /// \code; /// class VarLengthObj : private TrailingObjects<VarLengthObj, int, double> {; /// friend TrailingObjects;; ///; /// unsigned NumInts, NumDoubles;; /// size_t numTrailingObjects(OverloadToken<int>) const { return NumInts; }; /// };; /// \endcode; ///; /// You can access the appended arrays via 'getTrailingObjects', and; /// determine the size needed for allocation via; /// 'additionalSizeToAlloc' and 'totalSizeToAlloc'.; ///; /// All the methods implemented by this class are intended for use; /// by the implementation of the class, not as part of its interface; /// (thus, private inheritance is suggested).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:80,Modifiability,inherit,inheriting,80,"// TrailingObjectsImpl is somewhat complicated, because it is a; // recursively inheriting template, in order to handle the template; // varargs. Each level of inheritance picks off a single trailing type; // then recurses on the rest. The ""Align"", ""BaseTy"", and; // ""TopTrailingObj"" arguments are passed through unchanged through the; // recursion. ""PrevTy"" is, at each level, the type handled by the; // level right above it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:160,Modifiability,inherit,inheritance,160,"// TrailingObjectsImpl is somewhat complicated, because it is a; // recursively inheriting template, in order to handle the template; // varargs. Each level of inheritance picks off a single trailing type; // then recurses on the rest. The ""Align"", ""BaseTy"", and; // ""TopTrailingObj"" arguments are passed through unchanged through the; // recursion. ""PrevTy"" is, at each level, the type handled by the; // level right above it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:14,Modifiability,inherit,inherited,14,// Ensure the inherited getTrailingObjectsImpl is not hidden.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:176,Integrability,depend,depends,176,"// These two functions are helper functions for; // TrailingObjects::getTrailingObjects. They recurse to the left --; // the result for each type in the list of trailing types depends on; // the result of calling the function on the type to the; // left. However, the function for the type to the left is; // implemented by a *subclass* of this class, so we invoke it via; // the TopTrailingObj, which is, via the; // curiously-recurring-template-pattern, the most-derived type in; // this recursion, and thus, contains all the overloads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:44,Modifiability,inherit,inheritance,44,"// The base case of the TrailingObjectsImpl inheritance recursion,; // when there's no more trailing types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:149,Modifiability,inherit,inheritance,149,"// This is a dummy method, only here so the ""using"" doesn't fail --; // it will never be called, because this function recurses backwards; // up the inheritance chain to subclasses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:26,Usability,simpl,simply,26,"// callNumTrailingObjects simply calls numTrailingObjects on the; // provided Obj -- except when the type being queried is BaseTy; // itself. There is always only one of the base object, so that case; // is handled here. (An additional benefit of indirecting through; // this function is that consumers only say ""friend; // TrailingObjects"", and thus, only this class itself can call the; // numTrailingObjects function.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:24,Modifiability,inherit,inherited,24,// Make this (privately inherited) member public.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:54,Testability,test,tested,54,"// An MSVC bug prevents the above from working, (last tested at CL version; // 19.28). ""Class5"" in TrailingObjectsTest.cpp tests the problematic case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:123,Testability,test,tests,123,"// An MSVC bug prevents the above from working, (last tested at CL version; // 19.28). ""Class5"" in TrailingObjectsTest.cpp tests the problematic case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:317,Availability,redundant,redundantly,317,"/// Returns the size of the trailing data, if an object were; /// allocated with the given counts (The counts are in the same order; /// as the template arguments). This does not include the size of the; /// base object. The template arguments must be the same as those; /// used in the class; they are supplied here redundantly only so; /// that it's clear what the counts are counting in callers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:66,Energy Efficiency,allocate,allocated,66,"/// Returns the size of the trailing data, if an object were; /// allocated with the given counts (The counts are in the same order; /// as the template arguments). This does not include the size of the; /// base object. The template arguments must be the same as those; /// used in the class; they are supplied here redundantly only so; /// that it's clear what the counts are counting in callers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:317,Safety,redund,redundantly,317,"/// Returns the size of the trailing data, if an object were; /// allocated with the given counts (The counts are in the same order; /// as the template arguments). This does not include the size of the; /// base object. The template arguments must be the same as those; /// used in the class; they are supplied here redundantly only so; /// that it's clear what the counts are counting in callers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:352,Usability,clear,clear,352,"/// Returns the size of the trailing data, if an object were; /// allocated with the given counts (The counts are in the same order; /// as the template arguments). This does not include the size of the; /// base object. The template arguments must be the same as those; /// used in the class; they are supplied here redundantly only so; /// that it's clear what the counts are counting in callers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:51,Energy Efficiency,allocate,allocated,51,"/// Returns the total size of an object if it were allocated with the; /// given trailing object counts. This is the same as; /// additionalSizeToAlloc, except it *does* include the size of the base; /// object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h:112,Integrability,rout,routine,112,"/// We provide a function which tries to compute the (demangled) name of a type; /// statically.; ///; /// This routine may fail on some platforms or for particularly unusual types.; /// Do not use it for anything other than logging and debugging aids. It isn't; /// portable or dependendable in any real sense.; ///; /// The returned StringRef will point into a static storage duration string.; /// However, it may not be null terminated and may be some strangely aligned; /// inner substring of a larger string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h:279,Integrability,depend,dependendable,279,"/// We provide a function which tries to compute the (demangled) name of a type; /// statically.; ///; /// This routine may fail on some platforms or for particularly unusual types.; /// Do not use it for anything other than logging and debugging aids. It isn't; /// portable or dependendable in any real sense.; ///; /// The returned StringRef will point into a static storage duration string.; /// However, it may not be null terminated and may be some strangely aligned; /// inner substring of a larger string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h:267,Modifiability,portab,portable,267,"/// We provide a function which tries to compute the (demangled) name of a type; /// statically.; ///; /// This routine may fail on some platforms or for particularly unusual types.; /// Do not use it for anything other than logging and debugging aids. It isn't; /// portable or dependendable in any real sense.; ///; /// The returned StringRef will point into a static storage duration string.; /// However, it may not be null terminated and may be some strangely aligned; /// inner substring of a larger string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h:225,Testability,log,logging,225,"/// We provide a function which tries to compute the (demangled) name of a type; /// statically.; ///; /// This routine may fail on some platforms or for particularly unusual types.; /// Do not use it for anything other than logging and debugging aids. It isn't; /// portable or dependendable in any real sense.; ///; /// The returned StringRef will point into a static storage duration string.; /// However, it may not be null terminated and may be some strangely aligned; /// inner substring of a larger string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:20,Integrability,Wrap,Wrapper,20,"//===- TypeSize.h - Wrapper around type sizes -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides a struct that can be used to query the size of IR types; // which may be scalable vectors. It provides convenience operators so that; // it can be used in much the same way as a single scalar value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:475,Performance,scalab,scalable,475,"//===- TypeSize.h - Wrapper around type sizes -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides a struct that can be used to query the size of IR types; // which may be scalable vectors. It provides convenience operators so that; // it can be used in much the same way as a single scalar value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:25,Integrability,message,message,25,/// Reports a diagnostic message to indicate an invalid size request has been; /// done on a scalable vector. This function may not return.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:93,Performance,scalab,scalable,93,/// Reports a diagnostic message to indicate an invalid size request has been; /// done on a scalable vector. This function may not return.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:36,Performance,scalab,scalable,36,/// StackOffset holds a fixed and a scalable offset in bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:16,Performance,scalab,scalable,16,/// Returns the scalable component of the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:99,Performance,scalab,scalable,99,"// Return the minimum value with the assumption that the count is exact.; // Use in places where a scalable count doesn't make sense (e.g. non-vector; // types, or vectors in backends which don't support scalable vectors).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:204,Performance,scalab,scalable,204,"// Return the minimum value with the assumption that the count is exact.; // Use in places where a scalable count doesn't make sense (e.g. non-vector; // types, or vectors in backends which don't support scalable vectors).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:45,Performance,scalab,scalable,45,"// For some cases, quantity ordering between scalable and fixed quantity types; // cannot be determined at compile time, so such comparisons aren't allowed.; //; // e.g. <vscale x 2 x i16> could be bigger than <4 x i32> with a runtime; // vscale >= 5, equal sized with a vscale of 4, and smaller with; // a vscale <= 3.; //; // All the functions below make use of the fact vscale is always >= 1, which; // means that <vscale x 4 x i32> is guaranteed to be >= <4 x i32>, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:422,Performance,perform,perform,422,"/// We do not provide the '/' operator here because division for polynomial; /// types does not work in the same way as for normal integer types. We can; /// only divide the minimum value (or coefficient) by RHS, which is not the; /// same as; /// (Min * Vscale) / RHS; /// The caller is recommended to use this function in combination with; /// isKnownMultipleOf(RHS), which lets the caller know if it's possible to; /// perform a lossless divide by RHS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:117,Performance,scalab,scalable,117,"// namespace details; // Stores the number of elements for a type and whether this type is fixed; // (N-Elements) or scalable (e.g., SVE).; // - ElementCount::getFixed(1) : A scalar value.; // - ElementCount::getFixed(2) : A vector type holding 2 values.; // - ElementCount::getScalable(4) : A scalable vector type holding 4 values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:294,Performance,scalab,scalable,294,"// namespace details; // Stores the number of elements for a type and whether this type is fixed; // (N-Elements) or scalable (e.g., SVE).; // - ElementCount::getFixed(1) : A scalar value.; // - ElementCount::getFixed(2) : A vector type holding 2 values.; // - ElementCount::getScalable(4) : A scalable vector type holding 4 values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:115,Performance,scalab,scalable,115,"// Stores the size of a type. If the type is of fixed size, it will represent; // the exact size. If the type is a scalable vector, it will represent the known; // minimum size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:717,Deployability,upgrade,upgrade,717,// All code for this class below this point is needed because of the; // temporary implicit conversion to uint64_t. The operator overloads are; // needed because otherwise the conversion of the parent class; // UnivariateLinearPolyBase -> TypeSize is ambiguous.; // TODO: Remove the implicit conversion.; // Casts to a uint64_t if this is a fixed-width size.; //; // This interface is deprecated and will be removed in a future version; // of LLVM in favour of upgrading uses that rely on this implicit conversion; // to uint64_t. Calls to functions that return a TypeSize should use the; // proper interfaces to TypeSize.; // In practice this is mostly calls to MVT/EVT::getSizeInBits().; //; // To determine how to upgrade the code:; //; // if (<algorithm works for both scalable and fixed-width vectors>); // use getKnownMinValue(); // else if (<algorithm works only for fixed-width vectors>) {; // if <algorithm can be adapted for both scalable and fixed-width vectors>; // update the algorithm and use getKnownMinValue(); // else; // bail out early for scalable vectors and use getFixedValue(); // },MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:978,Deployability,update,update,978,// All code for this class below this point is needed because of the; // temporary implicit conversion to uint64_t. The operator overloads are; // needed because otherwise the conversion of the parent class; // UnivariateLinearPolyBase -> TypeSize is ambiguous.; // TODO: Remove the implicit conversion.; // Casts to a uint64_t if this is a fixed-width size.; //; // This interface is deprecated and will be removed in a future version; // of LLVM in favour of upgrading uses that rely on this implicit conversion; // to uint64_t. Calls to functions that return a TypeSize should use the; // proper interfaces to TypeSize.; // In practice this is mostly calls to MVT/EVT::getSizeInBits().; //; // To determine how to upgrade the code:; //; // if (<algorithm works for both scalable and fixed-width vectors>); // use getKnownMinValue(); // else if (<algorithm works only for fixed-width vectors>) {; // if <algorithm can be adapted for both scalable and fixed-width vectors>; // update the algorithm and use getKnownMinValue(); // else; // bail out early for scalable vectors and use getFixedValue(); // },MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:923,Energy Efficiency,adapt,adapted,923,// All code for this class below this point is needed because of the; // temporary implicit conversion to uint64_t. The operator overloads are; // needed because otherwise the conversion of the parent class; // UnivariateLinearPolyBase -> TypeSize is ambiguous.; // TODO: Remove the implicit conversion.; // Casts to a uint64_t if this is a fixed-width size.; //; // This interface is deprecated and will be removed in a future version; // of LLVM in favour of upgrading uses that rely on this implicit conversion; // to uint64_t. Calls to functions that return a TypeSize should use the; // proper interfaces to TypeSize.; // In practice this is mostly calls to MVT/EVT::getSizeInBits().; //; // To determine how to upgrade the code:; //; // if (<algorithm works for both scalable and fixed-width vectors>); // use getKnownMinValue(); // else if (<algorithm works only for fixed-width vectors>) {; // if <algorithm can be adapted for both scalable and fixed-width vectors>; // update the algorithm and use getKnownMinValue(); // else; // bail out early for scalable vectors and use getFixedValue(); // },MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:372,Integrability,interface,interface,372,// All code for this class below this point is needed because of the; // temporary implicit conversion to uint64_t. The operator overloads are; // needed because otherwise the conversion of the parent class; // UnivariateLinearPolyBase -> TypeSize is ambiguous.; // TODO: Remove the implicit conversion.; // Casts to a uint64_t if this is a fixed-width size.; //; // This interface is deprecated and will be removed in a future version; // of LLVM in favour of upgrading uses that rely on this implicit conversion; // to uint64_t. Calls to functions that return a TypeSize should use the; // proper interfaces to TypeSize.; // In practice this is mostly calls to MVT/EVT::getSizeInBits().; //; // To determine how to upgrade the code:; //; // if (<algorithm works for both scalable and fixed-width vectors>); // use getKnownMinValue(); // else if (<algorithm works only for fixed-width vectors>) {; // if <algorithm can be adapted for both scalable and fixed-width vectors>; // update the algorithm and use getKnownMinValue(); // else; // bail out early for scalable vectors and use getFixedValue(); // },MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:599,Integrability,interface,interfaces,599,// All code for this class below this point is needed because of the; // temporary implicit conversion to uint64_t. The operator overloads are; // needed because otherwise the conversion of the parent class; // UnivariateLinearPolyBase -> TypeSize is ambiguous.; // TODO: Remove the implicit conversion.; // Casts to a uint64_t if this is a fixed-width size.; //; // This interface is deprecated and will be removed in a future version; // of LLVM in favour of upgrading uses that rely on this implicit conversion; // to uint64_t. Calls to functions that return a TypeSize should use the; // proper interfaces to TypeSize.; // In practice this is mostly calls to MVT/EVT::getSizeInBits().; //; // To determine how to upgrade the code:; //; // if (<algorithm works for both scalable and fixed-width vectors>); // use getKnownMinValue(); // else if (<algorithm works only for fixed-width vectors>) {; // if <algorithm can be adapted for both scalable and fixed-width vectors>; // update the algorithm and use getKnownMinValue(); // else; // bail out early for scalable vectors and use getFixedValue(); // },MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:923,Modifiability,adapt,adapted,923,// All code for this class below this point is needed because of the; // temporary implicit conversion to uint64_t. The operator overloads are; // needed because otherwise the conversion of the parent class; // UnivariateLinearPolyBase -> TypeSize is ambiguous.; // TODO: Remove the implicit conversion.; // Casts to a uint64_t if this is a fixed-width size.; //; // This interface is deprecated and will be removed in a future version; // of LLVM in favour of upgrading uses that rely on this implicit conversion; // to uint64_t. Calls to functions that return a TypeSize should use the; // proper interfaces to TypeSize.; // In practice this is mostly calls to MVT/EVT::getSizeInBits().; //; // To determine how to upgrade the code:; //; // if (<algorithm works for both scalable and fixed-width vectors>); // use getKnownMinValue(); // else if (<algorithm works only for fixed-width vectors>) {; // if <algorithm can be adapted for both scalable and fixed-width vectors>; // update the algorithm and use getKnownMinValue(); // else; // bail out early for scalable vectors and use getFixedValue(); // },MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:773,Performance,scalab,scalable,773,// All code for this class below this point is needed because of the; // temporary implicit conversion to uint64_t. The operator overloads are; // needed because otherwise the conversion of the parent class; // UnivariateLinearPolyBase -> TypeSize is ambiguous.; // TODO: Remove the implicit conversion.; // Casts to a uint64_t if this is a fixed-width size.; //; // This interface is deprecated and will be removed in a future version; // of LLVM in favour of upgrading uses that rely on this implicit conversion; // to uint64_t. Calls to functions that return a TypeSize should use the; // proper interfaces to TypeSize.; // In practice this is mostly calls to MVT/EVT::getSizeInBits().; //; // To determine how to upgrade the code:; //; // if (<algorithm works for both scalable and fixed-width vectors>); // use getKnownMinValue(); // else if (<algorithm works only for fixed-width vectors>) {; // if <algorithm can be adapted for both scalable and fixed-width vectors>; // update the algorithm and use getKnownMinValue(); // else; // bail out early for scalable vectors and use getFixedValue(); // },MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:940,Performance,scalab,scalable,940,// All code for this class below this point is needed because of the; // temporary implicit conversion to uint64_t. The operator overloads are; // needed because otherwise the conversion of the parent class; // UnivariateLinearPolyBase -> TypeSize is ambiguous.; // TODO: Remove the implicit conversion.; // Casts to a uint64_t if this is a fixed-width size.; //; // This interface is deprecated and will be removed in a future version; // of LLVM in favour of upgrading uses that rely on this implicit conversion; // to uint64_t. Calls to functions that return a TypeSize should use the; // proper interfaces to TypeSize.; // In practice this is mostly calls to MVT/EVT::getSizeInBits().; //; // To determine how to upgrade the code:; //; // if (<algorithm works for both scalable and fixed-width vectors>); // use getKnownMinValue(); // else if (<algorithm works only for fixed-width vectors>) {; // if <algorithm can be adapted for both scalable and fixed-width vectors>; // update the algorithm and use getKnownMinValue(); // else; // bail out early for scalable vectors and use getFixedValue(); // },MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:1058,Performance,scalab,scalable,1058,// All code for this class below this point is needed because of the; // temporary implicit conversion to uint64_t. The operator overloads are; // needed because otherwise the conversion of the parent class; // UnivariateLinearPolyBase -> TypeSize is ambiguous.; // TODO: Remove the implicit conversion.; // Casts to a uint64_t if this is a fixed-width size.; //; // This interface is deprecated and will be removed in a future version; // of LLVM in favour of upgrading uses that rely on this implicit conversion; // to uint64_t. Calls to functions that return a TypeSize should use the; // proper interfaces to TypeSize.; // In practice this is mostly calls to MVT/EVT::getSizeInBits().; //; // To determine how to upgrade the code:; //; // if (<algorithm works for both scalable and fixed-width vectors>); // use getKnownMinValue(); // else if (<algorithm works only for fixed-width vectors>) {; // if <algorithm can be adapted for both scalable and fixed-width vectors>; // update the algorithm and use getKnownMinValue(); // else; // bail out early for scalable vectors and use getFixedValue(); // },MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h:34,Safety,avoid,avoid,34,// Additional operators needed to avoid ambiguous parses; // because of the implicit conversion hack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TypeSize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/type_traits.h:36,Usability,Simpl,Simplfied,36,"//===- llvm/Support/type_traits.h - Simplfied type traits -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides useful additions to the standard type_traits library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/type_traits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/type_traits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h:123,Integrability,depend,depend,123,"/// Determines if a character is likely to be displayed correctly on the; /// terminal. Exact implementation would have to depend on the specific; /// terminal, so we define the semantic that should be suitable for generic case; /// of a terminal capable to output Unicode characters.; ///; /// Printable codepoints are those in the categories L, M, N, P, S and Zs; /// \return true if the character is considered printable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h:418,Availability,Error,ErrorNonPrintableCharacter,418,"/// Gets the number of positions the UTF8-encoded \p Text is likely to occupy; /// when output on a terminal (""character width""). This depends on the; /// implementation of the terminal, and there's no standard definition of; /// character width.; ///; /// The implementation defines it in a way that is expected to be compatible; /// with a generic Unicode-capable terminal.; ///; /// \return Character width:; /// * ErrorNonPrintableCharacter (-1) if \p Text contains non-printable; /// characters (as identified by isPrintable);; /// * 0 for each non-spacing and enclosing combining mark;; /// * 2 for each CJK character excluding halfwidth forms;; /// * 1 for each of the remaining characters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h:135,Integrability,depend,depends,135,"/// Gets the number of positions the UTF8-encoded \p Text is likely to occupy; /// when output on a terminal (""character width""). This depends on the; /// implementation of the terminal, and there's no standard definition of; /// character width.; ///; /// The implementation defines it in a way that is expected to be compatible; /// with a generic Unicode-capable terminal.; ///; /// \return Character width:; /// * ErrorNonPrintableCharacter (-1) if \p Text contains non-printable; /// characters (as identified by isPrintable);; /// * 0 for each non-spacing and enclosing combining mark;; /// * 2 for each CJK character excluding halfwidth forms;; /// * 1 for each of the remaining characters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h:47,Usability,Simpl,Simple,47,/// Fold input unicode character according the Simple unicode case folding; /// rules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/UnicodeCharRanges.h:230,Security,validat,validated,230,"/// Constructs a UnicodeCharSet instance from an array of; /// UnicodeCharRanges.; ///; /// Array pointed by \p Ranges should have the lifetime at least as long as; /// the UnicodeCharSet instance, and should not change. Array is validated by; /// the constructor, so it makes sense to create as few UnicodeCharSet; /// instances per each array of ranges, as possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/UnicodeCharRanges.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/UnicodeCharRanges.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Valgrind.h:559,Deployability,install,installed,559,"//===- llvm/Support/Valgrind.h - Communication with Valgrind ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Methods for communicating with a valgrind instance this program is running; // under. These are all no-ops unless LLVM was configured on a system with the; // valgrind headers installed and valgrind is controlling this process.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Valgrind.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Valgrind.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Valgrind.h:506,Modifiability,config,configured,506,"//===- llvm/Support/Valgrind.h - Communication with Valgrind ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Methods for communicating with a valgrind instance this program is running; // under. These are all no-ops unless LLVM was configured on a system with the; // valgrind headers installed and valgrind is controlling this process.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Valgrind.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Valgrind.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:427,Integrability,interface,interface,427,"//===- VirtualFileSystem.h - Virtual File System Layer ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the virtual file system interface vfs::FileSystem.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:108,Security,expose,exposed,108,"/// Whether this entity has an external path different from the virtual path,; /// and the external path is exposed by leaking it through the abstraction.; /// For example, a RedirectingFileSystem will set this for paths where; /// UseExternalName is true.; ///; /// FIXME: Currently the external path is exposed by replacing the virtual; /// path in this Status object. Instead, we should leave the path in the; /// Status intact (matching the requested virtual path) - see; /// FileManager::getFileRef for how we plan to fix this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:305,Security,expose,exposed,305,"/// Whether this entity has an external path different from the virtual path,; /// and the external path is exposed by leaking it through the abstraction.; /// For example, a RedirectingFileSystem will set this for paths where; /// UseExternalName is true.; ///; /// FIXME: Currently the external path is exposed by replacing the virtual; /// path in this Status object. Instead, we should leave the path in the; /// Status intact (matching the requested virtual path) - see; /// FileManager::getFileRef for how we plan to fix this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:17,Integrability,interface,interface,17,/// @name Status interface from llvm::sys::fs; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:84,Availability,avail,available,84,"/// A member of a directory, yielded by a directory_iterator.; /// Only information available on most platforms is included.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:7,Integrability,interface,interface,7,/// An interface for virtual file systems to provide an iterator over the; /// (non-recursive) contents of a directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:38,Availability,error,error,38,"/// Equivalent to operator++, with an error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:38,Availability,error,error,38,"/// Equivalent to operator++, with an error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:28,Integrability,interface,interface,28,/// The virtual file system interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:116,Availability,down,down,116,/// Set the working directory. This will affect all following operations on; /// this file system and may propagate down for nested file systems.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:490,Deployability,configurat,configuration,490,"/// A virtual file system parsed from a YAML file.; ///; /// Currently, this class allows creating virtual files and directories. Virtual; /// files map to existing external files in \c ExternalFS, and virtual; /// directories may either map to existing directories in \c ExternalFS or list; /// their contents in the form of other virtual directories and/or files.; ///; /// The basic structure of the parsed file is:; /// \verbatim; /// {; /// 'version': <version number>,; /// <optional configuration>; /// 'roots': [; /// <directory entries>; /// ]; /// }; /// \endverbatim; ///; /// The roots may be absolute or relative. If relative they will be made; /// absolute against either current working directory or the directory where; /// the Overlay YAML file is located, depending on the 'root-relative'; /// configuration.; ///; /// All configuration options are optional.; /// 'case-sensitive': <boolean, default=(true for Posix, false for Windows)>; /// 'use-external-names': <boolean, default=true>; /// 'root-relative': <string, one of 'cwd' or 'overlay-dir', default='cwd'>; /// 'overlay-relative': <boolean, default=false>; /// 'fallthrough': <boolean, default=true, deprecated - use 'redirecting-with'; /// instead>; /// 'redirecting-with': <string, one of 'fallthrough', 'fallback', or; /// 'redirect-only', default='fallthrough'>; ///; /// To clarify, 'root-relative' option will prepend the current working; /// directory, or the overlay directory to the 'roots->name' field only if; /// 'roots->name' is a relative path. On the other hand, when 'overlay-relative'; /// is set to 'true', external paths will always be prepended with the overlay; /// directory, even if external paths are not relative paths. The; /// 'root-relative' option has no interaction with the 'overlay-relative'; /// option.; ///; /// Virtual directories that list their contents are represented as; /// \verbatim; /// {; /// 'type': 'directory',; /// 'name': <string>,; /// 'contents': [ <file or directory entr",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:812,Deployability,configurat,configuration,812,"/// A virtual file system parsed from a YAML file.; ///; /// Currently, this class allows creating virtual files and directories. Virtual; /// files map to existing external files in \c ExternalFS, and virtual; /// directories may either map to existing directories in \c ExternalFS or list; /// their contents in the form of other virtual directories and/or files.; ///; /// The basic structure of the parsed file is:; /// \verbatim; /// {; /// 'version': <version number>,; /// <optional configuration>; /// 'roots': [; /// <directory entries>; /// ]; /// }; /// \endverbatim; ///; /// The roots may be absolute or relative. If relative they will be made; /// absolute against either current working directory or the directory where; /// the Overlay YAML file is located, depending on the 'root-relative'; /// configuration.; ///; /// All configuration options are optional.; /// 'case-sensitive': <boolean, default=(true for Posix, false for Windows)>; /// 'use-external-names': <boolean, default=true>; /// 'root-relative': <string, one of 'cwd' or 'overlay-dir', default='cwd'>; /// 'overlay-relative': <boolean, default=false>; /// 'fallthrough': <boolean, default=true, deprecated - use 'redirecting-with'; /// instead>; /// 'redirecting-with': <string, one of 'fallthrough', 'fallback', or; /// 'redirect-only', default='fallthrough'>; ///; /// To clarify, 'root-relative' option will prepend the current working; /// directory, or the overlay directory to the 'roots->name' field only if; /// 'roots->name' is a relative path. On the other hand, when 'overlay-relative'; /// is set to 'true', external paths will always be prepended with the overlay; /// directory, even if external paths are not relative paths. The; /// 'root-relative' option has no interaction with the 'overlay-relative'; /// option.; ///; /// Virtual directories that list their contents are represented as; /// \verbatim; /// {; /// 'type': 'directory',; /// 'name': <string>,; /// 'contents': [ <file or directory entr",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:841,Deployability,configurat,configuration,841,"/// A virtual file system parsed from a YAML file.; ///; /// Currently, this class allows creating virtual files and directories. Virtual; /// files map to existing external files in \c ExternalFS, and virtual; /// directories may either map to existing directories in \c ExternalFS or list; /// their contents in the form of other virtual directories and/or files.; ///; /// The basic structure of the parsed file is:; /// \verbatim; /// {; /// 'version': <version number>,; /// <optional configuration>; /// 'roots': [; /// <directory entries>; /// ]; /// }; /// \endverbatim; ///; /// The roots may be absolute or relative. If relative they will be made; /// absolute against either current working directory or the directory where; /// the Overlay YAML file is located, depending on the 'root-relative'; /// configuration.; ///; /// All configuration options are optional.; /// 'case-sensitive': <boolean, default=(true for Posix, false for Windows)>; /// 'use-external-names': <boolean, default=true>; /// 'root-relative': <string, one of 'cwd' or 'overlay-dir', default='cwd'>; /// 'overlay-relative': <boolean, default=false>; /// 'fallthrough': <boolean, default=true, deprecated - use 'redirecting-with'; /// instead>; /// 'redirecting-with': <string, one of 'fallthrough', 'fallback', or; /// 'redirect-only', default='fallthrough'>; ///; /// To clarify, 'root-relative' option will prepend the current working; /// directory, or the overlay directory to the 'roots->name' field only if; /// 'roots->name' is a relative path. On the other hand, when 'overlay-relative'; /// is set to 'true', external paths will always be prepended with the overlay; /// directory, even if external paths are not relative paths. The; /// 'root-relative' option has no interaction with the 'overlay-relative'; /// option.; ///; /// Virtual directories that list their contents are represented as; /// \verbatim; /// {; /// 'type': 'directory',; /// 'name': <string>,; /// 'contents': [ <file or directory entr",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:774,Integrability,depend,depending,774,"/// A virtual file system parsed from a YAML file.; ///; /// Currently, this class allows creating virtual files and directories. Virtual; /// files map to existing external files in \c ExternalFS, and virtual; /// directories may either map to existing directories in \c ExternalFS or list; /// their contents in the form of other virtual directories and/or files.; ///; /// The basic structure of the parsed file is:; /// \verbatim; /// {; /// 'version': <version number>,; /// <optional configuration>; /// 'roots': [; /// <directory entries>; /// ]; /// }; /// \endverbatim; ///; /// The roots may be absolute or relative. If relative they will be made; /// absolute against either current working directory or the directory where; /// the Overlay YAML file is located, depending on the 'root-relative'; /// configuration.; ///; /// All configuration options are optional.; /// 'case-sensitive': <boolean, default=(true for Posix, false for Windows)>; /// 'use-external-names': <boolean, default=true>; /// 'root-relative': <string, one of 'cwd' or 'overlay-dir', default='cwd'>; /// 'overlay-relative': <boolean, default=false>; /// 'fallthrough': <boolean, default=true, deprecated - use 'redirecting-with'; /// instead>; /// 'redirecting-with': <string, one of 'fallthrough', 'fallback', or; /// 'redirect-only', default='fallthrough'>; ///; /// To clarify, 'root-relative' option will prepend the current working; /// directory, or the overlay directory to the 'roots->name' field only if; /// 'roots->name' is a relative path. On the other hand, when 'overlay-relative'; /// is set to 'true', external paths will always be prepended with the overlay; /// directory, even if external paths are not relative paths. The; /// 'root-relative' option has no interaction with the 'overlay-relative'; /// option.; ///; /// Virtual directories that list their contents are represented as; /// \verbatim; /// {; /// 'type': 'directory',; /// 'name': <string>,; /// 'contents': [ <file or directory entr",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:490,Modifiability,config,configuration,490,"/// A virtual file system parsed from a YAML file.; ///; /// Currently, this class allows creating virtual files and directories. Virtual; /// files map to existing external files in \c ExternalFS, and virtual; /// directories may either map to existing directories in \c ExternalFS or list; /// their contents in the form of other virtual directories and/or files.; ///; /// The basic structure of the parsed file is:; /// \verbatim; /// {; /// 'version': <version number>,; /// <optional configuration>; /// 'roots': [; /// <directory entries>; /// ]; /// }; /// \endverbatim; ///; /// The roots may be absolute or relative. If relative they will be made; /// absolute against either current working directory or the directory where; /// the Overlay YAML file is located, depending on the 'root-relative'; /// configuration.; ///; /// All configuration options are optional.; /// 'case-sensitive': <boolean, default=(true for Posix, false for Windows)>; /// 'use-external-names': <boolean, default=true>; /// 'root-relative': <string, one of 'cwd' or 'overlay-dir', default='cwd'>; /// 'overlay-relative': <boolean, default=false>; /// 'fallthrough': <boolean, default=true, deprecated - use 'redirecting-with'; /// instead>; /// 'redirecting-with': <string, one of 'fallthrough', 'fallback', or; /// 'redirect-only', default='fallthrough'>; ///; /// To clarify, 'root-relative' option will prepend the current working; /// directory, or the overlay directory to the 'roots->name' field only if; /// 'roots->name' is a relative path. On the other hand, when 'overlay-relative'; /// is set to 'true', external paths will always be prepended with the overlay; /// directory, even if external paths are not relative paths. The; /// 'root-relative' option has no interaction with the 'overlay-relative'; /// option.; ///; /// Virtual directories that list their contents are represented as; /// \verbatim; /// {; /// 'type': 'directory',; /// 'name': <string>,; /// 'contents': [ <file or directory entr",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:812,Modifiability,config,configuration,812,"/// A virtual file system parsed from a YAML file.; ///; /// Currently, this class allows creating virtual files and directories. Virtual; /// files map to existing external files in \c ExternalFS, and virtual; /// directories may either map to existing directories in \c ExternalFS or list; /// their contents in the form of other virtual directories and/or files.; ///; /// The basic structure of the parsed file is:; /// \verbatim; /// {; /// 'version': <version number>,; /// <optional configuration>; /// 'roots': [; /// <directory entries>; /// ]; /// }; /// \endverbatim; ///; /// The roots may be absolute or relative. If relative they will be made; /// absolute against either current working directory or the directory where; /// the Overlay YAML file is located, depending on the 'root-relative'; /// configuration.; ///; /// All configuration options are optional.; /// 'case-sensitive': <boolean, default=(true for Posix, false for Windows)>; /// 'use-external-names': <boolean, default=true>; /// 'root-relative': <string, one of 'cwd' or 'overlay-dir', default='cwd'>; /// 'overlay-relative': <boolean, default=false>; /// 'fallthrough': <boolean, default=true, deprecated - use 'redirecting-with'; /// instead>; /// 'redirecting-with': <string, one of 'fallthrough', 'fallback', or; /// 'redirect-only', default='fallthrough'>; ///; /// To clarify, 'root-relative' option will prepend the current working; /// directory, or the overlay directory to the 'roots->name' field only if; /// 'roots->name' is a relative path. On the other hand, when 'overlay-relative'; /// is set to 'true', external paths will always be prepended with the overlay; /// directory, even if external paths are not relative paths. The; /// 'root-relative' option has no interaction with the 'overlay-relative'; /// option.; ///; /// Virtual directories that list their contents are represented as; /// \verbatim; /// {; /// 'type': 'directory',; /// 'name': <string>,; /// 'contents': [ <file or directory entr",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:841,Modifiability,config,configuration,841,"/// A virtual file system parsed from a YAML file.; ///; /// Currently, this class allows creating virtual files and directories. Virtual; /// files map to existing external files in \c ExternalFS, and virtual; /// directories may either map to existing directories in \c ExternalFS or list; /// their contents in the form of other virtual directories and/or files.; ///; /// The basic structure of the parsed file is:; /// \verbatim; /// {; /// 'version': <version number>,; /// <optional configuration>; /// 'roots': [; /// <directory entries>; /// ]; /// }; /// \endverbatim; ///; /// The roots may be absolute or relative. If relative they will be made; /// absolute against either current working directory or the directory where; /// the Overlay YAML file is located, depending on the 'root-relative'; /// configuration.; ///; /// All configuration options are optional.; /// 'case-sensitive': <boolean, default=(true for Posix, false for Windows)>; /// 'use-external-names': <boolean, default=true>; /// 'root-relative': <string, one of 'cwd' or 'overlay-dir', default='cwd'>; /// 'overlay-relative': <boolean, default=false>; /// 'fallthrough': <boolean, default=true, deprecated - use 'redirecting-with'; /// instead>; /// 'redirecting-with': <string, one of 'fallthrough', 'fallback', or; /// 'redirect-only', default='fallthrough'>; ///; /// To clarify, 'root-relative' option will prepend the current working; /// directory, or the overlay directory to the 'roots->name' field only if; /// 'roots->name' is a relative path. On the other hand, when 'overlay-relative'; /// is set to 'true', external paths will always be prepended with the overlay; /// directory, even if external paths are not relative paths. The; /// 'root-relative' option has no interaction with the 'overlay-relative'; /// option.; ///; /// Virtual directories that list their contents are represented as; /// \verbatim; /// {; /// 'type': 'directory',; /// 'name': <string>,; /// 'contents': [ <file or directory entr",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:2701,Modifiability,inherit,inherit,2701,"/// is set to 'true', external paths will always be prepended with the overlay; /// directory, even if external paths are not relative paths. The; /// 'root-relative' option has no interaction with the 'overlay-relative'; /// option.; ///; /// Virtual directories that list their contents are represented as; /// \verbatim; /// {; /// 'type': 'directory',; /// 'name': <string>,; /// 'contents': [ <file or directory entries> ]; /// }; /// \endverbatim; ///; /// The default attributes for such virtual directories are:; /// \verbatim; /// MTime = now() when created; /// Perms = 0777; /// User = Group = 0; /// Size = 0; /// UniqueID = unspecified unique value; /// \endverbatim; ///; /// When a path prefix matches such a directory, the next component in the path; /// is matched against the entries in the 'contents' array.; ///; /// Re-mapped directories, on the other hand, are represented as; /// /// \verbatim; /// {; /// 'type': 'directory-remap',; /// 'name': <string>,; /// 'use-external-name': <boolean>, # Optional; /// 'external-contents': <path to external directory>; /// }; /// \endverbatim; ///; /// and inherit their attributes from the external directory. When a path; /// prefix matches such an entry, the unmatched components are appended to the; /// 'external-contents' path, and the resulting path is looked up in the; /// external file system instead.; ///; /// Re-mapped files are represented as; /// \verbatim; /// {; /// 'type': 'file',; /// 'name': <string>,; /// 'use-external-name': <boolean>, # Optional; /// 'external-contents': <path to external file>; /// }; /// \endverbatim; ///; /// Their attributes and file contents are determined by looking up the file at; /// their 'external-contents' path in the external file system.; ///; /// For 'file', 'directory' and 'directory-remap' entries the 'name' field may; /// contain multiple path components (e.g. /path/to/file). However, any; /// directory in such a path that contains more than one child must be uniquely;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:3794,Security,access,accessed,3794,"que value; /// \endverbatim; ///; /// When a path prefix matches such a directory, the next component in the path; /// is matched against the entries in the 'contents' array.; ///; /// Re-mapped directories, on the other hand, are represented as; /// /// \verbatim; /// {; /// 'type': 'directory-remap',; /// 'name': <string>,; /// 'use-external-name': <boolean>, # Optional; /// 'external-contents': <path to external directory>; /// }; /// \endverbatim; ///; /// and inherit their attributes from the external directory. When a path; /// prefix matches such an entry, the unmatched components are appended to the; /// 'external-contents' path, and the resulting path is looked up in the; /// external file system instead.; ///; /// Re-mapped files are represented as; /// \verbatim; /// {; /// 'type': 'file',; /// 'name': <string>,; /// 'use-external-name': <boolean>, # Optional; /// 'external-contents': <path to external file>; /// }; /// \endverbatim; ///; /// Their attributes and file contents are determined by looking up the file at; /// their 'external-contents' path in the external file system.; ///; /// For 'file', 'directory' and 'directory-remap' entries the 'name' field may; /// contain multiple path components (e.g. /path/to/file). However, any; /// directory in such a path that contains more than one child must be uniquely; /// represented by a 'directory' entry.; ///; /// When the 'use-external-name' field is set, calls to \a vfs::File::status(); /// give the external (remapped) filesystem name instead of the name the file; /// was accessed by. This is an intentional leak through the \a; /// RedirectingFileSystem abstraction layer. It enables clients to discover; /// (and use) the external file location when communicating with users or tools; /// that don't use the same VFS overlay.; ///; /// FIXME: 'use-external-name' causes behaviour that's inconsistent with how; /// ""real"" filesystems behave. Maybe there should be a separate channel for; /// this information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:31,Performance,perform,perform,31,/// The type of redirection to perform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:177,Performance,perform,perform,177,"/// Canonicalize path by removing ""."", "".."", ""./"", components. This is; /// a VFS request, do not bother about symlinks in the path components; /// but canonicalize in order to perform the correct entry search.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:28,Availability,error,error,28,"/// Get the File status, or error, from the underlying external file system.; /// This returns the status with the originally requested name, while looking; /// up the entry using the canonical path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:10,Deployability,Configurat,Configuration,10,"/// @name Configuration; /// @{; /// Whether to perform case-sensitive comparisons.; ///; /// Currently, case-insensitive matching only works correctly with ASCII.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:10,Modifiability,Config,Configuration,10,"/// @name Configuration; /// @{; /// Whether to perform case-sensitive comparisons.; ///; /// Currently, case-insensitive matching only works correctly with ASCII.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:48,Performance,perform,perform,48,"/// @name Configuration; /// @{; /// Whether to perform case-sensitive comparisons.; ///; /// Currently, case-insensitive matching only works correctly with ASCII.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:30,Performance,perform,perform,30,"/// Determines the lookups to perform, as well as their order. See; /// \c RedirectKind for details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:117,Integrability,depend,dependency,117,"/// Collect all pairs of <virtual path, real path> entries from the; /// \p YAMLFilePath. This is used by the module dependency collector to forward; /// the entries into the reproducer output VFS YAML file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Watchdog.h:124,Availability,Failure,Failure,124,/// This class provides an abstraction for a timeout around an operation; /// that must complete in a given amount of time. Failure to complete before; /// the timeout is an unrecoverable situation and no mechanisms to attempt; /// to handle it are provided.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Watchdog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Watchdog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Watchdog.h:45,Safety,timeout,timeout,45,/// This class provides an abstraction for a timeout around an operation; /// that must complete in a given amount of time. Failure to complete before; /// the timeout is an unrecoverable situation and no mechanisms to attempt; /// to handle it are provided.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Watchdog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Watchdog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Watchdog.h:160,Safety,timeout,timeout,160,/// This class provides an abstraction for a timeout around an operation; /// that must complete in a given amount of time. Failure to complete before; /// the timeout is an unrecoverable situation and no mechanisms to attempt; /// to handle it are provided.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Watchdog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Watchdog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Win64EH.h:30,Integrability,depend,depends,30,// The data after unwindCodes depends on flags.; // If UNW_ExceptionHandler or UNW_TerminateHandler is set then follows; // the address of the language-specific exception handler.; // If UNW_ChainInfo is set then follows a RuntimeFunction which defines; // the chained unwind info.; // For more information please see MSDN at:; // http://msdn.microsoft.com/en-us/library/ddssxxy8.aspx; /// Return pointer to language specific data part of UnwindInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Win64EH.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Win64EH.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WindowsError.h:53,Availability,error,errors,53,"//===-- WindowsError.h - Support for mapping windows errors to posix-------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/WindowsError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WindowsError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h:37,Availability,error,error,37,"/// Convenience method for printing ""error: "" to stderr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h:37,Availability,error,error,37,"/// Convenience method for printing ""error: "" to the given stream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h:35,Availability,Error,Error,35,"/// Implement default handling for Error.; /// Print ""error: "" to stderr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h:54,Availability,error,error,54,"/// Implement default handling for Error.; /// Print ""error: "" to stderr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h:36,Safety,detect,detection,36,/// Retrieve the default color auto detection function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h:27,Safety,detect,detection,27,/// Change the global auto detection function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/WithColor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/X86DisassemblerDecoderCommon.h:183,Usability,simpl,simply,183,"// Attributes of an instruction that must be known before the opcode can be; // processed correctly. Most of these indicate the presence of particular; // prefixes, but ATTR_64BIT is simply an attribute of the decoding context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/X86DisassemblerDecoderCommon.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/X86DisassemblerDecoderCommon.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/X86DisassemblerDecoderCommon.h:139,Energy Efficiency,reduce,reduced,139,"// Combinations of the above attributes that are relevant to instruction; // decode. Although other combinations are possible, they can be reduced to; // these without affecting the ultimately decoded instruction.; // Class name Rank Rationale for rank assignment",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/X86DisassemblerDecoderCommon.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/X86DisassemblerDecoderCommon.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/X86FoldTablesUtils.h:34,Performance,load,load,34,// Minimum alignment required for load/store.; // Used for RegOp->MemOp conversion. Encoded as Log2(Align); // (stored in bits 9 - 11),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/X86FoldTablesUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/X86FoldTablesUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h:1241,Integrability,CONTRACT,CONTRACT,1241,"/*; xxHash - Extremely Fast Hash algorithm; Header File; Copyright (C) 2012-2016, Yann Collet. BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php). Redistribution and use in source and binary forms, with or without; modification, are permitted provided that the following conditions are; met:. * Redistributions of source code must retain the above copyright; notice, this list of conditions and the following disclaimer.; * Redistributions in binary form must reproduce the above; copyright notice, this list of conditions and the following disclaimer; in the documentation and/or other materials provided with the; distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. You can contact the author at :; - xxHash source repository : https://github.com/Cyan4973/xxHash; */; /* based on revision d2df04efcbef7d7f6886d345861e5dfda4edacc1 Removed; * everything but a simple interface for computing XXh64. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h:1617,Integrability,interface,interface,1617,"/*; xxHash - Extremely Fast Hash algorithm; Header File; Copyright (C) 2012-2016, Yann Collet. BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php). Redistribution and use in source and binary forms, with or without; modification, are permitted provided that the following conditions are; met:. * Redistributions of source code must retain the above copyright; notice, this list of conditions and the following disclaimer.; * Redistributions in binary form must reproduce the above; copyright notice, this list of conditions and the following disclaimer; in the documentation and/or other materials provided with the; distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. You can contact the author at :; - xxHash source repository : https://github.com/Cyan4973/xxHash; */; /* based on revision d2df04efcbef7d7f6886d345861e5dfda4edacc1 Removed; * everything but a simple interface for computing XXh64. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h:28,Security,Hash,Hash,28,"/*; xxHash - Extremely Fast Hash algorithm; Header File; Copyright (C) 2012-2016, Yann Collet. BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php). Redistribution and use in source and binary forms, with or without; modification, are permitted provided that the following conditions are; met:. * Redistributions of source code must retain the above copyright; notice, this list of conditions and the following disclaimer.; * Redistributions in binary form must reproduce the above; copyright notice, this list of conditions and the following disclaimer; in the documentation and/or other materials provided with the; distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. You can contact the author at :; - xxHash source repository : https://github.com/Cyan4973/xxHash; */; /* based on revision d2df04efcbef7d7f6886d345861e5dfda4edacc1 Removed; * everything but a simple interface for computing XXh64. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h:1610,Usability,simpl,simple,1610,"/*; xxHash - Extremely Fast Hash algorithm; Header File; Copyright (C) 2012-2016, Yann Collet. BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php). Redistribution and use in source and binary forms, with or without; modification, are permitted provided that the following conditions are; met:. * Redistributions of source code must retain the above copyright; notice, this list of conditions and the following disclaimer.; * Redistributions in binary form must reproduce the above; copyright notice, this list of conditions and the following disclaimer; in the documentation and/or other materials provided with the; distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. You can contact the author at :; - xxHash source repository : https://github.com/Cyan4973/xxHash; */; /* based on revision d2df04efcbef7d7f6886d345861e5dfda4edacc1 Removed; * everything but a simple interface for computing XXh64. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/xxhash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h:22,Usability,Simpl,Simple,22,"//===- YAMLParser.h - Simple YAML parser ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a YAML 1.2 parser.; //; // See http://www.yaml.org/spec/1.2/spec.html for the full standard.; //; // This currently does not implement the following:; // * Tag resolution.; // * UTF-16.; // * BOMs anywhere other than the first Unicode scalar value in the file.; //; // The most important class here is Stream. This represents a YAML stream with; // 0, 1, or many documents.; //; // SourceMgr sm;; // StringRef input = getInput();; // yaml::Stream stream(input, sm);; //; // for (yaml::document_iterator di = stream.begin(), de = stream.end();; // di != de; ++di) {; // yaml::Node *n = di->getRoot();; // if (n) {; // // Do something with n...; // } else; // break;; // }; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h:81,Availability,error,error,81,"/// Dump all the tokens in this stream to OS.; /// \returns true if there was an error, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h:144,Availability,error,error,144,"/// Scans all tokens in input without outputting anything. This is used; /// for benchmarking the tokenizer.; /// \returns true if there was an error, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h:81,Testability,benchmark,benchmarking,81,"/// Scans all tokens in input without outputting anything. This is used; /// for benchmarking the tokenizer.; /// \returns true if there was an error, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h:12,Safety,safe,safe,12,// It's not safe to copy YAML nodes; the document is streamed and the position; // is part of the state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h:70,Performance,perform,perform,70,/// Get the tag as it was written in the document. This does not; /// perform tag resolution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h:49,Performance,perform,performs,49,/// Get the verbatium tag for a given Node. This performs tag resoluton; /// and substitution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h:12,Energy Efficiency,allocate,allocate,12,/// Used to allocate nodes to. All are destroyed without calling their; /// destructor when the document is destroyed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h:31,Availability,error,error,31,/// Consume the next token and error if it is not \a TK.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:112,Security,validat,validate,112,"// Must provide:; // static void mapping(IO &io, T &fields);; // Optionally may provide:; // static std::string validate(IO &io, T &fields);; // static void enumInput(IO &io, T &value);; //; // The optional flow flag will cause generated YAML to use a flow mapping; // (e.g. { a: 0, b: 1 }):; // static const bool flow = true;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:126,Security,validat,validate,126,"// Must provide:; // static void mapping(IO &io, T &fields, Context &Ctx);; // Optionally may provide:; // static std::string validate(IO &io, T &fields, Context &Ctx);; //; // The optional flow flag will cause generated YAML to use a flow mapping; // (e.g. { a: 0, b: 1 }):; // static const bool flow = true;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:408,Energy Efficiency,green,green,408,"/// This class should be specialized by any integral type that converts; /// to/from a YAML scalar where there is a one-to-one mapping between; /// in-memory values and a string in YAML. For example:; ///; /// struct ScalarEnumerationTraits<Colors> {; /// static void enumeration(IO &io, Colors &value) {; /// io.enumCase(value, ""red"", cRed);; /// io.enumCase(value, ""blue"", cBlue);; /// io.enumCase(value, ""green"", cGreen);; /// }; /// };",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:174,Usability,simpl,simple-quoting,174,"/// Describe which type of quotes should be used when quoting is necessary.; /// Some non-printable characters need to be double-quoted, while some others; /// are fine with simple-quoting, and some don't need any quoting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:481,Availability,error,error,481,"/// This class should be specialized by type that requires custom conversion; /// to/from a yaml scalar. For example:; ///; /// template<>; /// struct ScalarTraits<MyType> {; /// static void output(const MyType &val, void*, llvm::raw_ostream &out) {; /// // stream out custom formatting; /// out << llvm::format(""%x"", val);; /// }; /// static StringRef input(StringRef scalar, void*, MyType &value) {; /// // parse scalar and set `value`; /// // return empty string on success, or error string; /// return StringRef();; /// }; /// static QuotingType mustQuote(StringRef) { return QuotingType::Single; }; /// };",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:240,Availability,error,error,240,"// Must provide:; //; // Function to write the value as a string:; // static void output(const T &value, void *ctxt, llvm::raw_ostream &out);; //; // Function to convert a string to a value. Returns the empty; // StringRef on success or an error string if string is malformed:; // static StringRef input(StringRef scalar, void *ctxt, T &value);; //; // Function to determine if the value should be quoted.; // static QuotingType mustQuote(StringRef);",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:490,Availability,error,error,490,"/// This class should be specialized by type that requires custom conversion; /// to/from a YAML literal block scalar. For example:; ///; /// template <>; /// struct BlockScalarTraits<MyType> {; /// static void output(const MyType &Value, void*, llvm::raw_ostream &Out); /// {; /// // stream out custom formatting; /// Out << Value;; /// }; /// static StringRef input(StringRef Scalar, void*, MyType &Value) {; /// // parse scalar and set `value`; /// // return empty string on success, or error string; /// return StringRef();; /// }; /// };",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:239,Availability,error,error,239,"// Must provide:; //; // Function to write the value as a string:; // static void output(const T &Value, void *ctx, llvm::raw_ostream &Out);; //; // Function to convert a string to a value. Returns the empty; // StringRef on success or an error string if string is malformed:; // static StringRef input(StringRef Scalar, void *ctxt, T &Value);; //; // Optional:; // static StringRef inputTag(T &Val, std::string Tag); // static void outputTag(const T &Val, raw_ostream &Out)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:577,Availability,error,error,577,"/// This class should be specialized by type that requires custom conversion; /// to/from a YAML scalar with optional tags. For example:; ///; /// template <>; /// struct TaggedScalarTraits<MyType> {; /// static void output(const MyType &Value, void*, llvm::raw_ostream; /// &ScalarOut, llvm::raw_ostream &TagOut); /// {; /// // stream out custom formatting including optional Tag; /// Out << Value;; /// }; /// static StringRef input(StringRef Scalar, StringRef Tag, void*, MyType; /// &Value) {; /// // parse scalar and set `value`; /// // return empty string on success, or error string; /// return StringRef();; /// }; /// static QuotingType mustQuote(const MyType &Value, StringRef) {; /// return QuotingType::Single;; /// }; /// };",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:283,Availability,error,error,283,"// Must provide:; //; // Function to write the value and tag as strings:; // static void output(const T &Value, void *ctx, llvm::raw_ostream &ScalarOut,; // llvm::raw_ostream &TagOut);; //; // Function to convert a string to a value. Returns the empty; // StringRef on success or an error string if string is malformed:; // static StringRef input(StringRef Scalar, StringRef Tag, void *ctxt, T; // &Value);; //; // Function to determine if the value should be quoted.; // static QuotingType mustQuote(const T &Value, StringRef Scalar);",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:226,Modifiability,Polymorphi,PolymorphicTraits,226,"/// This class should be specialized by any type that can be represented as; /// a scalar, map, or sequence, decided dynamically. For example:; ///; /// typedef std::unique_ptr<MyBase> MyPoly;; ///; /// template<>; /// struct PolymorphicTraits<MyPoly> {; /// static NodeKind getKind(const MyPoly &poly) {; /// return poly->getKind();; /// }; /// static MyScalar& getAsScalar(MyPoly &poly) {; /// if (!poly || !isa<MyScalar>(poly)); /// poly.reset(new MyScalar());; /// return *cast<MyScalar>(poly.get());; /// }; /// // ...; /// };",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if ScalarEnumerationTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if ScalarBitSetTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if ScalarTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if BlockScalarTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if TaggedScalarTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if MappingContextTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if MappingTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:36,Security,validat,validate,36,// Test if MappingContextTraits<T>::validate() is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if MappingContextTraits<T>::validate() is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:29,Security,validat,validate,29,// Test if MappingTraits<T>::validate() is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if MappingTraits<T>::validate() is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if MappingContextTraits<T>::enumInput() is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if MappingTraits<T>::enumInput() is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if SequenceTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if CustomMappingTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:37,Availability,error,error,37,// has_FlowTraits<int> will cause an error with some compilers because; // it subclasses int. Using this wrapper only instantiates the; // real has_FlowTraits only if the template type is a class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:105,Integrability,wrap,wrapper,105,// has_FlowTraits<int> will cause an error with some compilers because; // it subclasses int. Using this wrapper only instantiates the; // real has_FlowTraits only if the template type is a class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:59,Testability,test,tests,59,"// Some older gcc compilers don't support straight forward tests; // for members, so test for ambiguity cause by the base and derived; // classes both defining the member.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:85,Testability,test,test,85,"// Some older gcc compilers don't support straight forward tests; // for members, so test for ambiguity cause by the base and derived; // classes both defining the member.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if SequenceTraits<T> is defined on type T,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Testability,Test,Test,3,// Test if DocumentListTraits<T> is defined on type T,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:78,Safety,safe,safe,78,// Make S.front() and S.drop_front().front() (if S.front() is [+-]) calls; // safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:46,Testability,test,tests,46,// FIXME: using parseBool is causing multiple tests to fail.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:15,Safety,safe,safe,15,// Alphanum is safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Safety,Safe,Safe,3,// Safe scalar characters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:276,Integrability,depend,depending,276,"// Forward slash is allowed to be unquoted, but we quote it anyway. We have; // many tests that use FileCheck against YAML output, and this output often; // contains paths. If we quote backslashes but not forward slashes then; // paths will come out either quoted or unquoted depending on which platform; // the test is run on, making FileCheck comparisons difficult.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:85,Testability,test,tests,85,"// Forward slash is allowed to be unquoted, but we quote it anyway. We have; // many tests that use FileCheck against YAML output, and this output often; // contains paths. If we quote backslashes but not forward slashes then; // paths will come out either quoted or unquoted depending on which platform; // the test is run on, making FileCheck comparisons difficult.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:312,Testability,test,test,312,"// Forward slash is allowed to be unquoted, but we quote it anyway. We have; // many tests that use FileCheck against YAML output, and this output often; // contains paths. If we quote backslashes but not forward slashes then; // paths will come out either quoted or unquoted depending on which platform; // the test is run on, making FileCheck comparisons difficult.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:24,Safety,safe,safe,24,"// The character is not safe, at least simple quoting needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:39,Usability,simpl,simple,39,"// The character is not safe, at least simple quoting needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:245,Integrability,wrap,wraps,245,"///; /// The Input class is used to parse a yaml document into in-memory structs; /// and vectors.; ///; /// It works by using YAMLParser to do a syntax parse of the entire yaml; /// document, then the Input class builds a graph of HNodes which wraps; /// each yaml Node. The extra layer is buffering. The low level yaml; /// parser only lets you look at each node once. The buffering layer lets; /// you search and interate multiple times. This is necessary because; /// the mapRequired() method calls may not be in the same order; /// as the keys in the document.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:138,Availability,error,error,138,// Construct a yaml Input object from a StringRef and optional; // user-data. The DiagHandler can be specified to provide; // alternative error reporting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:44,Availability,error,error,44,// Check if there was an syntax or semantic error during parsing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:4,Deployability,Release,Release,4,/// Release memory used by HNodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:62,Modifiability,polymorphi,polymorphic,62,// Define non-member operator>> so that Input can stream in a polymorphic type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:18,Availability,error,error,18,// Provide better error message about types missing a trait specialization,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:24,Integrability,message,message,24,// Provide better error message about types missing a trait specialization,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:64,Modifiability,polymorphi,polymorphic,64,// Define non-member operator<< so that Output can stream out a polymorphic; // type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:18,Availability,error,error,18,// Provide better error message about types missing a trait specialization,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:24,Integrability,message,message,24,// Provide better error message about types missing a trait specialization,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Usability,Simpl,Simple,3,// Simple helper to check an expression can be used as a bool-valued template; // argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h:528,Integrability,wrap,wraps,528,"//===- WindowsSupport.h - Common Windows Include File -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines things specific to Windows implementations. In addition to; // providing some helpers for working with win32 APIs, this header wraps; // <windows.h> with some portability macros. Always include WindowsSupport.h; // instead of including <windows.h> directly.; //; //===----------------------------------------------------------------------===//; //===----------------------------------------------------------------------===//; //=== WARNING: Implementation here must contain only generic Win32 code that; //=== is guaranteed to work on *all* Win32 variants.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h:560,Modifiability,portab,portability,560,"//===- WindowsSupport.h - Common Windows Include File -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines things specific to Windows implementations. In addition to; // providing some helpers for working with win32 APIs, this header wraps; // <windows.h> with some portability macros. Always include WindowsSupport.h; // instead of including <windows.h> directly.; //; //===----------------------------------------------------------------------===//; //===----------------------------------------------------------------------===//; //=== WARNING: Implementation here must contain only generic Win32 code that; //=== is guaranteed to work on *all* Win32 variants.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h:20,Deployability,configurat,configuration,20,// Get build system configuration settings,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h:20,Modifiability,config,configuration,20,// Get build system configuration settings,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h:138,Availability,avail,available,138,"/// Returns the Windows version as Major.Minor.0.BuildNumber. Uses; /// RtlGetVersion or GetVersionEx under the hood depending on what is available.; /// GetVersionEx is deprecated, but this API exposes the build number which can; /// be useful for working around certain kernel bugs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h:117,Integrability,depend,depending,117,"/// Returns the Windows version as Major.Minor.0.BuildNumber. Uses; /// RtlGetVersion or GetVersionEx under the hood depending on what is available.; /// GetVersionEx is deprecated, but this API exposes the build number which can; /// be useful for working around certain kernel bugs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h:195,Security,expose,exposes,195,"/// Returns the Windows version as Major.Minor.0.BuildNumber. Uses; /// RtlGetVersion or GetVersionEx under the hood depending on what is available.; /// GetVersionEx is deprecated, but this API exposes the build number which can; /// be useful for working around certain kernel bugs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h:37,Availability,error,error,37,// Include GetLastError() in a fatal error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h:43,Integrability,message,message,43,// Include GetLastError() in a fatal error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Windows/WindowsSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h:3,Integrability,Wrap,Wrapper,3,// Wrapper class that contains DirectiveLanguage's information defined in; // DirectiveBase.td and provides helper methods for accessing it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h:127,Security,access,accessing,127,// Wrapper class that contains DirectiveLanguage's information defined in; // DirectiveBase.td and provides helper methods for accessing it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h:3,Integrability,Wrap,Wrapper,3,// Wrapper class that contains a Directive's information defined in; // DirectiveBase.td and provides helper methods for accessing it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h:121,Security,access,accessing,121,// Wrapper class that contains a Directive's information defined in; // DirectiveBase.td and provides helper methods for accessing it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h:3,Integrability,Wrap,Wrapper,3,// Wrapper class that contains Clause's information defined in DirectiveBase.td; // and provides helper methods for accessing it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h:116,Security,access,accessing,116,// Wrapper class that contains Clause's information defined in DirectiveBase.td; // and provides helper methods for accessing it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h:3,Integrability,Wrap,Wrapper,3,// Wrapper class that contains VersionedClause's information defined in; // DirectiveBase.td and provides helper methods for accessing it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h:125,Security,access,accessing,125,// Wrapper class that contains VersionedClause's information defined in; // DirectiveBase.td and provides helper methods for accessing it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h:37,Integrability,wrap,wrapped,37,// Return the specific clause record wrapped in the Clause class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/DirectiveEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h:21,Availability,Error,Error,21,"//===- llvm/TableGen/Error.h - tblgen error handling helpers ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains error handling helper routines to pretty-print diagnostic; // messages from tblgen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h:38,Availability,error,error,38,"//===- llvm/TableGen/Error.h - tblgen error handling helpers ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains error handling helper routines to pretty-print diagnostic; // messages from tblgen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h:402,Availability,error,error,402,"//===- llvm/TableGen/Error.h - tblgen error handling helpers ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains error handling helper routines to pretty-print diagnostic; // messages from tblgen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h:424,Integrability,rout,routines,424,"//===- llvm/TableGen/Error.h - tblgen error handling helpers ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains error handling helper routines to pretty-print diagnostic; // messages from tblgen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h:464,Integrability,message,messages,464,"//===- llvm/TableGen/Error.h - tblgen error handling helpers ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains error handling helper routines to pretty-print diagnostic; // messages from tblgen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Main.h:83,Availability,error,error,83,"/// Perform the action using Records, and write output to OS.; /// Returns true on error, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Main.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Main.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Main.h:4,Performance,Perform,Perform,4,"/// Perform the action using Records, and write output to OS.; /// Returns true on error, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Main.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Main.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Parser.h:187,Availability,failure,failure,187,"/// Parse the TableGen file defined within the main buffer of the given; /// SourceMgr. On success, populates the provided RecordKeeper with the parsed; /// records and returns false. On failure, returns true.; ///; /// NOTE: TableGen currently relies on global state within a given parser; /// invocation, so this function is not thread-safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Parser.h:338,Safety,safe,safe,338,"/// Parse the TableGen file defined within the main buffer of the given; /// SourceMgr. On success, populates the provided RecordKeeper with the parsed; /// records and returns false. On failure, returns true.; ///; /// NOTE: TableGen currently relies on global state within a given parser; /// invocation, so this function is not thread-safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:121,Availability,redundant,redundant,121,"/// '[classname]' - Type of record values that have zero or more superclasses.; ///; /// The list of superclasses is non-redundant, i.e. only contains classes that; /// are not the superclass of some other listed class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:121,Safety,redund,redundant,121,"/// '[classname]' - Type of record values that have zero or more superclasses.; ///; /// The list of superclasses is non-redundant, i.e. only contains classes that; /// are not the superclass of some other listed class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:43,Availability,redundant,redundant,43,/// Get the record type with the given non-redundant list of superclasses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:43,Safety,redund,redundant,43,/// Get the record type with the given non-redundant list of superclasses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:118,Modifiability,inherit,inheritance,118,"/// Discriminator enum (for isa<>, dyn_cast<>, et al.); ///; /// This enum is laid out by a preorder traversal of the inheritance; /// hierarchy, and does not contain an entry for abstract classes, as per; /// the recommendation in docs/HowToSetUpLLVMStyleRTTI.rst.; ///; /// We also explicitly include ""first"" and ""last"" values for each; /// interior node of the inheritance tree, to make it easier to read the; /// corresponding classof().; ///; /// We could pack these a bit tighter by not having the IK_FirstXXXInit; /// and IK_LastXXXInit be their own values, but that would degrade; /// readability for really no benefit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:364,Modifiability,inherit,inheritance,364,"/// Discriminator enum (for isa<>, dyn_cast<>, et al.); ///; /// This enum is laid out by a preorder traversal of the inheritance; /// hierarchy, and does not contain an entry for abstract classes, as per; /// the recommendation in docs/HowToSetUpLLVMStyleRTTI.rst.; ///; /// We also explicitly include ""first"" and ""last"" values for each; /// interior node of the inheritance tree, to make it easier to read the; /// corresponding classof().; ///; /// We could pack these a bit tighter by not having the IK_FirstXXXInit; /// and IK_LastXXXInit be their own values, but that would degrade; /// readability for really no benefit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:62,Modifiability,variab,variables,62,"/// This function is used by classes that refer to other; /// variables which may not be defined at the time the expression is formed.; /// If a value is set for the variable later, this method will be called on; /// users of the value to allow the value to propagate out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:166,Modifiability,variab,variable,166,"/// This function is used by classes that refer to other; /// variables which may not be defined at the time the expression is formed.; /// If a value is set for the variable later, this method will be called on; /// users of the value to allow the value to propagate out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:60,Modifiability,variab,variables,60,"/// This method is used by classes that refer to other; /// variables which may not be defined at the time they expression is formed.; /// If a value is set for the variable later, this method will be called on; /// users of the value to allow the value to propagate out.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:165,Modifiability,variab,variable,165,"/// This method is used by classes that refer to other; /// variables which may not be defined at the time they expression is formed.; /// If a value is set for the variable later, this method will be called on; /// users of the value to allow the value to propagate out.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:38,Usability,simpl,simpler,38,"// Fold - If possible, fold this to a simpler init. Return this if not; // possible to fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:38,Usability,simpl,simpler,38,"// Fold - If possible, fold this to a simpler init. Return this if not; // possible to fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:38,Usability,simpl,simpler,38,"// Fold - If possible, fold this to a simpler init. Return this if not; // possible to fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:141,Availability,error,error,141,"/// !cond(condition_1: value1, ... , condition_n: value); /// Selects the first value for which condition is true.; /// Otherwise reports an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:38,Usability,simpl,simpler,38,"// Fold - If possible, fold this to a simpler init. Return this if not; // possible to fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:38,Usability,simpl,simpler,38,"// Fold - If possible, fold this to a simpler init. Return this if not; // possible to fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:38,Usability,simpl,simpler,38,"// Fold - If possible, fold this to a simpler init. Return this if not; // possible to fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:50,Modifiability,variab,variable,50,/// 'Opcode' - Represent a reference to an entire variable object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:60,Modifiability,variab,variables,60,"/// This method is used by classes that refer to other; /// variables which may not be defined at the time they expression is formed.; /// If a value is set for the variable later, this method will be called on; /// users of the value to allow the value to propagate out.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:165,Modifiability,variab,variable,165,"/// This method is used by classes that refer to other; /// variables which may not be defined at the time they expression is formed.; /// If a value is set for the variable later, this method will be called on; /// users of the value to allow the value to propagate out.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:49,Modifiability,variab,variable,49,/// Opcode{0} - Represent access to one bit of a variable or field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:26,Security,access,access,26,/// Opcode{0} - Represent access to one bit of a variable or field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:51,Modifiability,variab,variable,51,/// X.Y - Represent a reference to a subfield of a variable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:16,Security,access,accessing,16,// Field we are accessing,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:27,Modifiability,inherit,inheritance,27,"// All superclasses in the inheritance forest in post-order (yes, it; // must be a forest; diamond-shaped inheritance is not allowed).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:106,Modifiability,inherit,inheritance,106,"// All superclasses in the inheritance forest in post-order (yes, it; // must be a forest; diamond-shaped inheritance is not allowed).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:8,Deployability,update,updates,8,// Also updates RecordKeeper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:3,Deployability,Update,Update,3,// Update a class location when encountering a (re-)definition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:162,Availability,error,error,162,"/// If there are any field references that refer to fields that have been; /// filled in, we can propagate the values now.; ///; /// This is a final resolve: any error messages, e.g. due to undefined !cast; /// references, are generated now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:168,Integrability,message,messages,168,"/// If there are any field references that refer to fields that have been; /// filled in, we can propagate the values now.; ///; /// This is a final resolve: any error messages, e.g. due to undefined !cast; /// references, are generated now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:200,Safety,avoid,avoid,200,"/// Apply the resolver to the name of the record as well as to the; /// initializers of all fields of the record except SkipVal.; ///; /// The resolver should not resolve any of the fields itself, to avoid; /// recursion / infinite loops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:26,Modifiability,variab,variables,26,/// Get the map of global variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:50,Modifiability,variab,variable,50,/// Get the \p Init value of the specified global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:100,Usability,clear,cleared,100,"/// Start timing the overall backend. If the backend itself starts a timer,; /// then this timer is cleared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:179,Modifiability,inherit,inherit,179,"//===--------------------------------------------------------------------===//; // High-level helper methods, useful for tablegen backends.; /// Get all the concrete records that inherit from the one specified; /// class. The class must be defined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:38,Modifiability,inherit,inherit,38,/// Get all the concrete records that inherit from all the specified; /// classes. The classes must be defined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:38,Modifiability,inherit,inherit,38,"/// Get all the concrete records that inherit from specified class, if the; /// class is defined. Returns an empty vector if the class is not defined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:182,Integrability,Interface,Interface,182,"//===----------------------------------------------------------------------===//; // Resolvers; //===----------------------------------------------------------------------===//; /// Interface for looking up the initializer for a variable name, used by; /// Init::resolveReferences.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:229,Modifiability,variab,variable,229,"//===----------------------------------------------------------------------===//; // Resolvers; //===----------------------------------------------------------------------===//; /// Interface for looking up the initializer for a variable name, used by; /// Init::resolveReferences.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:41,Modifiability,variab,variable,41,"/// Return the initializer for the given variable name (should normally be a; /// StringInit), or nullptr if the name could not be resolved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:200,Modifiability,variab,variables,200,// Whether bits in a BitsInit should stay unresolved if resolving them would; // result in a ? (UnsetInit). This behavior is used to represent instruction; // encodings by keeping references to unset variables within a record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:90,Availability,Error,Error,90,// Whether this is the final resolve step before adding a record to the; // RecordKeeper. Error reporting during resolve and related constant folding; // should only happen when this is true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:16,Modifiability,variab,variables,16,/// Resolve all variables from a record except for unset variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:57,Modifiability,variab,variables,57,/// Resolve all variables from a record except for unset variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:58,Modifiability,variab,variable,58,"/// Delegate resolving to a sub-resolver, but shadow some variable names.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:63,Modifiability,variab,variable,63,"/// Do not resolve anything, but keep track of whether a given variable was; /// referenced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/SetTheory.h:83,Performance,cache,cache,83,// Map set defs to their fully expanded contents. This serves as a memoization; // cache and it makes it possible to return const references on queries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/SetTheory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/SetTheory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/SetTheory.h:58,Usability,simpl,simply,58,/// addFieldExpander - Add an expander for ClassName that simply evaluates; /// FieldName in the Record to get the set elements. That is all that is; /// needed for a class like:; ///; /// class Set<dag d> {; /// dag Elts = d;; /// }; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/SetTheory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/SetTheory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/StringMatcher.h:79,Usability,simpl,simple,79,"/// Given a list of strings and code to execute when they match, output a; /// simple switch tree to classify the input string.; ///; /// If a match is found, the code in Matches[i].second is executed; control must; /// not exit this code fragment. If nothing matches, execution falls through.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TableGen/StringMatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/StringMatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h:50,Integrability,Wrap,Wrappers,50,"//===- llvm/Target/CodeGenCWrappers.h - CodeGen C Wrappers ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines C bindings wrappers for enums in llvm/Support/CodeGen.h; // that need them. The wrappers are separated to avoid adding an indirect; // dependency on llvm/Config/Targets.def to CodeGen.h.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h:412,Integrability,wrap,wrappers,412,"//===- llvm/Target/CodeGenCWrappers.h - CodeGen C Wrappers ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines C bindings wrappers for enums in llvm/Support/CodeGen.h; // that need them. The wrappers are separated to avoid adding an indirect; // dependency on llvm/Config/Targets.def to CodeGen.h.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h:481,Integrability,wrap,wrappers,481,"//===- llvm/Target/CodeGenCWrappers.h - CodeGen C Wrappers ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines C bindings wrappers for enums in llvm/Support/CodeGen.h; // that need them. The wrappers are separated to avoid adding an indirect; // dependency on llvm/Config/Targets.def to CodeGen.h.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h:536,Integrability,depend,dependency,536,"//===- llvm/Target/CodeGenCWrappers.h - CodeGen C Wrappers ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines C bindings wrappers for enums in llvm/Support/CodeGen.h; // that need them. The wrappers are separated to avoid adding an indirect; // dependency on llvm/Config/Targets.def to CodeGen.h.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h:555,Modifiability,Config,Config,555,"//===- llvm/Target/CodeGenCWrappers.h - CodeGen C Wrappers ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines C bindings wrappers for enums in llvm/Support/CodeGen.h; // that need them. The wrappers are separated to avoid adding an indirect; // dependency on llvm/Config/Targets.def to CodeGen.h.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h:507,Safety,avoid,avoid,507,"//===- llvm/Target/CodeGenCWrappers.h - CodeGen C Wrappers ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines C bindings wrappers for enums in llvm/Support/CodeGen.h; // that need them. The wrappers are separated to avoid adding an indirect; // dependency on llvm/Config/Targets.def to CodeGen.h.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/CodeGenCWrappers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetIntrinsicInfo.h:110,Integrability,Interface,Interface,110,//---------------------------------------------------------------------------; ///; /// TargetIntrinsicInfo - Interface to description of machine instruction set; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetIntrinsicInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetIntrinsicInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:34,Modifiability,variab,variable,34,/// Classify the specified global variable into a set of target independent; /// categories embodied in SectionKind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:160,Availability,avail,available,160,/// This method computes the appropriate section to emit the specified global; /// variable or function definition. This should not be passed external (or; /// available externally) globals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:83,Modifiability,variab,variable,83,/// This method computes the appropriate section to emit the specified global; /// variable or function definition. This should not be passed external (or; /// available externally) globals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:160,Availability,avail,available,160,/// This method computes the appropriate section to emit the specified global; /// variable or function definition. This should not be passed external (or; /// available externally) globals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:83,Modifiability,variab,variable,83,/// This method computes the appropriate section to emit the specified global; /// variable or function definition. This should not be passed external (or; /// available externally) globals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:68,Modifiability,variab,variable,68,/// Return an MCExpr to use for a reference to the specified global variable; /// from exception handling information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:56,Modifiability,variab,variable,56,/// Create a symbol reference to describe the given TLS variable when; /// emitting the address in debug info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:51,Security,access,access,51,"/// Target supports replacing a data ""PC""-relative access to a symbol; /// through another symbol, by accessing the later via a GOT entry instead?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:102,Security,access,accessing,102,"/// Target supports replacing a data ""PC""-relative access to a symbol; /// through another symbol, by accessing the later via a GOT entry instead?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:134,Integrability,interface,interface,134,"/// On targets that support TOC entries, return a section for the entry given; /// the symbol it refers to.; /// TODO: Implement this interface for existing ELF targets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:99,Integrability,interface,interface,99,//===----------------------------------------------------------------------===//; ///; /// Primary interface to the complete machine description for the target; /// machine. All target-specific information should be accessible through this; /// interface.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:245,Integrability,interface,interface,245,//===----------------------------------------------------------------------===//; ///; /// Primary interface to the complete machine description for the target; /// machine. All target-specific information should be accessible through this; /// interface.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:216,Security,access,accessible,216,//===----------------------------------------------------------------------===//; ///; /// Primary interface to the complete machine description for the target; /// machine. All target-specific information should be accessible through this; /// interface.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:309,Performance,cache,cache,309,"/// DataLayout for the target: keep ABI type size and alignment.; ///; /// The DataLayout is created based on the string representation provided; /// during construction. It is kept here only to avoid reparsing the string; /// but should not really be used during compilation, because it has an; /// internal cache that is context specific.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:195,Safety,avoid,avoid,195,"/// DataLayout for the target: keep ABI type size and alignment.; ///; /// The DataLayout is created based on the string representation provided; /// during construction. It is kept here only to avoid reparsing the string; /// but should not really be used during compilation, because it has an; /// internal cache that is context specific.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:127,Modifiability,variab,variable,127,/// Virtual method implemented by subclasses that returns a reference to that; /// target's TargetSubtargetInfo-derived member variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate and return a default initialized instance of the YAML; /// representation for the MachineFunctionInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate and initialize an instance of the YAML representation of the; /// MachineFunctionInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:162,Performance,optimiz,optimizations,162,/// Test if a DataLayout if compatible with the CodeGen for this target.; ///; /// The LLVM Module owns a DataLayout that is used for the target independent; /// optimizations and code generation. This hook provides a target specific; /// check on the validity of this DataLayout.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:4,Testability,Test,Test,4,/// Test if a DataLayout if compatible with the CodeGen for this target.; ///; /// The LLVM Module owns a DataLayout that is used for the target independent; /// optimizations and code generation. This hook provides a target specific; /// check on the validity of this DataLayout.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:32,Availability,avail,available,32,"/// If intrinsic information is available, return it. If not, return null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:68,Modifiability,variab,variable,68,/// Returns the TLS model which should be used for the given global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:16,Performance,optimiz,optimization,16,"/// Returns the optimization level: None, Less, Default, or Aggressive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:18,Performance,optimiz,optimization,18,/// Overrides the optimization level.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:264,Performance,optimiz,optimizer,264,"/// If the specified predicate checks whether a generic pointer falls within; /// a specified address space, return that generic pointer and the address; /// space being queried.; ///; /// Such predicates could be specified in @llvm.assume intrinsics for the; /// optimizer to assume that the given generic pointer always falls within; /// the address space based on that predicate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:40,Deployability,pipeline,pipeline,40,/// Allow the target to modify the pass pipeline.; // TODO: Populate all pass names by using <Target>PassRegistry.def.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:40,Energy Efficiency,schedul,scheduling,40,"/// True if subtarget inserts the final scheduling pass on its own.; ///; /// Branch relaxation, which must happen after block placement, can; /// on some targets (e.g. SystemZ) expose additional post-RA; /// scheduling opportunities.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:209,Energy Efficiency,schedul,scheduling,209,"/// True if subtarget inserts the final scheduling pass on its own.; ///; /// Branch relaxation, which must happen after block placement, can; /// on some targets (e.g. SystemZ) expose additional post-RA; /// scheduling opportunities.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:178,Security,expose,expose,178,"/// True if subtarget inserts the final scheduling pass on its own.; ///; /// Branch relaxation, which must happen after block placement, can; /// on some targets (e.g. SystemZ) expose additional post-RA; /// scheduling opportunities.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:18,Deployability,configurat,configuration,18,/// Create a pass configuration object to be used by addPassToEmitX methods; /// for generating a pipeline of CodeGen passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:98,Deployability,pipeline,pipeline,98,/// Create a pass configuration object to be used by addPassToEmitX methods; /// for generating a pipeline of CodeGen passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:18,Modifiability,config,configuration,18,/// Create a pass configuration object to be used by addPassToEmitX methods; /// for generating a pipeline of CodeGen passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:35,Deployability,pipeline,pipeline,35,/// Adds an AsmPrinter pass to the pipeline that prints assembly or; /// machine code from the MI representation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:189,Energy Efficiency,allocate,allocated,189,"/// True if the target uses physical regs (as nearly all targets do). False; /// for stack machines such as WebAssembly and other virtual-register; /// machines. If true, all vregs must be allocated before PEI. If false, then; /// callee-save register spilling and scavenging are not needed or used. If; /// false, implicitly defined registers will still be assumed to be physical; /// registers, except that variadic defs will be allocated vregs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:431,Energy Efficiency,allocate,allocated,431,"/// True if the target uses physical regs (as nearly all targets do). False; /// for stack machines such as WebAssembly and other virtual-register; /// machines. If true, all vregs must be allocated before PEI. If false, then; /// callee-save register spilling and scavenging are not needed or used. If; /// false, implicitly defined registers will still be assumed to be physical; /// registers, except that variadic defs will be allocated vregs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:146,Availability,error,error,146,"/// Helper method for getting the code model, returning Default if; /// CM does not have a value. The tiny and kernel models will produce; /// an error, so targets that support them or require more complex codemodel; /// selection logic should implement and call their own getEffectiveCodeModel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:231,Testability,log,logic,231,"/// Helper method for getting the code model, returning Default if; /// CM does not have a value. The tiny and kernel models will produce; /// an error, so targets that support them or require more complex codemodel; /// selection logic should implement and call their own getEffectiveCodeModel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:40,Integrability,depend,depending,40,"// Target-specific (either soft or hard depending on triple, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:39,Integrability,depend,depending,39,"// Target-specific (either 4, 5 or gnu depending on triple).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:136,Integrability,interface,interface,136,"/// Identify a debugger for ""tuning"" the debug info.; ///; /// The ""debugger tuning"" concept allows us to present a more intuitive; /// interface that unpacks into different sets of defaults for the various; /// individual feature-flag settings, that suit the preferences of the; /// various debuggers. However, it's worth remembering that debuggers are; /// not the only consumers of debug info, and some variations in DWARF might; /// better be treated as target/platform issues. Fundamentally,; /// o if the feature is useful (or not) to a particular debugger, regardless; /// of the target, that's a tuning decision;; /// o if the feature is useful (or not) on a particular platform, regardless; /// of the debugger, that's a target decision.; /// It's not impossible to see both factors in some specific case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:121,Usability,intuit,intuitive,121,"/// Identify a debugger for ""tuning"" the debug info.; ///; /// The ""debugger tuning"" concept allows us to present a more intuitive; /// interface that unpacks into different sets of defaults for the various; /// individual feature-flag settings, that suit the preferences of the; /// various debuggers. However, it's worth remembering that debuggers are; /// not the only consumers of debug info, and some variations in DWARF might; /// better be treated as target/platform issues. Fundamentally,; /// o if the feature is useful (or not) to a particular debugger, regardless; /// of the target, that's a tuning decision;; /// o if the feature is useful (or not) on a particular platform, regardless; /// of the debugger, that's a target decision.; /// It's not impossible to see both factors in some specific case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:5,Performance,Tune,Tune,5,///< Tune debug info for gdb.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:5,Performance,Tune,Tune,5,///< Tune debug info for lldb.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:5,Performance,Tune,Tune,5,///< Tune debug info for SCE targets (e.g. PS4).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:5,Performance,Tune,Tune,5,///< Tune debug info for dbx.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:11,Safety,abort,abort,11,/// Enable abort calls when global instruction selection fails to lower/select; /// an instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:15,Safety,abort,abort,15,// Disable the abort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:14,Safety,abort,abort,14,// Enable the abort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:46,Availability,failure,failure,46,// Disable the abort but emit a diagnostic on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:15,Safety,abort,abort,15,// Disable the abort but emit a diagnostic on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:81,Deployability,deploy,deployment,81,/// Determine whether to set the bit statically or dynamically based; /// on the deployment target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:82,Performance,optimiz,optimization,82,/// DisableFramePointerElim - This returns true if frame pointer elimination; /// optimization should be disabled for the given machine function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:4,Safety,Unsafe,UnsafeFPMath,4,"/// UnsafeFPMath - This flag is enabled when the; /// -enable-unsafe-fp-math flag is specified on the command line. When; /// this flag is off (the default), the code generator is not allowed to; /// produce results that are ""less precise"" than IEEE allows. This includes; /// use of X86 instructions like FSIN and FCOS instead of libcalls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:62,Safety,unsafe,unsafe-fp-math,62,"/// UnsafeFPMath - This flag is enabled when the; /// -enable-unsafe-fp-math flag is specified on the command line. When; /// this flag is off (the default), the code generator is not allowed to; /// produce results that are ""less precise"" than IEEE allows. This includes; /// use of X86 instructions like FSIN and FCOS instead of libcalls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:152,Performance,optimiz,optimizations,152,/// NoSignedZerosFPMath - This flag is enabled when the; /// -enable-no-signed-zeros-fp-math is specified on the command line. This; /// specifies that optimizations are allowed to treat the sign of a zero; /// argument or result as insignificant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:145,Performance,optimiz,optimizations,145,/// ApproxFuncFPMath - This flag is enabled when the; /// -enable-approx-func-fp-math is specified on the command line. This; /// specifies that optimizations are allowed to substitute math functions; /// with approximate calculations,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:84,Integrability,depend,dependent-rounding-fp-math,84,"/// HonorSignDependentRoundingFPMath - This returns true when the; /// -enable-sign-dependent-rounding-fp-math is specified. If this returns; /// false (the default), the code generator is allowed to assume that the; /// rounding behavior is the default (round-to-zero for all floating point; /// to integer conversions, and round-to-nearest for all other arithmetic; /// truncations). If this is enabled (set to true), the code generator must; /// assume that the rounding mode may dynamically change.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:158,Performance,perform,perform,158,"/// GuaranteedTailCallOpt - This flag is enabled when -tailcallopt is; /// specified on the commandline. When the flag is on, participating targets; /// will perform tail call optimization on all calls which use the fastcc; /// calling convention and which satisfy certain target-independent; /// criteria (being at the end of a function, having the same return type; /// as their parent function, etc.), using an alternate ABI if necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:176,Performance,optimiz,optimization,176,"/// GuaranteedTailCallOpt - This flag is enabled when -tailcallopt is; /// specified on the commandline. When the flag is on, participating targets; /// will perform tail call optimization on all calls which use the fastcc; /// calling convention and which satisfy certain target-independent; /// criteria (being at the end of a function, having the same return type; /// as their parent function, etc.), using an alternate ABI if necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:36,Safety,abort,abort,36,/// EnableGlobalISelAbort - Control abort behaviour when global instruction; /// selection fails to lower/select an instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:16,Deployability,integrat,integrated,16,/// Disable the integrated assembler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:16,Integrability,integrat,integrated,16,/// Disable the integrated assembler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:114,Performance,optimiz,optimized,114,"/// The flag enables call site info production. It is used only for debug; /// info, and it is restricted only to optimized code. This can be used for; /// something else, so that should be controlled in the frontend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:168,Testability,test,testing,168,"/// When set to true, the EnableDebugEntryValues option forces production; /// of debug entry values even if the target does not officially support; /// it. Useful for testing purposes only. This flag should never be checked; /// directly, always use \ref ShouldEmitDebugEntryValues instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:48,Modifiability,variab,variable,48,"// When set to true, use experimental new debug variable location tracking,; // which seeks to follow the values of variables rather than their location,; // post isel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:116,Modifiability,variab,variables,116,"// When set to true, use experimental new debug variable location tracking,; // which seeks to follow the values of variables rather than their location,; // post isel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:50,Integrability,contract,contract,50,"/// AllowFPOpFusion - This flag is set by the -fp-contract=xxx option.; /// This controls the creation of fused FP ops that store intermediate; /// results in higher precision than IEEE allows (E.g. FMAs).; ///; /// Fast mode - allows formation of fused FP ops whenever they're; /// profitable.; /// Standard mode - allow fusion only for 'blessed' FP ops. At present the; /// only blessed op is the fmuladd intrinsic. In the future more blessed ops; /// may be added.; /// Strict mode - allow fusion only if/when it can be proven that the excess; /// precision won't effect the result.; ///; /// Note: This option only controls formation of fused ops by the; /// optimizers. Fused operations that are explicitly specified (e.g. FMA; /// via the llvm.fma.* intrinsic) will always be honored, regardless of; /// the value of this option.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:663,Performance,optimiz,optimizers,663,"/// AllowFPOpFusion - This flag is set by the -fp-contract=xxx option.; /// This controls the creation of fused FP ops that store intermediate; /// results in higher precision than IEEE allows (E.g. FMAs).; ///; /// Fast mode - allows formation of fused FP ops whenever they're; /// profitable.; /// Standard mode - allow fusion only for 'blessed' FP ops. At present the; /// only blessed op is the fmuladd intrinsic. In the future more blessed ops; /// may be added.; /// Strict mode - allow fusion only if/when it can be proven that the excess; /// precision won't effect the result.; ///; /// Note: This option only controls formation of fused ops by the; /// optimizers. Fused operations that are explicitly specified (e.g. FMA; /// via the llvm.fma.* intrinsic) will always be honored, regardless of; /// the value of this option.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:22,Performance,tune,tune,22,/// Which debugger to tune for.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:83,Safety,avoid,avoid,83,// Set of extensions which have been enabled or disabled at any point. Used; // to avoid cluttering the cc1 command-line with lots of unneeded features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:77,Integrability,depend,dependencies,77,"// Base architecture version, which we need to know because some feature; // dependencies change depending on this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:97,Integrability,depend,depending,97,"// Base architecture version, which we need to know because some feature; // dependencies change depending on this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:76,Integrability,depend,depends,76,"// Enable the given architecture extension, and any other extensions it; // depends on. Does not change the base architecture, or follow dependencies; // between features which are only related by required arcitecture versions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:137,Integrability,depend,dependencies,137,"// Enable the given architecture extension, and any other extensions it; // depends on. Does not change the base architecture, or follow dependencies; // between features which are only related by required arcitecture versions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:80,Integrability,depend,depend,80,"// Disable the given architecture extension, and any other extensions which; // depend on it. Does not change the base architecture, or follow; // dependencies between features which are only related by required; // arcitecture versions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:147,Integrability,depend,dependencies,147,"// Disable the given architecture extension, and any other extensions which; // depend on it. Does not change the base architecture, or follow; // dependencies between features which are only related by required; // arcitecture versions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:97,Integrability,depend,dependencies,97,"// Add default extensions for the given CPU. Records the base architecture,; // to later resolve dependencies which depend on it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:116,Integrability,depend,depend,116,"// Add default extensions for the given CPU. Records the base architecture,; // to later resolve dependencies which depend on it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:114,Integrability,depend,dependencies,114,"// Add default extensions for the given architecture version. Records the; // base architecture, to later resolve dependencies which depend on it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:133,Integrability,depend,depend,133,"// Add default extensions for the given architecture version. Records the; // base architecture, to later resolve dependencies which depend on it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:217,Integrability,depend,dependencies,217,"// Add or remove a feature based on a modifier string. The string must be of; // the form ""<name>"" to enable a feature or ""no<name>"" to disable it. This; // will also enable or disable any features as required by the dependencies; // between them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:16,Integrability,depend,dependency,16,"// Represents a dependency between two architecture extensions. Later is the; // feature which was added to the architecture after Earlier, and expands the; // functionality provided by it. If Later is enabled, then Earlier will also be; // enabled. If Earlier is disabled, then Later will also be disabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:57,Integrability,depend,dependency,57,// clang-format off; // Each entry here is a link in the dependency chain starting from the; // extension that was added to the architecture first.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:25,Testability,test,tests,25,// Used by target parser tests,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/ARMTargetParser.h:255,Usability,simpl,simplified,255,"// List of canonical arch names (use getArchSynonym).; // This table also provides the build attribute fields for CPU arch; // and Arch ID, according to the Addenda to the ARM ABI, chapters; // 2.4 and 2.3.5.2 respectively.; // FIXME: SubArch values were simplified to fit into the expectations; // of the triples and are not conforming with their official names.; // Check to see if the expectation should be changed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/ARMTargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/ARMTargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h:47,Safety,detect,detection,47,"//===- llvm/TargetParser/Host.h - Host machine detection -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Methods for querying the nature of the host machine.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h:91,Modifiability,config,configured,91,/// getDefaultTargetTriple() - Return the default target triple the compiler; /// has been configured to produce code for.; ///; /// The target triple is a string in the format of:; /// CPU_TYPE-VENDOR-OPERATING_SYSTEM; /// or; /// CPU_TYPE-VENDOR-KERNEL-OPERATING_SYSTEM,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h:92,Performance,load,loaded,92,"/// getProcessTriple() - Return an appropriate target triple for generating; /// code to be loaded into the current process, e.g. when using the JIT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h:106,Integrability,depend,dependent,106,"/// getHostCPUName - Get the LLVM name for the host CPU. The particular format; /// of the name is target dependent, and suitable for passing as -mcpu to the; /// target which matches the host.; ///; /// \return - The host CPU name, or empty if the CPU could not be determined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h:122,Integrability,depend,dependent,122,"/// getHostCPUFeatures - Get the LLVM names for the host CPU features.; /// The particular format of the names are target dependent, and suitable for; /// passing as -mattr to the target which matches the host.; ///; /// \param Features - A string mapping feature names to either; /// true (if enabled) or false (if disabled). This routine makes no guarantees; /// about exactly which features may appear in this map, except that they are; /// all valid LLVM feature names.; ///; /// \return - True on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h:332,Integrability,rout,routine,332,"/// getHostCPUFeatures - Get the LLVM names for the host CPU features.; /// The particular format of the names are target dependent, and suitable for; /// passing as -mattr to the target which matches the host.; ///; /// \param Features - A string mapping feature names to either; /// true (if enabled) or false (if disabled). This routine makes no guarantees; /// about exactly which features may appear in this map, except that they are; /// all valid LLVM feature names.; ///; /// \return - True on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h:124,Safety,detect,detected,124,"/// This is a function compatible with cl::AddExtraVersionPrinter, which adds; /// info about the current target triple and detected CPU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Host.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h:17,Availability,avail,available,17,// 64-bit ISA is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h:52,Availability,avail,available,52,// Single-precision floating-point instructions are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h:52,Availability,avail,available,52,// Double-precision floating-point instructions are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h:30,Availability,avail,available,30,// Loongson SIMD Extension is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h:39,Availability,avail,available,39,// Loongson Advanced SIMD Extension is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h:44,Availability,avail,available,44,// Loongson Binary Translation Extension is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h:40,Availability,avail,available,40,// Loongson Virtualization Extension is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h:16,Security,access,accesses,16,// Allow memory accesses to be unaligned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/LoongArchTargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/RISCVTargetParser.h:43,Performance,scalab,scalable,43,// We use 64 bits as the known part in the scalable vector types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/RISCVTargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/RISCVTargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h:349,Availability,avail,available,349,"// Target specific information in their own namespaces.; // (ARM/AArch64/X86 are declared in ARM/AArch64/X86TargetParser.h); // These should be generated from TableGen because the information is already; // there, and there is where new information about targets will be added.; // FIXME: To TableGen this we need to make some table generated files available; // even if the back-end is not compiled with LLVM, plus we need to create a new; // back-end to TableGen to create these clean tables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h:19,Availability,avail,available,19,// Wavefront 32 is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h:12,Availability,avail,available,12,// Xnack is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h:15,Availability,avail,available,15,// Sram-ecc is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:52,Deployability,configurat,configuration,52,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:191,Deployability,Configurat,Configuration,191,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:428,Deployability,configurat,configuration,428,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:521,Deployability,configurat,configurations,521,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:601,Deployability,configurat,configuration,601,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:978,Deployability,configurat,configuration,978,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:698,Integrability,wrap,wrapper,698,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:52,Modifiability,config,configuration,52,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:191,Modifiability,Config,Configuration,191,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:428,Modifiability,config,configuration,428,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:521,Modifiability,config,configurations,521,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:601,Modifiability,config,configuration,601,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:941,Modifiability,config,config,941,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:978,Modifiability,config,configuration,978,"/// Triple - Helper class for working with autoconf configuration names. For; /// historical reasons, we also call these 'triples' (they used to contain; /// exactly three fields).; ///; /// Configuration names are strings in the canonical form:; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM; /// or; /// ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT; ///; /// This class is used for clients which want to support arbitrary; /// configuration names, but also want to implement certain special; /// behavior for particular configurations. This class isolates the mapping; /// from the components of the configuration name to well known IDs.; ///; /// At its core the Triple class is designed to be a wrapper for a triple; /// string; the constructor does not change or normalize the triple string.; /// Clients that need to handle the non-canonical triples that users often; /// specify should use the normalize method.; ///; /// See autoconf/config.guess for a glimpse into what configuration names; /// look like in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:11,Modifiability,extend,extended,11,// eBPF or extended BPF or 64-bit BPF (little endian),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:11,Modifiability,extend,extended,11,// eBPF or extended BPF or 64-bit BPF (big endian),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:8,Energy Efficiency,power,powerpc,8,// PPC: powerpc,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:10,Energy Efficiency,power,powerpc,10,// PPCLE: powerpc (little endian),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:18,Modifiability,portab,portable,18,// SPIR: standard portable IR for OpenCL 32-bit version,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:18,Modifiability,portab,portable,18,// SPIR: standard portable IR for OpenCL 64-bit version,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:15,Testability,log,logical,15,// SPIR-V with logical memory layout.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:39,Deployability,deploy,deployment,39,"// Mac Catalyst variant of Apple's iOS deployment target.; // Shader Stages; // The order of these values matters, and must be kept in sync with the; // language options enum in Clang. The ordering is enforced in; // static_asserts in Triple.cpp and in Clang.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:34,Security,Access,Access,34,/// @}; /// @name Typed Component Access; /// @{; /// Get the parsed architecture type of this triple.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:35,Security,Access,Access,35,/// @}; /// @name Direct Component Access; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:201,Security,expose,expose,201,"/// @}; /// @name Convenience Predicates; /// @{; /// Test whether the architecture is 64-bit; ///; /// Note that this tests for 64-bit pointer width, and nothing else. Note; /// that we intentionally expose only three predicates, 64-bit, 32-bit, and; /// 16-bit. The inner details of pointer width for particular architectures; /// is not summed up in the triple, and so only a coarse grained predicate; /// system is provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:54,Testability,Test,Test,54,"/// @}; /// @name Convenience Predicates; /// @{; /// Test whether the architecture is 64-bit; ///; /// Note that this tests for 64-bit pointer width, and nothing else. Note; /// that we intentionally expose only three predicates, 64-bit, 32-bit, and; /// 16-bit. The inner details of pointer width for particular architectures; /// is not summed up in the triple, and so only a coarse grained predicate; /// system is provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:119,Testability,test,tests,119,"/// @}; /// @name Convenience Predicates; /// @{; /// Test whether the architecture is 64-bit; ///; /// Note that this tests for 64-bit pointer width, and nothing else. Note; /// that we intentionally expose only three predicates, 64-bit, 32-bit, and; /// 16-bit. The inner details of pointer width for particular architectures; /// is not summed up in the triple, and so only a coarse grained predicate; /// system is provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Test,4,"/// Test whether the architecture is 32-bit; ///; /// Note that this tests for 32-bit pointer width, and nothing else.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:69,Testability,test,tests,69,"/// Test whether the architecture is 32-bit; ///; /// Note that this tests for 32-bit pointer width, and nothing else.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Test,4,"/// Test whether the architecture is 16-bit; ///; /// Note that this tests for 16-bit pointer width, and nothing else.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:69,Testability,test,tests,69,"/// Test whether the architecture is 16-bit; ///; /// Note that this tests for 16-bit pointer width, and nothing else.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS is Haiku.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS is UEFI.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS is Windows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests for either Cygwin or MinGW OS,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS is NaCl (Native Client),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS is Linux.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS is kFreeBSD.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS is Hurd.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS is WASI.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS is Emscripten.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS uses glibc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS is AIX.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS uses the ELF binary format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS uses the COFF binary format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS uses the GOFF binary format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the environment is MachO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS uses the Wasm binary format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS uses the XCOFF binary format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the OS uses the DXContainer binary format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is the PS4 platform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is the PS5 platform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is the PS4 or PS5 platform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is Android,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the environment is musl-libc,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,"/// Tests whether the target is OHOS; /// LiteOS default enviroment is also OHOS, but omited on triple.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is DXIL.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is SPIR (32- or 64-bit).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is SPIR-V (32/64-bit/Logical).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:50,Testability,Log,Logical,50,/// Tests whether the target is SPIR-V (32/64-bit/Logical).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is SPIR-V Logical,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:39,Testability,Log,Logical,39,/// Tests whether the target is SPIR-V Logical,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is NVPTX (32- or 64-bit).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is AMDGCN,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is Thumb (little and big endian).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is ARM (little and big endian).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target supports the EHABI exception; /// handling standard.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is T32.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is an M-class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is AArch64 (little and big endian).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is AArch64 and pointers are the size specified by; /// \p PointerWidth.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is 32-bit LoongArch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is 64-bit LoongArch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is LoongArch (32- and 64-bit).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is MIPS 32-bit (little and big endian).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is MIPS 64-bit (little and big endian).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,"/// Tests whether the target is MIPS (little and big endian, 32- or 64-bit).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:32,Energy Efficiency,Power,PowerPC,32,/// Tests whether the target is PowerPC (32- or 64-bit LE or BE).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is PowerPC (32- or 64-bit LE or BE).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:39,Energy Efficiency,Power,PowerPC,39,/// Tests whether the target is 32-bit PowerPC (little and big endian).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is 32-bit PowerPC (little and big endian).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:39,Energy Efficiency,Power,PowerPC,39,/// Tests whether the target is 64-bit PowerPC (little and big endian).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is 64-bit PowerPC (little and big endian).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:36,Energy Efficiency,Power,PowerPC,36,/// Tests whether the target 64-bit PowerPC big endian ABI is ELFv2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target 64-bit PowerPC big endian ABI is ELFv2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:36,Energy Efficiency,Power,PowerPC,36,/// Tests whether the target 32-bit PowerPC uses Secure PLT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:49,Security,Secur,Secure,49,/// Tests whether the target 32-bit PowerPC uses Secure PLT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target 32-bit PowerPC uses Secure PLT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is 32-bit RISC-V.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is 64-bit RISC-V.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is RISC-V (32- and 64-bit).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is 32-bit SPARC (little and big endian).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is 64-bit SPARC (big endian).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is SPARC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is SystemZ.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is x86 (32- or 64-bit).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is VE,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is wasm (32- and 64-bit).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:3,Testability,Test,Tests,3,// Tests whether the target is CSKY,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,"/// Tests whether the target is the Apple ""arm64e"" AArch64 subarch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is X32.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target is eBPF.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target supports comdat,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target uses emulated TLS as default.; ///; /// Note: Android API level 29 (10) introduced ELF TLS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests whether the target uses -data-sections as default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,/// Tests if the environment supports dllimport/export annotations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Tests,4,"/// Tests whether the target triple is little endian.; ///; /// \returns true if the triple is little endian, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:4,Testability,Test,Test,4,/// Test whether target triples are compatible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/X86TargetParser.h:11,Usability,clear,clear,11,/// Set or clear entries in \p Features that are implied to be enabled/disabled; /// by the provided \p Feature.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TargetParser/X86TargetParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/X86TargetParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h:12,Testability,Test,Testing,12,"//===- llvm/Testing/ADT/StringMap.h ---------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h:87,Availability,error,error,87,"/// Support for printing to std::ostream, for use with e.g. producing more; /// useful error messages with Google Test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h:93,Integrability,message,messages,93,"/// Support for printing to std::ostream, for use with e.g. producing more; /// useful error messages with Google Test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h:114,Testability,Test,Test,114,"/// Support for printing to std::ostream, for use with e.g. producing more; /// useful error messages with Google Test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h:12,Testability,Test,Testing,12,"//===- llvm/Testing/ADT/StringMapEntry.h ----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h:108,Availability,error,error,108,"// namespace detail; /// Support for printing to std::ostream, for use with e.g. producing more; /// useful error messages with Google Test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h:114,Integrability,message,messages,114,"// namespace detail; /// Support for printing to std::ostream, for use with e.g. producing more; /// useful error messages with Google Test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h:135,Testability,Test,Test,135,"// namespace detail; /// Support for printing to std::ostream, for use with e.g. producing more; /// useful error messages with Google Test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h:51,Testability,test,tests,51,"//===--- Annotations.h - Annotated source code for tests ---------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h:1429,Modifiability,config,configurable,1429,"/// Annotations lets you mark points and ranges inside source code, for tests:; ///; /// Annotations Example(R""cpp(; /// int complete() { x.pri^ } // ^ indicates a point; /// void err() { [[""hello"" == 42]]; } // [[this is a range]]; /// $definition^class Foo{}; // points can be named: ""definition""; /// $(foo)^class Foo{}; // ...or have a payload: ""foo""; /// $definition(foo)^class Foo{}; // ...or both; /// $fail(runtime)[[assert(false)]] // ranges can have names/payloads too; /// )cpp"");; ///; /// StringRef Code = Example.code(); // annotations stripped.; /// std::vector<size_t> PP = Example.points(); // all unnamed points; /// size_t P = Example.point(); // there must be exactly one; /// llvm::Range R = Example.range(""fail""); // find named ranges; ///; /// Points/ranges are coordinated into `code()` which is stripped of; /// annotations.; ///; /// Names consist of only alphanumeric characters or '_'.; /// Payloads can contain any character expect '(' and ')'.; ///; /// Ranges may be nested (and points can be inside ranges), but there's no way; /// to define general overlapping ranges.; ///; /// FIXME: the choice of the marking syntax makes it impossible to represent; /// some of the C++ and Objective C constructs (including common ones; /// like C++ attributes). We can fix this by:; /// 1. introducing an escaping mechanism for the special characters,; /// 2. making characters for marking points and ranges configurable,; /// 3. changing the syntax to something less commonly used,; /// 4. ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h:72,Testability,test,tests,72,"/// Annotations lets you mark points and ranges inside source code, for tests:; ///; /// Annotations Example(R""cpp(; /// int complete() { x.pri^ } // ^ indicates a point; /// void err() { [[""hello"" == 42]]; } // [[this is a range]]; /// $definition^class Foo{}; // points can be named: ""definition""; /// $(foo)^class Foo{}; // ...or have a payload: ""foo""; /// $definition(foo)^class Foo{}; // ...or both; /// $fail(runtime)[[assert(false)]] // ranges can have names/payloads too; /// )cpp"");; ///; /// StringRef Code = Example.code(); // annotations stripped.; /// std::vector<size_t> PP = Example.points(); // all unnamed points; /// size_t P = Example.point(); // there must be exactly one; /// llvm::Range R = Example.range(""fail""); // find named ranges; ///; /// Points/ranges are coordinated into `code()` which is stripped of; /// annotations.; ///; /// Names consist of only alphanumeric characters or '_'.; /// Payloads can contain any character expect '(' and ')'.; ///; /// Ranges may be nested (and points can be inside ranges), but there's no way; /// to define general overlapping ranges.; ///; /// FIXME: the choice of the marking syntax makes it impossible to represent; /// some of the C++ and Objective C constructs (including common ones; /// like C++ attributes). We can fix this by:; /// 1. introducing an escaping mechanism for the special characters,; /// 2. making characters for marking points and ranges configurable,; /// 3. changing the syntax to something less commonly used,; /// 4. ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h:425,Testability,assert,assert,425,"/// Annotations lets you mark points and ranges inside source code, for tests:; ///; /// Annotations Example(R""cpp(; /// int complete() { x.pri^ } // ^ indicates a point; /// void err() { [[""hello"" == 42]]; } // [[this is a range]]; /// $definition^class Foo{}; // points can be named: ""definition""; /// $(foo)^class Foo{}; // ...or have a payload: ""foo""; /// $definition(foo)^class Foo{}; // ...or both; /// $fail(runtime)[[assert(false)]] // ranges can have names/payloads too; /// )cpp"");; ///; /// StringRef Code = Example.code(); // annotations stripped.; /// std::vector<size_t> PP = Example.points(); // all unnamed points; /// size_t P = Example.point(); // there must be exactly one; /// llvm::Range R = Example.range(""fail""); // find named ranges; ///; /// Points/ranges are coordinated into `code()` which is stripped of; /// annotations.; ///; /// Names consist of only alphanumeric characters or '_'.; /// Payloads can contain any character expect '(' and ')'.; ///; /// Ranges may be nested (and points can be inside ranges), but there's no way; /// to define general overlapping ranges.; ///; /// FIXME: the choice of the marking syntax makes it impossible to represent; /// some of the C++ and Objective C constructs (including common ones; /// like C++ attributes). We can fix this by:; /// 1. introducing an escaping mechanism for the special characters,; /// 2. making characters for marking points and ranges configurable,; /// 3. changing the syntax to something less commonly used,; /// 4. ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h:30,Deployability,continuous,continuous,30,"/// Two offsets pointing to a continuous substring. End is not included, i.e.; /// represents a half-open range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h:195,Security,expose,expose,195,/// Returns the mapping of all names of points marked in the text to their; /// position. Unnamed points are mapped to the empty string. The positions are; /// sorted.; /// FIXME Remove this and expose `All` directly (currently used out-of-tree),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h:28,Availability,Error,Error,28,"//===- llvm/Testing/Support/Error.h ---------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h:12,Testability,Test,Testing,12,"//===- llvm/Testing/Support/Error.h ---------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h:265,Availability,failure,failure,265,"/// Helper macro for checking the result of an 'Expected<T>'; ///; /// @code{.cpp}; /// // function to be tested; /// Expected<int> myDivide(int A, int B);; ///; /// TEST(myDivideTests, GoodAndBad) {; /// // test good case; /// // if you only care about success or failure:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), Succeeded());; /// // if you also care about the value:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), HasValue(2));; ///; /// // test the error case; /// EXPECT_THAT_EXPECTED(myDivide(10, 0), Failed());; /// // also check the error message; /// EXPECT_THAT_EXPECTED(myDivide(10, 0),; /// FailedWithMessage(""B must not be zero!""));; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h:452,Availability,error,error,452,"/// Helper macro for checking the result of an 'Expected<T>'; ///; /// @code{.cpp}; /// // function to be tested; /// Expected<int> myDivide(int A, int B);; ///; /// TEST(myDivideTests, GoodAndBad) {; /// // test good case; /// // if you only care about success or failure:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), Succeeded());; /// // if you also care about the value:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), HasValue(2));; ///; /// // test the error case; /// EXPECT_THAT_EXPECTED(myDivide(10, 0), Failed());; /// // also check the error message; /// EXPECT_THAT_EXPECTED(myDivide(10, 0),; /// FailedWithMessage(""B must not be zero!""));; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h:540,Availability,error,error,540,"/// Helper macro for checking the result of an 'Expected<T>'; ///; /// @code{.cpp}; /// // function to be tested; /// Expected<int> myDivide(int A, int B);; ///; /// TEST(myDivideTests, GoodAndBad) {; /// // test good case; /// // if you only care about success or failure:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), Succeeded());; /// // if you also care about the value:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), HasValue(2));; ///; /// // test the error case; /// EXPECT_THAT_EXPECTED(myDivide(10, 0), Failed());; /// // also check the error message; /// EXPECT_THAT_EXPECTED(myDivide(10, 0),; /// FailedWithMessage(""B must not be zero!""));; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h:546,Integrability,message,message,546,"/// Helper macro for checking the result of an 'Expected<T>'; ///; /// @code{.cpp}; /// // function to be tested; /// Expected<int> myDivide(int A, int B);; ///; /// TEST(myDivideTests, GoodAndBad) {; /// // test good case; /// // if you only care about success or failure:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), Succeeded());; /// // if you also care about the value:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), HasValue(2));; ///; /// // test the error case; /// EXPECT_THAT_EXPECTED(myDivide(10, 0), Failed());; /// // also check the error message; /// EXPECT_THAT_EXPECTED(myDivide(10, 0),; /// FailedWithMessage(""B must not be zero!""));; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h:106,Testability,test,tested,106,"/// Helper macro for checking the result of an 'Expected<T>'; ///; /// @code{.cpp}; /// // function to be tested; /// Expected<int> myDivide(int A, int B);; ///; /// TEST(myDivideTests, GoodAndBad) {; /// // test good case; /// // if you only care about success or failure:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), Succeeded());; /// // if you also care about the value:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), HasValue(2));; ///; /// // test the error case; /// EXPECT_THAT_EXPECTED(myDivide(10, 0), Failed());; /// // also check the error message; /// EXPECT_THAT_EXPECTED(myDivide(10, 0),; /// FailedWithMessage(""B must not be zero!""));; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h:166,Testability,TEST,TEST,166,"/// Helper macro for checking the result of an 'Expected<T>'; ///; /// @code{.cpp}; /// // function to be tested; /// Expected<int> myDivide(int A, int B);; ///; /// TEST(myDivideTests, GoodAndBad) {; /// // test good case; /// // if you only care about success or failure:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), Succeeded());; /// // if you also care about the value:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), HasValue(2));; ///; /// // test the error case; /// EXPECT_THAT_EXPECTED(myDivide(10, 0), Failed());; /// // also check the error message; /// EXPECT_THAT_EXPECTED(myDivide(10, 0),; /// FailedWithMessage(""B must not be zero!""));; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h:208,Testability,test,test,208,"/// Helper macro for checking the result of an 'Expected<T>'; ///; /// @code{.cpp}; /// // function to be tested; /// Expected<int> myDivide(int A, int B);; ///; /// TEST(myDivideTests, GoodAndBad) {; /// // test good case; /// // if you only care about success or failure:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), Succeeded());; /// // if you also care about the value:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), HasValue(2));; ///; /// // test the error case; /// EXPECT_THAT_EXPECTED(myDivide(10, 0), Failed());; /// // also check the error message; /// EXPECT_THAT_EXPECTED(myDivide(10, 0),; /// FailedWithMessage(""B must not be zero!""));; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h:443,Testability,test,test,443,"/// Helper macro for checking the result of an 'Expected<T>'; ///; /// @code{.cpp}; /// // function to be tested; /// Expected<int> myDivide(int A, int B);; ///; /// TEST(myDivideTests, GoodAndBad) {; /// // test good case; /// // if you only care about success or failure:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), Succeeded());; /// // if you also care about the value:; /// EXPECT_THAT_EXPECTED(myDivide(10, 5), HasValue(2));; ///; /// // test the error case; /// EXPECT_THAT_EXPECTED(myDivide(10, 0), Failed());; /// // also check the error message; /// EXPECT_THAT_EXPECTED(myDivide(10, 0),; /// FailedWithMessage(""B must not be zero!""));; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/SupportHelpers.h:7,Testability,Test,Testing,7,"//===- Testing/Support/SupportHelpers.h -----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Support/SupportHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/SupportHelpers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/SupportHelpers.h:145,Integrability,depend,depending,145,"/// A RAII object that creates a link upon initialization and; /// removes it upon destruction.; ///; /// The link may be a soft or a hard link, depending on the platform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Testing/Support/SupportHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Support/SupportHelpers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Architecture.h:69,Testability,Stub,Stub,69,/// Defines the architecture slices that are supported by Text-based Stub files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/Architecture.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Architecture.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/DylibReader.h:49,Performance,load,load,49,"/// Capture Mach-O header from binary, primarily load commands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/DylibReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/DylibReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:20,Integrability,Interface,InterfaceFile,20,"//===- llvm/TextAPI/InterfaceFile.h - TAPI Interface File -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A generic and abstract interface representation for linkable objects. This; // could be an MachO executable, bundle, dylib, or text-based stub file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:43,Integrability,Interface,Interface,43,"//===- llvm/TextAPI/InterfaceFile.h - TAPI Interface File -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A generic and abstract interface representation for linkable objects. This; // could be an MachO executable, bundle, dylib, or text-based stub file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:406,Integrability,interface,interface,406,"//===- llvm/TextAPI/InterfaceFile.h - TAPI Interface File -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A generic and abstract interface representation for linkable objects. This; // could be an MachO executable, bundle, dylib, or text-based stub file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:521,Testability,stub,stub,521,"//===- llvm/TextAPI/InterfaceFile.h - TAPI Interface File -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A generic and abstract interface representation for linkable objects. This; // could be an MachO executable, bundle, dylib, or text-based stub file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:11,Deployability,Release,Release,11,/// Retain/Release.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:11,Deployability,Release,Release,11,/// Retain/Release for Simulator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:11,Deployability,Release,Release,11,/// Retain/Release or Garbage Collection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:33,Testability,Stub,Stub,33,/// \brief MachO Dynamic Library Stub file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:15,Testability,stub,stub,15,/// Text-based stub file (.tbd) version 1.0,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:15,Testability,stub,stub,15,/// Text-based stub file (.tbd) version 2.0,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:15,Testability,stub,stub,15,/// Text-based stub file (.tbd) version 3.0,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:15,Testability,stub,stub,15,/// Text-based stub file (.tbd) version 4.0,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:15,Testability,stub,stub,15,/// Text-based stub file (.tbd) version 5.0,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:40,Integrability,interface,interface,40,// clang-format on; /// Reference to an interface file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:16,Integrability,interface,interface,16,/// Defines the interface file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:12,Deployability,install,install,12,/// Set the install name of the library.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:12,Deployability,install,install,12,/// Get the install name of the library.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:59,Performance,cache,cache,59,/// Specify if the library is an OS library but not shared cache eligible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:61,Performance,cache,cache,61,/// Check if the library is an OS library that is not shared cache eligible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:52,Safety,safe,safe,52,/// Specify if the library is application extension safe (or not).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:50,Safety,safe,safe,50,/// Check if the library is application extension safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:107,Deployability,install,install,107,/// Get the list of Parent Umbrella frameworks.; ///; /// \return Returns a list of target information and install name of parent; /// umbrellas.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:327,Deployability,Install,InstallName,327,/// Add an allowable client.; ///; /// Mach-O Dynamic libraries have the concept of allowable clients that are; /// checked during static link time. The name of the application or library; /// that is being generated needs to match one of the allowable clients or the; /// linker refuses to link this library.; ///; /// \param InstallName The name of the client that is allowed to link this; /// library.; /// \param Target The target triple for which this applies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:48,Deployability,Install,InstallName,48,/// Add a re-exported library.; ///; /// \param InstallName The name of the library to re-export.; /// \param Target The target triple for which this applies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:40,Modifiability,extend,extend,40,/// Add a symbol to the symbols list or extend an existing one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:36,Integrability,Interface,Interface,36,/// Extract architecture slice from Interface.; ///; /// \param Arch architecture to extract from.; /// \return New InterfaceFile with extracted architecture slice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:116,Integrability,Interface,InterfaceFile,116,/// Extract architecture slice from Interface.; ///; /// \param Arch architecture to extract from.; /// \return New InterfaceFile with extracted architecture slice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:35,Integrability,Interface,Interface,35,/// Remove architecture slice from Interface.; ///; /// \param Arch architecture to remove.; /// \return New Interface File with removed architecture slice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:109,Integrability,Interface,Interface,109,/// Remove architecture slice from Interface.; ///; /// \param Arch architecture to remove.; /// \return New Interface File with removed architecture slice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:100,Deployability,Install,Install,100,"/// Merge Interfaces for the same library. The following library attributes; /// must match.; /// * Install name, Current & Compatibility version,; /// * Two-level namespace enablement, and App extension enablement.; ///; /// \param O The Interface to merge.; /// \return New Interface File that was merged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:10,Integrability,Interface,Interfaces,10,"/// Merge Interfaces for the same library. The following library attributes; /// must match.; /// * Install name, Current & Compatibility version,; /// * Two-level namespace enablement, and App extension enablement.; ///; /// \param O The Interface to merge.; /// \return New Interface File that was merged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:239,Integrability,Interface,Interface,239,"/// Merge Interfaces for the same library. The following library attributes; /// must match.; /// * Install name, Current & Compatibility version,; /// * Two-level namespace enablement, and App extension enablement.; ///; /// \param O The Interface to merge.; /// \return New Interface File that was merged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:276,Integrability,Interface,Interface,276,"/// Merge Interfaces for the same library. The following library attributes; /// must match.; /// * Install name, Current & Compatibility version,; /// * Two-level namespace enablement, and App extension enablement.; ///; /// \param O The Interface to merge.; /// \return New Interface File that was merged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:35,Integrability,Interface,Interface,35,/// Inline reexported library into Interface.; ///; /// \param Library Interface of reexported library.; /// \param Overwrite Whether to overwrite preexisting inlined library.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:71,Integrability,Interface,Interface,71,/// Inline reexported library into Interface.; ///; /// \param Library Interface of reexported library.; /// \param Overwrite Whether to overwrite preexisting inlined library.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:29,Integrability,Interface,InterfaceFileRefs,29,// Keep containers that hold InterfaceFileRefs in sorted order and uniqued.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h:54,Integrability,interface,interface,54,"// Undefined linkage, it represents usage of external interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h:54,Integrability,interface,interface,54,"// Re-exported linkage, record is defined in external interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h:52,Modifiability,variab,variables,52,"// Defines broadly non-objc records, categorized as variables or functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h:31,Modifiability,variab,variable,31,// Define Objective-C instance variable records.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h:110,Integrability,protocol,protocols,110,"// Defines Objective-C record types that have assigned methods, properties,; // instance variable (ivars) and protocols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h:89,Modifiability,variab,variable,89,"// Defines Objective-C record types that have assigned methods, properties,; // instance variable (ivars) and protocols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h:22,Integrability,Interface,Interfaces,22,// Define Objective-C Interfaces or class types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h:44,Modifiability,extend,extend,44,// Non-owning containers of categories that extend the class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Record.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h:93,Modifiability,extend,extended,93,"/// Add ObjC Category record.; ///; /// \param ClassToExtend The name of class that is being extended by the; /// category, not symbol.; /// \param Category The name of category.; /// \return The non-owning pointer to added record in slice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h:90,Modifiability,variab,variables,90,"/// Find ObjC Container. This is commonly used for assigning for looking up; /// instance variables that are assigned to either a category or class.; ///; /// \param IsIVar If true, the name is the name of the IVar, otherwise it will; /// be looked up as the name of the container.; /// \param Name Either the name of ivar or name of container.; /// \return The non-owning pointer to record in; /// slice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h:23,Modifiability,variab,variable,23,/// Find ObjC instance variable.; ///; /// \param IsScopedName This is used to determine how to parse the name.; /// \param Name Either the full name of the symbol or just the ivar.; /// \return The non-owning pointer to record in slice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h:33,Safety,avoid,avoid,33,// Hold tapi converted triple to avoid unecessary casts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h:145,Deployability,update,update,145,/// Promote linkage of requested record. It is no-op if linkage type is lower; /// than the current assignment.; ///; /// \param R The record to update.; /// \param L Linkage type to update to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h:183,Deployability,update,update,183,/// Promote linkage of requested record. It is no-op if linkage type is lower; /// than the current assignment.; ///; /// \param R The record to update.; /// \param L Linkage type to update to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h:4,Deployability,Update,Update,4,/// Update set flags of requested record.; ///; /// \param R The global record to update.; /// \param F Flags to update to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h:82,Deployability,update,update,82,/// Update set flags of requested record.; ///; /// \param R The global record to update.; /// \param F Flags to update to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h:113,Deployability,update,update,113,/// Update set flags of requested record.; ///; /// \param R The global record to update.; /// \param F Flags to update to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Target.h:21,Deployability,deploy,deployment,21,// In most cases the deployment version is not useful to compare.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Target.h:21,Deployability,deploy,deployment,21,// In most cases the deployment version is not useful to compare.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIError.h:42,Availability,Error,Error,42,"//===- llvm/TextAPI/TextAPIError.h - TAPI Error -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// \brief Define TAPI specific error codes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIError.h:424,Availability,error,error,424,"//===- llvm/TextAPI/TextAPIError.h - TAPI Error -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// \brief Define TAPI specific error codes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIReader.h:200,Performance,load,load,200,/// Determine whether input can be interpreted as TAPI text file.; /// This allows one to exit early when file is not recognized as TAPI file; /// as opposed to `get` which attempts to full parse and load of library; /// attributes.; ///; /// \param InputBuffer Buffer holding contents of TAPI text file.; /// \return The file format version of TAPI text file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIReader.h:21,Integrability,Interface,InterfaceFile,21,/// Parse and get an InterfaceFile that represents the full; /// library.; ///; /// \param InputBuffer Buffer holding contents of TAPI text file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/TextAPIReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Utils.h:126,Deployability,update,update,126,/// Replace extension considering frameworks.; ///; /// \param Path Location of file.; /// \param Extension File extension to update with.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/TextAPI/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ToolDrivers/llvm-dlltool/DlltoolDriver.h:394,Integrability,interface,interface,394,"//===- DlltoolDriver.h - dlltool.exe-compatible driver ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines an interface to a dlltool.exe-compatible driver.; // Used by llvm-dlltool.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ToolDrivers/llvm-dlltool/DlltoolDriver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ToolDrivers/llvm-dlltool/DlltoolDriver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ToolDrivers/llvm-lib/LibDriver.h:394,Integrability,interface,interface,394,"//===- llvm-lib/LibDriver.h - lib.exe-compatible driver ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines an interface to a lib.exe-compatible driver that also understands; // bitcode files. Used by llvm-lib and lld-link /lib.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/ToolDrivers/llvm-lib/LibDriver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ToolDrivers/llvm-lib/LibDriver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h:131,Availability,failure,failure,131,"// Returns F.getComdat() if it exists.; // Otherwise creates a new comdat, sets F's comdat, and returns it.; // Returns nullptr on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h:202,Performance,perform,performance,202,"// Place global in a large section for x86-64 ELF binaries to mitigate; // relocation overflow pressure. This can be be used for metadata globals that; // aren't directly accessed by code, which has no performance impact.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h:171,Security,access,accessed,171,"// Place global in a large section for x86-64 ELF binaries to mitigate; // relocation overflow pressure. This can be be used for metadata globals that; // aren't directly accessed by code, which has no performance impact.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h:160,Integrability,wrap,wrapper,160,"// The pgo-specific indirect call promotion function declared below is used by; // the pgo-driven indirect call promotion and sample profile passes. It's a; // wrapper around llvm::promoteCall, et al. that additionally computes !prof; // metadata. We place it in a pgo namespace so it's not confused with the; // generic utilities.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h:398,Deployability,update,update,398,"// Helper function that transforms CB (either an indirect-call instruction, or; // an invoke instruction , to a conditional call to F. This is like:; // if (Inst.CalledValue == F); // F(...);; // else; // Inst(...);; // end; // TotalCount is the profile count value that the instruction executes.; // Count is the profile count value that F is the target function.; // These two values are used to update the branch weight.; // If \p AttachProfToDirectCall is true, a prof metadata is attached to the; // new direct call to contain \p Count.; // Returns the promoted direct call instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h:14,Usability,guid,guide,14,// Use BFI to guide register promotion,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h:15,Security,sanitiz,sanitizer,15,// Options for sanitizer coverage instrumentation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h:70,Availability,down,down,70,/// Scale an individual branch count.; ///; /// Scale a 64-bit weight down to 32-bits using \c Scale.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO.h:423,Security,access,accessor,423,"//===- llvm/Transforms/IPO.h - Interprocedural Transformations --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header file defines prototypes for accessor functions that expose passes; // in the IPO transformations library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO.h:447,Security,expose,expose,447,"//===- llvm/Transforms/IPO.h - Interprocedural Transformations --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header file defines prototypes for accessor functions that expose passes; // in the IPO transformations library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO.h:119,Safety,safe,safe,119,"/// DeadArgHacking pass - Same as DAE, but delete arguments of external; /// functions as well. This is definitely not safe, and should only be used by; /// bugpoint.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/ObjCARC.h:423,Security,access,accessor,423,"//===-- ObjCARC.h - ObjCARC Scalar Transformations --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header file defines prototypes for accessor functions that expose passes; // in the ObjCARC Scalar Transformations library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/ObjCARC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/ObjCARC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/ObjCARC.h:447,Security,expose,expose,447,"//===-- ObjCARC.h - ObjCARC Scalar Transformations --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header file defines prototypes for accessor functions that expose passes; // in the ObjCARC Scalar Transformations library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/ObjCARC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/ObjCARC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:423,Security,access,accessor,423,"//===-- Scalar.h - Scalar Transformations -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header file defines prototypes for accessor functions that expose passes; // in the Scalar transformations library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:447,Security,expose,expose,447,"//===-- Scalar.h - Scalar Transformations -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header file defines prototypes for accessor functions that expose passes; // in the Scalar transformations library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:129,Energy Efficiency,power,powerful,129,"//===----------------------------------------------------------------------===//; //; // DeadCodeElimination - This pass is more powerful than DeadInstElimination,; // because it is worklist driven that can potentially revisit instructions when; // their other instructions become dead, to eliminate chains of dead; // computations.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:132,Energy Efficiency,reduce,reduces,132,//===----------------------------------------------------------------------===//; //; // LoopStrengthReduce - This pass is strength reduces GEP instructions that use; // a loop's canonical induction variable as one of their indices.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:199,Modifiability,variab,variable,199,//===----------------------------------------------------------------------===//; //; // LoopStrengthReduce - This pass is strength reduces GEP instructions that use; // a loop's canonical induction variable as one of their indices.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:117,Usability,simpl,simple,117,//===----------------------------------------------------------------------===//; //; // LoopUnroll - This pass is a simple loop unrolling pass.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:117,Usability,simpl,simple,117,//===----------------------------------------------------------------------===//; //; // LoopRotate - This pass is a simple loop rotating pass.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:163,Usability,simpl,simplify,163,"//===----------------------------------------------------------------------===//; //; // CFGSimplification - Merge basic blocks, eliminate unreachable blocks,; // simplify terminator instructions, convert switches to lookup tables, etc.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:115,Energy Efficiency,reduce,reduce,115,"//===----------------------------------------------------------------------===//; //; // FlattenCFG - flatten CFG, reduce number of conditional branches by using; // parallel-and and parallel-or mode, etc...; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:110,Performance,perform,performs,110,//===----------------------------------------------------------------------===//; //; // EarlyCSE - This pass performs a simple and fast CSE pass over the dominator; // tree.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:121,Usability,simpl,simple,121,//===----------------------------------------------------------------------===//; //; // EarlyCSE - This pass performs a simple and fast CSE pass over the dominator; // tree.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:118,Energy Efficiency,reduce,reduce,118,//===----------------------------------------------------------------------===//; //; // TLSVariableHoist - This pass reduce duplicated TLS address call.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:137,Energy Efficiency,reduce,reduces,137,//===----------------------------------------------------------------------===//; //; // StraightLineStrengthReduce - This pass strength-reduces some certain; // instruction patterns in straight-line code.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:107,Usability,Simpl,Simplify,107,//===----------------------------------------------------------------------===//; //; // NaryReassociate - Simplify n-ary operations by reassociation.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:108,Performance,Perform,Perform,108,//===----------------------------------------------------------------------===//; //; // LoopDataPrefetch - Perform data prefetching in loops.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:116,Usability,simpl,simplification,116,//===----------------------------------------------------------------------===//; //; // This pass does instruction simplification on each; // instruction in a function.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:134,Availability,mask,masked,134,"//===----------------------------------------------------------------------===//; //; // createScalarizeMaskedMemIntrinPass - Replace masked load, store, gather; // and scatter intrinsics with scalar code when target doesn't support them.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:141,Performance,load,load,141,"//===----------------------------------------------------------------------===//; //; // createScalarizeMaskedMemIntrinPass - Replace masked load, store, gather; // and scatter intrinsics with scalar code when target doesn't support them.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h:423,Security,access,accessor,423,"//===- llvm/Transforms/Utils.h - Utility Transformations --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header file defines prototypes for accessor functions that expose passes; // in the Utils transformations library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h:447,Security,expose,expose,447,"//===- llvm/Transforms/Utils.h - Utility Transformations --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header file defines prototypes for accessor functions that expose passes; // in the Utils transformations library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h:410,Deployability,update,update,410,"//===----------------------------------------------------------------------===//; //; // BreakCriticalEdges - Break all of the critical edges in the CFG by inserting; // a dummy basic block. This pass may be ""required"" by passes that cannot deal; // with critical edges. For this usage, a pass must call:; //; // AU.addRequiredID(BreakCriticalEdgesID);; //; // This pass obviously invalidates the CFG, but can update forward dominator; // (set, immediate dominators, tree, and frontier) information.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h:171,Performance,optimiz,optimizations,171,//===----------------------------------------------------------------------===//; //; // LCSSA - This pass inserts phi nodes at loop boundaries to simplify other loop; // optimizations.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h:147,Usability,simpl,simplify,147,//===----------------------------------------------------------------------===//; //; // LCSSA - This pass inserts phi nodes at loop boundaries to simplify other loop; // optimizations.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h:232,Performance,perform,performed,232,"//===----------------------------------------------------------------------===//; //; // PromoteMemoryToRegister - This pass is used to promote memory references to; // be register references. A simple example of the transformation performed by; // this pass is:; //; // FROM CODE TO CODE; // %X = alloca i32, i32 1 ret i32 42; // store i32 42, i32 *%X; // %Y = load i32* %X; // ret i32 %Y; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h:362,Performance,load,load,362,"//===----------------------------------------------------------------------===//; //; // PromoteMemoryToRegister - This pass is used to promote memory references to; // be register references. A simple example of the transformation performed by; // this pass is:; //; // FROM CODE TO CODE; // %X = alloca i32, i32 1 ret i32 42; // store i32 42, i32 *%X; // %Y = load i32* %X; // ret i32 %Y; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h:195,Usability,simpl,simple,195,"//===----------------------------------------------------------------------===//; //; // PromoteMemoryToRegister - This pass is used to promote memory references to; // be register references. A simple example of the transformation performed by; // this pass is:; //; // FROM CODE TO CODE; // %X = alloca i32, i32 1 ret i32 42; // store i32 42, i32 *%X; // %Y = load i32* %X; // ret i32 %Y; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h:190,Deployability,update,updates,190,"//===----------------------------------------------------------------------===//; //; // LoopSimplify - Insert Pre-header blocks into the CFG for every function in; // the module. This pass updates dominator information, loop information, and; // does not add critical edges to the CFG.; //; // AU.addRequiredID(LoopSimplifyID);; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h:147,Integrability,wrap,wrapper,147,//===----------------------------------------------------------------------===//; // LowerGlobalDtorsLegacy - Lower @llvm.global_dtors by creating wrapper; // functions that are registered in @llvm.global_ctors and which contain a call; // to `__cxa_atexit` to register their destructor functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/AggressiveInstCombine/AggressiveInstCombine.h:486,Usability,simpl,simple,486,"//===- AggressiveInstCombine.h - AggressiveInstCombine pass -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// AggressiveInstCombiner - Combine expression patterns to form expressions; /// with fewer, simple instructions. This pass does not modify the CFG.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/AggressiveInstCombine/AggressiveInstCombine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/AggressiveInstCombine/AggressiveInstCombine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroEarly.h:416,Integrability,interface,interface,416,"//===---- CoroEarly.h - Lower early coroutine intrinsics --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; // This file provides the interface to the early coroutine intrinsic lowering; // pass. This pass lowers coroutine intrinsics that hide the details of the; // exact calling convention for coroutine resume and destroy functions and; // details of the structure of the coroutine frame.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroEarly.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroEarly.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroEarly.h:588,Usability,resume,resume,588,"//===---- CoroEarly.h - Lower early coroutine intrinsics --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; // This file provides the interface to the early coroutine intrinsic lowering; // pass. This pass lowers coroutine intrinsics that hide the details of the; // exact calling convention for coroutine resume and destroy functions and; // details of the structure of the coroutine frame.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroEarly.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroEarly.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroElide.h:520,Usability,resume,resume,520,"//===---- CoroElide.h - Coroutine frame allocation elision ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; // This file declares a pass that replaces dynamic allocation of coroutine; // frames with alloca and replaces calls to llvm.coro.resume and; // llvm.coro.destroy with direct calls to coroutine sub-functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroElide.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroElide.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroSplit.h:474,Usability,resume,resume,474,"//===- CoroSplit.h - Converts a coroutine into a state machine -*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; // This file declares the pass that builds the coroutine frame and outlines; // the resume and destroy parts of the coroutine into separate functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroSplit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroSplit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroSplit.h:24,Performance,Optimiz,Optimization,24,// Would be true if the Optimization level isn't O0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroSplit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroSplit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/HipStdPar/HipStdPar.h:643,Energy Efficiency,allocate,allocate,643,"//===--------- HipStdPar.h - Standard Parallelism passes --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// AcceleratorCodeSelection - Identify all functions reachable from a kernel,; /// removing those that are unreachable.; ///; /// AllocationInterposition - Forward calls to allocation / deallocation; // functions to runtime provided equivalents that allocate memory that is; // accessible for an accelerator; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/HipStdPar/HipStdPar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/HipStdPar/HipStdPar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/HipStdPar/HipStdPar.h:671,Security,access,accessible,671,"//===--------- HipStdPar.h - Standard Parallelism passes --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// AcceleratorCodeSelection - Identify all functions reachable from a kernel,; /// removing those that are unreachable.; ///; /// AllocationInterposition - Forward calls to allocation / deallocation; // functions to runtime provided equivalents that allocate memory that is; // accessible for an accelerator; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/HipStdPar/HipStdPar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/HipStdPar/HipStdPar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h:427,Integrability,interface,interface,427,"//===- InstCombine.h - InstCombine pass -------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides the primary interface to the instcombine pass. This pass; /// is suitable for use in the new pass manager. For a pass that works with the; /// legacy pass manager, use \c createInstructionCombiningPass().; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h:89,Integrability,wrap,wrapper,89,/// The legacy pass manager's instcombine pass.; ///; /// This is a basic whole-function wrapper around the instcombine utility. It; /// will try to combine all instructions in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h:148,Usability,simpl,simple,148,"//===----------------------------------------------------------------------===//; //; // InstructionCombining - Combine instructions to form fewer, simple; // instructions. This pass does not modify the CFG, and has a tendency to make; // instructions dead, so a subsequent DCE pass is useful.; //; // This pass combines things like:; // %Y = add int 1, %X; // %Z = add int 1, %Y; // into:; // %Z = add int 2, %X; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:419,Integrability,interface,interface,419,"//===- InstCombiner.h - InstCombine implementation --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides the interface for the instcombine pass implementation.; /// The interface is used for generic transformations in this folder and; /// target specific combinations in the targets.; /// The visitor implementation is in \c InstCombinerImpl in; /// \c InstCombineInternal.h.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:479,Integrability,interface,interface,479,"//===- InstCombiner.h - InstCombine implementation --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides the interface for the instcombine pass implementation.; /// The interface is used for generic transformations in this folder and; /// target specific combinations in the targets.; /// The visitor implementation is in \c InstCombinerImpl in; /// \c InstCombineInternal.h.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:34,Testability,log,logic,34,/// The core instruction combiner logic.; ///; /// This class provides both the logic to recursively visit instructions and; /// combine them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:80,Testability,log,logic,80,/// The core instruction combiner logic.; ///; /// This class provides both the logic to recursively visit instructions and; /// combine them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:51,Usability,simpl,simplified,51,/// A worklist of the instructions that need to be simplified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:99,Deployability,update,updated,99,"// Optional analyses. When non-null, these can both be used to do better; // combining and will be updated to reflect any changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:70,Energy Efficiency,reduce,reduce,70,"/// Assign a complexity or rank value to LLVM Values. This is used to reduce; /// the amount of pattern matching needed for compares and commutative; /// instructions. For example, if we have:; /// icmp ugt X, Constant; /// or; /// xor (add X, Constant), cast Z; ///; /// We do not have to consider the commuted variants of these patterns because; /// canonicalization based on complexity guarantees the above ordering.; ///; /// This routine maps IR values to various complexity ranks:; /// 0 -> undef; /// 1 -> Constants; /// 2 -> Other non-instructions; /// 3 -> Arguments; /// 4 -> Cast and (f)neg/not instructions; /// 5 -> Other instructions",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:435,Integrability,rout,routine,435,"/// Assign a complexity or rank value to LLVM Values. This is used to reduce; /// the amount of pattern matching needed for compares and commutative; /// instructions. For example, if we have:; /// icmp ugt X, Constant; /// or; /// xor (add X, Constant), cast Z; ///; /// We do not have to consider the commuted variants of these patterns because; /// canonicalization based on complexity guarantees the above ordering.; ///; /// This routine maps IR values to various complexity ranks:; /// 0 -> undef; /// 1 -> Constants; /// 2 -> Other non-instructions; /// 3 -> Arguments; /// 4 -> Cast and (f)neg/not instructions; /// 5 -> Other instructions",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:31,Energy Efficiency,reduce,reduces,31,"/// Predicate canonicalization reduces the number of patterns that need to be; /// matched by other transforms. For example, we may swap the operands of a; /// conditional branch or select to create a compare with a canonical; /// (inverted) predicate which is then more likely to be matched with other; /// values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:42,Availability,mask,mask,42,// True if LHS u> RHS and RHS == sign-bit-mask - 1,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:43,Availability,mask,mask,43,"// True if LHS u>= RHS and RHS == sign-bit-mask (2^7, 2^15, 2^31, etc)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:42,Availability,mask,mask,42,"// True if LHS u< RHS and RHS == sign-bit-mask (2^7, 2^15, 2^31, etc)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:43,Availability,mask,mask,43,// True if LHS u<= RHS and RHS == sign-bit-mask - 1,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:60,Testability,log,logical,60,"// a ? b : false and a ? true : b are the canonical form of logical and/or.; // This includes !a ? b : false and !a ? true : b. Absorbing the not into; // the select by swapping operands would break recognition of this pattern; // in other analyses, so don't do that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:140,Usability,simpl,simplified,140,"/// Return nonnull value if V is free to invert under the condition of; /// WillInvertAllUses.; /// If Builder is nonnull, it will return a simplified ~V.; /// If Builder is null, it will return an arbitrary nonnull value (not; /// dereferenceable).; /// If the inversion will consume instructions, `DoesConsume` will be set to; /// true. Otherwise it will be false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:46,Energy Efficiency,adapt,adapted,46,"/// Given i1 V, can every user of V be freely adapted if V is changed to !V ?; /// InstCombine's freelyInvertAllUsersOf() must be kept in sync with this fn.; /// NOTE: for Instructions only!; ///; /// See also: isFreeToInvert()",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:46,Modifiability,adapt,adapted,46,"/// Given i1 V, can every user of V be freely adapted if V is changed to !V ?; /// InstCombine's freelyInvertAllUsersOf() must be kept in sync with this fn.; /// NOTE: for Instructions only!; ///; /// See also: isFreeToInvert()",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:54,Safety,avoid,avoid,54,"/// Some binary operators require special handling to avoid poison and; /// undefined behavior. If a constant vector has undef elements, replace those; /// undefs with identity constants if possible because those are always safe; /// to execute. If no identity constant exists, replace undef with some other; /// safe constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:224,Safety,safe,safe,224,"/// Some binary operators require special handling to avoid poison and; /// undefined behavior. If a constant vector has undef elements, replace those; /// undefs with identity constants if possible because those are always safe; /// to execute. If no identity constant exists, replace undef with some other; /// safe constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:313,Safety,safe,safe,313,"/// Some binary operators require special handling to avoid poison and; /// undefined behavior. If a constant vector has undef elements, replace those; /// undefs with identity constants if possible because those are always safe; /// to execute. If no identity constant exists, replace undef with some other; /// safe constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:24,Availability,avail,available,24,// TODO: Should this be available as a constant utility function? It is; // similar to getBinOpAbsorber().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:40,Safety,safe,safe,40,"// X % 1.0 (doesn't simplify, but it is safe)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:20,Usability,simpl,simplify,20,"// X % 1.0 (doesn't simplify, but it is safe)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:38,Safety,safe,safe,38,"// 0 - X (doesn't simplify, but it is safe)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:18,Usability,simpl,simplify,18,"// 0 - X (doesn't simplify, but it is safe)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:40,Safety,safe,safe,40,"// 0.0 - X (doesn't simplify, but it is safe)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:20,Usability,simpl,simplify,20,"// 0.0 - X (doesn't simplify, but it is safe)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:40,Safety,safe,safe,40,"// 0.0 / X (doesn't simplify, but it is safe)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:20,Usability,simpl,simplify,20,"// 0.0 / X (doesn't simplify, but it is safe)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:31,Integrability,rout,routine,31,"/// A combiner-aware RAUW-like routine.; ///; /// This method is to be used when an instruction is found to be dead,; /// replaceable with another preexisting expression. Here we add all uses of; /// I to the worklist, replace all uses of I with the new value, then return; /// I, so that the inst combiner will know that I was modified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h:114,Availability,error,errors,114,/// Public interface to the address sanitizer module pass for instrumenting code; /// to check for various memory errors.; ///; /// This adds 'asan.module_ctor' to 'llvm.global_ctors'. This pass may also; /// run intependently of the function address sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h:11,Integrability,interface,interface,11,/// Public interface to the address sanitizer module pass for instrumenting code; /// to check for various memory errors.; ///; /// This adds 'asan.module_ctor' to 'llvm.global_ctors'. This pass may also; /// run intependently of the function address sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h:36,Security,sanitiz,sanitizer,36,/// Public interface to the address sanitizer module pass for instrumenting code; /// to check for various memory errors.; ///; /// This adds 'asan.module_ctor' to 'llvm.global_ctors'. This pass may also; /// run intependently of the function address sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h:251,Security,sanitiz,sanitizer,251,/// Public interface to the address sanitizer module pass for instrumenting code; /// to check for various memory errors.; ///; /// This adds 'asan.module_ctor' to 'llvm.global_ctors'. This pass may also; /// run intependently of the function address sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerCommon.h:7,Availability,mask,mask,7,"// The mask Value, if we're looking at a masked load/store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerCommon.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerCommon.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerCommon.h:41,Availability,mask,masked,41,"// The mask Value, if we're looking at a masked load/store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerCommon.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerCommon.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerCommon.h:48,Performance,load,load,48,"// The mask Value, if we're looking at a masked load/store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerCommon.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerCommon.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerCommon.h:51,Performance,load,load,51,"// The Stride Value, if we're looking at a strided load/store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerCommon.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerCommon.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h:428,Security,Sanitiz,Sanitizer,428,"//===--------- Definition of the AddressSanitizer options -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file defines data types used to set Address Sanitizer options.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h:17,Safety,detect,detect,17,/// Mode of ASan detect stack use after return,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h:11,Safety,detect,detect,11,///< Never detect stack use after return.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h:5,Safety,Detect,Detect,5,///< Detect stack use after return if not disabled runtime with; ///< (ASAN_OPTIONS=detect_stack_use_after_return=0).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h:12,Safety,detect,detect,12,///< Always detect stack use after return.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h:17,Safety,detect,detect,17,///< Not a valid detect mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/AddressSanitizerOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h:24,Integrability,depend,depends,24,/// \return a hash that depends on the set of instrumented blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h:14,Security,hash,hash,14,/// \return a hash that depends on the set of instrumented blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h:98,Safety,Avoid,Avoid,98,/// Find the set of basic blocks that are reachable from \p Start without the; /// basic block \p Avoid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BlockCoverageInference.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BoundsChecking.h:34,Performance,perform,perform,34,"/// A pass to instrument code and perform run-time bounds checking on loads,; /// stores, and other memory intrinsics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BoundsChecking.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BoundsChecking.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BoundsChecking.h:70,Performance,load,loads,70,"/// A pass to instrument code and perform run-time bounds checking on loads,; /// stores, and other memory intrinsics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BoundsChecking.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/BoundsChecking.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h:494,Testability,test,test,494,"// We must not add instrumentation to the BB representing the; // ""suspend"" path, else CoroSplit won't be able to lower; // llvm.coro.suspend to a tail call. We do want profiling info for; // the other branches (resume/destroy). So we do 2 things:; // 1. we prefer instrumenting those other edges by setting the weight; // of the ""suspend"" edge to max, and; // 2. we mark the edge as ""Removed"" to guarantee it is not considered; // for instrumentation. That could technically happen:; // (from test/Transforms/Coroutines/coro-split-musttail.ll); //; // %suspend = call i8 @llvm.coro.suspend(token %save, i1 false); // switch i8 %suspend, label %exit [; // i8 0, label %await.ready; // i8 1, label %exit; // ]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h:212,Usability,resume,resume,212,"// We must not add instrumentation to the BB representing the; // ""suspend"" path, else CoroSplit won't be able to lower; // llvm.coro.suspend to a tail call. We do want profiling info for; // the other branches (resume/destroy). So we do 2 things:; // 1. we prefer instrumenting those other edges by setting the weight; // of the ""suspend"" edge to max, and; // 2. we mark the edge as ""Removed"" to guarantee it is not considered; // for instrumentation. That could technically happen:; // (from test/Transforms/Coroutines/coro-split-musttail.ll); //; // %suspend = call i8 @llvm.coro.suspend(token %save, i1 false); // switch i8 %suspend, label %exit [; // i8 0, label %await.ready; // i8 1, label %exit; // ]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h:9,Safety,detect,detect,9,"// If we detect infinite loops, force; // instrumenting the entry edge:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h:19,Deployability,update,update,19,"// Newly inserted, update the real info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h:19,Deployability,update,update,19,"// Newly inserted, update the real info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h:53,Availability,avail,available,53,"// Give BB, return the auxiliary information if it's available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CGProfile.h:414,Integrability,interface,interface,414,"//===- Transforms/Instrumentation/CGProfile.h -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for LLVM's Call Graph Profile pass.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CGProfile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CGProfile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ControlHeightReduction.h:431,Energy Efficiency,reduce,reduces,431,"//===- ControlHeightReduction.h - Control Height Reduction ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass merges conditional blocks of code and reduces the number of; // conditional branches in the hot paths based on profiles.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ControlHeightReduction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ControlHeightReduction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/GCOVProfiler.h:414,Integrability,interface,interface,414,"//===- Transforms/Instrumentation/GCOVProfiler.h ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for the GCOV style profiler pass.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/GCOVProfiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/GCOVProfiler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h:126,Availability,error,errors,126,"/// This is a public interface to the hardware address sanitizer pass for; /// instrumenting code to check for various memory errors at runtime, similar to; /// AddressSanitizer but based on partial hardware assistance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h:21,Integrability,interface,interface,21,"/// This is a public interface to the hardware address sanitizer pass for; /// instrumenting code to check for various memory errors at runtime, similar to; /// AddressSanitizer but based on partial hardware assistance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h:55,Security,sanitiz,sanitizer,55,"/// This is a public interface to the hardware address sanitizer pass for; /// instrumenting code to check for various memory errors at runtime, similar to; /// AddressSanitizer but based on partial hardware assistance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h:31,Security,access,accessinfo,31,// Bit field positions for the accessinfo parameter to; // llvm.hwasan.check.memaccess. Shared between the pass and the backend. Bits; // 0-15 are also used by the runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/HWAddressSanitizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/InstrProfiling.h:414,Integrability,interface,interface,414,"//===- Transforms/Instrumentation/InstrProfiling.h --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for LLVM's PGO Instrumentation lowering; /// pass.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/InstrProfiling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/InstrProfiling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemorySanitizer.h:411,Security,sanitiz,sanitizer,411,"//===- Transforms/Instrumentation/MemorySanitizer.h - MSan Pass -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the memoy sanitizer pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemorySanitizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemorySanitizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemorySanitizer.h:79,Safety,detect,detect,79,"/// A module pass for msan instrumentation.; ///; /// Instruments functions to detect unitialized reads. This function pass; /// inserts calls to runtime library functions. If the functions aren't declared; /// yet, the pass inserts the declarations. Otherwise the existing globals are; /// used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemorySanitizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemorySanitizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h:29,Integrability,interface,interface,29,// namespace vfs; /// Public interface to the memory profiler pass for instrumenting code to; /// profile memory accesses.; ///; /// The profiler itself is a function pass that works by inserting various; /// calls to the MemProfiler runtime library functions. The runtime library; /// essentially replaces malloc() and free() with custom implementations that; /// record data about the allocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h:113,Security,access,accesses,113,// namespace vfs; /// Public interface to the memory profiler pass for instrumenting code to; /// profile memory accesses.; ///; /// The profiler itself is a function pass that works by inserting various; /// calls to the MemProfiler runtime library functions. The runtime library; /// essentially replaces malloc() and free() with custom implementations that; /// record data about the allocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h:11,Integrability,interface,interface,11,/// Public interface to the memory profiler module pass for instrumenting code; /// to profile memory allocations and accesses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h:118,Security,access,accesses,118,/// Public interface to the memory profiler module pass for instrumenting code; /// to profile memory allocations and accesses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h:418,Integrability,interface,interface,418,"//===- Transforms/Instrumentation/PGOInstrumentation.h ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for IR based instrumentation passes (; /// (profile-gen, and profile-use).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h:131,Modifiability,variab,variables,131,// namespace vfs; /// The instrumentation (profile-instr-gen) pass for IR based PGO.; // We use this pass to create COMDAT profile variables for context; // sensitive PGO (CSPGO). The reason to have a pass for this is CSPGO; // can be run after LTO/ThinLTO linking. Lld linker needs to see; // all the COMDAT variables before linking. So we have this pass; // always run before linking for CSPGO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h:309,Modifiability,variab,variables,309,// namespace vfs; /// The instrumentation (profile-instr-gen) pass for IR based PGO.; // We use this pass to create COMDAT profile variables for context; // sensitive PGO (CSPGO). The reason to have a pass for this is CSPGO; // can be run after LTO/ThinLTO linking. Lld linker needs to see; // all the COMDAT variables before linking. So we have this pass; // always run before linking for CSPGO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h:27,Performance,optimiz,optimization,27,/// The profile size based optimization pass for memory intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h:31,Security,Sanitiz,SanitizerBinaryMetadata,31,"//===------- Definition of the SanitizerBinaryMetadata class ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the SanitizerBinaryMetadata pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h:406,Security,Sanitiz,SanitizerBinaryMetadata,406,"//===------- Definition of the SanitizerBinaryMetadata class ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the SanitizerBinaryMetadata pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h:11,Integrability,interface,interface,11,/// Public interface to the SanitizerBinaryMetadata module pass for emitting; /// metadata for binary analysis sanitizers.; //; /// The pass should be inserted after optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h:166,Performance,optimiz,optimizations,166,/// Public interface to the SanitizerBinaryMetadata module pass for emitting; /// metadata for binary analysis sanitizers.; //; /// The pass should be inserted after optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h:28,Security,Sanitiz,SanitizerBinaryMetadata,28,/// Public interface to the SanitizerBinaryMetadata module pass for emitting; /// metadata for binary analysis sanitizers.; //; /// The pass should be inserted after optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h:111,Security,sanitiz,sanitizers,111,/// Public interface to the SanitizerBinaryMetadata module pass for emitting; /// metadata for binary analysis sanitizers.; //; /// The pass should be inserted after optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerBinaryMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h:33,Security,Sanitiz,SanitizerCoverage,33,"//===--------- Definition of the SanitizerCoverage class --------*- C++ -*-===//; //; // The LLVM Compiler Infrastructure; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // SanitizerCoverage is a simple code coverage implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h:424,Security,Sanitiz,SanitizerCoverage,424,"//===--------- Definition of the SanitizerCoverage class --------*- C++ -*-===//; //; // The LLVM Compiler Infrastructure; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // SanitizerCoverage is a simple code coverage implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h:447,Usability,simpl,simple,447,"//===--------- Definition of the SanitizerCoverage class --------*- C++ -*-===//; //; // The LLVM Compiler Infrastructure; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // SanitizerCoverage is a simple code coverage implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ThreadSanitizer.h:412,Security,sanitiz,sanitizer,412,"//===- Transforms/Instrumentation/ThreadSanitizer.h - TSan Pass -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the thread sanitizer pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ThreadSanitizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ThreadSanitizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ThreadSanitizer.h:88,Performance,race condition,race conditions,88,"/// A function pass for tsan instrumentation.; ///; /// Instruments functions to detect race conditions reads. This function pass; /// inserts calls to runtime library functions. If the functions aren't declared; /// yet, the pass inserts the declarations. Otherwise the existing globals are",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ThreadSanitizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ThreadSanitizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ThreadSanitizer.h:81,Safety,detect,detect,81,"/// A function pass for tsan instrumentation.; ///; /// Instruments functions to detect race conditions reads. This function pass; /// inserts calls to runtime library functions. If the functions aren't declared; /// yet, the pass inserts the declarations. Otherwise the existing globals are",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ThreadSanitizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/ThreadSanitizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/AlwaysInliner.h:301,Usability,simpl,simplest,301,"/// Inlines functions marked as ""always_inline"".; ///; /// Note that this does not inline call sites marked as always_inline and does; /// not delete the functions even when all users are inlined. The normal; /// inliner should be used to handle call site inlining, this pass's goal is to; /// be the simplest possible pass to remove always_inline function definitions'; /// uses by inlining them. The \c GlobalDCE pass can be used to remove these; /// functions once all users are gone.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/AlwaysInliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/AlwaysInliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4692,Availability,avail,available,4692,"fixpoint is reached, or a pessimistic fix; // point is enforced after a timeout, the abstract attributes are tasked to; // manifest their result in the IR for passes to come.; //; // Attribute manifestation is not mandatory. If desired, there is support to; // generate a single or multiple LLVM-IR attributes already in the helper struct; // IRAttribute. In the simplest case, a subclass inherits from IRAttribute with; // a proper Attribute::AttrKind as template parameter. The Attributor; // manifestation framework will then create and place a new attribute if it is; // allowed to do so (based on the abstract state). Other use cases can be; // achieved by overloading AbstractAttribute or IRAttribute methods.; //; //; // The ""mechanics"" of adding a new ""abstract attribute"":; // - Define a class (transitively) inheriting from AbstractAttribute and one; // (which could be the same) that (transitively) inherits from AbstractState.; // For the latter, consider the already available BooleanState and; // {Inc,Dec,Bit}IntegerState if they fit your needs, e.g., you require only a; // number tracking or bit-encoding.; // - Implement all pure methods. Also use overloading if the attribute is not; // conforming with the ""default"" behavior: A (set of) LLVM-IR attribute(s) for; // an argument, call site argument, function return value, or function. See; // the class and method descriptions for more information on the two; // ""Abstract"" classes and their respective methods.; // - Register opportunities for the new abstract attribute in the; // `Attributor::identifyDefaultAbstractAttributes` method if it should be; // counted as a 'default' attribute.; // - Add sufficient tests.; // - Add a Statistics object for bookkeeping. If it is a simple (set of); // attribute(s) manifested through the Attributor manifestation framework, see; // the bookkeeping function in Attributor.cpp.; // - If instructions with a certain opcode are interesting to the attribute, add; // that opcode to the swit",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:2069,Deployability,update,update,2069,"rom the AbstractAttribute class, actually; // describe properties of the code. They can correspond to actual LLVM-IR; // attributes, or they can be more general, ultimately unrelated to LLVM-IR; // attributes. The latter is useful when an abstract attributes provides; // information to other abstract attributes in-flight but we might not want to; // manifest the information. The Attributor allows to query in-flight abstract; // attributes through the `Attributor::getAAFor` method (see the method; // description for an example). If the method is used by an abstract attribute; // P, and it results in an abstract attribute Q, the Attributor will; // automatically capture a potential dependence from Q to P. This dependence; // will cause P to be reevaluated whenever Q changes in the future.; //; // The Attributor will only reevaluate abstract attributes that might have; // changed since the last iteration. That means that the Attribute will not; // revisit all instructions/blocks/functions in the module but only query; // an update from a subset of the abstract attributes.; //; // The update method `AbstractAttribute::updateImpl` is implemented by the; // specific ""abstract attribute"" subclasses. The method is invoked whenever the; // currently assumed state (see the AbstractState class) might not be valid; // anymore. This can, for example, happen if the state was dependent on another; // abstract attribute that changed. In every invocation, the update method has; // to adjust the internal state of an abstract attribute to a point that is; // justifiable by the underlying IR and the current state of abstract attributes; // in-flight. Since the IR is given and assumed to be valid, the information; // derived from it can be assumed to hold. However, information derived from; // other abstract attributes is conditional on various things. If the justifying; // state changed, the `updateImpl` has to revisit the situation and potentially; // find another justification or lim",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:2130,Deployability,update,update,2130,"more general, ultimately unrelated to LLVM-IR; // attributes. The latter is useful when an abstract attributes provides; // information to other abstract attributes in-flight but we might not want to; // manifest the information. The Attributor allows to query in-flight abstract; // attributes through the `Attributor::getAAFor` method (see the method; // description for an example). If the method is used by an abstract attribute; // P, and it results in an abstract attribute Q, the Attributor will; // automatically capture a potential dependence from Q to P. This dependence; // will cause P to be reevaluated whenever Q changes in the future.; //; // The Attributor will only reevaluate abstract attributes that might have; // changed since the last iteration. That means that the Attribute will not; // revisit all instructions/blocks/functions in the module but only query; // an update from a subset of the abstract attributes.; //; // The update method `AbstractAttribute::updateImpl` is implemented by the; // specific ""abstract attribute"" subclasses. The method is invoked whenever the; // currently assumed state (see the AbstractState class) might not be valid; // anymore. This can, for example, happen if the state was dependent on another; // abstract attribute that changed. In every invocation, the update method has; // to adjust the internal state of an abstract attribute to a point that is; // justifiable by the underlying IR and the current state of abstract attributes; // in-flight. Since the IR is given and assumed to be valid, the information; // derived from it can be assumed to hold. However, information derived from; // other abstract attributes is conditional on various things. If the justifying; // state changed, the `updateImpl` has to revisit the situation and potentially; // find another justification or limit the optimistic assumes made.; //; // Change is the key in this framework. Until a state of no-change, thus a; // fixpoint, is reached, the Attrib",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:2164,Deployability,update,updateImpl,2164,"more general, ultimately unrelated to LLVM-IR; // attributes. The latter is useful when an abstract attributes provides; // information to other abstract attributes in-flight but we might not want to; // manifest the information. The Attributor allows to query in-flight abstract; // attributes through the `Attributor::getAAFor` method (see the method; // description for an example). If the method is used by an abstract attribute; // P, and it results in an abstract attribute Q, the Attributor will; // automatically capture a potential dependence from Q to P. This dependence; // will cause P to be reevaluated whenever Q changes in the future.; //; // The Attributor will only reevaluate abstract attributes that might have; // changed since the last iteration. That means that the Attribute will not; // revisit all instructions/blocks/functions in the module but only query; // an update from a subset of the abstract attributes.; //; // The update method `AbstractAttribute::updateImpl` is implemented by the; // specific ""abstract attribute"" subclasses. The method is invoked whenever the; // currently assumed state (see the AbstractState class) might not be valid; // anymore. This can, for example, happen if the state was dependent on another; // abstract attribute that changed. In every invocation, the update method has; // to adjust the internal state of an abstract attribute to a point that is; // justifiable by the underlying IR and the current state of abstract attributes; // in-flight. Since the IR is given and assumed to be valid, the information; // derived from it can be assumed to hold. However, information derived from; // other abstract attributes is conditional on various things. If the justifying; // state changed, the `updateImpl` has to revisit the situation and potentially; // find another justification or limit the optimistic assumes made.; //; // Change is the key in this framework. Until a state of no-change, thus a; // fixpoint, is reached, the Attrib",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:2499,Deployability,update,update,2499,"s used by an abstract attribute; // P, and it results in an abstract attribute Q, the Attributor will; // automatically capture a potential dependence from Q to P. This dependence; // will cause P to be reevaluated whenever Q changes in the future.; //; // The Attributor will only reevaluate abstract attributes that might have; // changed since the last iteration. That means that the Attribute will not; // revisit all instructions/blocks/functions in the module but only query; // an update from a subset of the abstract attributes.; //; // The update method `AbstractAttribute::updateImpl` is implemented by the; // specific ""abstract attribute"" subclasses. The method is invoked whenever the; // currently assumed state (see the AbstractState class) might not be valid; // anymore. This can, for example, happen if the state was dependent on another; // abstract attribute that changed. In every invocation, the update method has; // to adjust the internal state of an abstract attribute to a point that is; // justifiable by the underlying IR and the current state of abstract attributes; // in-flight. Since the IR is given and assumed to be valid, the information; // derived from it can be assumed to hold. However, information derived from; // other abstract attributes is conditional on various things. If the justifying; // state changed, the `updateImpl` has to revisit the situation and potentially; // find another justification or limit the optimistic assumes made.; //; // Change is the key in this framework. Until a state of no-change, thus a; // fixpoint, is reached, the Attributor will query the abstract attributes; // in-flight to re-evaluate their state. If the (current) state is too; // optimistic, hence it cannot be justified anymore through other abstract; // attributes or the state of the IR, the state of the abstract attribute will; // have to change. Generally, we assume abstract attribute state to be a finite; // height lattice and the update function to be mono",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:2938,Deployability,update,updateImpl,2938,"ill not; // revisit all instructions/blocks/functions in the module but only query; // an update from a subset of the abstract attributes.; //; // The update method `AbstractAttribute::updateImpl` is implemented by the; // specific ""abstract attribute"" subclasses. The method is invoked whenever the; // currently assumed state (see the AbstractState class) might not be valid; // anymore. This can, for example, happen if the state was dependent on another; // abstract attribute that changed. In every invocation, the update method has; // to adjust the internal state of an abstract attribute to a point that is; // justifiable by the underlying IR and the current state of abstract attributes; // in-flight. Since the IR is given and assumed to be valid, the information; // derived from it can be assumed to hold. However, information derived from; // other abstract attributes is conditional on various things. If the justifying; // state changed, the `updateImpl` has to revisit the situation and potentially; // find another justification or limit the optimistic assumes made.; //; // Change is the key in this framework. Until a state of no-change, thus a; // fixpoint, is reached, the Attributor will query the abstract attributes; // in-flight to re-evaluate their state. If the (current) state is too; // optimistic, hence it cannot be justified anymore through other abstract; // attributes or the state of the IR, the state of the abstract attribute will; // have to change. Generally, we assume abstract attribute state to be a finite; // height lattice and the update function to be monotone. However, these; // conditions are not enforced because the iteration limit will guarantee; // termination. If an optimistic fixpoint is reached, or a pessimistic fix; // point is enforced after a timeout, the abstract attributes are tasked to; // manifest their result in the IR for passes to come.; //; // Attribute manifestation is not mandatory. If desired, there is support to; // genera",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:3556,Deployability,update,update,3556,"ust the internal state of an abstract attribute to a point that is; // justifiable by the underlying IR and the current state of abstract attributes; // in-flight. Since the IR is given and assumed to be valid, the information; // derived from it can be assumed to hold. However, information derived from; // other abstract attributes is conditional on various things. If the justifying; // state changed, the `updateImpl` has to revisit the situation and potentially; // find another justification or limit the optimistic assumes made.; //; // Change is the key in this framework. Until a state of no-change, thus a; // fixpoint, is reached, the Attributor will query the abstract attributes; // in-flight to re-evaluate their state. If the (current) state is too; // optimistic, hence it cannot be justified anymore through other abstract; // attributes or the state of the IR, the state of the abstract attribute will; // have to change. Generally, we assume abstract attribute state to be a finite; // height lattice and the update function to be monotone. However, these; // conditions are not enforced because the iteration limit will guarantee; // termination. If an optimistic fixpoint is reached, or a pessimistic fix; // point is enforced after a timeout, the abstract attributes are tasked to; // manifest their result in the IR for passes to come.; //; // Attribute manifestation is not mandatory. If desired, there is support to; // generate a single or multiple LLVM-IR attributes already in the helper struct; // IRAttribute. In the simplest case, a subclass inherits from IRAttribute with; // a proper Attribute::AttrKind as template parameter. The Attributor; // manifestation framework will then create and place a new attribute if it is; // allowed to do so (based on the abstract state). Other use cases can be; // achieved by overloading AbstractAttribute or IRAttribute methods.; //; //; // The ""mechanics"" of adding a new ""abstract attribute"":; // - Define a class (transitivel",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:1721,Integrability,depend,dependence,1721,"nge between abstract attributes in-flight.; //; // The Attributor class is the driver and the link between the various abstract; // attributes. The Attributor will iterate until a fixpoint state is reached by; // all abstract attributes in-flight, or until it will enforce a pessimistic fix; // point because an iteration limit is reached.; //; // Abstract attributes, derived from the AbstractAttribute class, actually; // describe properties of the code. They can correspond to actual LLVM-IR; // attributes, or they can be more general, ultimately unrelated to LLVM-IR; // attributes. The latter is useful when an abstract attributes provides; // information to other abstract attributes in-flight but we might not want to; // manifest the information. The Attributor allows to query in-flight abstract; // attributes through the `Attributor::getAAFor` method (see the method; // description for an example). If the method is used by an abstract attribute; // P, and it results in an abstract attribute Q, the Attributor will; // automatically capture a potential dependence from Q to P. This dependence; // will cause P to be reevaluated whenever Q changes in the future.; //; // The Attributor will only reevaluate abstract attributes that might have; // changed since the last iteration. That means that the Attribute will not; // revisit all instructions/blocks/functions in the module but only query; // an update from a subset of the abstract attributes.; //; // The update method `AbstractAttribute::updateImpl` is implemented by the; // specific ""abstract attribute"" subclasses. The method is invoked whenever the; // currently assumed state (see the AbstractState class) might not be valid; // anymore. This can, for example, happen if the state was dependent on another; // abstract attribute that changed. In every invocation, the update method has; // to adjust the internal state of an abstract attribute to a point that is; // justifiable by the underlying IR and the current state of",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:1750,Integrability,depend,dependence,1750,"attributes. The Attributor will iterate until a fixpoint state is reached by; // all abstract attributes in-flight, or until it will enforce a pessimistic fix; // point because an iteration limit is reached.; //; // Abstract attributes, derived from the AbstractAttribute class, actually; // describe properties of the code. They can correspond to actual LLVM-IR; // attributes, or they can be more general, ultimately unrelated to LLVM-IR; // attributes. The latter is useful when an abstract attributes provides; // information to other abstract attributes in-flight but we might not want to; // manifest the information. The Attributor allows to query in-flight abstract; // attributes through the `Attributor::getAAFor` method (see the method; // description for an example). If the method is used by an abstract attribute; // P, and it results in an abstract attribute Q, the Attributor will; // automatically capture a potential dependence from Q to P. This dependence; // will cause P to be reevaluated whenever Q changes in the future.; //; // The Attributor will only reevaluate abstract attributes that might have; // changed since the last iteration. That means that the Attribute will not; // revisit all instructions/blocks/functions in the module but only query; // an update from a subset of the abstract attributes.; //; // The update method `AbstractAttribute::updateImpl` is implemented by the; // specific ""abstract attribute"" subclasses. The method is invoked whenever the; // currently assumed state (see the AbstractState class) might not be valid; // anymore. This can, for example, happen if the state was dependent on another; // abstract attribute that changed. In every invocation, the update method has; // to adjust the internal state of an abstract attribute to a point that is; // justifiable by the underlying IR and the current state of abstract attributes; // in-flight. Since the IR is given and assumed to be valid, the information; // derived from it can be assume",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:2416,Integrability,depend,dependent,2416,"utor allows to query in-flight abstract; // attributes through the `Attributor::getAAFor` method (see the method; // description for an example). If the method is used by an abstract attribute; // P, and it results in an abstract attribute Q, the Attributor will; // automatically capture a potential dependence from Q to P. This dependence; // will cause P to be reevaluated whenever Q changes in the future.; //; // The Attributor will only reevaluate abstract attributes that might have; // changed since the last iteration. That means that the Attribute will not; // revisit all instructions/blocks/functions in the module but only query; // an update from a subset of the abstract attributes.; //; // The update method `AbstractAttribute::updateImpl` is implemented by the; // specific ""abstract attribute"" subclasses. The method is invoked whenever the; // currently assumed state (see the AbstractState class) might not be valid; // anymore. This can, for example, happen if the state was dependent on another; // abstract attribute that changed. In every invocation, the update method has; // to adjust the internal state of an abstract attribute to a point that is; // justifiable by the underlying IR and the current state of abstract attributes; // in-flight. Since the IR is given and assumed to be valid, the information; // derived from it can be assumed to hold. However, information derived from; // other abstract attributes is conditional on various things. If the justifying; // state changed, the `updateImpl` has to revisit the situation and potentially; // find another justification or limit the optimistic assumes made.; //; // Change is the key in this framework. Until a state of no-change, thus a; // fixpoint, is reached, the Attributor will query the abstract attributes; // in-flight to re-evaluate their state. If the (current) state is too; // optimistic, hence it cannot be justified anymore through other abstract; // attributes or the state of the IR, the state of t",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:5888,Integrability,interface,interface,5888,"er struct; // IRAttribute. In the simplest case, a subclass inherits from IRAttribute with; // a proper Attribute::AttrKind as template parameter. The Attributor; // manifestation framework will then create and place a new attribute if it is; // allowed to do so (based on the abstract state). Other use cases can be; // achieved by overloading AbstractAttribute or IRAttribute methods.; //; //; // The ""mechanics"" of adding a new ""abstract attribute"":; // - Define a class (transitively) inheriting from AbstractAttribute and one; // (which could be the same) that (transitively) inherits from AbstractState.; // For the latter, consider the already available BooleanState and; // {Inc,Dec,Bit}IntegerState if they fit your needs, e.g., you require only a; // number tracking or bit-encoding.; // - Implement all pure methods. Also use overloading if the attribute is not; // conforming with the ""default"" behavior: A (set of) LLVM-IR attribute(s) for; // an argument, call site argument, function return value, or function. See; // the class and method descriptions for more information on the two; // ""Abstract"" classes and their respective methods.; // - Register opportunities for the new abstract attribute in the; // `Attributor::identifyDefaultAbstractAttributes` method if it should be; // counted as a 'default' attribute.; // - Add sufficient tests.; // - Add a Statistics object for bookkeeping. If it is a simple (set of); // attribute(s) manifested through the Attributor manifestation framework, see; // the bookkeeping function in Attributor.cpp.; // - If instructions with a certain opcode are interesting to the attribute, add; // that opcode to the switch in `Attributor::identifyAbstractAttributes`. This; // will make it possible to query all those instructions through the; // `InformationCache::getOpcodeInstMapForFunction` interface and eliminate the; // need to traverse the IR repeatedly.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4101,Modifiability,inherit,inherits,4101,"o-change, thus a; // fixpoint, is reached, the Attributor will query the abstract attributes; // in-flight to re-evaluate their state. If the (current) state is too; // optimistic, hence it cannot be justified anymore through other abstract; // attributes or the state of the IR, the state of the abstract attribute will; // have to change. Generally, we assume abstract attribute state to be a finite; // height lattice and the update function to be monotone. However, these; // conditions are not enforced because the iteration limit will guarantee; // termination. If an optimistic fixpoint is reached, or a pessimistic fix; // point is enforced after a timeout, the abstract attributes are tasked to; // manifest their result in the IR for passes to come.; //; // Attribute manifestation is not mandatory. If desired, there is support to; // generate a single or multiple LLVM-IR attributes already in the helper struct; // IRAttribute. In the simplest case, a subclass inherits from IRAttribute with; // a proper Attribute::AttrKind as template parameter. The Attributor; // manifestation framework will then create and place a new attribute if it is; // allowed to do so (based on the abstract state). Other use cases can be; // achieved by overloading AbstractAttribute or IRAttribute methods.; //; //; // The ""mechanics"" of adding a new ""abstract attribute"":; // - Define a class (transitively) inheriting from AbstractAttribute and one; // (which could be the same) that (transitively) inherits from AbstractState.; // For the latter, consider the already available BooleanState and; // {Inc,Dec,Bit}IntegerState if they fit your needs, e.g., you require only a; // number tracking or bit-encoding.; // - Implement all pure methods. Also use overloading if the attribute is not; // conforming with the ""default"" behavior: A (set of) LLVM-IR attribute(s) for; // an argument, call site argument, function return value, or function. See; // the class and method descriptions for more informati",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4530,Modifiability,inherit,inheriting,4530,"t lattice and the update function to be monotone. However, these; // conditions are not enforced because the iteration limit will guarantee; // termination. If an optimistic fixpoint is reached, or a pessimistic fix; // point is enforced after a timeout, the abstract attributes are tasked to; // manifest their result in the IR for passes to come.; //; // Attribute manifestation is not mandatory. If desired, there is support to; // generate a single or multiple LLVM-IR attributes already in the helper struct; // IRAttribute. In the simplest case, a subclass inherits from IRAttribute with; // a proper Attribute::AttrKind as template parameter. The Attributor; // manifestation framework will then create and place a new attribute if it is; // allowed to do so (based on the abstract state). Other use cases can be; // achieved by overloading AbstractAttribute or IRAttribute methods.; //; //; // The ""mechanics"" of adding a new ""abstract attribute"":; // - Define a class (transitively) inheriting from AbstractAttribute and one; // (which could be the same) that (transitively) inherits from AbstractState.; // For the latter, consider the already available BooleanState and; // {Inc,Dec,Bit}IntegerState if they fit your needs, e.g., you require only a; // number tracking or bit-encoding.; // - Implement all pure methods. Also use overloading if the attribute is not; // conforming with the ""default"" behavior: A (set of) LLVM-IR attribute(s) for; // an argument, call site argument, function return value, or function. See; // the class and method descriptions for more information on the two; // ""Abstract"" classes and their respective methods.; // - Register opportunities for the new abstract attribute in the; // `Attributor::identifyDefaultAbstractAttributes` method if it should be; // counted as a 'default' attribute.; // - Add sufficient tests.; // - Add a Statistics object for bookkeeping. If it is a simple (set of); // attribute(s) manifested through the Attributor manifestatio",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4622,Modifiability,inherit,inherits,4622,"t lattice and the update function to be monotone. However, these; // conditions are not enforced because the iteration limit will guarantee; // termination. If an optimistic fixpoint is reached, or a pessimistic fix; // point is enforced after a timeout, the abstract attributes are tasked to; // manifest their result in the IR for passes to come.; //; // Attribute manifestation is not mandatory. If desired, there is support to; // generate a single or multiple LLVM-IR attributes already in the helper struct; // IRAttribute. In the simplest case, a subclass inherits from IRAttribute with; // a proper Attribute::AttrKind as template parameter. The Attributor; // manifestation framework will then create and place a new attribute if it is; // allowed to do so (based on the abstract state). Other use cases can be; // achieved by overloading AbstractAttribute or IRAttribute methods.; //; //; // The ""mechanics"" of adding a new ""abstract attribute"":; // - Define a class (transitively) inheriting from AbstractAttribute and one; // (which could be the same) that (transitively) inherits from AbstractState.; // For the latter, consider the already available BooleanState and; // {Inc,Dec,Bit}IntegerState if they fit your needs, e.g., you require only a; // number tracking or bit-encoding.; // - Implement all pure methods. Also use overloading if the attribute is not; // conforming with the ""default"" behavior: A (set of) LLVM-IR attribute(s) for; // an argument, call site argument, function return value, or function. See; // the class and method descriptions for more information on the two; // ""Abstract"" classes and their respective methods.; // - Register opportunities for the new abstract attribute in the; // `Attributor::identifyDefaultAbstractAttributes` method if it should be; // counted as a 'default' attribute.; // - Add sufficient tests.; // - Add a Statistics object for bookkeeping. If it is a simple (set of); // attribute(s) manifested through the Attributor manifestatio",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:3784,Safety,timeout,timeout,3784,"o hold. However, information derived from; // other abstract attributes is conditional on various things. If the justifying; // state changed, the `updateImpl` has to revisit the situation and potentially; // find another justification or limit the optimistic assumes made.; //; // Change is the key in this framework. Until a state of no-change, thus a; // fixpoint, is reached, the Attributor will query the abstract attributes; // in-flight to re-evaluate their state. If the (current) state is too; // optimistic, hence it cannot be justified anymore through other abstract; // attributes or the state of the IR, the state of the abstract attribute will; // have to change. Generally, we assume abstract attribute state to be a finite; // height lattice and the update function to be monotone. However, these; // conditions are not enforced because the iteration limit will guarantee; // termination. If an optimistic fixpoint is reached, or a pessimistic fix; // point is enforced after a timeout, the abstract attributes are tasked to; // manifest their result in the IR for passes to come.; //; // Attribute manifestation is not mandatory. If desired, there is support to; // generate a single or multiple LLVM-IR attributes already in the helper struct; // IRAttribute. In the simplest case, a subclass inherits from IRAttribute with; // a proper Attribute::AttrKind as template parameter. The Attributor; // manifestation framework will then create and place a new attribute if it is; // allowed to do so (based on the abstract state). Other use cases can be; // achieved by overloading AbstractAttribute or IRAttribute methods.; //; //; // The ""mechanics"" of adding a new ""abstract attribute"":; // - Define a class (transitively) inheriting from AbstractAttribute and one; // (which could be the same) that (transitively) inherits from AbstractState.; // For the latter, consider the already available BooleanState and; // {Inc,Dec,Bit}IntegerState if they fit your needs, e.g., you require",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:5395,Testability,test,tests,5395,"er struct; // IRAttribute. In the simplest case, a subclass inherits from IRAttribute with; // a proper Attribute::AttrKind as template parameter. The Attributor; // manifestation framework will then create and place a new attribute if it is; // allowed to do so (based on the abstract state). Other use cases can be; // achieved by overloading AbstractAttribute or IRAttribute methods.; //; //; // The ""mechanics"" of adding a new ""abstract attribute"":; // - Define a class (transitively) inheriting from AbstractAttribute and one; // (which could be the same) that (transitively) inherits from AbstractState.; // For the latter, consider the already available BooleanState and; // {Inc,Dec,Bit}IntegerState if they fit your needs, e.g., you require only a; // number tracking or bit-encoding.; // - Implement all pure methods. Also use overloading if the attribute is not; // conforming with the ""default"" behavior: A (set of) LLVM-IR attribute(s) for; // an argument, call site argument, function return value, or function. See; // the class and method descriptions for more information on the two; // ""Abstract"" classes and their respective methods.; // - Register opportunities for the new abstract attribute in the; // `Attributor::identifyDefaultAbstractAttributes` method if it should be; // counted as a 'default' attribute.; // - Add sufficient tests.; // - Add a Statistics object for bookkeeping. If it is a simple (set of); // attribute(s) manifested through the Attributor manifestation framework, see; // the bookkeeping function in Attributor.cpp.; // - If instructions with a certain opcode are interesting to the attribute, add; // that opcode to the switch in `Attributor::identifyAbstractAttributes`. This; // will make it possible to query all those instructions through the; // `InformationCache::getOpcodeInstMapForFunction` interface and eliminate the; // need to traverse the IR repeatedly.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4075,Usability,simpl,simplest,4075,"o-change, thus a; // fixpoint, is reached, the Attributor will query the abstract attributes; // in-flight to re-evaluate their state. If the (current) state is too; // optimistic, hence it cannot be justified anymore through other abstract; // attributes or the state of the IR, the state of the abstract attribute will; // have to change. Generally, we assume abstract attribute state to be a finite; // height lattice and the update function to be monotone. However, these; // conditions are not enforced because the iteration limit will guarantee; // termination. If an optimistic fixpoint is reached, or a pessimistic fix; // point is enforced after a timeout, the abstract attributes are tasked to; // manifest their result in the IR for passes to come.; //; // Attribute manifestation is not mandatory. If desired, there is support to; // generate a single or multiple LLVM-IR attributes already in the helper struct; // IRAttribute. In the simplest case, a subclass inherits from IRAttribute with; // a proper Attribute::AttrKind as template parameter. The Attributor; // manifestation framework will then create and place a new attribute if it is; // allowed to do so (based on the abstract state). Other use cases can be; // achieved by overloading AbstractAttribute or IRAttribute methods.; //; //; // The ""mechanics"" of adding a new ""abstract attribute"":; // - Define a class (transitively) inheriting from AbstractAttribute and one; // (which could be the same) that (transitively) inherits from AbstractState.; // For the latter, consider the already available BooleanState and; // {Inc,Dec,Bit}IntegerState if they fit your needs, e.g., you require only a; // number tracking or bit-encoding.; // - Implement all pure methods. Also use overloading if the attribute is not; // conforming with the ""default"" behavior: A (set of) LLVM-IR attribute(s) for; // an argument, call site argument, function return value, or function. See; // the class and method descriptions for more informati",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:5460,Usability,simpl,simple,5460,"er struct; // IRAttribute. In the simplest case, a subclass inherits from IRAttribute with; // a proper Attribute::AttrKind as template parameter. The Attributor; // manifestation framework will then create and place a new attribute if it is; // allowed to do so (based on the abstract state). Other use cases can be; // achieved by overloading AbstractAttribute or IRAttribute methods.; //; //; // The ""mechanics"" of adding a new ""abstract attribute"":; // - Define a class (transitively) inheriting from AbstractAttribute and one; // (which could be the same) that (transitively) inherits from AbstractState.; // For the latter, consider the already available BooleanState and; // {Inc,Dec,Bit}IntegerState if they fit your needs, e.g., you require only a; // number tracking or bit-encoding.; // - Implement all pure methods. Also use overloading if the attribute is not; // conforming with the ""default"" behavior: A (set of) LLVM-IR attribute(s) for; // an argument, call site argument, function return value, or function. See; // the class and method descriptions for more information on the two; // ""Abstract"" classes and their respective methods.; // - Register opportunities for the new abstract attribute in the; // `Attributor::identifyDefaultAbstractAttributes` method if it should be; // counted as a 'default' attribute.; // - Add sufficient tests.; // - Add a Statistics object for bookkeeping. If it is a simple (set of); // attribute(s) manifested through the Attributor manifestation framework, see; // the bookkeeping function in Attributor.cpp.; // - If instructions with a certain opcode are interesting to the attribute, add; // that opcode to the switch in `Attributor::identifyAbstractAttributes`. This; // will make it possible to query all those instructions through the; // `InformationCache::getOpcodeInstMapForFunction` interface and eliminate the; // need to traverse the IR repeatedly.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:27,Security,access,access,27,"/// Helper to represent an access offset and size, with logic to deal with; /// uncertainty and check for overlapping accesses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:118,Security,access,accesses,118,"/// Helper to represent an access offset and size, with logic to deal with; /// uncertainty and check for overlapping accesses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:56,Testability,log,logic,56,"/// Helper to represent an access offset and size, with logic to deal with; /// uncertainty and check for overlapping accesses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:315,Integrability,Depend,Dependences,315,"/// Collect all potential values \p LI could read into \p PotentialValues. That; /// is, the only values read by \p LI are assumed to be known and all are in; /// \p PotentialValues. \p PotentialValueOrigins will contain all the; /// instructions that might have put a potential value into \p PotentialValues.; /// Dependences onto \p QueryingAA are properly tracked, \p; /// UsedAssumedInformation will inform the caller if assumed information was; /// used.; ///; /// \returns True if the assumed potential copies are all in \p PotentialValues,; /// false if something went wrong and the copies could not be; /// determined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:208,Integrability,Depend,Dependences,208,"/// Collect all potential values of the one stored by \p SI into; /// \p PotentialCopies. That is, the only copies that were made via the; /// store are assumed to be known and all are in \p PotentialCopies. Dependences; /// onto \p QueryingAA are properly tracked, \p UsedAssumedInformation will; /// inform the caller if assumed information was used.; ///; /// \returns True if the assumed potential copies are all in \p PotentialCopies,; /// false if something went wrong and the copies could not be; /// determined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:117,Integrability,depend,dependences,117,/// Return true if \p IRP is readonly. This will query respective AAs that; /// deduce the information and introduce dependences for \p QueryingAA.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:117,Integrability,depend,dependences,117,/// Return true if \p IRP is readnone. This will query respective AAs that; /// deduce the information and introduce dependences for \p QueryingAA.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:20,Integrability,depend,dependence,20,///< Do not track a dependence between source and target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:48,Integrability,depend,dependency,48,///}; /// The data structure for the nodes of a dependency graph,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:50,Deployability,update,updated,50,/// Set of dependency graph nodes which should be updated if this one; /// is updated. The bit encodes if it is optional.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:78,Deployability,update,updated,78,/// Set of dependency graph nodes which should be updated if this one; /// is updated. The bit encodes if it is optional.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:11,Integrability,depend,dependency,11,/// Set of dependency graph nodes which should be updated if this one; /// is updated. The bit encodes if it is optional.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:196,Deployability,update,updated,196,"/// The data structure for the dependency graph; ///; /// Note that in this graph if there is an edge from A to B (A -> B),; /// then it means that B depends on A, and when the state of A is; /// updated, node B should also be updated",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:227,Deployability,update,updated,227,"/// The data structure for the dependency graph; ///; /// Note that in this graph if there is an edge from A to B (A -> B),; /// then it means that B depends on A, and when the state of A is; /// updated, node B should also be updated",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:31,Integrability,depend,dependency,31,"/// The data structure for the dependency graph; ///; /// Note that in this graph if there is an edge from A to B (A -> B),; /// then it means that B depends on A, and when the state of A is; /// updated, node B should also be updated",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:150,Integrability,depend,depends,150,"/// The data structure for the dependency graph; ///; /// Note that in this graph if there is an edge from A to B (A -> B),; /// then it means that B depends on A, and when the state of A is; /// updated, node B should also be updated",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:34,Integrability,depend,dependency,34,"/// There is no root node for the dependency graph. But the SCCIterator; /// requires a single entry point, so we maintain a fake(""synthetic"") root; /// node that depends on every node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:163,Integrability,depend,depends,163,"/// There is no root node for the dependency graph. But the SCCIterator; /// requires a single entry point, so we maintain a fake(""synthetic"") root; /// node that depends on every node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:10,Integrability,depend,dependency,10,/// Print dependency graph,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,Availability,avail,available,24,/// Default constructor available to create invalid positions implicitly. All; /// other positions need to be created explicitly through the appropriate; /// static member function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Testability,log,logic,16,// We reuse the logic that associates callback calles to arguments of a; // call site here to identify the callback callee as the associated; // function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:53,Integrability,interface,interface,53,"/// Return true if the position refers to a function interface, that is the; /// function scope, the function return, or an argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Deployability,Update,Update,4,/// Update the attributes associated with this function or call site scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:61,Security,hash,hashing,61,///}; /// Conversion into a void * to allow reuse of pointer hashing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:61,Availability,mask,mask,61,// Reserve the maximal amount of bits so there is no need to mask out the; // remaining ones. We will not encode anything else in the pointer anyway.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:358,Integrability,depend,depending,358,"/// A visitor class for IR positions.; ///; /// Given a position P, the SubsumingPositionIterator allows to visit ""subsuming; /// positions"" wrt. attributes/information. Thus, if a piece of information; /// holds for a subsuming position, it also holds for the position P.; ///; /// The subsuming positions always include the initial position and then,; /// depending on the position kind, additionally the following ones:; /// - for IRP_RETURNED:; /// - the function (IRP_FUNCTION); /// - for IRP_ARGUMENT:; /// - the function (IRP_FUNCTION); /// - for IRP_CALL_SITE:; /// - the callee (IRP_FUNCTION), if known; /// - for IRP_CALL_SITE_RETURNED:; /// - the callee (IRP_RETURNED), if known; /// - the call site (IRP_FUNCTION); /// - the callee (IRP_FUNCTION), if known; /// - for IRP_CALL_SITE_ARGUMENT:; /// - the argument of the callee (IRP_ARGUMENT), if known; /// - the callee (IRP_FUNCTION), if known; /// - the position the call site argument is associated with if it is not; /// anchored to the call site, e.g., if it is an argument then the argument; /// (IRP_ARGUMENT)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for FunctionAnalysisManager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:233,Deployability,update,updated,233,"// The client may be running the old pass manager, in which case, we need to; // map the requested Analysis to its equivalent wrapper in the old pass; // manager. The scheme implemented here does not require every Analysis to be; // updated. Only those new analyses that the client cares about in the old; // pass manager need to expose a LegacyWrapper type, and that wrapper should; // support a getResult() method that matches the new Analysis.; //; // We need SFINAE to check for the LegacyWrapper, but function templates don't; // allow partial specialization, which is needed in this case. So instead, we; // use a constexpr bool to perform the SFINAE, and then use this information; // inside the function template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:126,Integrability,wrap,wrapper,126,"// The client may be running the old pass manager, in which case, we need to; // map the requested Analysis to its equivalent wrapper in the old pass; // manager. The scheme implemented here does not require every Analysis to be; // updated. Only those new analyses that the client cares about in the old; // pass manager need to expose a LegacyWrapper type, and that wrapper should; // support a getResult() method that matches the new Analysis.; //; // We need SFINAE to check for the LegacyWrapper, but function templates don't; // allow partial specialization, which is needed in this case. So instead, we; // use a constexpr bool to perform the SFINAE, and then use this information; // inside the function template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:368,Integrability,wrap,wrapper,368,"// The client may be running the old pass manager, in which case, we need to; // map the requested Analysis to its equivalent wrapper in the old pass; // manager. The scheme implemented here does not require every Analysis to be; // updated. Only those new analyses that the client cares about in the old; // pass manager need to expose a LegacyWrapper type, and that wrapper should; // support a getResult() method that matches the new Analysis.; //; // We need SFINAE to check for the LegacyWrapper, but function templates don't; // allow partial specialization, which is needed in this case. So instead, we; // use a constexpr bool to perform the SFINAE, and then use this information; // inside the function template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:638,Performance,perform,perform,638,"// The client may be running the old pass manager, in which case, we need to; // map the requested Analysis to its equivalent wrapper in the old pass; // manager. The scheme implemented here does not require every Analysis to be; // updated. Only those new analyses that the client cares about in the old; // pass manager need to expose a LegacyWrapper type, and that wrapper should; // support a getResult() method that matches the new Analysis.; //; // We need SFINAE to check for the LegacyWrapper, but function templates don't; // allow partial specialization, which is needed in this case. So instead, we; // use a constexpr bool to perform the SFINAE, and then use this information; // inside the function template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:330,Security,expose,expose,330,"// The client may be running the old pass manager, in which case, we need to; // map the requested Analysis to its equivalent wrapper in the old pass; // manager. The scheme implemented here does not require every Analysis to be; // updated. Only those new analyses that the client cares about in the old; // pass manager need to expose a LegacyWrapper type, and that wrapper should; // support a getResult() method that matches the new Analysis.; //; // We need SFINAE to check for the LegacyWrapper, but function templates don't; // allow partial specialization, which is needed in this case. So instead, we; // use a constexpr bool to perform the SFINAE, and then use this information; // inside the function template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:92,Availability,avail,available,92,"/// If \p CachedOnly is true, no pass is created, just existing results are; /// used. Also available per request.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:10,Performance,Cache,CachedOnly,10,"/// If \p CachedOnly is true, no pass is created, just existing results are; /// used. Also available per request.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:632,Availability,down,down,632,"/// Data structure to hold cached (LLVM-IR) information.; ///; /// All attributes are given an InformationCache object at creation time to; /// avoid inspection of the IR by all of them individually. This default; /// InformationCache will hold information required by 'default' attributes,; /// thus the ones deduced when Attributor::identifyDefaultAbstractAttributes(..); /// is called.; ///; /// If custom abstract attributes, registered manually through; /// Attributor::registerAA(...), need more information, especially if it is not; /// reusable, it is advised to inherit from the InformationCache and cast the; /// instance down in the abstract attributes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:571,Modifiability,inherit,inherit,571,"/// Data structure to hold cached (LLVM-IR) information.; ///; /// All attributes are given an InformationCache object at creation time to; /// avoid inspection of the IR by all of them individually. This default; /// InformationCache will hold information required by 'default' attributes,; /// thus the ones deduced when Attributor::identifyDefaultAbstractAttributes(..); /// is called.; ///; /// If custom abstract attributes, registered manually through; /// Attributor::registerAA(...), need more information, especially if it is not; /// reusable, it is advised to inherit from the InformationCache and cast the; /// instance down in the abstract attributes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:27,Performance,cache,cached,27,"/// Data structure to hold cached (LLVM-IR) information.; ///; /// All attributes are given an InformationCache object at creation time to; /// avoid inspection of the IR by all of them individually. This default; /// InformationCache will hold information required by 'default' attributes,; /// thus the ones deduced when Attributor::identifyDefaultAbstractAttributes(..); /// is called.; ///; /// If custom abstract attributes, registered manually through; /// Attributor::registerAA(...), need more information, especially if it is not; /// reusable, it is advised to inherit from the InformationCache and cast the; /// instance down in the abstract attributes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:144,Safety,avoid,avoid,144,"/// Data structure to hold cached (LLVM-IR) information.; ///; /// All attributes are given an InformationCache object at creation time to; /// avoid inspection of the IR by all of them individually. This default; /// InformationCache will hold information required by 'default' attributes,; /// thus the ones deduced when Attributor::identifyDefaultAbstractAttributes(..); /// is called.; ///; /// If custom abstract attributes, registered manually through; /// Attributor::registerAA(...), need more information, especially if it is not; /// reusable, it is advised to inherit from the InformationCache and cast the; /// instance down in the abstract attributes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:32,Energy Efficiency,allocate,allocated,32,"// The FunctionInfo objects are allocated via a BumpPtrAllocator, we call; // the destructor manually.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:38,Usability,simpl,simply,38,// Allow use in constant bitcasts and simply look through them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:20,Performance,cache,cached,20,/// Invalidates the cached analyses. Valid only when using the new pass; /// manager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:51,Security,access,accessed,51,/// Return true if the stack (llvm::Alloca) can be accessed by other threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:192,Integrability,interface,interface,192,/// Initialize the function information cache \p FI for the function \p F.; ///; /// This method needs to be called for all function that might be looked at; /// through the information cache interface *prior* to looking at them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:40,Performance,cache,cache,40,/// Initialize the function information cache \p FI for the function \p F.; ///; /// This method needs to be called for all function that might be looked at; /// through the information cache interface *prior* to looking at them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:186,Performance,cache,cache,186,/// Initialize the function information cache \p FI for the function \p F.; ///; /// This method needs to be called for all function that might be looked at; /// through the information cache interface *prior* to looking at them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:26,Energy Efficiency,allocate,allocate,26,"/// The allocator used to allocate memory, e.g. for `FunctionInfo`s.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Performance,Cache,Cache,4,/// Cache for block sets to allow reuse.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,Security,access,access,24,/// Give the Attributor access to the members so; /// Attributor::identifyDefaultAbstractAttributes(...) can initialize them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Deployability,Configurat,Configuration,4,/// Configuration for the Attributor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Modifiability,Config,Configuration,4,/// Configuration for the Attributor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:263,Performance,optimiz,optimization,263,"/// Is the user of the Attributor a module pass or not. This determines what; /// IR we can look at and modify. If it is a module pass we might deduce facts; /// outside the initial function set and modify functions outside that set,; /// but only as part of the optimization of the functions in the initial; /// function set. For CGSCC passes we can look at the IR of the module slice; /// but never run any deduction, or perform any modification, outside the; /// initial function set (which we assume is the SCC).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:423,Performance,perform,perform,423,"/// Is the user of the Attributor a module pass or not. This determines what; /// IR we can look at and modify. If it is a module pass we might deduce facts; /// outside the initial function set and modify functions outside that set,; /// but only as part of the optimization of the functions in the initial; /// function set. For CGSCC passes we can look at the IR of the module slice; /// but never run any deduction, or perform any modification, outside the; /// initial function set (which we assume is the SCC).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:28,Modifiability,rewrite,rewrite,28,/// Flag to determine if we rewrite function signatures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:14,Deployability,update,update,14,/// Helper to update an underlying call graph and to delete functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:481,Energy Efficiency,schedul,scheduled,481,"/// The fixpoint analysis framework that orchestrates the attribute deduction.; ///; /// The Attributor provides a general abstract analysis framework (guided; /// fixpoint iteration) as well as helper functions for the deduction of; /// (LLVM-IR) attributes. However, also other code properties can be deduced,; /// propagated, and ultimately manifested through the Attributor framework. This; /// is particularly useful if these properties interact with attributes and a; /// co-scheduled deduction allows to improve the solution. Even if not, thus if; /// attributes/properties are completely isolated, they should use the; /// Attributor framework to reduce the number of fixpoint iteration frameworks; /// in the code base. Note that the Attributor design makes sure that isolated; /// attributes are not impacted, in any way, by others derived at the same time; /// if there is no cross-reasoning performed.; ///; /// The public facing interface of the Attributor is kept simple and basically; /// allows abstract attributes to one thing, query abstract attributes; /// in-flight. There are two reasons to do this:; /// a) The optimistic state of one abstract attribute can justify an; /// optimistic state of another, allowing to framework to end up with an; /// optimistic (=best possible) fixpoint instead of one based solely on; /// information in the IR.; /// b) This avoids reimplementing various kinds of lookups, e.g., to check; /// for existing IR attributes, in favor of a single lookups interface; /// provided by an abstract attribute subclass.; ///; /// NOTE: The mechanics of adding a new ""concrete"" abstract attribute are; /// described in the file comment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:655,Energy Efficiency,reduce,reduce,655,"/// The fixpoint analysis framework that orchestrates the attribute deduction.; ///; /// The Attributor provides a general abstract analysis framework (guided; /// fixpoint iteration) as well as helper functions for the deduction of; /// (LLVM-IR) attributes. However, also other code properties can be deduced,; /// propagated, and ultimately manifested through the Attributor framework. This; /// is particularly useful if these properties interact with attributes and a; /// co-scheduled deduction allows to improve the solution. Even if not, thus if; /// attributes/properties are completely isolated, they should use the; /// Attributor framework to reduce the number of fixpoint iteration frameworks; /// in the code base. Note that the Attributor design makes sure that isolated; /// attributes are not impacted, in any way, by others derived at the same time; /// if there is no cross-reasoning performed.; ///; /// The public facing interface of the Attributor is kept simple and basically; /// allows abstract attributes to one thing, query abstract attributes; /// in-flight. There are two reasons to do this:; /// a) The optimistic state of one abstract attribute can justify an; /// optimistic state of another, allowing to framework to end up with an; /// optimistic (=best possible) fixpoint instead of one based solely on; /// information in the IR.; /// b) This avoids reimplementing various kinds of lookups, e.g., to check; /// for existing IR attributes, in favor of a single lookups interface; /// provided by an abstract attribute subclass.; ///; /// NOTE: The mechanics of adding a new ""concrete"" abstract attribute are; /// described in the file comment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:942,Integrability,interface,interface,942,"/// The fixpoint analysis framework that orchestrates the attribute deduction.; ///; /// The Attributor provides a general abstract analysis framework (guided; /// fixpoint iteration) as well as helper functions for the deduction of; /// (LLVM-IR) attributes. However, also other code properties can be deduced,; /// propagated, and ultimately manifested through the Attributor framework. This; /// is particularly useful if these properties interact with attributes and a; /// co-scheduled deduction allows to improve the solution. Even if not, thus if; /// attributes/properties are completely isolated, they should use the; /// Attributor framework to reduce the number of fixpoint iteration frameworks; /// in the code base. Note that the Attributor design makes sure that isolated; /// attributes are not impacted, in any way, by others derived at the same time; /// if there is no cross-reasoning performed.; ///; /// The public facing interface of the Attributor is kept simple and basically; /// allows abstract attributes to one thing, query abstract attributes; /// in-flight. There are two reasons to do this:; /// a) The optimistic state of one abstract attribute can justify an; /// optimistic state of another, allowing to framework to end up with an; /// optimistic (=best possible) fixpoint instead of one based solely on; /// information in the IR.; /// b) This avoids reimplementing various kinds of lookups, e.g., to check; /// for existing IR attributes, in favor of a single lookups interface; /// provided by an abstract attribute subclass.; ///; /// NOTE: The mechanics of adding a new ""concrete"" abstract attribute are; /// described in the file comment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:1504,Integrability,interface,interface,1504,"/// The fixpoint analysis framework that orchestrates the attribute deduction.; ///; /// The Attributor provides a general abstract analysis framework (guided; /// fixpoint iteration) as well as helper functions for the deduction of; /// (LLVM-IR) attributes. However, also other code properties can be deduced,; /// propagated, and ultimately manifested through the Attributor framework. This; /// is particularly useful if these properties interact with attributes and a; /// co-scheduled deduction allows to improve the solution. Even if not, thus if; /// attributes/properties are completely isolated, they should use the; /// Attributor framework to reduce the number of fixpoint iteration frameworks; /// in the code base. Note that the Attributor design makes sure that isolated; /// attributes are not impacted, in any way, by others derived at the same time; /// if there is no cross-reasoning performed.; ///; /// The public facing interface of the Attributor is kept simple and basically; /// allows abstract attributes to one thing, query abstract attributes; /// in-flight. There are two reasons to do this:; /// a) The optimistic state of one abstract attribute can justify an; /// optimistic state of another, allowing to framework to end up with an; /// optimistic (=best possible) fixpoint instead of one based solely on; /// information in the IR.; /// b) This avoids reimplementing various kinds of lookups, e.g., to check; /// for existing IR attributes, in favor of a single lookups interface; /// provided by an abstract attribute subclass.; ///; /// NOTE: The mechanics of adding a new ""concrete"" abstract attribute are; /// described in the file comment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:903,Performance,perform,performed,903,"/// The fixpoint analysis framework that orchestrates the attribute deduction.; ///; /// The Attributor provides a general abstract analysis framework (guided; /// fixpoint iteration) as well as helper functions for the deduction of; /// (LLVM-IR) attributes. However, also other code properties can be deduced,; /// propagated, and ultimately manifested through the Attributor framework. This; /// is particularly useful if these properties interact with attributes and a; /// co-scheduled deduction allows to improve the solution. Even if not, thus if; /// attributes/properties are completely isolated, they should use the; /// Attributor framework to reduce the number of fixpoint iteration frameworks; /// in the code base. Note that the Attributor design makes sure that isolated; /// attributes are not impacted, in any way, by others derived at the same time; /// if there is no cross-reasoning performed.; ///; /// The public facing interface of the Attributor is kept simple and basically; /// allows abstract attributes to one thing, query abstract attributes; /// in-flight. There are two reasons to do this:; /// a) The optimistic state of one abstract attribute can justify an; /// optimistic state of another, allowing to framework to end up with an; /// optimistic (=best possible) fixpoint instead of one based solely on; /// information in the IR.; /// b) This avoids reimplementing various kinds of lookups, e.g., to check; /// for existing IR attributes, in favor of a single lookups interface; /// provided by an abstract attribute subclass.; ///; /// NOTE: The mechanics of adding a new ""concrete"" abstract attribute are; /// described in the file comment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:1379,Safety,avoid,avoids,1379,"/// The fixpoint analysis framework that orchestrates the attribute deduction.; ///; /// The Attributor provides a general abstract analysis framework (guided; /// fixpoint iteration) as well as helper functions for the deduction of; /// (LLVM-IR) attributes. However, also other code properties can be deduced,; /// propagated, and ultimately manifested through the Attributor framework. This; /// is particularly useful if these properties interact with attributes and a; /// co-scheduled deduction allows to improve the solution. Even if not, thus if; /// attributes/properties are completely isolated, they should use the; /// Attributor framework to reduce the number of fixpoint iteration frameworks; /// in the code base. Note that the Attributor design makes sure that isolated; /// attributes are not impacted, in any way, by others derived at the same time; /// if there is no cross-reasoning performed.; ///; /// The public facing interface of the Attributor is kept simple and basically; /// allows abstract attributes to one thing, query abstract attributes; /// in-flight. There are two reasons to do this:; /// a) The optimistic state of one abstract attribute can justify an; /// optimistic state of another, allowing to framework to end up with an; /// optimistic (=best possible) fixpoint instead of one based solely on; /// information in the IR.; /// b) This avoids reimplementing various kinds of lookups, e.g., to check; /// for existing IR attributes, in favor of a single lookups interface; /// provided by an abstract attribute subclass.; ///; /// NOTE: The mechanics of adding a new ""concrete"" abstract attribute are; /// described in the file comment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:152,Usability,guid,guided,152,"/// The fixpoint analysis framework that orchestrates the attribute deduction.; ///; /// The Attributor provides a general abstract analysis framework (guided; /// fixpoint iteration) as well as helper functions for the deduction of; /// (LLVM-IR) attributes. However, also other code properties can be deduced,; /// propagated, and ultimately manifested through the Attributor framework. This; /// is particularly useful if these properties interact with attributes and a; /// co-scheduled deduction allows to improve the solution. Even if not, thus if; /// attributes/properties are completely isolated, they should use the; /// Attributor framework to reduce the number of fixpoint iteration frameworks; /// in the code base. Note that the Attributor design makes sure that isolated; /// attributes are not impacted, in any way, by others derived at the same time; /// if there is no cross-reasoning performed.; ///; /// The public facing interface of the Attributor is kept simple and basically; /// allows abstract attributes to one thing, query abstract attributes; /// in-flight. There are two reasons to do this:; /// a) The optimistic state of one abstract attribute can justify an; /// optimistic state of another, allowing to framework to end up with an; /// optimistic (=best possible) fixpoint instead of one based solely on; /// information in the IR.; /// b) This avoids reimplementing various kinds of lookups, e.g., to check; /// for existing IR attributes, in favor of a single lookups interface; /// provided by an abstract attribute subclass.; ///; /// NOTE: The mechanics of adding a new ""concrete"" abstract attribute are; /// described in the file comment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:978,Usability,simpl,simple,978,"/// The fixpoint analysis framework that orchestrates the attribute deduction.; ///; /// The Attributor provides a general abstract analysis framework (guided; /// fixpoint iteration) as well as helper functions for the deduction of; /// (LLVM-IR) attributes. However, also other code properties can be deduced,; /// propagated, and ultimately manifested through the Attributor framework. This; /// is particularly useful if these properties interact with attributes and a; /// co-scheduled deduction allows to improve the solution. Even if not, thus if; /// attributes/properties are completely isolated, they should use the; /// Attributor framework to reduce the number of fixpoint iteration frameworks; /// in the code base. Note that the Attributor design makes sure that isolated; /// attributes are not impacted, in any way, by others derived at the same time; /// if there is no cross-reasoning performed.; ///; /// The public facing interface of the Attributor is kept simple and basically; /// allows abstract attributes to one thing, query abstract attributes; /// in-flight. There are two reasons to do this:; /// a) The optimistic state of one abstract attribute can justify an; /// optimistic state of another, allowing to framework to end up with an; /// optimistic (=best possible) fixpoint instead of one based solely on; /// information in the IR.; /// b) This avoids reimplementing various kinds of lookups, e.g., to check; /// for existing IR attributes, in favor of a single lookups interface; /// provided by an abstract attribute subclass.; ///; /// NOTE: The mechanics of adding a new ""concrete"" abstract attribute are; /// described in the file comment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:209,Deployability,Configurat,Configuration,209,/// Constructor; ///; /// \param Functions The set of functions we are deriving attributes for.; /// \param InfoCache Cache to hold various information accessible for; /// the abstract attributes.; /// \param Configuration The Attributor configuration which determines what; /// generic features to use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:238,Deployability,configurat,configuration,238,/// Constructor; ///; /// \param Functions The set of functions we are deriving attributes for.; /// \param InfoCache Cache to hold various information accessible for; /// the abstract attributes.; /// \param Configuration The Attributor configuration which determines what; /// generic features to use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:209,Modifiability,Config,Configuration,209,/// Constructor; ///; /// \param Functions The set of functions we are deriving attributes for.; /// \param InfoCache Cache to hold various information accessible for; /// the abstract attributes.; /// \param Configuration The Attributor configuration which determines what; /// generic features to use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:238,Modifiability,config,configuration,238,/// Constructor; ///; /// \param Functions The set of functions we are deriving attributes for.; /// \param InfoCache Cache to hold various information accessible for; /// the abstract attributes.; /// \param Configuration The Attributor configuration which determines what; /// generic features to use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:118,Performance,Cache,Cache,118,/// Constructor; ///; /// \param Functions The set of functions we are deriving attributes for.; /// \param InfoCache Cache to hold various information accessible for; /// the abstract attributes.; /// \param Configuration The Attributor configuration which determines what; /// generic features to use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:152,Security,access,accessible,152,/// Constructor; ///; /// \param Functions The set of functions we are deriving attributes for.; /// \param InfoCache Cache to hold various information accessible for; /// the abstract attributes.; /// \param Configuration The Attributor configuration which determines what; /// generic features to use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:62,Safety,timeout,timeout,62,"/// Run the analyses until a fixpoint is reached or enforced (timeout).; ///; /// The attributes registered with this Attributor can be used after as long; /// as the Attributor is not destroyed (it owns the attributes now).; ///; /// \Returns CHANGED if the IR was changed, otherwise UNCHANGED.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:919,Integrability,depend,dependence,919,"/// Lookup an abstract attribute of type \p AAType at position \p IRP. While; /// no abstract attribute is found equivalent positions are checked, see; /// SubsumingPositionIterator. Thus, the returned abstract attribute; /// might be anchored at a different position, e.g., the callee if \p IRP is a; /// call base.; ///; /// This method is the only (supported) way an abstract attribute can retrieve; /// information from another abstract attribute. As an example, take an; /// abstract attribute that determines the memory access behavior for a; /// argument (readnone, readonly, ...). It should use `getAAFor` to get the; /// most optimistic information for other abstract attributes in-flight, e.g.; /// the one reasoning about the ""captured"" state for the argument or the one; /// reasoning on the memory access behavior of the function as a whole.; ///; /// If the DepClass enum is set to `DepClassTy::None` the dependence from; /// \p QueryingAA to the return abstract attribute is not automatically; /// recorded. This should only be used if the caller will record the; /// dependence explicitly if necessary, thus if it the returned abstract; /// attribute is used for reasoning. To record the dependences explicitly use; /// the `Attributor::recordDependence` method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:1083,Integrability,depend,dependence,1083,"/// Lookup an abstract attribute of type \p AAType at position \p IRP. While; /// no abstract attribute is found equivalent positions are checked, see; /// SubsumingPositionIterator. Thus, the returned abstract attribute; /// might be anchored at a different position, e.g., the callee if \p IRP is a; /// call base.; ///; /// This method is the only (supported) way an abstract attribute can retrieve; /// information from another abstract attribute. As an example, take an; /// abstract attribute that determines the memory access behavior for a; /// argument (readnone, readonly, ...). It should use `getAAFor` to get the; /// most optimistic information for other abstract attributes in-flight, e.g.; /// the one reasoning about the ""captured"" state for the argument or the one; /// reasoning on the memory access behavior of the function as a whole.; ///; /// If the DepClass enum is set to `DepClassTy::None` the dependence from; /// \p QueryingAA to the return abstract attribute is not automatically; /// recorded. This should only be used if the caller will record the; /// dependence explicitly if necessary, thus if it the returned abstract; /// attribute is used for reasoning. To record the dependences explicitly use; /// the `Attributor::recordDependence` method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:1204,Integrability,depend,dependences,1204,"/// Lookup an abstract attribute of type \p AAType at position \p IRP. While; /// no abstract attribute is found equivalent positions are checked, see; /// SubsumingPositionIterator. Thus, the returned abstract attribute; /// might be anchored at a different position, e.g., the callee if \p IRP is a; /// call base.; ///; /// This method is the only (supported) way an abstract attribute can retrieve; /// information from another abstract attribute. As an example, take an; /// abstract attribute that determines the memory access behavior for a; /// argument (readnone, readonly, ...). It should use `getAAFor` to get the; /// most optimistic information for other abstract attributes in-flight, e.g.; /// the one reasoning about the ""captured"" state for the argument or the one; /// reasoning on the memory access behavior of the function as a whole.; ///; /// If the DepClass enum is set to `DepClassTy::None` the dependence from; /// \p QueryingAA to the return abstract attribute is not automatically; /// recorded. This should only be used if the caller will record the; /// dependence explicitly if necessary, thus if it the returned abstract; /// attribute is used for reasoning. To record the dependences explicitly use; /// the `Attributor::recordDependence` method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:526,Security,access,access,526,"/// Lookup an abstract attribute of type \p AAType at position \p IRP. While; /// no abstract attribute is found equivalent positions are checked, see; /// SubsumingPositionIterator. Thus, the returned abstract attribute; /// might be anchored at a different position, e.g., the callee if \p IRP is a; /// call base.; ///; /// This method is the only (supported) way an abstract attribute can retrieve; /// information from another abstract attribute. As an example, take an; /// abstract attribute that determines the memory access behavior for a; /// argument (readnone, readonly, ...). It should use `getAAFor` to get the; /// most optimistic information for other abstract attributes in-flight, e.g.; /// the one reasoning about the ""captured"" state for the argument or the one; /// reasoning on the memory access behavior of the function as a whole.; ///; /// If the DepClass enum is set to `DepClassTy::None` the dependence from; /// \p QueryingAA to the return abstract attribute is not automatically; /// recorded. This should only be used if the caller will record the; /// dependence explicitly if necessary, thus if it the returned abstract; /// attribute is used for reasoning. To record the dependences explicitly use; /// the `Attributor::recordDependence` method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:811,Security,access,access,811,"/// Lookup an abstract attribute of type \p AAType at position \p IRP. While; /// no abstract attribute is found equivalent positions are checked, see; /// SubsumingPositionIterator. Thus, the returned abstract attribute; /// might be anchored at a different position, e.g., the callee if \p IRP is a; /// call base.; ///; /// This method is the only (supported) way an abstract attribute can retrieve; /// information from another abstract attribute. As an example, take an; /// abstract attribute that determines the memory access behavior for a; /// argument (readnone, readonly, ...). It should use `getAAFor` to get the; /// most optimistic information for other abstract attributes in-flight, e.g.; /// the one reasoning about the ""captured"" state for the argument or the one; /// reasoning on the memory access behavior of the function as a whole.; ///; /// If the DepClass enum is set to `DepClassTy::None` the dependence from; /// \p QueryingAA to the return abstract attribute is not automatically; /// recorded. This should only be used if the caller will record the; /// dependence explicitly if necessary, thus if it the returned abstract; /// attribute is used for reasoning. To record the dependences explicitly use; /// the `Attributor::recordDependence` method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:299,Deployability,update,update,299,/// The version of getAAFor that allows to omit a querying abstract; /// attribute. Using this after Attributor started running is restricted to; /// only the Attributor itself. Initial seeding of AAs can be done via this; /// function.; /// NOTE: ForceUpdate is ignored in any stage other than the update stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:64,Energy Efficiency,allocate,allocated,64,// Always register a new attribute to make sure we clean up the allocated; // memory properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:47,Deployability,update,update,47,"// Bootstrap the new attribute with an initial update to propagate; // information, e.g., function -> call site.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:38,Integrability,depend,dependencies,38,// Allow seeded attributes to declare dependencies.; // Remember the seeding state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:93,Integrability,depend,dependence,93,"// Lookup the abstract attribute of type AAType. If found, return it after; // registering a dependence of QueryingAA on the one returned attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:21,Integrability,depend,dependence,21,// Do not register a dependence on an attribute with an invalid state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:36,Deployability,update,update,36,/// Allows a query AA to request an update if a new query was received.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:713,Availability,avail,available,713,"/// Explicitly record a dependence from \p FromAA to \p ToAA, that is if; /// \p FromAA changes \p ToAA should be updated as well.; ///; /// This method should be used in conjunction with the `getAAFor` method and; /// with the DepClass enum passed to the method set to None. This can; /// be beneficial to avoid false dependences but it requires the users of; /// `getAAFor` to explicitly record true dependences through this method.; /// The \p DepClass flag indicates if the dependence is striclty necessary.; /// That means for required dependences, if \p FromAA changes to an invalid; /// state, \p ToAA can be moved to a pessimistic fixpoint because it required; /// information from \p FromAA but none are available anymore.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:114,Deployability,update,updated,114,"/// Explicitly record a dependence from \p FromAA to \p ToAA, that is if; /// \p FromAA changes \p ToAA should be updated as well.; ///; /// This method should be used in conjunction with the `getAAFor` method and; /// with the DepClass enum passed to the method set to None. This can; /// be beneficial to avoid false dependences but it requires the users of; /// `getAAFor` to explicitly record true dependences through this method.; /// The \p DepClass flag indicates if the dependence is striclty necessary.; /// That means for required dependences, if \p FromAA changes to an invalid; /// state, \p ToAA can be moved to a pessimistic fixpoint because it required; /// information from \p FromAA but none are available anymore.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,Integrability,depend,dependence,24,"/// Explicitly record a dependence from \p FromAA to \p ToAA, that is if; /// \p FromAA changes \p ToAA should be updated as well.; ///; /// This method should be used in conjunction with the `getAAFor` method and; /// with the DepClass enum passed to the method set to None. This can; /// be beneficial to avoid false dependences but it requires the users of; /// `getAAFor` to explicitly record true dependences through this method.; /// The \p DepClass flag indicates if the dependence is striclty necessary.; /// That means for required dependences, if \p FromAA changes to an invalid; /// state, \p ToAA can be moved to a pessimistic fixpoint because it required; /// information from \p FromAA but none are available anymore.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:319,Integrability,depend,dependences,319,"/// Explicitly record a dependence from \p FromAA to \p ToAA, that is if; /// \p FromAA changes \p ToAA should be updated as well.; ///; /// This method should be used in conjunction with the `getAAFor` method and; /// with the DepClass enum passed to the method set to None. This can; /// be beneficial to avoid false dependences but it requires the users of; /// `getAAFor` to explicitly record true dependences through this method.; /// The \p DepClass flag indicates if the dependence is striclty necessary.; /// That means for required dependences, if \p FromAA changes to an invalid; /// state, \p ToAA can be moved to a pessimistic fixpoint because it required; /// information from \p FromAA but none are available anymore.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:402,Integrability,depend,dependences,402,"/// Explicitly record a dependence from \p FromAA to \p ToAA, that is if; /// \p FromAA changes \p ToAA should be updated as well.; ///; /// This method should be used in conjunction with the `getAAFor` method and; /// with the DepClass enum passed to the method set to None. This can; /// be beneficial to avoid false dependences but it requires the users of; /// `getAAFor` to explicitly record true dependences through this method.; /// The \p DepClass flag indicates if the dependence is striclty necessary.; /// That means for required dependences, if \p FromAA changes to an invalid; /// state, \p ToAA can be moved to a pessimistic fixpoint because it required; /// information from \p FromAA but none are available anymore.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:478,Integrability,depend,dependence,478,"/// Explicitly record a dependence from \p FromAA to \p ToAA, that is if; /// \p FromAA changes \p ToAA should be updated as well.; ///; /// This method should be used in conjunction with the `getAAFor` method and; /// with the DepClass enum passed to the method set to None. This can; /// be beneficial to avoid false dependences but it requires the users of; /// `getAAFor` to explicitly record true dependences through this method.; /// The \p DepClass flag indicates if the dependence is striclty necessary.; /// That means for required dependences, if \p FromAA changes to an invalid; /// state, \p ToAA can be moved to a pessimistic fixpoint because it required; /// information from \p FromAA but none are available anymore.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:541,Integrability,depend,dependences,541,"/// Explicitly record a dependence from \p FromAA to \p ToAA, that is if; /// \p FromAA changes \p ToAA should be updated as well.; ///; /// This method should be used in conjunction with the `getAAFor` method and; /// with the DepClass enum passed to the method set to None. This can; /// be beneficial to avoid false dependences but it requires the users of; /// `getAAFor` to explicitly record true dependences through this method.; /// The \p DepClass flag indicates if the dependence is striclty necessary.; /// That means for required dependences, if \p FromAA changes to an invalid; /// state, \p ToAA can be moved to a pessimistic fixpoint because it required; /// information from \p FromAA but none are available anymore.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:307,Safety,avoid,avoid,307,"/// Explicitly record a dependence from \p FromAA to \p ToAA, that is if; /// \p FromAA changes \p ToAA should be updated as well.; ///; /// This method should be used in conjunction with the `getAAFor` method and; /// with the DepClass enum passed to the method set to None. This can; /// be beneficial to avoid false dependences but it requires the users of; /// `getAAFor` to explicitly record true dependences through this method.; /// The \p DepClass flag indicates if the dependence is striclty necessary.; /// That means for required dependences, if \p FromAA changes to an invalid; /// state, \p ToAA can be moved to a pessimistic fixpoint because it required; /// information from \p FromAA but none are available anymore.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:36,Performance,cache,cache,36,/// Return the internal information cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:6,Deployability,update,update,6,// We update only AAs associated with functions in the Functions set or; // call sites of them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:3,Safety,Avoid,Avoid,3,// Avoid too many nested initializations to prevent a stack overflow.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:394,Integrability,interface,interface,394,"/// Determine opportunities to derive 'default' attributes in \p F and create; /// abstract attribute objects for them.; ///; /// \param F The function that is checked for attribute opportunities.; ///; /// Note that abstract attribute instances are generally created even if the; /// IR already contains the information they would deduce. The most important; /// reason for this is the single interface, the one of the abstract attribute; /// instance, which can be queried without the need to look at the IR in; /// various places.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:23,Usability,simpl,simplified,23,"/// If \p V is assumed simplified, return it, if it is unclear yet,; /// return std::nullopt, otherwise return `nullptr`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:199,Integrability,depend,dependences,199,"/// If \p V is assumed simplified, return it, if it is unclear yet,; /// return std::nullopt, otherwise return `nullptr`. Same as the public; /// version except that it can be used without recording dependences on any \p; /// AA.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:23,Usability,simpl,simplified,23,"/// If \p V is assumed simplified, return it, if it is unclear yet,; /// return std::nullopt, otherwise return `nullptr`. Same as the public; /// version except that it can be used without recording dependences on any \p; /// AA.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:11,Usability,simpl,simplify,11,"/// Try to simplify \p IRP and in the scope \p S. If successful, true is; /// returned and all potential values \p IRP can take are put into \p Values.; /// If the result in \p Values contains select or PHI instructions it means; /// those could not be simplified to a single value. Recursive calls with; /// these instructions will yield their respective potential values. If false; /// is returned no other information is valid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:253,Usability,simpl,simplified,253,"/// Try to simplify \p IRP and in the scope \p S. If successful, true is; /// returned and all potential values \p IRP can take are put into \p Values.; /// If the result in \p Values contains select or PHI instructions it means; /// those could not be simplified to a single value. Recursive calls with; /// these instructions will yield their respective potential values. If false; /// is returned no other information is valid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,Usability,simpl,simplification,24,"/// Register \p CB as a simplification callback.; /// `Attributor::getAssumedSimplified` will use these callbacks before; /// we it will ask `AAValueSimplify`. It is important to ensure this; /// is called before `identifyDefaultAbstractAttributes`, assuming the; /// latter is called at all.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:30,Usability,simpl,simplification,30,/// Return true if there is a simplification callback for \p IRP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:166,Modifiability,variab,variable,166,"/// Register \p CB as a simplification callback.; /// Similar to \p registerSimplificationCallback, the call back will be called; /// first when we simplify a global variable \p GV.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,Usability,simpl,simplification,24,"/// Register \p CB as a simplification callback.; /// Similar to \p registerSimplificationCallback, the call back will be called; /// first when we simplify a global variable \p GV.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:148,Usability,simpl,simplify,148,"/// Register \p CB as a simplification callback.; /// Similar to \p registerSimplificationCallback, the call back will be called; /// first when we simplify a global variable \p GV.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:30,Usability,simpl,simplification,30,/// Return true if there is a simplification callback for \p GV.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:129,Usability,simpl,simplified,129,/// Return \p std::nullopt if there is no call back registered for \p GV or; /// the call back is still not sure if \p GV can be simplified. Return \p; /// nullptr if \p GV can't be simplified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:182,Usability,simpl,simplified,182,/// Return \p std::nullopt if there is no call back registered for \p GV or; /// the call back is still not sure if \p GV can be simplified. Return \p; /// nullptr if \p GV can't be simplified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,Usability,simpl,simplification,24,/// The vector with all simplification callbacks registered by outside AAs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:60,Modifiability,variab,variables,60,/// The vector with all simplification callbacks for global variables; /// registered by outside AAs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,Usability,simpl,simplification,24,/// The vector with all simplification callbacks for global variables; /// registered by outside AAs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:165,Performance,Optimiz,OptimizationRemark,165,/// Emit a remark generically.; ///; /// This template function can be used to generically emit a remark. The; /// RemarkKind should be one of the following:; /// - OptimizationRemark to indicate a successful optimization attempt; /// - OptimizationRemarkMissed to report a failed optimization attempt; /// - OptimizationRemarkAnalysis to provide additional information about an; /// optimization attempt; ///; /// The remark is built using a callback function \p RemarkCB that takes a; /// RemarkKind as input and returns a RemarkKind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:209,Performance,optimiz,optimization,209,/// Emit a remark generically.; ///; /// This template function can be used to generically emit a remark. The; /// RemarkKind should be one of the following:; /// - OptimizationRemark to indicate a successful optimization attempt; /// - OptimizationRemarkMissed to report a failed optimization attempt; /// - OptimizationRemarkAnalysis to provide additional information about an; /// optimization attempt; ///; /// The remark is built using a callback function \p RemarkCB that takes a; /// RemarkKind as input and returns a RemarkKind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:237,Performance,Optimiz,OptimizationRemarkMissed,237,/// Emit a remark generically.; ///; /// This template function can be used to generically emit a remark. The; /// RemarkKind should be one of the following:; /// - OptimizationRemark to indicate a successful optimization attempt; /// - OptimizationRemarkMissed to report a failed optimization attempt; /// - OptimizationRemarkAnalysis to provide additional information about an; /// optimization attempt; ///; /// The remark is built using a callback function \p RemarkCB that takes a; /// RemarkKind as input and returns a RemarkKind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:281,Performance,optimiz,optimization,281,/// Emit a remark generically.; ///; /// This template function can be used to generically emit a remark. The; /// RemarkKind should be one of the following:; /// - OptimizationRemark to indicate a successful optimization attempt; /// - OptimizationRemarkMissed to report a failed optimization attempt; /// - OptimizationRemarkAnalysis to provide additional information about an; /// optimization attempt; ///; /// The remark is built using a callback function \p RemarkCB that takes a; /// RemarkKind as input and returns a RemarkKind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:309,Performance,Optimiz,OptimizationRemarkAnalysis,309,/// Emit a remark generically.; ///; /// This template function can be used to generically emit a remark. The; /// RemarkKind should be one of the following:; /// - OptimizationRemark to indicate a successful optimization attempt; /// - OptimizationRemarkMissed to report a failed optimization attempt; /// - OptimizationRemarkAnalysis to provide additional information about an; /// optimization attempt; ///; /// The remark is built using a callback function \p RemarkCB that takes a; /// RemarkKind as input and returns a RemarkKind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:384,Performance,optimiz,optimization,384,/// Emit a remark generically.; ///; /// This template function can be used to generically emit a remark. The; /// RemarkKind should be one of the following:; /// - OptimizationRemark to indicate a successful optimization attempt; /// - OptimizationRemarkMissed to report a failed optimization attempt; /// - OptimizationRemarkAnalysis to provide additional information about an; /// optimization attempt; ///; /// The remark is built using a callback function \p RemarkCB that takes a; /// RemarkKind as input and returns a RemarkKind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:11,Availability,repair,repair,11,"/// Callee repair callback type; ///; /// The function repair callback is invoked once to rewire the replacement; /// arguments in the body of the new function. The argument replacement info; /// is passed, as build from the registerFunctionSignatureRewrite call, as; /// well as the replacement function and an iteratore to the first; /// replacement argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:55,Availability,repair,repair,55,"/// Callee repair callback type; ///; /// The function repair callback is invoked once to rewire the replacement; /// arguments in the body of the new function. The argument replacement info; /// is passed, as build from the registerFunctionSignatureRewrite call, as; /// well as the replacement function and an iteratore to the first; /// replacement argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:29,Availability,repair,repair,29,/// Abstract call site (ACS) repair callback type; ///; /// The abstract call site repair callback is invoked once on every abstract; /// call site of the replaced function (\see ReplacedFn). The callback needs; /// to provide the operands for the call to the new replacement function.; /// The number and type of the operands appended to the provided vector; /// (second argument) is defined by the number and types determined through; /// the replacement type vector (\see ReplacementTypes). The first argument; /// is the ArgumentReplacementInfo object registered with the Attributor; /// through the registerFunctionSignatureRewrite call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:83,Availability,repair,repair,83,/// Abstract call site (ACS) repair callback type; ///; /// The abstract call site repair callback is invoked once on every abstract; /// call site of the replaced function (\see ReplacedFn). The callback needs; /// to provide the operands for the call to the new replacement function.; /// The number and type of the operands appended to the provided vector; /// (second argument) is defined by the number and types determined through; /// the replacement type vector (\see ReplacementTypes). The first argument; /// is the ArgumentReplacementInfo object registered with the Attributor; /// through the registerFunctionSignatureRewrite call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Usability,Simpl,Simple,4,"/// Simple getters, see the corresponding members for details.; ///{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:125,Availability,repair,repair,125,"/// Constructor that takes the argument to be replaced, the types of; /// the replacement arguments, as well as callbacks to repair the call sites; /// and new function after the replacement happened.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:41,Security,access,access,41,/// Reference to the attributor to allow access from the callbacks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:11,Availability,repair,repair,11,"/// Callee repair callback, see CalleeRepairCBTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:29,Availability,repair,repair,29,"/// Abstract call site (ACS) repair callback, see ACSRepairCBTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:10,Security,access,access,10,/// Allow access to the private members from the Attributor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:20,Modifiability,rewrite,rewrite,20,"/// Check if we can rewrite a function signature.; ///; /// The argument \p Arg is replaced with new ones defined by the number,; /// order, and types in \p ReplacementTypes.; ///; /// \returns True, if the replacement can be registered, via; /// registerFunctionSignatureRewrite, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:15,Modifiability,rewrite,rewrite,15,"/// Register a rewrite for a function signature.; ///; /// The argument \p Arg is replaced with new ones defined by the number,; /// order, and types in \p ReplacementTypes. The rewiring at the call sites is; /// done through \p ACSRepairCB and at the callee site through; /// \p CalleeRepairCB.; ///; /// \returns True, if the replacement was registered, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:373,Usability,simpl,simplify,373,"/// Check \p Pred on all function call sites.; ///; /// This method will evaluate \p Pred on call sites and return; /// true if \p Pred holds in every call sites. However, this is only possible; /// all call sites are known, hence the function has internal linkage.; /// If true is returned, \p UsedAssumedInformation is set if assumed; /// information was used to skip or simplify potential call sites.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:373,Usability,simpl,simplify,373,"/// Check \p Pred on all call sites of \p Fn.; ///; /// This method will evaluate \p Pred on call sites and return; /// true if \p Pred holds in every call sites. However, this is only possible; /// all call sites are known, hence the function has internal linkage.; /// If true is returned, \p UsedAssumedInformation is set if assumed; /// information was used to skip or simplify potential call sites.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:175,Performance,cache,cache,175,/// Check \p Pred on all Read/Write instructions.; ///; /// This method will evaluate \p Pred on all instructions that read or write; /// to memory present in the information cache and return true if \p Pred; /// holds on all of them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:21,Integrability,wrap,wrapper,21,"/// Create a shallow wrapper for \p F such that \p F has internal linkage; /// afterwards. It also sets the original \p F 's name to anonymous; ///; /// A wrapper is a function with the same type (and attributes) as \p F; /// that will only call \p F and return the result, if any.; ///; /// Assuming the declaration of looks like:; /// rty F(aty0 arg0, ..., atyN argN);; ///; /// The wrapper will then look as follows:; /// rty wrapper(aty0 arg0, ..., atyN argN) {; /// return F(arg0, ..., argN);; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:155,Integrability,wrap,wrapper,155,"/// Create a shallow wrapper for \p F such that \p F has internal linkage; /// afterwards. It also sets the original \p F 's name to anonymous; ///; /// A wrapper is a function with the same type (and attributes) as \p F; /// that will only call \p F and return the result, if any.; ///; /// Assuming the declaration of looks like:; /// rty F(aty0 arg0, ..., atyN argN);; ///; /// The wrapper will then look as follows:; /// rty wrapper(aty0 arg0, ..., atyN argN) {; /// return F(arg0, ..., argN);; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:385,Integrability,wrap,wrapper,385,"/// Create a shallow wrapper for \p F such that \p F has internal linkage; /// afterwards. It also sets the original \p F 's name to anonymous; ///; /// A wrapper is a function with the same type (and attributes) as \p F; /// that will only call \p F and return the result, if any.; ///; /// Assuming the declaration of looks like:; /// rty F(aty0 arg0, ..., atyN argN);; ///; /// The wrapper will then look as follows:; /// rty wrapper(aty0 arg0, ..., atyN argN) {; /// return F(arg0, ..., argN);; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:429,Integrability,wrap,wrapper,429,"/// Create a shallow wrapper for \p F such that \p F has internal linkage; /// afterwards. It also sets the original \p F 's name to anonymous; ///; /// A wrapper is a function with the same type (and attributes) as \p F; /// that will only call \p F and return the result, if any.; ///; /// Assuming the declaration of looks like:; /// rty F(aty0 arg0, ..., atyN argN);; ///; /// The wrapper will then look as follows:; /// rty wrapper(aty0 arg0, ..., atyN argN) {; /// return F(arg0, ..., argN);; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:498,Integrability,wrap,wrappers,498,"/// Make another copy of the function \p F such that the copied version has; /// internal linkage afterwards and can be analysed. Then we replace all uses; /// of the original function to the copied one; ///; /// Only non-locally linked functions that have `linkonce_odr` or `weak_odr`; /// linkage can be internalized because these linkages guarantee that other; /// definitions with the same name have the same semantics as this one.; ///; /// This will only be run if the `attributor-allow-deep-wrappers` option is; /// set, or if the function is called with \p Force set to true.; ///; /// If the function \p F failed to be internalized the return value will be a; /// null pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:26,Energy Efficiency,allocate,allocate,26,"/// The allocator used to allocate memory, e.g. for `AbstractAttribute`s.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:296,Deployability,update,update,296,"/// This method will do fixpoint iteration until fixpoint or the; /// maximum iteration count is reached.; ///; /// If the maximum iteration count is reached, This method will; /// indicate pessimistic fixpoint on attributes that transitively depend; /// on attributes that were scheduled for an update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:279,Energy Efficiency,schedul,scheduled,279,"/// This method will do fixpoint iteration until fixpoint or the; /// maximum iteration count is reached.; ///; /// If the maximum iteration count is reached, This method will; /// indicate pessimistic fixpoint on attributes that transitively depend; /// on attributes that were scheduled for an update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:243,Integrability,depend,depend,243,"/// This method will do fixpoint iteration until fixpoint or the; /// maximum iteration count is reached.; ///; /// If the maximum iteration count is reached, This method will; /// indicate pessimistic fixpoint on attributes that transitively depend; /// on attributes that were scheduled for an update.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:22,Energy Efficiency,schedul,scheduling,22,"/// Gets called after scheduling, manifests attributes to the LLVM IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:165,Deployability,update,updates,165,"/// Gets called after attributes have been manifested, cleans up the IR.; /// Deletes dead functions, blocks and instructions.; /// Rewrites function signitures and updates the call graph.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:132,Modifiability,Rewrite,Rewrites,132,"/// Gets called after attributes have been manifested, cleans up the IR.; /// Deletes dead functions, blocks and instructions.; /// Rewrites function signitures and updates the call graph.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:11,Deployability,update,update,11,/// Run `::update` on \p AA and track the dependences queried while doing so.; /// Also adjust the state if we know further updates are not necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:124,Deployability,update,updates,124,/// Run `::update` on \p AA and track the dependences queried while doing so.; /// Also adjust the state if we know further updates are not necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:42,Integrability,depend,dependences,42,/// Run `::update` on \p AA and track the dependences queried while doing so.; /// Also adjust the state if we know further updates are not necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:104,Deployability,update,updates,104,/// Remember the dependences on the top of the dependence stack such that they; /// may trigger further updates. (\see DependenceStack),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:17,Integrability,depend,dependences,17,/// Remember the dependences on the top of the dependence stack such that they; /// may trigger further updates. (\see DependenceStack),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:47,Integrability,depend,dependence,47,/// Remember the dependences on the top of the dependence stack such that they; /// may trigger further updates. (\see DependenceStack),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:119,Integrability,Depend,DependenceStack,119,/// Remember the dependences on the top of the dependence stack such that they; /// may trigger further updates. (\see DependenceStack),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:43,Modifiability,rewrite,rewrites,43,/// Apply all requested function signature rewrites; /// (\see registerFunctionSignatureRewrite) and return Changed if the module; /// was altered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:20,Performance,cache,cache,20,/// The information cache that holds pre-processed (LLVM-IR) information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:23,Integrability,depend,dependency,23,/// Abstract Attribute dependency graph,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:79,Deployability,update,updated,79,/// Information about a dependence. If FromAA is changed ToAA needs to be; /// updated as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,Integrability,depend,dependence,24,/// Information about a dependence. If FromAA is changed ToAA needs to be; /// updated as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:89,Deployability,update,update,89,"/// The dependence stack is used to track dependences during an; /// `AbstractAttribute::update` call. As `AbstractAttribute::update` can be; /// recursive we might have multiple vectors of dependences in here. The stack; /// size, should be adjusted according to the expected recursion depth and the; /// inner dependence vector size to the expected number of dependences per; /// abstract attribute. Since the inner vectors are actually allocated on the; /// stack we can be generous with their size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:126,Deployability,update,update,126,"/// The dependence stack is used to track dependences during an; /// `AbstractAttribute::update` call. As `AbstractAttribute::update` can be; /// recursive we might have multiple vectors of dependences in here. The stack; /// size, should be adjusted according to the expected recursion depth and the; /// inner dependence vector size to the expected number of dependences per; /// abstract attribute. Since the inner vectors are actually allocated on the; /// stack we can be generous with their size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:439,Energy Efficiency,allocate,allocated,439,"/// The dependence stack is used to track dependences during an; /// `AbstractAttribute::update` call. As `AbstractAttribute::update` can be; /// recursive we might have multiple vectors of dependences in here. The stack; /// size, should be adjusted according to the expected recursion depth and the; /// inner dependence vector size to the expected number of dependences per; /// abstract attribute. Since the inner vectors are actually allocated on the; /// stack we can be generous with their size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:8,Integrability,depend,dependence,8,"/// The dependence stack is used to track dependences during an; /// `AbstractAttribute::update` call. As `AbstractAttribute::update` can be; /// recursive we might have multiple vectors of dependences in here. The stack; /// size, should be adjusted according to the expected recursion depth and the; /// inner dependence vector size to the expected number of dependences per; /// abstract attribute. Since the inner vectors are actually allocated on the; /// stack we can be generous with their size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:42,Integrability,depend,dependences,42,"/// The dependence stack is used to track dependences during an; /// `AbstractAttribute::update` call. As `AbstractAttribute::update` can be; /// recursive we might have multiple vectors of dependences in here. The stack; /// size, should be adjusted according to the expected recursion depth and the; /// inner dependence vector size to the expected number of dependences per; /// abstract attribute. Since the inner vectors are actually allocated on the; /// stack we can be generous with their size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:190,Integrability,depend,dependences,190,"/// The dependence stack is used to track dependences during an; /// `AbstractAttribute::update` call. As `AbstractAttribute::update` can be; /// recursive we might have multiple vectors of dependences in here. The stack; /// size, should be adjusted according to the expected recursion depth and the; /// inner dependence vector size to the expected number of dependences per; /// abstract attribute. Since the inner vectors are actually allocated on the; /// stack we can be generous with their size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:312,Integrability,depend,dependence,312,"/// The dependence stack is used to track dependences during an; /// `AbstractAttribute::update` call. As `AbstractAttribute::update` can be; /// recursive we might have multiple vectors of dependences in here. The stack; /// size, should be adjusted according to the expected recursion depth and the; /// inner dependence vector size to the expected number of dependences per; /// abstract attribute. Since the inner vectors are actually allocated on the; /// stack we can be generous with their size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:361,Integrability,depend,dependences,361,"/// The dependence stack is used to track dependences during an; /// `AbstractAttribute::update` call. As `AbstractAttribute::update` can be; /// recursive we might have multiple vectors of dependences in here. The stack; /// size, should be adjusted according to the expected recursion depth and the; /// inner dependence vector size to the expected number of dependences per; /// abstract attribute. Since the inner vectors are actually allocated on the; /// stack we can be generous with their size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:56,Safety,avoid,avoid,56,/// The current initialization chain length. Tracked to avoid stack overflows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:61,Deployability,update,update,61,///}; /// Container with all the query AAs that requested an update via; /// registerForUpdate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:18,Deployability,configurat,configuration,18,/// User provided configuration for this Attributor instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:18,Modifiability,config,configuration,18,/// User provided configuration for this Attributor instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:7,Integrability,interface,interface,7,"/// An interface to query the internal state of an abstract attribute.; ///; /// The abstract state is a minimal interface that allows the Attributor to; /// communicate with the abstract attributes about their internal state without; /// enforcing or exposing implementation details, e.g., the (existence of an); /// underlying lattice.; ///; /// It is sufficient to be able to query if a state is (1) valid or invalid, (2); /// at a fixpoint, and to indicate to the state that (3) an optimistic fixpoint; /// was reached or (4) a pessimistic fixpoint was enforced.; ///; /// All methods need to be implemented by the subclass. For the common use case,; /// a single boolean state or a bit-encoded state, the BooleanState and; /// {Inc,Dec,Bit}IntegerState classes are already provided. An abstract; /// attribute can inherit from them to get the abstract state interface and; /// additional methods to directly modify the state based if needed. See the; /// class comments for help.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:113,Integrability,interface,interface,113,"/// An interface to query the internal state of an abstract attribute.; ///; /// The abstract state is a minimal interface that allows the Attributor to; /// communicate with the abstract attributes about their internal state without; /// enforcing or exposing implementation details, e.g., the (existence of an); /// underlying lattice.; ///; /// It is sufficient to be able to query if a state is (1) valid or invalid, (2); /// at a fixpoint, and to indicate to the state that (3) an optimistic fixpoint; /// was reached or (4) a pessimistic fixpoint was enforced.; ///; /// All methods need to be implemented by the subclass. For the common use case,; /// a single boolean state or a bit-encoded state, the BooleanState and; /// {Inc,Dec,Bit}IntegerState classes are already provided. An abstract; /// attribute can inherit from them to get the abstract state interface and; /// additional methods to directly modify the state based if needed. See the; /// class comments for help.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:863,Integrability,interface,interface,863,"/// An interface to query the internal state of an abstract attribute.; ///; /// The abstract state is a minimal interface that allows the Attributor to; /// communicate with the abstract attributes about their internal state without; /// enforcing or exposing implementation details, e.g., the (existence of an); /// underlying lattice.; ///; /// It is sufficient to be able to query if a state is (1) valid or invalid, (2); /// at a fixpoint, and to indicate to the state that (3) an optimistic fixpoint; /// was reached or (4) a pessimistic fixpoint was enforced.; ///; /// All methods need to be implemented by the subclass. For the common use case,; /// a single boolean state or a bit-encoded state, the BooleanState and; /// {Inc,Dec,Bit}IntegerState classes are already provided. An abstract; /// attribute can inherit from them to get the abstract state interface and; /// additional methods to directly modify the state based if needed. See the; /// class comments for help.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:819,Modifiability,inherit,inherit,819,"/// An interface to query the internal state of an abstract attribute.; ///; /// The abstract state is a minimal interface that allows the Attributor to; /// communicate with the abstract attributes about their internal state without; /// enforcing or exposing implementation details, e.g., the (existence of an); /// underlying lattice.; ///; /// It is sufficient to be able to query if a state is (1) valid or invalid, (2); /// at a fixpoint, and to indicate to the state that (3) an optimistic fixpoint; /// was reached or (4) a pessimistic fixpoint was enforced.; ///; /// All methods need to be implemented by the subclass. For the common use case,; /// a single boolean state or a bit-encoded state, the BooleanState and; /// {Inc,Dec,Bit}IntegerState classes are already provided. An abstract; /// attribute can inherit from them to get the abstract state interface and; /// additional methods to directly modify the state based if needed. See the; /// class comments for help.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:69,Deployability,update,updated,69,"/// Return if this abstract state is fixed, thus does not need to be updated; /// if information changes as it cannot change itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:55,Integrability,interface,interface,55,"/// Simple state with integers encoding.; ///; /// The interface ensures that the assumed bits are always a subset of the known; /// bits. Users can only add known bits and, except through adding known bits,; /// they can only remove assumed bits. This should guarantee monotonicity and; /// thereby the existence of a fixpoint (if used correctly). The fixpoint is; /// reached when the assumed and known state/bits are equal. Users can; /// force/inidicate a fixpoint. If an optimistic one is indicated, the known; /// state will catch up with the assumed one, for a pessimistic fixpoint it is; /// the other way around.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Usability,Simpl,Simple,4,"/// Simple state with integers encoding.; ///; /// The interface ensures that the assumed bits are always a subset of the known; /// bits. Users can only add known bits and, except through adding known bits,; /// they can only remove assumed bits. This should guarantee monotonicity and; /// thereby the existence of a fixpoint (if used correctly). The fixpoint is; /// reached when the assumed and known state/bits are equal. Users can; /// force/inidicate a fixpoint. If an optimistic one is indicated, the known; /// state will catch up with the assumed one, for a pessimistic fixpoint it is; /// the other way around.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:60,Usability,simpl,simply,60,/// See AbstractState::isValidState(); /// NOTE: For now we simply pretend that the worst possible state is invalid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:56,Integrability,depend,dependent,56,"/// ""Clamp"" this state with \p R. The result is subtype dependent but it is; /// intended that only information assumed in both states will be assumed in; /// this one afterwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:56,Integrability,depend,dependent,56,"/// ""Clamp"" this state with \p R. The result is subtype dependent but it is; /// intended that information known in either state will be known in; /// this one afterwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:49,Integrability,depend,dependent,49,/// Handle a new assumed value \p Value. Subtype dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:47,Integrability,depend,dependent,47,/// Handle a new known value \p Value. Subtype dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:37,Integrability,depend,dependent,37,/// Handle a value \p Value. Subtype dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:49,Integrability,depend,dependent,49,/// Handle a new assumed value \p Value. Subtype dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:11,Integrability,wrap,wrapper,11,/// Simple wrapper for a single bit (boolean) state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Usability,Simpl,Simple,4,/// Simple wrapper for a single bit (boolean) state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:56,Integrability,depend,dependent,56,"/// ""Clamp"" this state with \p R. The result is subtype dependent but it is; /// intended that only information assumed in both states will be assumed in; /// this one afterwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:94,Integrability,interface,interface,94,/// Simple state for a set.; ///; /// This represents a state containing a set of values. The interface supports; /// modelling sets that contain all possible elements. The state's internal; /// value is modified using union or intersection operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Usability,Simpl,Simple,4,/// Simple state for a set.; ///; /// This represents a state containing a set of values. The interface supports; /// modelling sets that contain all possible elements. The state's internal; /// value is modified using union or intersection operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:6,Integrability,wrap,wrapper,6,"/// A wrapper around a set that has semantics for handling unions and; /// intersections with a ""universal"" set that contains all elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Performance,Perform,Performs,4,/// Performs the set intersection between this set and \p RHS. Returns true if; /// changes were made.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Performance,Perform,Performs,4,/// Performs the set union between this set and \p RHS. Returns true if; /// changes were made.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:19,Security,access,access,19,/// Provide static access to the type of the state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:17,Security,access,access,17,/// Compile time access to the IR attribute kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:569,Deployability,update,updateImpl,569,"/// Base struct for all ""concrete attribute"" deductions.; ///; /// The abstract attribute is a minimal interface that allows the Attributor to; /// orchestrate the abstract/fixpoint analysis. The design allows to hide away; /// implementation choices made for the subclasses but also to structure their; /// implementation and simplify the use of other abstract attributes in-flight.; ///; /// To allow easy creation of new attributes, most methods have default; /// implementations. The ones that do not are generally straight forward, except; /// `AbstractAttribute::updateImpl` which is the location of most reasoning; /// associated with the abstract attribute. The update is invoked by the; /// Attributor in case the situation used to justify the current optimistic; /// state might have changed. The Attributor determines this automatically; /// by monitoring the `Attributor::getAAFor` calls made by abstract attributes.; ///; /// The `updateImpl` method should inspect the IR and other abstract attributes; /// in-flight to justify the best possible (=optimistic) state. The actual; /// implementation is, similar to the underlying abstract state encoding, not; /// exposed. In the most common case, the `updateImpl` will go through a list of; /// reasons why its optimistic state is valid given the current information. If; /// any combination of them holds and is sufficient to justify the current; /// optimistic state, the method shall return UNCHAGED. If not, the optimistic; /// state is adjusted to the situation and the method shall return CHANGED.; ///; /// If the manifestation of the ""concrete attribute"" deduced by the subclass; /// differs from the ""default"" behavior, which is a (set of) LLVM-IR; /// attribute(s) for an argument, call site argument, function return value, or; /// function, the `AbstractAttribute::manifest` method should be overloaded.; ///; /// NOTE: If the state obtained via getState() is INVALID, thus if; /// AbstractAttribute::getState().isValidState() ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:670,Deployability,update,update,670,"/// Base struct for all ""concrete attribute"" deductions.; ///; /// The abstract attribute is a minimal interface that allows the Attributor to; /// orchestrate the abstract/fixpoint analysis. The design allows to hide away; /// implementation choices made for the subclasses but also to structure their; /// implementation and simplify the use of other abstract attributes in-flight.; ///; /// To allow easy creation of new attributes, most methods have default; /// implementations. The ones that do not are generally straight forward, except; /// `AbstractAttribute::updateImpl` which is the location of most reasoning; /// associated with the abstract attribute. The update is invoked by the; /// Attributor in case the situation used to justify the current optimistic; /// state might have changed. The Attributor determines this automatically; /// by monitoring the `Attributor::getAAFor` calls made by abstract attributes.; ///; /// The `updateImpl` method should inspect the IR and other abstract attributes; /// in-flight to justify the best possible (=optimistic) state. The actual; /// implementation is, similar to the underlying abstract state encoding, not; /// exposed. In the most common case, the `updateImpl` will go through a list of; /// reasons why its optimistic state is valid given the current information. If; /// any combination of them holds and is sufficient to justify the current; /// optimistic state, the method shall return UNCHAGED. If not, the optimistic; /// state is adjusted to the situation and the method shall return CHANGED.; ///; /// If the manifestation of the ""concrete attribute"" deduced by the subclass; /// differs from the ""default"" behavior, which is a (set of) LLVM-IR; /// attribute(s) for an argument, call site argument, function return value, or; /// function, the `AbstractAttribute::manifest` method should be overloaded.; ///; /// NOTE: If the state obtained via getState() is INVALID, thus if; /// AbstractAttribute::getState().isValidState() ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:944,Deployability,update,updateImpl,944," Base struct for all ""concrete attribute"" deductions.; ///; /// The abstract attribute is a minimal interface that allows the Attributor to; /// orchestrate the abstract/fixpoint analysis. The design allows to hide away; /// implementation choices made for the subclasses but also to structure their; /// implementation and simplify the use of other abstract attributes in-flight.; ///; /// To allow easy creation of new attributes, most methods have default; /// implementations. The ones that do not are generally straight forward, except; /// `AbstractAttribute::updateImpl` which is the location of most reasoning; /// associated with the abstract attribute. The update is invoked by the; /// Attributor in case the situation used to justify the current optimistic; /// state might have changed. The Attributor determines this automatically; /// by monitoring the `Attributor::getAAFor` calls made by abstract attributes.; ///; /// The `updateImpl` method should inspect the IR and other abstract attributes; /// in-flight to justify the best possible (=optimistic) state. The actual; /// implementation is, similar to the underlying abstract state encoding, not; /// exposed. In the most common case, the `updateImpl` will go through a list of; /// reasons why its optimistic state is valid given the current information. If; /// any combination of them holds and is sufficient to justify the current; /// optimistic state, the method shall return UNCHAGED. If not, the optimistic; /// state is adjusted to the situation and the method shall return CHANGED.; ///; /// If the manifestation of the ""concrete attribute"" deduced by the subclass; /// differs from the ""default"" behavior, which is a (set of) LLVM-IR; /// attribute(s) for an argument, call site argument, function return value, or; /// function, the `AbstractAttribute::manifest` method should be overloaded.; ///; /// NOTE: If the state obtained via getState() is INVALID, thus if; /// AbstractAttribute::getState().isValidState() ret",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:1214,Deployability,update,updateImpl,1214,"for the subclasses but also to structure their; /// implementation and simplify the use of other abstract attributes in-flight.; ///; /// To allow easy creation of new attributes, most methods have default; /// implementations. The ones that do not are generally straight forward, except; /// `AbstractAttribute::updateImpl` which is the location of most reasoning; /// associated with the abstract attribute. The update is invoked by the; /// Attributor in case the situation used to justify the current optimistic; /// state might have changed. The Attributor determines this automatically; /// by monitoring the `Attributor::getAAFor` calls made by abstract attributes.; ///; /// The `updateImpl` method should inspect the IR and other abstract attributes; /// in-flight to justify the best possible (=optimistic) state. The actual; /// implementation is, similar to the underlying abstract state encoding, not; /// exposed. In the most common case, the `updateImpl` will go through a list of; /// reasons why its optimistic state is valid given the current information. If; /// any combination of them holds and is sufficient to justify the current; /// optimistic state, the method shall return UNCHAGED. If not, the optimistic; /// state is adjusted to the situation and the method shall return CHANGED.; ///; /// If the manifestation of the ""concrete attribute"" deduced by the subclass; /// differs from the ""default"" behavior, which is a (set of) LLVM-IR; /// attribute(s) for an argument, call site argument, function return value, or; /// function, the `AbstractAttribute::manifest` method should be overloaded.; ///; /// NOTE: If the state obtained via getState() is INVALID, thus if; /// AbstractAttribute::getState().isValidState() returns false, no; /// information provided by the methods of this class should be used.; /// NOTE: The Attributor currently has certain limitations to what we can do.; /// As a general rule of thumb, ""concrete"" abstract attributes should *for; /// now* o",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:856,Energy Efficiency,monitor,monitoring,856,"/// Base struct for all ""concrete attribute"" deductions.; ///; /// The abstract attribute is a minimal interface that allows the Attributor to; /// orchestrate the abstract/fixpoint analysis. The design allows to hide away; /// implementation choices made for the subclasses but also to structure their; /// implementation and simplify the use of other abstract attributes in-flight.; ///; /// To allow easy creation of new attributes, most methods have default; /// implementations. The ones that do not are generally straight forward, except; /// `AbstractAttribute::updateImpl` which is the location of most reasoning; /// associated with the abstract attribute. The update is invoked by the; /// Attributor in case the situation used to justify the current optimistic; /// state might have changed. The Attributor determines this automatically; /// by monitoring the `Attributor::getAAFor` calls made by abstract attributes.; ///; /// The `updateImpl` method should inspect the IR and other abstract attributes; /// in-flight to justify the best possible (=optimistic) state. The actual; /// implementation is, similar to the underlying abstract state encoding, not; /// exposed. In the most common case, the `updateImpl` will go through a list of; /// reasons why its optimistic state is valid given the current information. If; /// any combination of them holds and is sufficient to justify the current; /// optimistic state, the method shall return UNCHAGED. If not, the optimistic; /// state is adjusted to the situation and the method shall return CHANGED.; ///; /// If the manifestation of the ""concrete attribute"" deduced by the subclass; /// differs from the ""default"" behavior, which is a (set of) LLVM-IR; /// attribute(s) for an argument, call site argument, function return value, or; /// function, the `AbstractAttribute::manifest` method should be overloaded.; ///; /// NOTE: If the state obtained via getState() is INVALID, thus if; /// AbstractAttribute::getState().isValidState() ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:103,Integrability,interface,interface,103,"/// Base struct for all ""concrete attribute"" deductions.; ///; /// The abstract attribute is a minimal interface that allows the Attributor to; /// orchestrate the abstract/fixpoint analysis. The design allows to hide away; /// implementation choices made for the subclasses but also to structure their; /// implementation and simplify the use of other abstract attributes in-flight.; ///; /// To allow easy creation of new attributes, most methods have default; /// implementations. The ones that do not are generally straight forward, except; /// `AbstractAttribute::updateImpl` which is the location of most reasoning; /// associated with the abstract attribute. The update is invoked by the; /// Attributor in case the situation used to justify the current optimistic; /// state might have changed. The Attributor determines this automatically; /// by monitoring the `Attributor::getAAFor` calls made by abstract attributes.; ///; /// The `updateImpl` method should inspect the IR and other abstract attributes; /// in-flight to justify the best possible (=optimistic) state. The actual; /// implementation is, similar to the underlying abstract state encoding, not; /// exposed. In the most common case, the `updateImpl` will go through a list of; /// reasons why its optimistic state is valid given the current information. If; /// any combination of them holds and is sufficient to justify the current; /// optimistic state, the method shall return UNCHAGED. If not, the optimistic; /// state is adjusted to the situation and the method shall return CHANGED.; ///; /// If the manifestation of the ""concrete attribute"" deduced by the subclass; /// differs from the ""default"" behavior, which is a (set of) LLVM-IR; /// attribute(s) for an argument, call site argument, function return value, or; /// function, the `AbstractAttribute::manifest` method should be overloaded.; ///; /// NOTE: If the state obtained via getState() is INVALID, thus if; /// AbstractAttribute::getState().isValidState() ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:2260,Performance,perform,perform,2260,"ly; /// by monitoring the `Attributor::getAAFor` calls made by abstract attributes.; ///; /// The `updateImpl` method should inspect the IR and other abstract attributes; /// in-flight to justify the best possible (=optimistic) state. The actual; /// implementation is, similar to the underlying abstract state encoding, not; /// exposed. In the most common case, the `updateImpl` will go through a list of; /// reasons why its optimistic state is valid given the current information. If; /// any combination of them holds and is sufficient to justify the current; /// optimistic state, the method shall return UNCHAGED. If not, the optimistic; /// state is adjusted to the situation and the method shall return CHANGED.; ///; /// If the manifestation of the ""concrete attribute"" deduced by the subclass; /// differs from the ""default"" behavior, which is a (set of) LLVM-IR; /// attribute(s) for an argument, call site argument, function return value, or; /// function, the `AbstractAttribute::manifest` method should be overloaded.; ///; /// NOTE: If the state obtained via getState() is INVALID, thus if; /// AbstractAttribute::getState().isValidState() returns false, no; /// information provided by the methods of this class should be used.; /// NOTE: The Attributor currently has certain limitations to what we can do.; /// As a general rule of thumb, ""concrete"" abstract attributes should *for; /// now* only perform ""backward"" information propagation. That means; /// optimistic information obtained through abstract attributes should; /// only be used at positions that precede the origin of the information; /// with regards to the program flow. More practically, information can; /// *now* be propagated from instructions to their enclosing function, but; /// *not* from call sites to the called function. The mechanisms to allow; /// both directions will be added in the future.; /// NOTE: The mechanics of adding a new ""concrete"" abstract attribute are; /// described in the file comment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:1175,Security,expose,exposed,1175,"tributor to; /// orchestrate the abstract/fixpoint analysis. The design allows to hide away; /// implementation choices made for the subclasses but also to structure their; /// implementation and simplify the use of other abstract attributes in-flight.; ///; /// To allow easy creation of new attributes, most methods have default; /// implementations. The ones that do not are generally straight forward, except; /// `AbstractAttribute::updateImpl` which is the location of most reasoning; /// associated with the abstract attribute. The update is invoked by the; /// Attributor in case the situation used to justify the current optimistic; /// state might have changed. The Attributor determines this automatically; /// by monitoring the `Attributor::getAAFor` calls made by abstract attributes.; ///; /// The `updateImpl` method should inspect the IR and other abstract attributes; /// in-flight to justify the best possible (=optimistic) state. The actual; /// implementation is, similar to the underlying abstract state encoding, not; /// exposed. In the most common case, the `updateImpl` will go through a list of; /// reasons why its optimistic state is valid given the current information. If; /// any combination of them holds and is sufficient to justify the current; /// optimistic state, the method shall return UNCHAGED. If not, the optimistic; /// state is adjusted to the situation and the method shall return CHANGED.; ///; /// If the manifestation of the ""concrete attribute"" deduced by the subclass; /// differs from the ""default"" behavior, which is a (set of) LLVM-IR; /// attribute(s) for an argument, call site argument, function return value, or; /// function, the `AbstractAttribute::manifest` method should be overloaded.; ///; /// NOTE: If the state obtained via getState() is INVALID, thus if; /// AbstractAttribute::getState().isValidState() returns false, no; /// information provided by the methods of this class should be used.; /// NOTE: The Attributor currently has c",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:327,Usability,simpl,simplify,327,"/// Base struct for all ""concrete attribute"" deductions.; ///; /// The abstract attribute is a minimal interface that allows the Attributor to; /// orchestrate the abstract/fixpoint analysis. The design allows to hide away; /// implementation choices made for the subclasses but also to structure their; /// implementation and simplify the use of other abstract attributes in-flight.; ///; /// To allow easy creation of new attributes, most methods have default; /// implementations. The ones that do not are generally straight forward, except; /// `AbstractAttribute::updateImpl` which is the location of most reasoning; /// associated with the abstract attribute. The update is invoked by the; /// Attributor in case the situation used to justify the current optimistic; /// state might have changed. The Attributor determines this automatically; /// by monitoring the `Attributor::getAAFor` calls made by abstract attributes.; ///; /// The `updateImpl` method should inspect the IR and other abstract attributes; /// in-flight to justify the best possible (=optimistic) state. The actual; /// implementation is, similar to the underlying abstract state encoding, not; /// exposed. In the most common case, the `updateImpl` will go through a list of; /// reasons why its optimistic state is valid given the current information. If; /// any combination of them holds and is sufficient to justify the current; /// optimistic state, the method shall return UNCHAGED. If not, the optimistic; /// state is adjusted to the situation and the method shall return CHANGED.; ///; /// If the manifestation of the ""concrete attribute"" deduced by the subclass; /// differs from the ""default"" behavior, which is a (set of) LLVM-IR; /// attribute(s) for an argument, call site argument, function return value, or; /// function, the `AbstractAttribute::manifest` method should be overloaded.; ///; /// NOTE: If the state obtained via getState() is INVALID, thus if; /// AbstractAttribute::getState().isValidState() ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:17,Security,access,access,17,/// Compile time access to the IR attribute kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:40,Deployability,update,updated,40,/// Return false if an AA should not be updated for \p IRP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:464,Deployability,update,updateImpl,464,"/// Initialize the state with the information in the Attributor \p A.; ///; /// This function is called by the Attributor once all abstract attributes; /// have been identified. It can and shall be used for task like:; /// - identify existing knowledge in the IR and use it for the ""known state""; /// - perform any work that is not going to change over time, e.g., determine; /// a subset of the IR, or attributes in-flight, that have to be looked at; /// in the `updateImpl` method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:303,Performance,perform,perform,303,"/// Initialize the state with the information in the Attributor \p A.; ///; /// This function is called by the Attributor once all abstract attributes; /// have been identified. It can and shall be used for task like:; /// - identify existing knowledge in the IR and use it for the ""known state""; /// - perform any work that is not going to change over time, e.g., determine; /// a subset of the IR, or attributes in-flight, that have to be looked at; /// in the `updateImpl` method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:52,Deployability,update,updates,52,"/// A query AA is always scheduled as long as we do updates because it does; /// lazy computation that cannot be determined to be done from the outside.; /// However, while query AAs will not be fixed if they do not have outstanding; /// dependences, we will only schedule them like other AAs. If a query AA that; /// received a new query it needs to request an update via; /// `Attributor::requestUpdateForAA`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:362,Deployability,update,update,362,"/// A query AA is always scheduled as long as we do updates because it does; /// lazy computation that cannot be determined to be done from the outside.; /// However, while query AAs will not be fixed if they do not have outstanding; /// dependences, we will only schedule them like other AAs. If a query AA that; /// received a new query it needs to request an update via; /// `Attributor::requestUpdateForAA`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:25,Energy Efficiency,schedul,scheduled,25,"/// A query AA is always scheduled as long as we do updates because it does; /// lazy computation that cannot be determined to be done from the outside.; /// However, while query AAs will not be fixed if they do not have outstanding; /// dependences, we will only schedule them like other AAs. If a query AA that; /// received a new query it needs to request an update via; /// `Attributor::requestUpdateForAA`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:264,Energy Efficiency,schedul,schedule,264,"/// A query AA is always scheduled as long as we do updates because it does; /// lazy computation that cannot be determined to be done from the outside.; /// However, while query AAs will not be fixed if they do not have outstanding; /// dependences, we will only schedule them like other AAs. If a query AA that; /// received a new query it needs to request an update via; /// `Attributor::requestUpdateForAA`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:238,Integrability,depend,dependences,238,"/// A query AA is always scheduled as long as we do updates because it does; /// lazy computation that cannot be determined to be done from the outside.; /// However, while query AAs will not be fixed if they do not have outstanding; /// dependences, we will only schedule them like other AAs. If a query AA that; /// received a new query it needs to request an update via; /// `Attributor::requestUpdateForAA`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:31,Security,access,access,31,///}; /// Allow the Attributor access to the protected methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:42,Deployability,update,update,42,"/// Hook for the Attributor to trigger an update of the internal state.; ///; /// If this attribute is already fixed, this method will return UNCHANGED,; /// otherwise it delegates to `AbstractAttribute::updateImpl`.; ///; /// \Return CHANGED if the internal state changed, otherwise UNCHANGED.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:204,Deployability,update,updateImpl,204,"/// Hook for the Attributor to trigger an update of the internal state.; ///; /// If this attribute is already fixed, this method will return UNCHANGED,; /// otherwise it delegates to `AbstractAttribute::updateImpl`.; ///; /// \Return CHANGED if the internal state changed, otherwise UNCHANGED.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:15,Deployability,update,update,15,"/// The actual update/transfer function which has to be implemented by the; /// derived classes.; ///; /// If it is called, the environment has changed and we have to determine if; /// the current information is still valid or adjust it otherwise.; ///; /// \Return CHANGED if the internal state changed, otherwise UNCHANGED.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:97,Usability,simpl,simplifications,97,/// A more lightweight version of the Attributor which only runs attribute; /// inference but no simplifications.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:97,Usability,simpl,simplifications,97,/// A more lightweight version of the Attributor which only runs attribute; /// inference but no simplifications.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:143,Deployability,update,update,143,/// Helper function to clamp a state \p S of type \p StateType with the; /// information in \p R and indicate/return if \p S did change (as-in update is; /// required to be run again).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for all nonnull attributes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for all nonnull attributes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface to determine reachability of point A to B.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:177,Performance,cache,caches,177,"/// Returns true if 'From' instruction is assumed to reach, 'To' instruction.; /// Users should provide two positions they are interested in, and the class; /// determines (and caches) reachability.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for all noalias attributes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for liveness abstract attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:104,Integrability,interface,interfaces,104,/// The query functions are protected such that other attributes need to go; /// through the Attributor interfaces: `Attributor::isAssumedDead(...)`; /// Returns true if the underlying value is assumed dead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:196,Performance,load,loads,196,"/// Return true if the underlying value is a store that is known to be; /// removable. This is different from dead stores as the removable store; /// can have an effect on live values, especially loads, but that effect; /// is propagated which allows us to remove the store in turn.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:121,Performance,load,load,121,"/// Map representing for accessed memory offsets and sizes.; /// A key is Offset and a value is size.; /// If there is a load/store instruction something like,; /// p[offset] = v;; /// (offset, sizeof(v)) will be inserted to this map.; /// std::map is used because we want to iterate keys in ascending order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:25,Security,access,accessed,25,"/// Map representing for accessed memory offsets and sizes.; /// A key is Offset and a value is size.; /// If there is a load/store instruction something like,; /// p[offset] = v;; /// (offset, sizeof(v)) will be inserted to this map.; /// std::map is used because we want to iterate keys in ascending order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:390,Deployability,update,updated,390,"/// Helper function to calculate dereferenceable bytes from current known; /// bytes and accessed bytes.; ///; /// int f(int *A){; /// *A = 0;; /// *(A+2) = 2;; /// *(A+1) = 1;; /// *(A+10) = 10;; /// }; /// ```; /// In that case, AccessedBytesMap is `{0:4, 4:4, 8:4, 40:4}`.; /// AccessedBytesMap is std::map so it is iterated in accending order on; /// key(Offset). So KnownBytes will be updated like this:; ///; /// |Access | KnownBytes; /// |(0, 4)| 0 -> 4; /// |(4, 4)| 4 -> 8; /// |(8, 4)| 8 -> 12; /// |(40, 4) | 12 (break)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:89,Security,access,accessed,89,"/// Helper function to calculate dereferenceable bytes from current known; /// bytes and accessed bytes.; ///; /// int f(int *A){; /// *A = 0;; /// *(A+2) = 2;; /// *(A+1) = 1;; /// *(A+10) = 10;; /// }; /// ```; /// In that case, AccessedBytesMap is `{0:4, 4:4, 8:4, 40:4}`.; /// AccessedBytesMap is std::map so it is iterated in accending order on; /// key(Offset). So KnownBytes will be updated like this:; ///; /// |Access | KnownBytes; /// |(0, 4)| 0 -> 4; /// |(4, 4)| 4 -> 8; /// |(8, 4)| 8 -> 12; /// |(40, 4) | 12 (break)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:231,Security,Access,AccessedBytesMap,231,"/// Helper function to calculate dereferenceable bytes from current known; /// bytes and accessed bytes.; ///; /// int f(int *A){; /// *A = 0;; /// *(A+2) = 2;; /// *(A+1) = 1;; /// *(A+10) = 10;; /// }; /// ```; /// In that case, AccessedBytesMap is `{0:4, 4:4, 8:4, 40:4}`.; /// AccessedBytesMap is std::map so it is iterated in accending order on; /// key(Offset). So KnownBytes will be updated like this:; ///; /// |Access | KnownBytes; /// |(0, 4)| 0 -> 4; /// |(4, 4)| 4 -> 8; /// |(8, 4)| 8 -> 12; /// |(40, 4) | 12 (break)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:281,Security,Access,AccessedBytesMap,281,"/// Helper function to calculate dereferenceable bytes from current known; /// bytes and accessed bytes.; ///; /// int f(int *A){; /// *A = 0;; /// *(A+2) = 2;; /// *(A+1) = 1;; /// *(A+10) = 10;; /// }; /// ```; /// In that case, AccessedBytesMap is `{0:4, 4:4, 8:4, 40:4}`.; /// AccessedBytesMap is std::map so it is iterated in accending order on; /// key(Offset). So KnownBytes will be updated like this:; ///; /// |Access | KnownBytes; /// |(0, 4)| 0 -> 4; /// |(4, 4)| 4 -> 8; /// |(8, 4)| 8 -> 12; /// |(40, 4) | 12 (break)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:420,Security,Access,Access,420,"/// Helper function to calculate dereferenceable bytes from current known; /// bytes and accessed bytes.; ///; /// int f(int *A){; /// *A = 0;; /// *(A+2) = 2;; /// *(A+1) = 1;; /// *(A+10) = 10;; /// }; /// ```; /// In that case, AccessedBytesMap is `{0:4, 4:4, 8:4, 40:4}`.; /// AccessedBytesMap is std::map so it is iterated in accending order on; /// key(Offset). So KnownBytes will be updated like this:; ///; /// |Access | KnownBytes; /// |(0, 4)| 0 -> 4; /// |(4, 4)| 4 -> 8; /// |(8, 4)| 8 -> 12; /// |(40, 4) | 12 (break)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Deployability,Update,Update,4,/// Update known dereferenceable bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Deployability,Update,Update,4,/// Update assumed dereferenceable bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:8,Security,access,accessed,8,/// Add accessed bytes to the map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for all dereferenceable attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for all align attributes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,"/// An abstract interface to track if a value leaves it's defining function; /// instance.; /// TODO: We should make it a ternary AA tracking uniqueness, and uniqueness; /// wrt. the Attributor analysis separately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:196,Safety,risk,risking,196,/// Return true if we know that the underlying value is unique in its scope; /// wrt. the Attributor analysis. That means it might not be unique but we can; /// still use pointer equality without risking to represent two instances with; /// one `llvm::Value`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:198,Safety,risk,risking,198,/// Return true if we assume that the underlying value is unique in its scope; /// wrt. the Attributor analysis. That means it might not be unique but we can; /// still use pointer equality without risking to represent two instances with; /// one `llvm::Value`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for all nocapture attributes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Deployability,Update,Update,4,/// Update \p State according to the capture capabilities of \p F for position; /// \p IRP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:46,Usability,simpl,simplified,46,/// Merge \p Other into the currently assumed simplified value,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:15,Usability,simpl,simplified,15,"/// An assumed simplified value. Initially, it is set to std::nullopt, which; /// means that the value is not clear under current assumption. If in the; /// pessimistic state, getAssumedSimplifiedValue doesn't return this value but; /// returns orignal associated value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:110,Usability,clear,clear,110,"/// An assumed simplified value. Initially, it is set to std::nullopt, which; /// means that the value is not clear under current assumption. If in the; /// pessimistic state, getAssumedSimplifiedValue doesn't return this value but; /// returns orignal associated value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for value simplify abstract attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:36,Usability,simpl,simplify,36,/// An abstract interface for value simplify abstract attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:22,Usability,simpl,simplified,22,"/// Return an assumed simplified value if a single candidate is found. If; /// there cannot be one, return original value. If it is not clear yet, return; /// std::nullopt.; ///; /// Use `Attributor::getAssumedSimplified` for value simplification.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:136,Usability,clear,clear,136,"/// Return an assumed simplified value if a single candidate is found. If; /// there cannot be one, return original value. If it is not clear yet, return; /// std::nullopt.; ///; /// Use `Attributor::getAssumedSimplified` for value simplification.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:232,Usability,simpl,simplification,232,"/// Return an assumed simplified value if a single candidate is found. If; /// there cannot be one, return original value. If it is not clear yet, return; /// std::nullopt.; ///; /// Use `Attributor::getAssumedSimplified` for value simplification.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:153,Energy Efficiency,reduce,reduces,153,"/// An abstract interface for privatizability.; ///; /// A pointer is privatizable if it can be replaced by a new, private one.; /// Privatizing pointer reduces the use count, interaction between unrelated; /// code parts.; ///; /// In order for a pointer to be privatizable its value cannot be observed; /// (=nocapture), it is (for now) not written (=readonly & noalias), we know; /// what values are necessary to make the private copy look like the original; /// one, and the values we need can be loaded (=dereferenceable).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,"/// An abstract interface for privatizability.; ///; /// A pointer is privatizable if it can be replaced by a new, private one.; /// Privatizing pointer reduces the use count, interaction between unrelated; /// code parts.; ///; /// In order for a pointer to be privatizable its value cannot be observed; /// (=nocapture), it is (for now) not written (=readonly & noalias), we know; /// what values are necessary to make the private copy look like the original; /// one, and the values we need can be loaded (=dereferenceable).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:501,Performance,load,loaded,501,"/// An abstract interface for privatizability.; ///; /// A pointer is privatizable if it can be replaced by a new, private one.; /// Privatizing pointer reduces the use count, interaction between unrelated; /// code parts.; ///; /// In order for a pointer to be privatizable its value cannot be observed; /// (=nocapture), it is (for now) not written (=readonly & noalias), we know; /// what values are necessary to make the private copy look like the original; /// one, and the values we need can be loaded (=dereferenceable).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:112,Usability,clear,clear,112,"/// Return the type we can choose for a private copy of the underlying; /// value. std::nullopt means it is not clear yet, nullptr means there is; /// none.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for memory access kind related attributes; /// (readnone/readonly/writeonly).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:37,Security,access,access,37,/// An abstract interface for memory access kind related attributes; /// (readnone/readonly/writeonly).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:68,Security,access,accessed,68,/// Return true if we know that the underlying value is not read or accessed; /// in its respective scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:70,Security,access,accessed,70,/// Return true if we assume that the underlying value is not read or accessed; /// in its respective scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:60,Security,access,accessed,60,/// Return true if we know that the underlying value is not accessed; /// (=written) in its respective scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:62,Security,access,accessed,62,/// Return true if we assume that the underlying value is not accessed; /// (=written) in its respective scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for all memory location attributes; /// (readnone/argmemonly/inaccessiblememonly/inaccessibleorargmemonly).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:50,Security,access,accessed,50,/// Encoding of different locations that could be accessed by a memory; /// access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:76,Security,access,access,76,/// Encoding of different locations that could be accessed by a memory; /// access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:80,Security,access,accesses,80,/// Return true if we know that the associated functions has no observable; /// accesses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:82,Security,access,accesses,82,/// Return true if we assume that the associated functions has no observable; /// accesses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:86,Security,access,accesses,86,/// Return true if we know that the associated functions has at most; /// local/stack accesses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:88,Security,access,accesses,88,/// Return true if we assume that the associated functions has at most; /// local/stack accesses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:63,Security,access,access,63,/// Return true if we know that the underlying value will only access; /// inaccesible memory only (see Attribute::InaccessibleMemOnly).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:65,Security,access,access,65,/// Return true if we assume that the underlying value will only access; /// inaccesible memory only (see Attribute::InaccessibleMemOnly).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:63,Security,access,access,63,/// Return true if we know that the underlying value will only access; /// argument pointees (see Attribute::ArgMemOnly).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:65,Security,access,access,65,/// Return true if we assume that the underlying value will only access; /// argument pointees (see Attribute::ArgMemOnly).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:63,Security,access,access,63,/// Return true if we know that the underlying value will only access; /// inaccesible memory or argument pointees (see; /// Attribute::InaccessibleOrArgMemOnly).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:65,Security,access,access,65,/// Return true if we assume that the underlying value will only access; /// inaccesible memory or argument pointees (see; /// Attribute::InaccessibleOrArgMemOnly).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:44,Security,access,access,44,"/// Return true if the underlying value may access memory through arguement; /// pointers of the associated function, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:89,Security,access,accessed,89,/// Return true if only the memory locations specififed by \p MLK are assumed; /// to be accessed by the associated function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:52,Security,access,accessed,52,"/// Return the locations that are assumed to be not accessed by the associated; /// function, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:291,Security,access,accesses,291,"/// Return the inverse of location \p Loc, thus for NO_XXX the return; /// describes ONLY_XXX. The flags \p AndLocalMem and \p AndConstMem determine; /// if local (=stack) and constant memory are allowed as well. Most of the; /// time we do want them to be included, e.g., argmemonly allows accesses via; /// argument pointers or local or constant memory accesses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:355,Security,access,accesses,355,"/// Return the inverse of location \p Loc, thus for NO_XXX the return; /// describes ONLY_XXX. The flags \p AndLocalMem and \p AndConstMem determine; /// if local (=stack) and constant memory are allowed as well. Most of the; /// time we do want them to be included, e.g., argmemonly allows accesses via; /// argument pointers or local or constant memory accesses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:53,Security,access,accesses,53,/// Simple enum to distinguish read/write/read-write accesses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Usability,Simpl,Simple,4,/// Simple enum to distinguish read/write/read-write accesses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:25,Security,access,accesses,25,/// Check \p Pred on all accesses to the memory kinds specified by \p MLK.; ///; /// This method will evaluate \p Pred on all accesses (access instruction +; /// underlying accessed memory pointer) and it will return true if \p Pred; /// holds every time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:126,Security,access,accesses,126,/// Check \p Pred on all accesses to the memory kinds specified by \p MLK.; ///; /// This method will evaluate \p Pred on all accesses (access instruction +; /// underlying accessed memory pointer) and it will return true if \p Pred; /// holds every time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:136,Security,access,access,136,/// Check \p Pred on all accesses to the memory kinds specified by \p MLK.; ///; /// This method will evaluate \p Pred on all accesses (access instruction +; /// underlying accessed memory pointer) and it will return true if \p Pred; /// holds every time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:173,Security,access,accessed,173,/// Check \p Pred on all accesses to the memory kinds specified by \p MLK.; ///; /// This method will evaluate \p Pred on all accesses (access instruction +; /// underlying accessed memory pointer) and it will return true if \p Pred; /// holds every time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for range value analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:103,Usability,simpl,simply,103,"/// Return an assumed range for the associated value a program point \p CtxI.; /// If \p I is nullptr, simply return an assumed range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:103,Usability,simpl,simply,103,"/// Return a known range for the associated value at a program point \p CtxI.; /// If \p I is nullptr, simply return a known range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:60,Energy Efficiency,reduce,reduce,60,"/// If this state contains both undef and not undef, we can reduce; /// undef to the not undef value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,"/// An abstract interface for potential values analysis.; ///; /// This AA collects potential values for each IR position.; /// An assumed set of potential values is initialized with the empty set (the; /// best state) and it will grow monotonically as we find more potential values; /// for this position.; /// The set might be forced to the worst state, that is, to contain every; /// possible value for this position in 2 cases.; /// 1. We surpassed the \p MaxPotentialValues threshold. This includes the; /// case that this position is affected (e.g. because of an operation) by a; /// Value that is in the worst state.; /// 2. We tried to initialize on a Value that we cannot handle (e.g. an; /// operator we do not currently handle).; ///; /// For non constant integers see AAPotentialValues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for all noundef attributes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:161,Availability,alive,alive,161,/// An abstract state for querying live call edges.; /// This interface uses the Attributor's optimistic liveness; /// information to compute the edges that are alive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:62,Integrability,interface,interface,62,/// An abstract state for querying live call edges.; /// This interface uses the Attributor's optimistic liveness; /// information to compute the edges that are alive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:86,Integrability,synchroniz,synchronizing,86,"/// Check if the instruction \p I is executed in an aligned region, that is,; /// the synchronizing effects before and after \p I are both aligned barriers.; /// This effectively means all threads execute \p I together.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for struct information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:46,Security,access,accesses,46,// First two bits to distinguish may and must accesses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:145,Safety,avoid,avoid,145,// One special case for assumptions about memory content. These; // are neither reads nor writes. They are however always modeled; // as read to avoid using them for write removal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:19,Security,access,access,19,// Helper for easy access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:180,Safety,avoid,avoids,180,"// The set of ranges rarely contains more than one element, and is unlikely; // to contain more than say four elements. So we find the middle-ground with; // a sorted vector. This avoids hard-coding a rarely used number like ""four""; // into every instance of a SmallSet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:7,Security,access,access,7,/// An access description.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:19,Security,Access,Access,19,"// Note that every Access object corresponds to a unique Value, and only; // accesses to the same Value are merged. Hence we assume that all ranges; // are the same size. If ranges can be different size, then the contents; // must be dropped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:77,Security,access,accesses,77,"// Note that every Access object corresponds to a unique Value, and only; // accesses to the same Value are merged. Hence we assume that all ranges; // are the same size. If ranges can be different size, then the contents; // must be dropped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:15,Security,access,access,15,"// Combine the access kind, which results in a bitwise union.; // If there is more than one range, then this must be a MAY.; // If we combine a may and a must access we clear the must bit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:159,Security,access,access,159,"// Combine the access kind, which results in a bitwise union.; // If there is more than one range, then this must be a MAY.; // If we combine a may and a must access we clear the must bit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:169,Usability,clear,clear,169,"// Combine the access kind, which results in a bitwise union.; // If there is more than one range, then this must be a MAY.; // If we combine a may and a must access we clear the must bit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:15,Security,access,access,15,/// Return the access kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:34,Security,access,access,34,/// Return true if this is a read access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:35,Security,access,access,35,/// Return true if this is a write access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:35,Security,access,access,35,/// Return true if this is a write access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:41,Security,access,access,41,/// Return true if this is an assumption access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:43,Security,access,access,43,/// Return the instruction that causes the access with respect to the local; /// scope of the associated attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:50,Security,access,access,50,/// Return the actual instruction that causes the access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:40,Security,access,access,40,"/// Return the type associated with the access, if known.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Security,access,accessed,16,"/// Add a range accessed by this Access.; ///; /// If there are multiple ranges, then this is a ""may access"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:33,Security,Access,Access,33,"/// Add a range accessed by this Access.; ///; /// If there are multiple ranges, then this is a ""may access"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:101,Security,access,access,101,"/// Add a range accessed by this Access.; ///; /// If there are multiple ranges, then this is a ""may access"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:40,Security,access,access,40,/// The instruction responsible for the access with respect to the local; /// scope of the associated attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:40,Security,access,access,40,/// The instruction responsible for the access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:28,Security,access,accessed,28,/// Set of potential ranges accessed from the base pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:8,Security,access,access,8,"/// The access kind, e.g., READ, as bitset (could be more than one).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:81,Availability,avail,available,81,"/// The type of the content, thus the type read/written, can be null if not; /// available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:22,Security,access,accesses,22,"/// Call \p CB on all accesses that might interfere with \p Range and return; /// true if all such accesses were known and the callback returned true for; /// all of them, false otherwise. An access interferes with an offset-size; /// pair if it might read or write that memory region.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:99,Security,access,accesses,99,"/// Call \p CB on all accesses that might interfere with \p Range and return; /// true if all such accesses were known and the callback returned true for; /// all of them, false otherwise. An access interferes with an offset-size; /// pair if it might read or write that memory region.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:192,Security,access,access,192,"/// Call \p CB on all accesses that might interfere with \p Range and return; /// true if all such accesses were known and the callback returned true for; /// all of them, false otherwise. An access interferes with an offset-size; /// pair if it might read or write that memory region.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:250,Performance,perform,perform,250,"/// Call \p CB on all accesses that might interfere with \p I and; /// return true if all such accesses were known and the callback returned true; /// for all of them, false otherwise. In contrast to forallInterferingAccesses; /// this function will perform reasoning to exclude write accesses that cannot; /// affect the load even if they on the surface look as if they would. The; /// flag \p HasBeenWrittenTo will be set to true if we know that \p I does not; /// read the initial value of the underlying memory. If \p SkipCB is given and; /// returns false for a potentially interfering access, that access is not; /// checked for actual interference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:322,Performance,load,load,322,"/// Call \p CB on all accesses that might interfere with \p I and; /// return true if all such accesses were known and the callback returned true; /// for all of them, false otherwise. In contrast to forallInterferingAccesses; /// this function will perform reasoning to exclude write accesses that cannot; /// affect the load even if they on the surface look as if they would. The; /// flag \p HasBeenWrittenTo will be set to true if we know that \p I does not; /// read the initial value of the underlying memory. If \p SkipCB is given and; /// returns false for a potentially interfering access, that access is not; /// checked for actual interference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:22,Security,access,accesses,22,"/// Call \p CB on all accesses that might interfere with \p I and; /// return true if all such accesses were known and the callback returned true; /// for all of them, false otherwise. In contrast to forallInterferingAccesses; /// this function will perform reasoning to exclude write accesses that cannot; /// affect the load even if they on the surface look as if they would. The; /// flag \p HasBeenWrittenTo will be set to true if we know that \p I does not; /// read the initial value of the underlying memory. If \p SkipCB is given and; /// returns false for a potentially interfering access, that access is not; /// checked for actual interference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:95,Security,access,accesses,95,"/// Call \p CB on all accesses that might interfere with \p I and; /// return true if all such accesses were known and the callback returned true; /// for all of them, false otherwise. In contrast to forallInterferingAccesses; /// this function will perform reasoning to exclude write accesses that cannot; /// affect the load even if they on the surface look as if they would. The; /// flag \p HasBeenWrittenTo will be set to true if we know that \p I does not; /// read the initial value of the underlying memory. If \p SkipCB is given and; /// returns false for a potentially interfering access, that access is not; /// checked for actual interference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:285,Security,access,accesses,285,"/// Call \p CB on all accesses that might interfere with \p I and; /// return true if all such accesses were known and the callback returned true; /// for all of them, false otherwise. In contrast to forallInterferingAccesses; /// this function will perform reasoning to exclude write accesses that cannot; /// affect the load even if they on the surface look as if they would. The; /// flag \p HasBeenWrittenTo will be set to true if we know that \p I does not; /// read the initial value of the underlying memory. If \p SkipCB is given and; /// returns false for a potentially interfering access, that access is not; /// checked for actual interference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:591,Security,access,access,591,"/// Call \p CB on all accesses that might interfere with \p I and; /// return true if all such accesses were known and the callback returned true; /// for all of them, false otherwise. In contrast to forallInterferingAccesses; /// this function will perform reasoning to exclude write accesses that cannot; /// affect the load even if they on the surface look as if they would. The; /// flag \p HasBeenWrittenTo will be set to true if we know that \p I does not; /// read the initial value of the underlying memory. If \p SkipCB is given and; /// returns false for a potentially interfering access, that access is not; /// checked for actual interference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:604,Security,access,access,604,"/// Call \p CB on all accesses that might interfere with \p I and; /// return true if all such accesses were known and the callback returned true; /// for all of them, false otherwise. In contrast to forallInterferingAccesses; /// this function will perform reasoning to exclude write accesses that cannot; /// affect the load even if they on the surface look as if they would. The; /// flag \p HasBeenWrittenTo will be set to true if we know that \p I does not; /// read the initial value of the underlying memory. If \p SkipCB is given and; /// returns false for a potentially interfering access, that access is not; /// checked for actual interference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for address space information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for llvm::GlobalValue information interference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,Integrability,interface,interface,16,/// An abstract interface for indirect call information interference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:14,Safety,avoid,avoid,14,/// Helper to avoid creating an AA for IR Attributes that might already be set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ConstantMerge.h:678,Availability,avail,available,678,"//===- ConstantMerge.h - Merge duplicate global constants -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the interface to a pass that merges duplicate global; // constants together into a single constant that is shared. This is useful; // because some passes (ie TraceValues) insert a lot of string constants into; // the program, regardless of whether or not an existing string is available.; //; // Algorithm: ConstantMerge is designed to build up a map of available constants; // and eliminate duplicates when it is initialized.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ConstantMerge.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ConstantMerge.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ConstantMerge.h:755,Availability,avail,available,755,"//===- ConstantMerge.h - Merge duplicate global constants -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the interface to a pass that merges duplicate global; // constants together into a single constant that is shared. This is useful; // because some passes (ie TraceValues) insert a lot of string constants into; // the program, regardless of whether or not an existing string is available.; //; // Algorithm: ConstantMerge is designed to build up a map of available constants; // and eliminate duplicates when it is initialized.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ConstantMerge.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ConstantMerge.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ConstantMerge.h:405,Integrability,interface,interface,405,"//===- ConstantMerge.h - Merge duplicate global constants -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the interface to a pass that merges duplicate global; // constants together into a single constant that is shared. This is useful; // because some passes (ie TraceValues) insert a lot of string constants into; // the program, regardless of whether or not an existing string is available.; //; // Algorithm: ConstantMerge is designed to build up a map of available constants; // and eliminate duplicates when it is initialized.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ConstantMerge.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ConstantMerge.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h:87,Availability,alive,alive,87,"/// During our initial pass over the program, we determine that things are; /// either alive or maybe alive. We don't mark anything explicitly dead (even; /// if we know they are), since anything not alive with no registered uses; /// (in Uses) will never be marked alive and will thus become dead in the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h:102,Availability,alive,alive,102,"/// During our initial pass over the program, we determine that things are; /// either alive or maybe alive. We don't mark anything explicitly dead (even; /// if we know they are), since anything not alive with no registered uses; /// (in Uses) will never be marked alive and will thus become dead in the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h:200,Availability,alive,alive,200,"/// During our initial pass over the program, we determine that things are; /// either alive or maybe alive. We don't mark anything explicitly dead (even; /// if we know they are), since anything not alive with no registered uses; /// (in Uses) will never be marked alive and will thus become dead in the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h:266,Availability,alive,alive,266,"/// During our initial pass over the program, we determine that things are; /// either alive or maybe alive. We don't mark anything explicitly dead (even; /// if we know they are), since anything not alive with no registered uses; /// (in Uses) will never be marked alive and will thus become dead in the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h:16,Integrability,wrap,wrapper,16,/// Convenience wrapper,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h:16,Integrability,wrap,wrapper,16,/// Convenience wrapper,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ElimAvailExtern.h:423,Availability,avail,available,423,"//===- ElimAvailExtern.h - Optimize Global Variables ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transform is designed to eliminate available external global; // definitions from the program, turning them into declarations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ElimAvailExtern.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ElimAvailExtern.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ElimAvailExtern.h:43,Modifiability,Variab,Variables,43,"//===- ElimAvailExtern.h - Optimize Global Variables ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transform is designed to eliminate available external global; // definitions from the program, turning them into declarations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ElimAvailExtern.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ElimAvailExtern.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ElimAvailExtern.h:27,Performance,Optimiz,Optimize,27,"//===- ElimAvailExtern.h - Optimize Global Variables ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transform is designed to eliminate available external global; // definitions from the program, turning them into declarations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ElimAvailExtern.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ElimAvailExtern.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h:486,Deployability,pipeline,pipeline,486,"//===-- EmbedBitcodePass.h - Embeds bitcode into global ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides a pass which clones the current module and runs the; /// provided pass pipeline on the clone. The optimized module is stored into a; /// global variable in the `.llvm.lto` section. Primarily, this pass is used; /// to support the FatLTO pipeline, but could be used to generate a bitcode; /// section for any arbitrary pass pipeline without changing the current module.; ///; //===----------------------------------------------------------------------===//; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h:652,Deployability,pipeline,pipeline,652,"//===-- EmbedBitcodePass.h - Embeds bitcode into global ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides a pass which clones the current module and runs the; /// provided pass pipeline on the clone. The optimized module is stored into a; /// global variable in the `.llvm.lto` section. Primarily, this pass is used; /// to support the FatLTO pipeline, but could be used to generate a bitcode; /// section for any arbitrary pass pipeline without changing the current module.; ///; //===----------------------------------------------------------------------===//; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h:738,Deployability,pipeline,pipeline,738,"//===-- EmbedBitcodePass.h - Embeds bitcode into global ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides a pass which clones the current module and runs the; /// provided pass pipeline on the clone. The optimized module is stored into a; /// global variable in the `.llvm.lto` section. Primarily, this pass is used; /// to support the FatLTO pipeline, but could be used to generate a bitcode; /// section for any arbitrary pass pipeline without changing the current module.; ///; //===----------------------------------------------------------------------===//; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h:559,Modifiability,variab,variable,559,"//===-- EmbedBitcodePass.h - Embeds bitcode into global ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides a pass which clones the current module and runs the; /// provided pass pipeline on the clone. The optimized module is stored into a; /// global variable in the `.llvm.lto` section. Primarily, this pass is used; /// to support the FatLTO pipeline, but could be used to generate a bitcode; /// section for any arbitrary pass pipeline without changing the current module.; ///; //===----------------------------------------------------------------------===//; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h:513,Performance,optimiz,optimized,513,"//===-- EmbedBitcodePass.h - Embeds bitcode into global ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides a pass which clones the current module and runs the; /// provided pass pipeline on the clone. The optimized module is stored into a; /// global variable in the `.llvm.lto` section. Primarily, this pass is used; /// to support the FatLTO pipeline, but could be used to generate a bitcode; /// section for any arbitrary pass pipeline without changing the current module.; ///; //===----------------------------------------------------------------------===//; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h:70,Deployability,pipeline,pipeline,70,/// Pass embeds a copy of the module optimized with the provided pass pipeline; /// into a global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h:98,Modifiability,variab,variable,98,/// Pass embeds a copy of the module optimized with the provided pass pipeline; /// into a global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h:37,Performance,optimiz,optimized,37,/// Pass embeds a copy of the module optimized with the provided pass pipeline; /// into a global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ForceFunctionAttrs.h:397,Usability,simpl,simple,397,"//===-- ForceFunctionAttrs.h - Force function attrs for debugging ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Super simple passes to force specific function attrs from the commandline; /// into the IR for debugging purposes.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ForceFunctionAttrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ForceFunctionAttrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h:23,Security,access,access,23,/// Returns the memory access properties of this copy of the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h:244,Energy Efficiency,power,powerful,244,"/// Computes function attributes in post-order over the call graph.; ///; /// By operating in post-order, this pass computes precise attributes for; /// called functions prior to processsing their callers. This ""bottom-up""; /// approach allows powerful interprocedural inference of function attributes; /// like memory access patterns, etc. It can discover functions that do not; /// access memory, or only read memory, and give them the readnone/readonly; /// attribute. It also discovers function arguments that are not captured by; /// the function and marks them with the nocapture attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h:319,Security,access,access,319,"/// Computes function attributes in post-order over the call graph.; ///; /// By operating in post-order, this pass computes precise attributes for; /// called functions prior to processsing their callers. This ""bottom-up""; /// approach allows powerful interprocedural inference of function attributes; /// like memory access patterns, etc. It can discover functions that do not; /// access memory, or only read memory, and give them the readnone/readonly; /// attribute. It also discovers function arguments that are not captured by; /// the function and marks them with the nocapture attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h:384,Security,access,access,384,"/// Computes function attributes in post-order over the call graph.; ///; /// By operating in post-order, this pass computes precise attributes for; /// called functions prior to processsing their callers. This ""bottom-up""; /// approach allows powerful interprocedural inference of function attributes; /// like memory access patterns, etc. It can discover functions that do not; /// access memory, or only read memory, and give them the readnone/readonly; /// attribute. It also discovers function arguments that are not captured by; /// the function and marks them with the nocapture attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h:122,Availability,down,down,122,"/// A pass to do RPO deduction and propagation of function attributes.; ///; /// This pass provides a general RPO or ""top down"" propagation of; /// function attributes. For a few (rare) cases, we can deduce significantly; /// more about function attributes by working in RPO, so this pass; /// provides the complement to the post-order pass above where the majority of; /// deduction is performed.; // FIXME: Currently there is no RPO CGSCC pass structure to slide into and so; // this is a boring module pass, but eventually it should be an RPO CGSCC pass; // when such infrastructure is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h:589,Availability,avail,available,589,"/// A pass to do RPO deduction and propagation of function attributes.; ///; /// This pass provides a general RPO or ""top down"" propagation of; /// function attributes. For a few (rare) cases, we can deduce significantly; /// more about function attributes by working in RPO, so this pass; /// provides the complement to the post-order pass above where the majority of; /// deduction is performed.; // FIXME: Currently there is no RPO CGSCC pass structure to slide into and so; // this is a boring module pass, but eventually it should be an RPO CGSCC pass; // when such infrastructure is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h:387,Performance,perform,performed,387,"/// A pass to do RPO deduction and propagation of function attributes.; ///; /// This pass provides a general RPO or ""top down"" propagation of; /// function attributes. For a few (rare) cases, we can deduce significantly; /// more about function attributes by working in RPO, so this pass; /// provides the complement to the post-order pass above where the majority of; /// deduction is performed.; // FIXME: Currently there is no RPO CGSCC pass structure to slide into and so; // this is a boring module pass, but eventually it should be an RPO CGSCC pass; // when such infrastructure is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionAttrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:97,Usability,GUID,GUIDs,97,/// Set of functions to import from a source module. Each entry is a set; /// containing all the GUIDs of all functions to import for a source module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:123,Availability,failure,failure,123,// We can encounter a global variable instead of a function in rare; // situations with SamplePGO. See comments where this failure type is; // set for more details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:29,Modifiability,variab,variable,29,// We can encounter a global variable instead of a function in rare; // situations with SamplePGO. See comments where this failure type is; // set for more details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:111,Usability,GUID,GUID,111,"// Generally we won't end up failing due to this reason, as we expect; // to find at least one summary for the GUID that is global or a local; // in the referenced module for direct calls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:210,Modifiability,variab,variable,210,"// This corresponds to the NotEligibleToImport being set on the summary,; // which can happen in a few different cases (e.g. local that can't be; // renamed or promoted because it is referenced on a llvm*.used variable).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:66,Security,hash,hash,66,// The ValueInfo corresponding to the candidate. We save an index hash; // table lookup for each GUID by stashing this here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:97,Usability,GUID,GUID,97,// The ValueInfo corresponding to the candidate. We save an index hash; // table lookup for each GUID by stashing this here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:18,Usability,GUID,GUID,18,"/// Map of callee GUID considered for import into a given module to a pair; /// consisting of the largest threshold applied when deciding whether to; /// import it and, if we decided to import, a pointer to the summary instance; /// imported. If we decided not to import, the summary will be nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:39,Performance,load,load,39,/// A function of this type is used to load modules referenced by the index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:24,Performance,load,load,24,/// Factory function to load a Module for a given identifier,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:23,Usability,Clear,ClearDSOLocalOnDeclarations,23,/// See the comment of ClearDSOLocalOnDeclarations in; /// Utils/FunctionImportUtils.h.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:148,Usability,GUID,GUID,148,"/// Compute all the imports and exports for every module in the Index.; ///; /// \p ModuleToDefinedGVSummaries contains for each Module a map; /// (GUID -> Summary) for every global defined in the module.; ///; /// \p isPrevailing is a callback that will be called with a global value's GUID; /// and summary and should return whether the module corresponding to the; /// summary contains the linker-prevailing copy of that value.; ///; /// \p ImportLists will be populated with an entry for every Module we are; /// importing into. This entry is itself a map that can be passed to; /// FunctionImporter::importFunctions() above (see description there).; ///; /// \p ExportLists contains for each Module the set of globals (GUID) that will; /// be imported by another module, or referenced by such a function. I.e. this; /// is the set of globals that need to be promoted/renamed appropriately.; ///; /// The module identifier strings that are the keys of the above two maps; /// are owned by the in-memory ModuleSummaryIndex the importing decisions; /// are made from (the module path for each summary is owned by the index's; /// module path string table).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:287,Usability,GUID,GUID,287,"/// Compute all the imports and exports for every module in the Index.; ///; /// \p ModuleToDefinedGVSummaries contains for each Module a map; /// (GUID -> Summary) for every global defined in the module.; ///; /// \p isPrevailing is a callback that will be called with a global value's GUID; /// and summary and should return whether the module corresponding to the; /// summary contains the linker-prevailing copy of that value.; ///; /// \p ImportLists will be populated with an entry for every Module we are; /// importing into. This entry is itself a map that can be passed to; /// FunctionImporter::importFunctions() above (see description there).; ///; /// \p ExportLists contains for each Module the set of globals (GUID) that will; /// be imported by another module, or referenced by such a function. I.e. this; /// is the set of globals that need to be promoted/renamed appropriately.; ///; /// The module identifier strings that are the keys of the above two maps; /// are owned by the in-memory ModuleSummaryIndex the importing decisions; /// are made from (the module path for each summary is owned by the index's; /// module path string table).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:724,Usability,GUID,GUID,724,"/// Compute all the imports and exports for every module in the Index.; ///; /// \p ModuleToDefinedGVSummaries contains for each Module a map; /// (GUID -> Summary) for every global defined in the module.; ///; /// \p isPrevailing is a callback that will be called with a global value's GUID; /// and summary and should return whether the module corresponding to the; /// summary contains the linker-prevailing copy of that value.; ///; /// \p ImportLists will be populated with an entry for every Module we are; /// importing into. This entry is itself a map that can be passed to; /// FunctionImporter::importFunctions() above (see description there).; ///; /// \p ExportLists contains for each Module the set of globals (GUID) that will; /// be imported by another module, or referenced by such a function. I.e. this; /// is the set of globals that need to be promoted/renamed appropriately.; ///; /// The module identifier strings that are the keys of the above two maps; /// are owned by the in-memory ModuleSummaryIndex the importing decisions; /// are made from (the module path for each summary is owned by the index's; /// module path string table).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:4,Deployability,Update,Update,4,"/// Update call edges for indirect calls to local functions added from; /// SamplePGO when needed. Normally this is done during; /// computeDeadSymbolsAndUpdateIndirectCalls, but can be called standalone; /// when that is not called (e.g. during testing).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:246,Testability,test,testing,246,"/// Update call edges for indirect calls to local functions added from; /// SamplePGO when needed. Normally this is done during; /// computeDeadSymbolsAndUpdateIndirectCalls, but can be called standalone; /// when that is not called (e.g. during testing).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:336,Deployability,update,update,336,"/// Compute all the symbols that are ""dead"": i.e these that can't be reached; /// in the graph from any of the given symbols listed in; /// \p GUIDPreservedSymbols. Non-prevailing symbols are symbols without a; /// prevailing copy anywhere in IR and are normally dead, \p isPrevailing; /// predicate returns status of symbol.; /// Also update call edges for indirect calls to local functions added from; /// SamplePGO when needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:143,Usability,GUID,GUIDPreservedSymbols,143,"/// Compute all the symbols that are ""dead"": i.e these that can't be reached; /// in the graph from any of the given symbols listed in; /// \p GUIDPreservedSymbols. Non-prevailing symbols are symbols without a; /// prevailing copy anywhere in IR and are normally dead, \p isPrevailing; /// predicate returns status of symbol.; /// Also update call edges for indirect calls to local functions added from; /// SamplePGO when needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:186,Performance,optimiz,optimizations,186,/// Compute the set of summaries needed for a ThinLTO backend compilation of; /// \p ModulePath.; //; /// This includes summaries from that module (in case any global summary based; /// optimizations were recorded) and from any definitions in other modules that; /// should be imported.; //; /// \p ModuleToSummariesForIndex will be populated with the needed summaries; /// from each required module path. Use a std::map instead of StringMap to get; /// stable order for bitcode emission.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:1379,Deployability,pipeline,pipeline,1379,"---------------------===//; //; // Overview:; // ---------; // Function Specialization is a transformation which propagates the constant; // parameters of a function call from the caller to the callee. It is part of; // the Inter-Procedural Sparse Conditional Constant Propagation (IPSCCP) pass.; // The transformation runs iteratively a number of times which is controlled; // by the option `funcspec-max-iters`. Running it multiple times is needed; // for specializing recursive functions, but also exposes new opportunities; // arising from specializations which return constant values or contain calls; // which can be specialized.; //; // Function Specialization supports propagating constant parameters like; // function pointers, literal constants and addresses of global variables.; // By propagating function pointers, indirect calls become direct calls. This; // exposes inlining opportunities which we would have otherwise missed. That's; // why function specialization is run before the inliner in the optimization; // pipeline; that is by design.; //; // Cost Model:; // -----------; // The cost model facilitates a utility for estimating the specialization bonus; // from propagating a constant argument. This is the InstCostVisitor, a class; // that inherits from the InstVisitor. The bonus itself is expressed as codesize; // and latency savings. Codesize savings means the amount of code that becomes; // dead in the specialization from propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods to; // be able to handle different types of instructions. These attempt to constant-; // fold the instruction in which case a constant is returned and propagated; // further.; //; // Function pointers are not handled by the InstCostVisitor. They are treated; // separately as they could expose inlining opportunities via indirect call; // promoti",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:1127,Modifiability,variab,variables,1127,"---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Overview:; // ---------; // Function Specialization is a transformation which propagates the constant; // parameters of a function call from the caller to the callee. It is part of; // the Inter-Procedural Sparse Conditional Constant Propagation (IPSCCP) pass.; // The transformation runs iteratively a number of times which is controlled; // by the option `funcspec-max-iters`. Running it multiple times is needed; // for specializing recursive functions, but also exposes new opportunities; // arising from specializations which return constant values or contain calls; // which can be specialized.; //; // Function Specialization supports propagating constant parameters like; // function pointers, literal constants and addresses of global variables.; // By propagating function pointers, indirect calls become direct calls. This; // exposes inlining opportunities which we would have otherwise missed. That's; // why function specialization is run before the inliner in the optimization; // pipeline; that is by design.; //; // Cost Model:; // -----------; // The cost model facilitates a utility for estimating the specialization bonus; // from propagating a constant argument. This is the InstCostVisitor, a class; // that inherits from the InstVisitor. The bonus itself is expressed as codesize; // and latency savings. Codesize savings means the amount of code that becomes; // dead in the specialization from propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods to; // be able to handle different types of instructions. ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:1613,Modifiability,inherit,inherits,1613,"nal Constant Propagation (IPSCCP) pass.; // The transformation runs iteratively a number of times which is controlled; // by the option `funcspec-max-iters`. Running it multiple times is needed; // for specializing recursive functions, but also exposes new opportunities; // arising from specializations which return constant values or contain calls; // which can be specialized.; //; // Function Specialization supports propagating constant parameters like; // function pointers, literal constants and addresses of global variables.; // By propagating function pointers, indirect calls become direct calls. This; // exposes inlining opportunities which we would have otherwise missed. That's; // why function specialization is run before the inliner in the optimization; // pipeline; that is by design.; //; // Cost Model:; // -----------; // The cost model facilitates a utility for estimating the specialization bonus; // from propagating a constant argument. This is the InstCostVisitor, a class; // that inherits from the InstVisitor. The bonus itself is expressed as codesize; // and latency savings. Codesize savings means the amount of code that becomes; // dead in the specialization from propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods to; // be able to handle different types of instructions. These attempt to constant-; // fold the instruction in which case a constant is returned and propagated; // further.; //; // Function pointers are not handled by the InstCostVisitor. They are treated; // separately as they could expose inlining opportunities via indirect call; // promotion. The inlining bonus contributes to the total specialization score.; //; // For a specialization to be profitable its bonus needs to exceed a minimum; // threshold. There are three options for controlling the threshold which are; // expressed as percentag",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:1362,Performance,optimiz,optimization,1362,"---------------------===//; //; // Overview:; // ---------; // Function Specialization is a transformation which propagates the constant; // parameters of a function call from the caller to the callee. It is part of; // the Inter-Procedural Sparse Conditional Constant Propagation (IPSCCP) pass.; // The transformation runs iteratively a number of times which is controlled; // by the option `funcspec-max-iters`. Running it multiple times is needed; // for specializing recursive functions, but also exposes new opportunities; // arising from specializations which return constant values or contain calls; // which can be specialized.; //; // Function Specialization supports propagating constant parameters like; // function pointers, literal constants and addresses of global variables.; // By propagating function pointers, indirect calls become direct calls. This; // exposes inlining opportunities which we would have otherwise missed. That's; // why function specialization is run before the inliner in the optimization; // pipeline; that is by design.; //; // Cost Model:; // -----------; // The cost model facilitates a utility for estimating the specialization bonus; // from propagating a constant argument. This is the InstCostVisitor, a class; // that inherits from the InstVisitor. The bonus itself is expressed as codesize; // and latency savings. Codesize savings means the amount of code that becomes; // dead in the specialization from propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods to; // be able to handle different types of instructions. These attempt to constant-; // fold the instruction in which case a constant is returned and propagated; // further.; //; // Function pointers are not handled by the InstCostVisitor. They are treated; // separately as they could expose inlining opportunities via indirect call; // promoti",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:1694,Performance,latency,latency,1694,"atively a number of times which is controlled; // by the option `funcspec-max-iters`. Running it multiple times is needed; // for specializing recursive functions, but also exposes new opportunities; // arising from specializations which return constant values or contain calls; // which can be specialized.; //; // Function Specialization supports propagating constant parameters like; // function pointers, literal constants and addresses of global variables.; // By propagating function pointers, indirect calls become direct calls. This; // exposes inlining opportunities which we would have otherwise missed. That's; // why function specialization is run before the inliner in the optimization; // pipeline; that is by design.; //; // Cost Model:; // -----------; // The cost model facilitates a utility for estimating the specialization bonus; // from propagating a constant argument. This is the InstCostVisitor, a class; // that inherits from the InstVisitor. The bonus itself is expressed as codesize; // and latency savings. Codesize savings means the amount of code that becomes; // dead in the specialization from propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods to; // be able to handle different types of instructions. These attempt to constant-; // fold the instruction in which case a constant is returned and propagated; // further.; //; // Function pointers are not handled by the InstCostVisitor. They are treated; // separately as they could expose inlining opportunities via indirect call; // promotion. The inlining bonus contributes to the total specialization score.; //; // For a specialization to be profitable its bonus needs to exceed a minimum; // threshold. There are three options for controlling the threshold which are; // expressed as percentages of the original function size:; // * funcspec-min-codesize-savings; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:1836,Performance,latency,latency,1836,"e functions, but also exposes new opportunities; // arising from specializations which return constant values or contain calls; // which can be specialized.; //; // Function Specialization supports propagating constant parameters like; // function pointers, literal constants and addresses of global variables.; // By propagating function pointers, indirect calls become direct calls. This; // exposes inlining opportunities which we would have otherwise missed. That's; // why function specialization is run before the inliner in the optimization; // pipeline; that is by design.; //; // Cost Model:; // -----------; // The cost model facilitates a utility for estimating the specialization bonus; // from propagating a constant argument. This is the InstCostVisitor, a class; // that inherits from the InstVisitor. The bonus itself is expressed as codesize; // and latency savings. Codesize savings means the amount of code that becomes; // dead in the specialization from propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods to; // be able to handle different types of instructions. These attempt to constant-; // fold the instruction in which case a constant is returned and propagated; // further.; //; // Function pointers are not handled by the InstCostVisitor. They are treated; // separately as they could expose inlining opportunities via indirect call; // promotion. The inlining bonus contributes to the total specialization score.; //; // For a specialization to be profitable its bonus needs to exceed a minimum; // threshold. There are three options for controlling the threshold which are; // expressed as percentages of the original function size:; // * funcspec-min-codesize-savings; // * funcspec-min-latency-savings; // * funcspec-min-inlining-bonus; // There's also an option for controlling the codesize growth from recursive; // sp",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:2694,Performance,latency,latency-savings,2694,"odesize; // and latency savings. Codesize savings means the amount of code that becomes; // dead in the specialization from propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods to; // be able to handle different types of instructions. These attempt to constant-; // fold the instruction in which case a constant is returned and propagated; // further.; //; // Function pointers are not handled by the InstCostVisitor. They are treated; // separately as they could expose inlining opportunities via indirect call; // promotion. The inlining bonus contributes to the total specialization score.; //; // For a specialization to be profitable its bonus needs to exceed a minimum; // threshold. There are three options for controlling the threshold which are; // expressed as percentages of the original function size:; // * funcspec-min-codesize-savings; // * funcspec-min-latency-savings; // * funcspec-min-inlining-bonus; // There's also an option for controlling the codesize growth from recursive; // specializations. That is `funcspec-max-codesize-growth`.; //; // Once we have all the potential specializations with their score we need to; // choose the best ones, which fit in the module specialization budget. That; // is controlled by the option `funcspec-max-clones`. To find the best `NSpec`; // specializations we use a max-heap. For more details refer to D139346.; //; // Ideas:; // ------; // - With a function specialization attribute for arguments, we could have; // a direct way to steer function specialization, avoiding the cost-model,; // and thus control compile-times / code-size.; //; // - Perhaps a post-inlining function specialization pass could be more; // aggressive on literal constants.; //; // References:; // -----------; // 2021 LLVM Dev Mtg “Introducing function specialisation, and can we enable; // it by default?”, https",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:3351,Safety,avoid,avoiding,3351,"propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods to; // be able to handle different types of instructions. These attempt to constant-; // fold the instruction in which case a constant is returned and propagated; // further.; //; // Function pointers are not handled by the InstCostVisitor. They are treated; // separately as they could expose inlining opportunities via indirect call; // promotion. The inlining bonus contributes to the total specialization score.; //; // For a specialization to be profitable its bonus needs to exceed a minimum; // threshold. There are three options for controlling the threshold which are; // expressed as percentages of the original function size:; // * funcspec-min-codesize-savings; // * funcspec-min-latency-savings; // * funcspec-min-inlining-bonus; // There's also an option for controlling the codesize growth from recursive; // specializations. That is `funcspec-max-codesize-growth`.; //; // Once we have all the potential specializations with their score we need to; // choose the best ones, which fit in the module specialization budget. That; // is controlled by the option `funcspec-max-clones`. To find the best `NSpec`; // specializations we use a max-heap. For more details refer to D139346.; //; // Ideas:; // ------; // - With a function specialization attribute for arguments, we could have; // a direct way to steer function specialization, avoiding the cost-model,; // and thus control compile-times / code-size.; //; // - Perhaps a post-inlining function specialization pass could be more; // aggressive on literal constants.; //; // References:; // -----------; // 2021 LLVM Dev Mtg “Introducing function specialisation, and can we enable; // it by default?”, https://www.youtube.com/watch?v=zJiCjeXgV5Q; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:849,Security,expose,exposes,849,"//===- FunctionSpecialization.h - Function Specialization -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Overview:; // ---------; // Function Specialization is a transformation which propagates the constant; // parameters of a function call from the caller to the callee. It is part of; // the Inter-Procedural Sparse Conditional Constant Propagation (IPSCCP) pass.; // The transformation runs iteratively a number of times which is controlled; // by the option `funcspec-max-iters`. Running it multiple times is needed; // for specializing recursive functions, but also exposes new opportunities; // arising from specializations which return constant values or contain calls; // which can be specialized.; //; // Function Specialization supports propagating constant parameters like; // function pointers, literal constants and addresses of global variables.; // By propagating function pointers, indirect calls become direct calls. This; // exposes inlining opportunities which we would have otherwise missed. That's; // why function specialization is run before the inliner in the optimization; // pipeline; that is by design.; //; // Cost Model:; // -----------; // The cost model facilitates a utility for estimating the specialization bonus; // from propagating a constant argument. This is the InstCostVisitor, a class; // that inherits from the InstVisitor. The bonus itself is expressed as codesize; // and latency savings. Codesize savings means the amount of code that becomes; // dead in the specialization from propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:1221,Security,expose,exposes,1221,"tifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Overview:; // ---------; // Function Specialization is a transformation which propagates the constant; // parameters of a function call from the caller to the callee. It is part of; // the Inter-Procedural Sparse Conditional Constant Propagation (IPSCCP) pass.; // The transformation runs iteratively a number of times which is controlled; // by the option `funcspec-max-iters`. Running it multiple times is needed; // for specializing recursive functions, but also exposes new opportunities; // arising from specializations which return constant values or contain calls; // which can be specialized.; //; // Function Specialization supports propagating constant parameters like; // function pointers, literal constants and addresses of global variables.; // By propagating function pointers, indirect calls become direct calls. This; // exposes inlining opportunities which we would have otherwise missed. That's; // why function specialization is run before the inliner in the optimization; // pipeline; that is by design.; //; // Cost Model:; // -----------; // The cost model facilitates a utility for estimating the specialization bonus; // from propagating a constant argument. This is the InstCostVisitor, a class; // that inherits from the InstVisitor. The bonus itself is expressed as codesize; // and latency savings. Codesize savings means the amount of code that becomes; // dead in the specialization from propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods to; // be able to handle different types of instructions. These attempt to constant-; // fold the instruction in which case a constant is returned and propagated; // further.; //; // Function pointers are not handled by the InstCostVisitor. They ar",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:2289,Security,expose,expose,2289,"; // why function specialization is run before the inliner in the optimization; // pipeline; that is by design.; //; // Cost Model:; // -----------; // The cost model facilitates a utility for estimating the specialization bonus; // from propagating a constant argument. This is the InstCostVisitor, a class; // that inherits from the InstVisitor. The bonus itself is expressed as codesize; // and latency savings. Codesize savings means the amount of code that becomes; // dead in the specialization from propagating the constant, whereas latency; // savings represents the cycles we are saving from replacing instructions with; // constant values. The InstCostVisitor overrides a set of `visit*` methods to; // be able to handle different types of instructions. These attempt to constant-; // fold the instruction in which case a constant is returned and propagated; // further.; //; // Function pointers are not handled by the InstCostVisitor. They are treated; // separately as they could expose inlining opportunities via indirect call; // promotion. The inlining bonus contributes to the total specialization score.; //; // For a specialization to be profitable its bonus needs to exceed a minimum; // threshold. There are three options for controlling the threshold which are; // expressed as percentages of the original function size:; // * funcspec-min-codesize-savings; // * funcspec-min-latency-savings; // * funcspec-min-inlining-bonus; // There's also an option for controlling the codesize growth from recursive; // specializations. That is `funcspec-max-codesize-growth`.; //; // Once we have all the potential specializations with their score we need to; // choose the best ones, which fit in the module specialization budget. That; // is controlled by the option `funcspec-max-clones`. To find the best `NSpec`; // specializations we use a max-heap. For more details refer to D139346.; //; // Ideas:; // ------; // - With a function specialization attribute for arguments, we could ha",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:3,Security,Hash,Hashing,3,"// Hashing support, used to distinguish between ordinary, empty, or tombstone; // keys.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:17,Availability,down,down,17,// It is safe to down cast since we know the arguments; // cannot be negative and Cost is of type int64_t.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:9,Safety,safe,safe,9,// It is safe to down cast since we know the arguments; // cannot be negative and Cost is of type int64_t.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:422,Safety,detect,detect,422,"// Transitively Incoming Values (TIV) is a set of Values that can ""feed"" a; // value to the initial PHI-node. It is defined like this:; //; // * the initial PHI-node belongs to TIV.; //; // * for every PHI-node in TIV, its operands belong to TIV; //; // If TIV for the initial PHI-node (P) contains more than one constant or a; // value that is not a PHI-node, then P cannot be folded to a constant.; //; // As soon as we detect these cases, we bail, without constructing the; // full TIV.; // Otherwise P can be folded to the one constant in TIV.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:84,Modifiability,variab,variables,84,/// See if there are any new constant values for the callers of \p F via; /// stack variables and promote them to global variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:121,Modifiability,variab,variables,121,/// See if there are any new constant values for the callers of \p F via; /// stack variables and promote them to global variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:20,Deployability,update,update,20,"/// @brief Find and update calls to \p F, which match a specialization; /// @param F Orginal function; /// @param Begin Start of a range of possibly matching specialisations; /// @param End End of a range (exclusive) of possibly matching specialisations",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h:554,Availability,alive,alive,554,"//===-- GlobalDCE.h - DCE unreachable internal functions ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transform is designed to eliminate unreachable internal globals from the; // program. It uses an aggressive algorithm, searching out globals that are; // known to be alive. After it finds all of the globals which are needed, it; // deletes whatever is left over. This allows it to delete recursive chunks of; // the program which are unreachable.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h:45,Performance,cache,cache,45,/// Constant -> Globals that use this global cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h:10,Modifiability,variab,variables,10,"// Global variables which are vtables, and which we have enough information; // about to safely do dead virtual function elimination.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h:89,Safety,safe,safely,89,"// Global variables which are vtables, and which we have enough information; // about to safely do dead virtual function elimination.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalDCE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h:37,Modifiability,Variab,Variables,37,"//===- GlobalOpt.h - Optimize Global Variables ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms simple global variables that never have their address; // taken. If obviously true, it marks read/write globals as constant, deletes; // variables only stored to, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h:418,Modifiability,variab,variables,418,"//===- GlobalOpt.h - Optimize Global Variables ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms simple global variables that never have their address; // taken. If obviously true, it marks read/write globals as constant, deletes; // variables only stored to, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h:541,Modifiability,variab,variables,541,"//===- GlobalOpt.h - Optimize Global Variables ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms simple global variables that never have their address; // taken. If obviously true, it marks read/write globals as constant, deletes; // variables only stored to, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h:21,Performance,Optimiz,Optimize,21,"//===- GlobalOpt.h - Optimize Global Variables ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms simple global variables that never have their address; // taken. If obviously true, it marks read/write globals as constant, deletes; // variables only stored to, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h:404,Usability,simpl,simple,404,"//===- GlobalOpt.h - Optimize Global Variables ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms simple global variables that never have their address; // taken. If obviously true, it marks read/write globals as constant, deletes; // variables only stored to, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h:4,Performance,Optimiz,Optimize,4,/// Optimize globals that never have their address taken.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h:30,Modifiability,variab,variable,30,"//===- GlobalSplit.h - global variable splitter -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass uses inrange annotations on GEP indices to split globals where; // beneficial. Clang currently attaches these annotations to references to; // virtual table globals under the Itanium ABI for the benefit of the; // whole-program virtual call optimization and control flow integrity passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h:634,Performance,optimiz,optimization,634,"//===- GlobalSplit.h - global variable splitter -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass uses inrange annotations on GEP indices to split globals where; // beneficial. Clang currently attaches these annotations to references to; // virtual table globals under the Itanium ABI for the benefit of the; // whole-program virtual call optimization and control flow integrity passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h:664,Security,integrity,integrity,664,"//===- GlobalSplit.h - global variable splitter -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass uses inrange annotations on GEP indices to split globals where; // beneficial. Clang currently attaches these annotations to references to; // virtual table globals under the Itanium ABI for the benefit of the; // whole-program virtual call optimization and control flow integrity passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h:36,Modifiability,variab,variables,36,/// Pass to perform split of global variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h:12,Performance,perform,perform,12,/// Pass to perform split of global variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/InferFunctionAttrs.h:396,Integrability,Interface,Interfaces,396,"//===-- InferFunctionAttrs.h - Infer implicit function attributes ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Interfaces for passes which infer implicit function attributes from the; /// name and signature of function declarations.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/InferFunctionAttrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/InferFunctionAttrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h:261,Performance,tune,tuned,261,"/// The inliner pass for the new pass manager.; ///; /// This pass wires together the inlining utilities and the inline cost; /// analysis into a CGSCC pass. It considers every call in every function in; /// the SCC and tries to inline if profitable. It can be tuned with a number of; /// parameters to control what cost model is used and what tradeoffs are made; /// when making the decision.; ///; /// It should be noted that the legacy inliners do considerably more than this; /// inliner pass does. They provide logic for manually merging allocas, and; /// doing considerable DCE including the DCE of dead functions. This pass makes; /// every attempt to be simpler. DCE of functions requires complex reasoning; /// about comdat groups, etc. Instead, it is expected that other more focused; /// passes be composed to achieve the same end result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h:516,Testability,log,logic,516,"/// The inliner pass for the new pass manager.; ///; /// This pass wires together the inlining utilities and the inline cost; /// analysis into a CGSCC pass. It considers every call in every function in; /// the SCC and tries to inline if profitable. It can be tuned with a number of; /// parameters to control what cost model is used and what tradeoffs are made; /// when making the decision.; ///; /// It should be noted that the legacy inliners do considerably more than this; /// inliner pass does. They provide logic for manually merging allocas, and; /// doing considerable DCE including the DCE of dead functions. This pass makes; /// every attempt to be simpler. DCE of functions requires complex reasoning; /// about comdat groups, etc. Instead, it is expected that other more focused; /// passes be composed to achieve the same end result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h:662,Usability,simpl,simpler,662,"/// The inliner pass for the new pass manager.; ///; /// This pass wires together the inlining utilities and the inline cost; /// analysis into a CGSCC pass. It considers every call in every function in; /// the SCC and tries to inline if profitable. It can be tuned with a number of; /// parameters to control what cost model is used and what tradeoffs are made; /// when making the decision.; ///; /// It should be noted that the legacy inliners do considerably more than this; /// inliner pass does. They provide logic for manually merging allocas, and; /// doing considerable DCE including the DCE of dead functions. This pass makes; /// every attempt to be simpler. DCE of functions requires complex reasoning; /// about comdat groups, etc. Instead, it is expected that other more focused; /// passes be composed to achieve the same end result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h:300,Availability,alive,alive,300,"/// Module pass, wrapping the inliner pass. This works in conjunction with the; /// InlineAdvisorAnalysis to facilitate inlining decisions taking into account; /// module-wide state, that need to keep track of inter-inliner pass runs, for; /// a given module. An InlineAdvisor is configured and kept alive for the; /// duration of the ModuleInlinerWrapperPass::run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h:17,Integrability,wrap,wrapping,17,"/// Module pass, wrapping the inliner pass. This works in conjunction with the; /// InlineAdvisorAnalysis to facilitate inlining decisions taking into account; /// module-wide state, that need to keep track of inter-inliner pass runs, for; /// a given module. An InlineAdvisor is configured and kept alive for the; /// duration of the ModuleInlinerWrapperPass::run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h:280,Modifiability,config,configured,280,"/// Module pass, wrapping the inliner pass. This works in conjunction with the; /// InlineAdvisorAnalysis to facilitate inlining decisions taking into account; /// module-wide state, that need to keep track of inter-inliner pass runs, for; /// a given module. An InlineAdvisor is configured and kept alive for the; /// duration of the ModuleInlinerWrapperPass::run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h:119,Deployability,pipeline,pipeline,119,"/// Allow adding more CGSCC passes, besides inlining. This should be called; /// before run is called, as part of pass pipeline building.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h:429,Modifiability,variab,variables,429,"//====- Internalize.h - Internalization API ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass loops over all of the functions and variables in the input module.; // If the function or variable does not need to be preserved according to the; // client supplied callback, it is marked as internal.; //; // This transformation would not be legal in a regular compilation, but it gets; // extra information from the linker about what is safe.; //; // For example: Internalizing a function with external linkage. Only if we are; // told it is only used from within this module, it is safe to do it.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h:483,Modifiability,variab,variable,483,"//====- Internalize.h - Internalization API ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass loops over all of the functions and variables in the input module.; // If the function or variable does not need to be preserved according to the; // client supplied callback, it is marked as internal.; //; // This transformation would not be legal in a regular compilation, but it gets; // extra information from the linker about what is safe.; //; // For example: Internalizing a function with external linkage. Only if we are; // told it is only used from within this module, it is safe to do it.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h:732,Safety,safe,safe,732,"//====- Internalize.h - Internalization API ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass loops over all of the functions and variables in the input module.; // If the function or variable does not need to be preserved according to the; // client supplied callback, it is marked as internal.; //; // This transformation would not be legal in a regular compilation, but it gets; // extra information from the linker about what is safe.; //; // For example: Internalizing a function with external linkage. Only if we are; // told it is only used from within this module, it is safe to do it.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h:878,Safety,safe,safe,878,"//====- Internalize.h - Internalization API ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass loops over all of the functions and variables in the input module.; // If the function or variable does not need to be preserved according to the; // client supplied callback, it is marked as internal.; //; // This transformation would not be legal in a regular compilation, but it gets; // extra information from the linker about what is safe.; //; // For example: Internalizing a function with external linkage. Only if we are; // told it is only used from within this module, it is safe to do it.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h:47,Modifiability,variab,variables,47,/// A pass that internalizes all functions and variables other than those that; /// must be preserved according to \c MustPreserveGV.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h:49,Modifiability,variab,variables,49,/// Helper function to internalize functions and variables in a Module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:397,Integrability,interface,interface,397,"//===- IROutliner.h - Extract similar IR regions into functions --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; // The interface file for the IROutliner which is used by the IROutliner Pass.; //; // The outliner uses the IRSimilarityIdentifier to identify the similar regions; // of code. It evaluates each set of IRSimilarityCandidates with an estimate of; // whether it will provide code size reduction. Each region is extracted using; // the code extractor. These extracted functions are consolidated into a single; // function and called from the extracted call site.; //; // For example:; // \code; // %1 = add i32 %a, %b; // %2 = add i32 %b, %a; // %3 = add i32 %b, %a; // %4 = add i32 %a, %b; // \endcode; // would become function; // \code; // define internal void outlined_ir_function(i32 %0, i32 %1) {; // %1 = add i32 %0, %1; // %2 = add i32 %1, %0; // ret void; // }; // \endcode; // with calls:; // \code; // call void outlined_ir_function(i32 %a, i32 %b); // call void outlined_ir_function(i32 %b, i32 %a); // \endcode; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:172,Energy Efficiency,reduce,reduce,172,"/// This class is a pass that identifies similarity in a Module, extracts; /// instances of the similarity, and then consolidating the similar regions; /// in an effort to reduce code size. It uses the IRSimilarityIdentifier pass; /// to identify the similar regions of code, and then extracts the similar; /// sections into a single function. See the above for an example as to; /// how code is extracted and consolidated into a single function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:389,Safety,safe,safely,389,"/// Check whether an OutlinableRegion is incompatible with code already; /// outlined. OutlinableRegions are incomptaible when there are overlapping; /// instructions, or code that has not been recorded has been added to the; /// instructions.; ///; /// \param [in] Region - The OutlinableRegion to check for conflicts with; /// already outlined code.; /// \returns whether the region can safely be outlined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:4,Deployability,Update,Update,4,"/// Update the output mapping based on the load instruction, and the outputs; /// of the extracted function.; ///; /// \param Region - The region extracted; /// \param Outputs - The outputs from the extracted function.; /// \param LI - The load instruction used to update the mapping.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:265,Deployability,update,update,265,"/// Update the output mapping based on the load instruction, and the outputs; /// of the extracted function.; ///; /// \param Region - The region extracted; /// \param Outputs - The outputs from the extracted function.; /// \param LI - The load instruction used to update the mapping.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:43,Performance,load,load,43,"/// Update the output mapping based on the load instruction, and the outputs; /// of the extracted function.; ///; /// \param Region - The region extracted; /// \param Outputs - The outputs from the extracted function.; /// \param LI - The load instruction used to update the mapping.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:240,Performance,load,load,240,"/// Update the output mapping based on the load instruction, and the outputs; /// of the extracted function.; ///; /// \param Region - The region extracted; /// \param Outputs - The outputs from the extracted function.; /// \param LI - The load instruction used to update the mapping.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:102,Testability,test,testing,102,"/// If false, we do not worry if the cost is greater than the benefit. This; /// is for debugging and testing, so that we can test small cases to ensure; /// that the outlining is being done correctly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:126,Testability,test,test,126,"/// If false, we do not worry if the cost is greater than the benefit. This; /// is for debugging and testing, so that we can test small cases to ensure; /// that the outlining is being done correctly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:8,Performance,optimiz,optimization,8,/// The optimization remark emitter for the pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:33,Energy Efficiency,allocate,allocate,33,/// The memory allocator used to allocate the CodeExtractors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:33,Energy Efficiency,allocate,allocate,33,/// The memory allocator used to allocate the OutlinableRegions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:33,Energy Efficiency,allocate,allocate,33,/// The memory allocator used to allocate new IRInstructionData.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:123,Modifiability,variab,variable,123,// VAArg instructions are not allowed since this could cause difficulty when; // differentiating between different sets of variable instructions in; // the deduplicated outlined regions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:73,Integrability,depend,dependent,73,// We exclude all exception handling cases since they are so context; // dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:283,Availability,down,down,283,"// TODO: Update the outliner to capture whether the outlined function; // needs these extra attributes.; // Functions marked with the swifttailcc and tailcc calling conventions; // require special handling when outlining musttail functions. The; // calling convention must be passed down to the outlined function as; // well. Further, there is special handling for musttail calls as well,; // requiring a return call directly after. For now, the outliner does not; // support this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:9,Deployability,Update,Update,9,"// TODO: Update the outliner to capture whether the outlined function; // needs these extra attributes.; // Functions marked with the swifttailcc and tailcc calling conventions; // require special handling when outlining musttail functions. The; // calling convention must be passed down to the outlined function as; // well. Further, there is special handling for musttail calls as well,; // requiring a return call directly after. For now, the outliner does not; // support this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:12,Modifiability,variab,variable,12,// The flag variable that marks whether we should allow branch instructions; // to be outlined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:12,Modifiability,variab,variable,12,// The flag variable that marks whether we should allow indirect calls; // to be outlined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:12,Modifiability,variab,variable,12,// The flag variable that marks whether we should allow intrinsics; // instructions to be outlined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:12,Modifiability,variab,variable,12,// The flag variable that marks whether we should allow musttail calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LoopExtractor.h:390,Integrability,wrap,wrapper,390,"//===- LoopExtractor.h - Extract each loop into a new function ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A pass wrapper around the ExtractLoop() scalar transformation to extract each; // top-level loop into its own new function. If the loop is the ONLY loop in a; // given function, it is not touched. This is a pass most useful for debugging; // via bugpoint.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LoopExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LoopExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:419,Testability,test,test,419,"//===- LowerTypeTests.h - type metadata lowering pass -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines parts of the type test lowering pass implementation that; // may be usefully unit tested.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:483,Testability,test,tested,483,"//===- LowerTypeTests.h - type metadata lowering pass -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines parts of the type test lowering pass implementation that; // may be usefully unit tested.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:168,Energy Efficiency,reduce,reduce,168,"/// This class implements a layout algorithm for globals referenced by bit sets; /// that tries to keep members of small bit sets together. This can; /// significantly reduce bit set sizes in many cases.; ///; /// It works by assembling fragments of layout from sets of referenced globals.; /// Each set of referenced globals causes the algorithm to create a new; /// fragment, which is assembled by appending each referenced global in the set; /// into the fragment. If a referenced global has already been referenced by an; /// fragment created earlier, we instead delete that fragment and append its; /// contents into the fragment we are assembling.; ///; /// By starting with the smallest fragments, we minimize the size of the; /// fragments that are copied into larger fragments. This is most intuitively; /// thought about when considering the case where the globals are virtual tables; /// and the bit sets represent their derived classes: in a single inheritance; /// hierarchy, the optimum layout would involve a depth-first search of the; /// class hierarchy (and in fact the computed layout ends up looking a lot like; /// a DFS), but a naive DFS would not work well in the presence of multiple; /// inheritance. This aspect of the algorithm ends up fitting smaller; /// hierarchies inside larger ones where that would be beneficial.; ///; /// For example, consider this class hierarchy:; ///; /// A B; /// \ / | \; /// C D E; ///; /// We have five bit sets: bsA (A, C), bsB (B, C, D, E), bsC (C), bsD (D) and; /// bsE (E). If we laid out our objects by DFS traversing B followed by A, our; /// layout would be {B, C, D, E, A}. This is optimal for bsB as it needs to; /// cover the only 4 objects in its hierarchy, but not for bsA as it needs to; /// cover 5 objects, i.e. the entire layout. Our algorithm proceeds as follows:; ///; /// Add bsC, fragments {{C}}; /// Add bsD, fragments {{C}, {D}}; /// Add bsE, fragments {{C}, {D}, {E}}; /// Add bsA, fragments {{A, C}, {D}, {E}}; /// Add",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:961,Modifiability,inherit,inheritance,961,"his class implements a layout algorithm for globals referenced by bit sets; /// that tries to keep members of small bit sets together. This can; /// significantly reduce bit set sizes in many cases.; ///; /// It works by assembling fragments of layout from sets of referenced globals.; /// Each set of referenced globals causes the algorithm to create a new; /// fragment, which is assembled by appending each referenced global in the set; /// into the fragment. If a referenced global has already been referenced by an; /// fragment created earlier, we instead delete that fragment and append its; /// contents into the fragment we are assembling.; ///; /// By starting with the smallest fragments, we minimize the size of the; /// fragments that are copied into larger fragments. This is most intuitively; /// thought about when considering the case where the globals are virtual tables; /// and the bit sets represent their derived classes: in a single inheritance; /// hierarchy, the optimum layout would involve a depth-first search of the; /// class hierarchy (and in fact the computed layout ends up looking a lot like; /// a DFS), but a naive DFS would not work well in the presence of multiple; /// inheritance. This aspect of the algorithm ends up fitting smaller; /// hierarchies inside larger ones where that would be beneficial.; ///; /// For example, consider this class hierarchy:; ///; /// A B; /// \ / | \; /// C D E; ///; /// We have five bit sets: bsA (A, C), bsB (B, C, D, E), bsC (C), bsD (D) and; /// bsE (E). If we laid out our objects by DFS traversing B followed by A, our; /// layout would be {B, C, D, E, A}. This is optimal for bsB as it needs to; /// cover the only 4 objects in its hierarchy, but not for bsA as it needs to; /// cover 5 objects, i.e. the entire layout. Our algorithm proceeds as follows:; ///; /// Add bsC, fragments {{C}}; /// Add bsD, fragments {{C}, {D}}; /// Add bsE, fragments {{C}, {D}, {E}}; /// Add bsA, fragments {{A, C}, {D}, {E}}; /// Add bsB,",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:1213,Modifiability,inherit,inheritance,1213,"his class implements a layout algorithm for globals referenced by bit sets; /// that tries to keep members of small bit sets together. This can; /// significantly reduce bit set sizes in many cases.; ///; /// It works by assembling fragments of layout from sets of referenced globals.; /// Each set of referenced globals causes the algorithm to create a new; /// fragment, which is assembled by appending each referenced global in the set; /// into the fragment. If a referenced global has already been referenced by an; /// fragment created earlier, we instead delete that fragment and append its; /// contents into the fragment we are assembling.; ///; /// By starting with the smallest fragments, we minimize the size of the; /// fragments that are copied into larger fragments. This is most intuitively; /// thought about when considering the case where the globals are virtual tables; /// and the bit sets represent their derived classes: in a single inheritance; /// hierarchy, the optimum layout would involve a depth-first search of the; /// class hierarchy (and in fact the computed layout ends up looking a lot like; /// a DFS), but a naive DFS would not work well in the presence of multiple; /// inheritance. This aspect of the algorithm ends up fitting smaller; /// hierarchies inside larger ones where that would be beneficial.; ///; /// For example, consider this class hierarchy:; ///; /// A B; /// \ / | \; /// C D E; ///; /// We have five bit sets: bsA (A, C), bsB (B, C, D, E), bsC (C), bsD (D) and; /// bsE (E). If we laid out our objects by DFS traversing B followed by A, our; /// layout would be {B, C, D, E, A}. This is optimal for bsB as it needs to; /// cover the only 4 objects in its hierarchy, but not for bsA as it needs to; /// cover 5 objects, i.e. the entire layout. Our algorithm proceeds as follows:; ///; /// Add bsC, fragments {{C}}; /// Add bsD, fragments {{C}, {D}}; /// Add bsE, fragments {{C}, {D}, {E}}; /// Add bsA, fragments {{A, C}, {D}, {E}}; /// Add bsB,",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:800,Usability,intuit,intuitively,800,"his class implements a layout algorithm for globals referenced by bit sets; /// that tries to keep members of small bit sets together. This can; /// significantly reduce bit set sizes in many cases.; ///; /// It works by assembling fragments of layout from sets of referenced globals.; /// Each set of referenced globals causes the algorithm to create a new; /// fragment, which is assembled by appending each referenced global in the set; /// into the fragment. If a referenced global has already been referenced by an; /// fragment created earlier, we instead delete that fragment and append its; /// contents into the fragment we are assembling.; ///; /// By starting with the smallest fragments, we minimize the size of the; /// fragments that are copied into larger fragments. This is most intuitively; /// thought about when considering the case where the globals are virtual tables; /// and the bit sets represent their derived classes: in a single inheritance; /// hierarchy, the optimum layout would involve a depth-first search of the; /// class hierarchy (and in fact the computed layout ends up looking a lot like; /// a DFS), but a naive DFS would not work well in the presence of multiple; /// inheritance. This aspect of the algorithm ends up fitting smaller; /// hierarchies inside larger ones where that would be beneficial.; ///; /// For example, consider this class hierarchy:; ///; /// A B; /// \ / | \; /// C D E; ///; /// We have five bit sets: bsA (A, C), bsB (B, C, D, E), bsC (C), bsD (D) and; /// bsE (E). If we laid out our objects by DFS traversing B followed by A, our; /// layout would be {B, C, D, E, A}. This is optimal for bsB as it needs to; /// cover the only 4 objects in its hierarchy, but not for bsA as it needs to; /// cover 5 objects, i.e. the entire layout. Our algorithm proceeds as follows:; ///; /// Add bsC, fragments {{C}}; /// Add bsD, fragments {{C}, {D}}; /// Add bsE, fragments {{C}, {D}, {E}}; /// Add bsA, fragments {{A, C}, {D}, {E}}; /// Add bsB,",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:150,Availability,mask,mask,150,"/// This class is used to build a byte array containing overlapping bit sets. By; /// loading from indexed offsets into the byte array and applying a mask, a; /// program can test bits from the bit set with a relatively short instruction; /// sequence. For example, suppose we have 15 bit sets to lay out:; ///; /// A (16 bits), B (15 bits), C (14 bits), D (13 bits), E (12 bits),; /// F (11 bits), G (10 bits), H (9 bits), I (7 bits), J (6 bits), K (5 bits),; /// L (4 bits), M (3 bits), N (2 bits), O (1 bit); ///; /// These bits can be laid out in a 16-byte array like this:; ///; /// Byte Offset; /// 0123456789ABCDEF; /// Bit; /// 7 HHHHHHHHHIIIIIII; /// 6 GGGGGGGGGGJJJJJJ; /// 5 FFFFFFFFFFFKKKKK; /// 4 EEEEEEEEEEEELLLL; /// 3 DDDDDDDDDDDDDMMM; /// 2 CCCCCCCCCCCCCCNN; /// 1 BBBBBBBBBBBBBBBO; /// 0 AAAAAAAAAAAAAAAA; ///; /// For example, to test bit X of A, we evaluate ((bits[X] & 1) != 0), or to; /// test bit X of I, we evaluate ((bits[9 + X] & 0x80) != 0). This can be done; /// in 1-2 machine instructions on x86, or 4-6 instructions on ARM.; ///; /// This is a byte array, rather than (say) a 2-byte array or a 4-byte array,; /// because for one thing it gives us better packing (the more bins there are,; /// the less evenly they will be filled), and for another, the instruction; /// sequences can be slightly shorter, both on x86 and ARM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:86,Performance,load,loading,86,"/// This class is used to build a byte array containing overlapping bit sets. By; /// loading from indexed offsets into the byte array and applying a mask, a; /// program can test bits from the bit set with a relatively short instruction; /// sequence. For example, suppose we have 15 bit sets to lay out:; ///; /// A (16 bits), B (15 bits), C (14 bits), D (13 bits), E (12 bits),; /// F (11 bits), G (10 bits), H (9 bits), I (7 bits), J (6 bits), K (5 bits),; /// L (4 bits), M (3 bits), N (2 bits), O (1 bit); ///; /// These bits can be laid out in a 16-byte array like this:; ///; /// Byte Offset; /// 0123456789ABCDEF; /// Bit; /// 7 HHHHHHHHHIIIIIII; /// 6 GGGGGGGGGGJJJJJJ; /// 5 FFFFFFFFFFFKKKKK; /// 4 EEEEEEEEEEEELLLL; /// 3 DDDDDDDDDDDDDMMM; /// 2 CCCCCCCCCCCCCCNN; /// 1 BBBBBBBBBBBBBBBO; /// 0 AAAAAAAAAAAAAAAA; ///; /// For example, to test bit X of A, we evaluate ((bits[X] & 1) != 0), or to; /// test bit X of I, we evaluate ((bits[9 + X] & 0x80) != 0). This can be done; /// in 1-2 machine instructions on x86, or 4-6 instructions on ARM.; ///; /// This is a byte array, rather than (say) a 2-byte array or a 4-byte array,; /// because for one thing it gives us better packing (the more bins there are,; /// the less evenly they will be filled), and for another, the instruction; /// sequences can be slightly shorter, both on x86 and ARM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:175,Testability,test,test,175,"/// This class is used to build a byte array containing overlapping bit sets. By; /// loading from indexed offsets into the byte array and applying a mask, a; /// program can test bits from the bit set with a relatively short instruction; /// sequence. For example, suppose we have 15 bit sets to lay out:; ///; /// A (16 bits), B (15 bits), C (14 bits), D (13 bits), E (12 bits),; /// F (11 bits), G (10 bits), H (9 bits), I (7 bits), J (6 bits), K (5 bits),; /// L (4 bits), M (3 bits), N (2 bits), O (1 bit); ///; /// These bits can be laid out in a 16-byte array like this:; ///; /// Byte Offset; /// 0123456789ABCDEF; /// Bit; /// 7 HHHHHHHHHIIIIIII; /// 6 GGGGGGGGGGJJJJJJ; /// 5 FFFFFFFFFFFKKKKK; /// 4 EEEEEEEEEEEELLLL; /// 3 DDDDDDDDDDDDDMMM; /// 2 CCCCCCCCCCCCCCNN; /// 1 BBBBBBBBBBBBBBBO; /// 0 AAAAAAAAAAAAAAAA; ///; /// For example, to test bit X of A, we evaluate ((bits[X] & 1) != 0), or to; /// test bit X of I, we evaluate ((bits[9 + X] & 0x80) != 0). This can be done; /// in 1-2 machine instructions on x86, or 4-6 instructions on ARM.; ///; /// This is a byte array, rather than (say) a 2-byte array or a 4-byte array,; /// because for one thing it gives us better packing (the more bins there are,; /// the less evenly they will be filled), and for another, the instruction; /// sequences can be slightly shorter, both on x86 and ARM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:849,Testability,test,test,849,"/// This class is used to build a byte array containing overlapping bit sets. By; /// loading from indexed offsets into the byte array and applying a mask, a; /// program can test bits from the bit set with a relatively short instruction; /// sequence. For example, suppose we have 15 bit sets to lay out:; ///; /// A (16 bits), B (15 bits), C (14 bits), D (13 bits), E (12 bits),; /// F (11 bits), G (10 bits), H (9 bits), I (7 bits), J (6 bits), K (5 bits),; /// L (4 bits), M (3 bits), N (2 bits), O (1 bit); ///; /// These bits can be laid out in a 16-byte array like this:; ///; /// Byte Offset; /// 0123456789ABCDEF; /// Bit; /// 7 HHHHHHHHHIIIIIII; /// 6 GGGGGGGGGGJJJJJJ; /// 5 FFFFFFFFFFFKKKKK; /// 4 EEEEEEEEEEEELLLL; /// 3 DDDDDDDDDDDDDMMM; /// 2 CCCCCCCCCCCCCCNN; /// 1 BBBBBBBBBBBBBBBO; /// 0 AAAAAAAAAAAAAAAA; ///; /// For example, to test bit X of A, we evaluate ((bits[X] & 1) != 0), or to; /// test bit X of I, we evaluate ((bits[9 + X] & 0x80) != 0). This can be done; /// in 1-2 machine instructions on x86, or 4-6 instructions on ARM.; ///; /// This is a byte array, rather than (say) a 2-byte array or a 4-byte array,; /// because for one thing it gives us better packing (the more bins there are,; /// the less evenly they will be filled), and for another, the instruction; /// sequences can be slightly shorter, both on x86 and ARM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:911,Testability,test,test,911,"/// This class is used to build a byte array containing overlapping bit sets. By; /// loading from indexed offsets into the byte array and applying a mask, a; /// program can test bits from the bit set with a relatively short instruction; /// sequence. For example, suppose we have 15 bit sets to lay out:; ///; /// A (16 bits), B (15 bits), C (14 bits), D (13 bits), E (12 bits),; /// F (11 bits), G (10 bits), H (9 bits), I (7 bits), J (6 bits), K (5 bits),; /// L (4 bits), M (3 bits), N (2 bits), O (1 bit); ///; /// These bits can be laid out in a 16-byte array like this:; ///; /// Byte Offset; /// 0123456789ABCDEF; /// Bit; /// 7 HHHHHHHHHIIIIIII; /// 6 GGGGGGGGGGJJJJJJ; /// 5 FFFFFFFFFFFKKKKK; /// 4 EEEEEEEEEEEELLLL; /// 3 DDDDDDDDDDDDDMMM; /// 2 CCCCCCCCCCCCCCNN; /// 1 BBBBBBBBBBBBBBBO; /// 0 AAAAAAAAAAAAAAAA; ///; /// For example, to test bit X of A, we evaluate ((bits[X] & 1) != 0), or to; /// test bit X of I, we evaluate ((bits[9 + X] & 0x80) != 0). This can be done; /// in 1-2 machine instructions on x86, or 4-6 instructions on ARM.; ///; /// This is a byte array, rather than (say) a 2-byte array or a 4-byte array,; /// because for one thing it gives us better packing (the more bins there are,; /// the less evenly they will be filled), and for another, the instruction; /// sequences can be slightly shorter, both on x86 and ARM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:24,Energy Efficiency,allocate,allocated,24,/// The number of bytes allocated so far for each of the bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate BitSize bits in the byte array where Bits contains the bits to; /// set. AllocByteOffset is set to the offset within the byte array and; /// AllocMask is set to the bitmask for those bits. This uses the LPT (Longest; /// Processing Time) multiprocessor scheduling algorithm to lay out the bits; /// efficiently; the pass allocates bit sets in decreasing size order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:266,Energy Efficiency,schedul,scheduling,266,/// Allocate BitSize bits in the byte array where Bits contains the bits to; /// set. AllocByteOffset is set to the offset within the byte array and; /// AllocMask is set to the bitmask for those bits. This uses the LPT (Longest; /// Processing Time) multiprocessor scheduling algorithm to lay out the bits; /// efficiently; the pass allocates bit sets in decreasing size order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:312,Energy Efficiency,efficient,efficiently,312,/// Allocate BitSize bits in the byte array where Bits contains the bits to; /// set. AllocByteOffset is set to the offset within the byte array and; /// AllocMask is set to the bitmask for those bits. This uses the LPT (Longest; /// Processing Time) multiprocessor scheduling algorithm to lay out the bits; /// efficiently; the pass allocates bit sets in decreasing size order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:334,Energy Efficiency,allocate,allocates,334,/// Allocate BitSize bits in the byte array where Bits contains the bits to; /// set. AllocByteOffset is set to the offset within the byte array and; /// AllocMask is set to the bitmask for those bits. This uses the LPT (Longest; /// Processing Time) multiprocessor scheduling algorithm to lay out the bits; /// efficiently; the pass allocates bit sets in decreasing size order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h:477,Performance,optimiz,optimization,477,"//==- MemProfContextDisambiguation.h - Context Disambiguation ----*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements support for context disambiguation of allocation calls for profile; // guided heap optimization using memprof metadata. See implementation file for; // details.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h:465,Usability,guid,guided,465,"//==- MemProfContextDisambiguation.h - Context Disambiguation ----*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements support for context disambiguation of allocation calls for profile; // guided heap optimization using memprof metadata. See implementation file for; // details.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h:61,Testability,test,testing,61,// Owns the import summary specified by internal options for testing the; // ThinLTO backend via opt (to simulate distributed ThinLTO).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MergeFunctions.h:418,Modifiability,variab,variables,418,"//===- MergeFunctions.h - Merge Identical Functions -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms simple global variables that never have their address; // taken. If obviously true, it marks read/write globals as constant, deletes; // variables only stored to, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MergeFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MergeFunctions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MergeFunctions.h:541,Modifiability,variab,variables,541,"//===- MergeFunctions.h - Merge Identical Functions -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms simple global variables that never have their address; // taken. If obviously true, it marks read/write globals as constant, deletes; // variables only stored to, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MergeFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MergeFunctions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MergeFunctions.h:404,Usability,simpl,simple,404,"//===- MergeFunctions.h - Merge Identical Functions -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms simple global variables that never have their address; // taken. If obviously true, it marks read/write globals as constant, deletes; // variables only stored to, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MergeFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MergeFunctions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ModuleInliner.h:447,Performance,tune,tuned,447,"/// The module inliner pass for the new pass manager.; ///; /// This pass wires together the inlining utilities and the inline cost; /// analysis into a module pass. Different from SCC inliner, it considers every; /// call in every function in the whole module and tries to inline if; /// profitable. With this module level inliner, it is possible to evaluate more; /// heuristics in the module level such like PriorityInlineOrder. It can be; /// tuned with a number of parameters to control what cost model is used and; /// what tradeoffs are made when making the decision.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ModuleInliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ModuleInliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/OpenMPOpt.h:46,Performance,optimiz,optimizations,46,"//===- IPO/OpenMPOpt.h - Collection of OpenMP optimizations -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/OpenMPOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/OpenMPOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/OpenMPOpt.h:29,Performance,optimiz,optimizations,29,// namespace omp; /// OpenMP optimizations pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/OpenMPOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/OpenMPOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/PartialInlining.h:393,Performance,perform,performs,393,"//===- PartialInlining.h - Inline parts of functions ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs partial inlining, typically by inlining an if statement; // that surrounds the body of the function.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/PartialInlining.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/PartialInlining.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleContextTracker.h:418,Integrability,interface,interface,418,"//===- Transforms/IPO/SampleContextTracker.h --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for context-sensitive profile tracker used; /// by CSSPGO.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleContextTracker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleContextTracker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleContextTracker.h:85,Integrability,interface,interfaces,85,"// Profile tracker that manages profiles and its associated context. It; // provides interfaces used by sample profile loader to query context profile or; // base profile for given function or location; it also manages context tree; // manipulation that is needed to accommodate inline decisions so we have; // accurate post-inline profile for functions. Internally context profiles; // are organized in a trie, with each node representing profile for specific; // calling context and the context is identified by path from root to the node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleContextTracker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleContextTracker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleContextTracker.h:119,Performance,load,loader,119,"// Profile tracker that manages profiles and its associated context. It; // provides interfaces used by sample profile loader to query context profile or; // base profile for given function or location; it also manages context tree; // manipulation that is needed to accommodate inline decisions so we have; // accurate post-inline profile for functions. Internally context profiles; // are organized in a trie, with each node representing profile for specific; // calling context and the context is identified by path from root to the node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleContextTracker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleContextTracker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleContextTracker.h:21,Usability,guid,guid,21,// Map from function guid to real function names. Only used in md5 mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleContextTracker.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleContextTracker.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfile.h:418,Integrability,interface,interface,418,"//===- SampleProfile.h - SamplePGO pass ---------- --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for the sampled PGO loader pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfile.h:448,Performance,load,loader,448,"//===- SampleProfile.h - SamplePGO pass ---------- --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for the sampled PGO loader pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfile.h:47,Performance,load,loader,47,// namespace vfs; /// The sample profiler data loader pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h:406,Integrability,interface,interface,406,"//===- Transforms/IPO/SampleProfileProbe.h ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for the pseudo probe implementation for; /// AutoFDO.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h:48,Security,hash,hash,48,// Map from tuples of Probe id and inline stack hash code to distribution; // factors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h:67,Safety,detect,detect,67,"// A pseudo probe verifier that can be run after each IR passes to detect the; // violation of updating probe factors. In principle, the sum of distribution; // factor for a probe should be identical before and after a pass. For a; // function pass, the factor sum for a probe would be typically 100%.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h:10,Security,hash,hash,10,/// A CFG hash code used to identify a function code changes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h:36,Deployability,update,updater,36,"// Pseudo probe distribution factor updater.; // Sample profile annotation can happen in both LTO prelink and postlink. The; // postlink-time re-annotation can degrade profile quality because of prelink; // code duplication transformation, such as loop unrolling, jump threading,; // indirect call promotion etc. As such, samples corresponding to a source; // location may be aggregated multiple times in postlink. With a concept of; // distribution factor for pseudo probes, samples can be distributed among; // duplicated probes reasonable based on the assumption that optimizations; // duplicating code well-maintain the branch frequency information (BFI). This; // pass updates distribution factors for each pseudo probe at the end of the; // prelink pipeline, to reflect an estimated portion of the real execution; // count.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h:674,Deployability,update,updates,674,"// Pseudo probe distribution factor updater.; // Sample profile annotation can happen in both LTO prelink and postlink. The; // postlink-time re-annotation can degrade profile quality because of prelink; // code duplication transformation, such as loop unrolling, jump threading,; // indirect call promotion etc. As such, samples corresponding to a source; // location may be aggregated multiple times in postlink. With a concept of; // distribution factor for pseudo probes, samples can be distributed among; // duplicated probes reasonable based on the assumption that optimizations; // duplicating code well-maintain the branch frequency information (BFI). This; // pass updates distribution factors for each pseudo probe at the end of the; // prelink pipeline, to reflect an estimated portion of the real execution; // count.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h:755,Deployability,pipeline,pipeline,755,"// Pseudo probe distribution factor updater.; // Sample profile annotation can happen in both LTO prelink and postlink. The; // postlink-time re-annotation can degrade profile quality because of prelink; // code duplication transformation, such as loop unrolling, jump threading,; // indirect call promotion etc. As such, samples corresponding to a source; // location may be aggregated multiple times in postlink. With a concept of; // distribution factor for pseudo probes, samples can be distributed among; // duplicated probes reasonable based on the assumption that optimizations; // duplicating code well-maintain the branch frequency information (BFI). This; // pass updates distribution factors for each pseudo probe at the end of the; // prelink pipeline, to reflect an estimated portion of the real execution; // count.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h:571,Performance,optimiz,optimizations,571,"// Pseudo probe distribution factor updater.; // Sample profile annotation can happen in both LTO prelink and postlink. The; // postlink-time re-annotation can degrade profile quality because of prelink; // code duplication transformation, such as loop unrolling, jump threading,; // indirect call promotion etc. As such, samples corresponding to a source; // location may be aggregated multiple times in postlink. With a concept of; // distribution factor for pseudo probes, samples can be distributed among; // duplicated probes reasonable based on the assumption that optimizations; // duplicating code well-maintain the branch frequency information (BFI). This; // pass updates distribution factors for each pseudo probe at the end of the; // prelink pipeline, to reflect an estimated portion of the real execution; // count.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SampleProfileProbe.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SCCP.h:54,Performance,perform,performed,54,"/// A set of parameters to control various transforms performed by IPSCCP pass.; /// Each of the boolean parameters can be set to:; /// true - enabling the transformation.; /// false - disabling the transformation.; /// Intended use is to create a default object, modify parameters with; /// additional setters and then pass it to IPSCCP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SCCP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SCCP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SCCP.h:12,Performance,perform,perform,12,/// Pass to perform interprocedural constant propagation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SCCP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/SCCP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/StripDeadPrototypes.h:581,Availability,avail,available,581,"//===-- StripDeadPrototypes.h - Remove unused function declarations -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass loops over all of the functions in the input module, looking for; // dead declarations and removes them. Dead declarations are declarations of; // functions for which no implementation is available (i.e., declarations for; // unused library functions).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/StripDeadPrototypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/StripDeadPrototypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:495,Testability,test,tested,495,"//===- WholeProgramDevirt.h - Whole-program devirt pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines parts of the whole-program devirtualization pass; // implementation that may be usefully unit tested.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:3,Performance,Cache,Cache,3,// Cache of the vtable's size in bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:7,Testability,test,testing,7,// For testing only.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:82,Security,access,accessed,82,// A pointer to the type identifier member through which the pointer to Fn is; // accessed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:137,Security,access,access-to-top,137,"// The minimum byte offset before the address point. This covers the bytes in; // the vtable object before the address point (e.g. RTTI, access-to-top,; // vtables for other base classes) and is equal to the offset from the start; // of the vtable object to the address point.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:23,Energy Efficiency,allocate,allocated,23,// The number of bytes allocated (for the vtable plus the byte array) before; // the address point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:23,Energy Efficiency,allocate,allocated,23,// The number of bytes allocated (for the vtable plus the byte array) after; // the address point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:4,Performance,Perform,Perform,4,"/// Perform index-based whole program devirtualization on the \p Summary; /// index. Any devirtualized targets used by a type test in another module; /// are added to the \p ExportedGUIDs set. For any local devirtualized targets; /// only used within the defining module, the information necessary for; /// locating the corresponding WPD resolution is recorded for the ValueInfo; /// in case it is exported by cross module importing (in which case the; /// devirtualized target name will need adjustment).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:126,Testability,test,test,126,"/// Perform index-based whole program devirtualization on the \p Summary; /// index. Any devirtualized targets used by a type test in another module; /// are added to the \p ExportedGUIDs set. For any local devirtualized targets; /// only used within the defining module, the information necessary for; /// locating the corresponding WPD resolution is recorded for the ValueInfo; /// in case it is exported by cross module importing (in which case the; /// devirtualized target name will need adjustment).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h:41,Deployability,update,update,41,/// Call after cross-module importing to update the recorded single impl; /// devirt target names for any locals that were exported.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/WholeProgramDevirt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ADCE.h:406,Integrability,interface,interface,406,"//===- ADCE.h - Aggressive dead code elimination ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the Aggressive Dead Code Elimination; // pass. This pass optimistically assumes that all instructions are dead until; // proven otherwise, allowing it to eliminate dead computations that other DCE; // passes do not catch, particularly involving loop computations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ADCE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ADCE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/AlignmentFromAssumptions.h:472,Performance,load,load,472,"//===---- AlignmentFromAssumptions.h ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a ScalarEvolution-based transformation to set; // the alignments of load, stores and memory intrinsics based on the truth; // expressions of assume intrinsics. The primary motivation is to handle; // complex alignment assumptions that apply to vector loads and stores that; // appear after vectorization and unrolling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/AlignmentFromAssumptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/AlignmentFromAssumptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/AlignmentFromAssumptions.h:655,Performance,load,loads,655,"//===---- AlignmentFromAssumptions.h ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a ScalarEvolution-based transformation to set; // the alignments of load, stores and memory intrinsics based on the truth; // expressions of assume intrinsics. The primary motivation is to handle; // complex alignment assumptions that apply to vector loads and stores that; // appear after vectorization and unrolling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/AlignmentFromAssumptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/AlignmentFromAssumptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h:1189,Energy Efficiency,reduce,reduce,1189,"//==- ConstantHoisting.h - Prepare code for expensive constants --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies expensive constants to hoist and coalesces them to; // better prepare it for SelectionDAG-based code generation. This works around; // the limitations of the basic-block-at-a-time approach.; //; // First it scans all instructions for integer constants and calculates its; // cost. If the constant can be folded into the instruction (the cost is; // TCC_Free) or the cost is just a simple operation (TCC_BASIC), then we don't; // consider it expensive and leave it alone. This is the default behavior and; // the default implementation of getIntImmCostInst will always return TCC_Free.; //; // If the cost is more than TCC_BASIC, then the integer constant can't be folded; // into the instruction and it might be beneficial to hoist the constant.; // Similar constants are coalesced to reduce register pressure and; // materialization code.; //; // When a constant is hoisted, it is also hidden behind a bitcast to force it to; // be live-out of the basic block. Otherwise the constant would be just; // duplicated and each basic block would have its own copy in the SelectionDAG.; // The SelectionDAG recognizes such constants as opaque and doesn't perform; // certain transformations on them, which would create a new expensive constant.; //; // This optimization is only applied to integer constants in instructions and; // simple (this means not nested) constant cast expressions. For example:; // %0 = load i64* inttoptr (i64 big_constant to i64*); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h:1553,Performance,perform,perform,1553,"//==- ConstantHoisting.h - Prepare code for expensive constants --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies expensive constants to hoist and coalesces them to; // better prepare it for SelectionDAG-based code generation. This works around; // the limitations of the basic-block-at-a-time approach.; //; // First it scans all instructions for integer constants and calculates its; // cost. If the constant can be folded into the instruction (the cost is; // TCC_Free) or the cost is just a simple operation (TCC_BASIC), then we don't; // consider it expensive and leave it alone. This is the default behavior and; // the default implementation of getIntImmCostInst will always return TCC_Free.; //; // If the cost is more than TCC_BASIC, then the integer constant can't be folded; // into the instruction and it might be beneficial to hoist the constant.; // Similar constants are coalesced to reduce register pressure and; // materialization code.; //; // When a constant is hoisted, it is also hidden behind a bitcast to force it to; // be live-out of the basic block. Otherwise the constant would be just; // duplicated and each basic block would have its own copy in the SelectionDAG.; // The SelectionDAG recognizes such constants as opaque and doesn't perform; // certain transformations on them, which would create a new expensive constant.; //; // This optimization is only applied to integer constants in instructions and; // simple (this means not nested) constant cast expressions. For example:; // %0 = load i64* inttoptr (i64 big_constant to i64*); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h:1656,Performance,optimiz,optimization,1656,"//==- ConstantHoisting.h - Prepare code for expensive constants --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies expensive constants to hoist and coalesces them to; // better prepare it for SelectionDAG-based code generation. This works around; // the limitations of the basic-block-at-a-time approach.; //; // First it scans all instructions for integer constants and calculates its; // cost. If the constant can be folded into the instruction (the cost is; // TCC_Free) or the cost is just a simple operation (TCC_BASIC), then we don't; // consider it expensive and leave it alone. This is the default behavior and; // the default implementation of getIntImmCostInst will always return TCC_Free.; //; // If the cost is more than TCC_BASIC, then the integer constant can't be folded; // into the instruction and it might be beneficial to hoist the constant.; // Similar constants are coalesced to reduce register pressure and; // materialization code.; //; // When a constant is hoisted, it is also hidden behind a bitcast to force it to; // be live-out of the basic block. Otherwise the constant would be just; // duplicated and each basic block would have its own copy in the SelectionDAG.; // The SelectionDAG recognizes such constants as opaque and doesn't perform; // certain transformations on them, which would create a new expensive constant.; //; // This optimization is only applied to integer constants in instructions and; // simple (this means not nested) constant cast expressions. For example:; // %0 = load i64* inttoptr (i64 big_constant to i64*); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h:1810,Performance,load,load,1810,"//==- ConstantHoisting.h - Prepare code for expensive constants --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies expensive constants to hoist and coalesces them to; // better prepare it for SelectionDAG-based code generation. This works around; // the limitations of the basic-block-at-a-time approach.; //; // First it scans all instructions for integer constants and calculates its; // cost. If the constant can be folded into the instruction (the cost is; // TCC_Free) or the cost is just a simple operation (TCC_BASIC), then we don't; // consider it expensive and leave it alone. This is the default behavior and; // the default implementation of getIntImmCostInst will always return TCC_Free.; //; // If the cost is more than TCC_BASIC, then the integer constant can't be folded; // into the instruction and it might be beneficial to hoist the constant.; // Similar constants are coalesced to reduce register pressure and; // materialization code.; //; // When a constant is hoisted, it is also hidden behind a bitcast to force it to; // be live-out of the basic block. Otherwise the constant would be just; // duplicated and each basic block would have its own copy in the SelectionDAG.; // The SelectionDAG recognizes such constants as opaque and doesn't perform; // certain transformations on them, which would create a new expensive constant.; //; // This optimization is only applied to integer constants in instructions and; // simple (this means not nested) constant cast expressions. For example:; // %0 = load i64* inttoptr (i64 big_constant to i64*); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h:785,Usability,simpl,simple,785,"//==- ConstantHoisting.h - Prepare code for expensive constants --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies expensive constants to hoist and coalesces them to; // better prepare it for SelectionDAG-based code generation. This works around; // the limitations of the basic-block-at-a-time approach.; //; // First it scans all instructions for integer constants and calculates its; // cost. If the constant can be folded into the instruction (the cost is; // TCC_Free) or the cost is just a simple operation (TCC_BASIC), then we don't; // consider it expensive and leave it alone. This is the default behavior and; // the default implementation of getIntImmCostInst will always return TCC_Free.; //; // If the cost is more than TCC_BASIC, then the integer constant can't be folded; // into the instruction and it might be beneficial to hoist the constant.; // Similar constants are coalesced to reduce register pressure and; // materialization code.; //; // When a constant is hoisted, it is also hidden behind a bitcast to force it to; // be live-out of the basic block. Otherwise the constant would be just; // duplicated and each basic block would have its own copy in the SelectionDAG.; // The SelectionDAG recognizes such constants as opaque and doesn't perform; // certain transformations on them, which would create a new expensive constant.; //; // This optimization is only applied to integer constants in instructions and; // simple (this means not nested) constant cast expressions. For example:; // %0 = load i64* inttoptr (i64 big_constant to i64*); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h:1730,Usability,simpl,simple,1730,"//==- ConstantHoisting.h - Prepare code for expensive constants --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies expensive constants to hoist and coalesces them to; // better prepare it for SelectionDAG-based code generation. This works around; // the limitations of the basic-block-at-a-time approach.; //; // First it scans all instructions for integer constants and calculates its; // cost. If the constant can be folded into the instruction (the cost is; // TCC_Free) or the cost is just a simple operation (TCC_BASIC), then we don't; // consider it expensive and leave it alone. This is the default behavior and; // the default implementation of getIntImmCostInst will always return TCC_Free.; //; // If the cost is more than TCC_BASIC, then the integer constant can't be folded; // into the instruction and it might be beneficial to hoist the constant.; // Similar constants are coalesced to reduce register pressure and; // materialization code.; //; // When a constant is hoisted, it is also hidden behind a bitcast to force it to; // be live-out of the basic block. Otherwise the constant would be just; // duplicated and each basic block would have its own copy in the SelectionDAG.; // The SelectionDAG recognizes such constants as opaque and doesn't perform; // certain transformations on them, which would create a new expensive constant.; //; // This optimization is only applied to integer constants in instructions and; // simple (this means not nested) constant cast expressions. For example:; // %0 = load i64* inttoptr (i64 big_constant to i64*); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h:37,Deployability,update,update,37,/// Add the user to the use list and update the cost.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DCE.h:406,Integrability,interface,interface,406,"//===- DCE.h - Dead code elimination ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the Dead Code Elimination pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DCE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DCE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h:479,Availability,redundant,redundant,479,"//===- DeadStoreElimination.h - Fast Dead Store Elimination -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a trivial dead store elimination that only considers; // basic-block local redundant stores.; //; // FIXME: This should eventually be extended to be a post-dominator tree; // traversal. Doing so would be pretty trivial.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h:538,Modifiability,extend,extended,538,"//===- DeadStoreElimination.h - Fast Dead Store Elimination -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a trivial dead store elimination that only considers; // basic-block local redundant stores.; //; // FIXME: This should eventually be extended to be a post-dominator tree; // traversal. Doing so would be pretty trivial.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h:479,Safety,redund,redundant,479,"//===- DeadStoreElimination.h - Fast Dead Store Elimination -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a trivial dead store elimination that only considers; // basic-block local redundant stores.; //; // FIXME: This should eventually be extended to be a post-dominator tree; // traversal. Doing so would be pretty trivial.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h:86,Availability,redundant,redundant,86,/// This class implements a trivial dead store elimination. We consider; /// only the redundant stores that are local to a single Basic Block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h:86,Safety,redund,redundant,86,/// This class implements a trivial dead store elimination. We consider; /// only the redundant stores that are local to a single Basic Block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DeadStoreElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DFAJumpThreading.h:406,Integrability,interface,interface,406,"//===- DFAJumpThreading.h - Threads a switch statement inside a loop ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the DFAJumpThreading pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DFAJumpThreading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/DFAJumpThreading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h:418,Integrability,interface,interface,418,"//===- EarlyCSE.h - Simple and fast CSE pass --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for a simple, fast CSE pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h:20,Usability,Simpl,Simple,20,"//===- EarlyCSE.h - Simple and fast CSE pass --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for a simple, fast CSE pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h:434,Usability,simpl,simple,434,"//===- EarlyCSE.h - Simple and fast CSE pass --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for a simple, fast CSE pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h:149,Availability,redundant,redundant,149,"/// A simple and fast domtree-based CSE pass.; ///; /// This pass does a simple depth-first walk over the dominator tree,; /// eliminating trivially redundant instructions and using instsimplify to; /// canonicalize things as it goes. It is intended to be fast and catch obvious; /// cases so that instcombine and other passes are more effective. It is; /// expected that a later pass of GVN will catch the interesting/hard cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h:149,Safety,redund,redundant,149,"/// A simple and fast domtree-based CSE pass.; ///; /// This pass does a simple depth-first walk over the dominator tree,; /// eliminating trivially redundant instructions and using instsimplify to; /// canonicalize things as it goes. It is intended to be fast and catch obvious; /// cases so that instcombine and other passes are more effective. It is; /// expected that a later pass of GVN will catch the interesting/hard cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h:6,Usability,simpl,simple,6,"/// A simple and fast domtree-based CSE pass.; ///; /// This pass does a simple depth-first walk over the dominator tree,; /// eliminating trivially redundant instructions and using instsimplify to; /// canonicalize things as it goes. It is intended to be fast and catch obvious; /// cases so that instcombine and other passes are more effective. It is; /// expected that a later pass of GVN will catch the interesting/hard cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h:73,Usability,simpl,simple,73,"/// A simple and fast domtree-based CSE pass.; ///; /// This pass does a simple depth-first walk over the dominator tree,; /// eliminating trivially redundant instructions and using instsimplify to; /// canonicalize things as it goes. It is intended to be fast and catch obvious; /// cases so that instcombine and other passes are more effective. It is; /// expected that a later pass of GVN will catch the interesting/hard cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GuardWidening.h:404,Performance,optimiz,optimization,404,"//===- GuardWidening.h - ----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Guard widening is an optimization over the @llvm.experimental.guard intrinsic; // that (optimistically) combines multiple guards into one to have fewer checks; // at runtime.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GuardWidening.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GuardWidening.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:25,Availability,redundant,redundant,25,"//===- GVN.h - Eliminate redundant values and loads -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for LLVM's Global Value Numbering pass; /// which eliminates fully redundant instructions. It also does somewhat Ad-Hoc; /// PRE and dead load elimination.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:491,Availability,redundant,redundant,491,"//===- GVN.h - Eliminate redundant values and loads -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for LLVM's Global Value Numbering pass; /// which eliminates fully redundant instructions. It also does somewhat Ad-Hoc; /// PRE and dead load elimination.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:414,Integrability,interface,interface,414,"//===- GVN.h - Eliminate redundant values and loads -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for LLVM's Global Value Numbering pass; /// which eliminates fully redundant instructions. It also does somewhat Ad-Hoc; /// PRE and dead load elimination.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:46,Performance,load,loads,46,"//===- GVN.h - Eliminate redundant values and loads -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for LLVM's Global Value Numbering pass; /// which eliminates fully redundant instructions. It also does somewhat Ad-Hoc; /// PRE and dead load elimination.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:562,Performance,load,load,562,"//===- GVN.h - Eliminate redundant values and loads -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for LLVM's Global Value Numbering pass; /// which eliminates fully redundant instructions. It also does somewhat Ad-Hoc; /// PRE and dead load elimination.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:25,Safety,redund,redundant,25,"//===- GVN.h - Eliminate redundant values and loads -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for LLVM's Global Value Numbering pass; /// which eliminates fully redundant instructions. It also does somewhat Ad-Hoc; /// PRE and dead load elimination.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:491,Safety,redund,redundant,491,"//===- GVN.h - Eliminate redundant values and loads -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for LLVM's Global Value Numbering pass; /// which eliminates fully redundant instructions. It also does somewhat Ad-Hoc; /// PRE and dead load elimination.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:76,Performance,perform,performed,76,"// end namespace gvn; /// A set of parameters to control various transforms performed by GVN pass.; // Each of the optional boolean parameters can be set to:; /// true - enabling the transformation.; /// false - disabling the transformation.; /// None - relying on a global default.; /// Intended use is to create a default object, modify parameters with; /// additional setters and then pass it to GVN.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:31,Performance,load,loads,31,/// Enables or disables PRE of loads in GVN.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:31,Performance,load,loads,31,/// Enables or disables PRE of loads in GVN.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:89,Energy Efficiency,efficient,efficient,89,/// This class holds the mapping between values and value numbers. It is used; /// as an efficient mechanism to determine the expression-wise equivalence of; /// two values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:3,Performance,Cache,Cache,3,// Cache for phi-translate in scalarpre.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:185,Security,access,accessing,185,// This is set 'true' initially and also when new blocks have been added to; // the function being analyzed. This boolean is used to control the updating; // of BlockRPONumber prior to accessing the contents of BlockRPONumber.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:23,Availability,redundant,redundant,23,// Helper functions of redundant load elimination,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:33,Performance,load,load,33,// Helper functions of redundant load elimination,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:23,Safety,redund,redundant,23,// Helper functions of redundant load elimination,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:75,Availability,avail,available,75,/// Given a local dependency (Def or Clobber) determine if a value is; /// available for the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:18,Integrability,depend,dependency,18,/// Given a local dependency (Def or Clobber) determine if a value is; /// available for the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:93,Performance,load,load,93,/// Given a local dependency (Def or Clobber) determine if a value is; /// available for the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:73,Availability,avail,available,73,"/// Given a list of non-local dependencies, determine if a value is; /// available for the load in each specified block. If it is, add it to; /// ValuesPerBlock. If not, add it to UnavailableBlocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:30,Integrability,depend,dependencies,30,"/// Given a list of non-local dependencies, determine if a value is; /// available for the load in each specified block. If it is, add it to; /// ValuesPerBlock. If not, add it to UnavailableBlocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:91,Performance,load,load,91,"/// Given a list of non-local dependencies, determine if a value is; /// available for the load in each specified block. If it is, add it to; /// ValuesPerBlock. If not, add it to UnavailableBlocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:39,Performance,Load,LoadBB,39,"/// Given a critical edge from Pred to LoadBB, find a load instruction; /// which is identical to Load from another successor of Pred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:54,Performance,load,load,54,"/// Given a critical edge from Pred to LoadBB, find a load instruction; /// which is identical to Load from another successor of Pred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:98,Performance,Load,Load,98,"/// Given a critical edge from Pred to LoadBB, find a load instruction; /// which is identical to Load from another successor of Pred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:21,Performance,load,load,21,/// Try to replace a load which executes on each loop iteraiton with Phi; /// translation of load in preheader and load(s) in conditionally executed; /// paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:93,Performance,load,load,93,/// Try to replace a load which executes on each loop iteraiton with Phi; /// translation of load in preheader and load(s) in conditionally executed; /// paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:115,Performance,load,load,115,/// Try to replace a load which executes on each loop iteraiton with Phi; /// translation of load in preheader and load(s) in conditionally executed; /// paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:25,Availability,redundant,redundant,25,"/// Eliminates partially redundant \p Load, replacing it with \p; /// AvailableLoads (connected by Phis if needed).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:70,Availability,Avail,AvailableLoads,70,"/// Eliminates partially redundant \p Load, replacing it with \p; /// AvailableLoads (connected by Phis if needed).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:38,Performance,Load,Load,38,"/// Eliminates partially redundant \p Load, replacing it with \p; /// AvailableLoads (connected by Phis if needed).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:25,Safety,redund,redundant,25,"/// Eliminates partially redundant \p Load, replacing it with \p; /// AvailableLoads (connected by Phis if needed).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:16,Integrability,rout,routines,16,// Other helper routines,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:47,Modifiability,parameteriz,parameterizing,47,/// Create a legacy GVN pass. This also allows parameterizing whether or not; /// MemDep is enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:6,Usability,simpl,simple,6,/// A simple and fast domtree-based GVN pass to hoist common expressions; /// from sibling branches.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h:48,Performance,load,load,48,// Compare the expression type for anything but load and store.; // For load and store we set the opcode to zero to make them equal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h:72,Performance,load,load,72,// Compare the expression type for anything but load and store.; // For load and store we set the opcode to zero to make them equal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h:46,Security,hash,hash,46,"// It's theoretically possible for a thing to hash to zero. In that case,; // we will just compute the hash a few extra times, which is no worse that; // we did before, which was to compute it always.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h:103,Security,hash,hash,103,"// It's theoretically possible for a thing to hash to zero. In that case,; // we will just compute the hash a few extra times, which is no worse that; // we did before, which was to compute it always.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h:56,Security,hash,hash,56,// We deliberately leave the expression type out of the hash value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVNExpression.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InductiveRangeCheckElimination.h:406,Integrability,interface,interface,406,"//===- InductiveRangeCheckElimination.h - IRCE ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the Inductive Range Check Elimination; // loop pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InductiveRangeCheckElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InductiveRangeCheckElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h:406,Integrability,interface,interface,406,"//===- IndVarSimplify.h - Induction Variable Simplification -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the Induction Variable; // Simplification pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h:36,Modifiability,Variab,Variable,36,"//===- IndVarSimplify.h - Induction Variable Simplification -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the Induction Variable; // Simplification pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h:434,Modifiability,Variab,Variable,434,"//===- IndVarSimplify.h - Induction Variable Simplification -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the Induction Variable; // Simplification pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h:45,Usability,Simpl,Simplification,45,"//===- IndVarSimplify.h - Induction Variable Simplification -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the Induction Variable; // Simplification pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h:447,Usability,Simpl,Simplification,447,"//===- IndVarSimplify.h - Induction Variable Simplification -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the Induction Variable; // Simplification pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h:4,Performance,Perform,Perform,4,/// Perform IV widening during the pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InferAlignment.h:403,Performance,load,load,403,"//===- InferAlignment.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Infer alignment for load, stores and other memory operations based on; // trailing zero known bits information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InferAlignment.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InferAlignment.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h:435,Usability,simpl,simplification,435,"//===- InstSimplifyPass.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Defines passes for running instruction simplification across chunks of IR.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h:502,Energy Efficiency,power,powerful,502,"/// Run instruction simplification across each instruction in the function.; ///; /// Instruction simplification has useful constraints in some contexts:; /// - It will never introduce *new* instructions.; /// - There is no need to iterate to a fixed point.; ///; /// Many passes use instruction simplification as a library facility, but it may; /// also be useful (in tests and other contexts) to have access to this very; /// restricted transform at a pass granularity. However, for a much more; /// powerful and comprehensive peephole optimization engine, see the; /// `instcombine` pass instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h:538,Performance,optimiz,optimization,538,"/// Run instruction simplification across each instruction in the function.; ///; /// Instruction simplification has useful constraints in some contexts:; /// - It will never introduce *new* instructions.; /// - There is no need to iterate to a fixed point.; ///; /// Many passes use instruction simplification as a library facility, but it may; /// also be useful (in tests and other contexts) to have access to this very; /// restricted transform at a pass granularity. However, for a much more; /// powerful and comprehensive peephole optimization engine, see the; /// `instcombine` pass instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h:403,Security,access,access,403,"/// Run instruction simplification across each instruction in the function.; ///; /// Instruction simplification has useful constraints in some contexts:; /// - It will never introduce *new* instructions.; /// - There is no need to iterate to a fixed point.; ///; /// Many passes use instruction simplification as a library facility, but it may; /// also be useful (in tests and other contexts) to have access to this very; /// restricted transform at a pass granularity. However, for a much more; /// powerful and comprehensive peephole optimization engine, see the; /// `instcombine` pass instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h:369,Testability,test,tests,369,"/// Run instruction simplification across each instruction in the function.; ///; /// Instruction simplification has useful constraints in some contexts:; /// - It will never introduce *new* instructions.; /// - There is no need to iterate to a fixed point.; ///; /// Many passes use instruction simplification as a library facility, but it may; /// also be useful (in tests and other contexts) to have access to this very; /// restricted transform at a pass granularity. However, for a much more; /// powerful and comprehensive peephole optimization engine, see the; /// `instcombine` pass instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h:20,Usability,simpl,simplification,20,"/// Run instruction simplification across each instruction in the function.; ///; /// Instruction simplification has useful constraints in some contexts:; /// - It will never introduce *new* instructions.; /// - There is no need to iterate to a fixed point.; ///; /// Many passes use instruction simplification as a library facility, but it may; /// also be useful (in tests and other contexts) to have access to this very; /// restricted transform at a pass granularity. However, for a much more; /// powerful and comprehensive peephole optimization engine, see the; /// `instcombine` pass instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h:98,Usability,simpl,simplification,98,"/// Run instruction simplification across each instruction in the function.; ///; /// Instruction simplification has useful constraints in some contexts:; /// - It will never introduce *new* instructions.; /// - There is no need to iterate to a fixed point.; ///; /// Many passes use instruction simplification as a library facility, but it may; /// also be useful (in tests and other contexts) to have access to this very; /// restricted transform at a pass granularity. However, for a much more; /// powerful and comprehensive peephole optimization engine, see the; /// `instcombine` pass instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h:296,Usability,simpl,simplification,296,"/// Run instruction simplification across each instruction in the function.; ///; /// Instruction simplification has useful constraints in some contexts:; /// - It will never introduce *new* instructions.; /// - There is no need to iterate to a fixed point.; ///; /// Many passes use instruction simplification as a library facility, but it may; /// also be useful (in tests and other contexts) to have access to this very; /// restricted transform at a pass granularity. However, for a much more; /// powerful and comprehensive peephole optimization engine, see the; /// `instcombine` pass instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IVUsersPrinter.h:36,Modifiability,Variab,Variable,36,"//===- IVUsersPrinter.h - Induction Variable Users Printing -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IVUsersPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IVUsersPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/JumpThreading.h:46,Performance,perform,performs,46,"// end namespace jumpthreading; /// This pass performs 'jump threading', which looks at blocks that have; /// multiple predecessors and multiple successors. If one or more of the; /// predecessors of the block can be proven to always jump to one of the; /// successors, we forward the edge from the predecessor to the successor by; /// duplicating the contents of this block.; ///; /// An example of when this can occur is code like this:; ///; /// if () { ...; /// X = 4;; /// }; /// if (X < 3) {; ///; /// In this case, the unconditional branch at the end of the first if can be; /// revectored to the false side of the second if.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/JumpThreading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/JumpThreading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/JumpThreading.h:101,Performance,cache,cached,101,"/// Returns an existing instance of BPI if any, otherwise nullptr. By; /// ""existing"" we mean either cached result provided by FunctionAnalysisManger; /// or created by preceding call to 'getOrCreateBPI'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/JumpThreading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/JumpThreading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/JumpThreading.h:101,Performance,cache,cached,101,"/// Returns an existing instance of BFI if any, otherwise nullptr. By; /// ""existing"" we mean either cached result provided by FunctionAnalysisManger; /// or created by preceding call to 'getOrCreateBFI'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/JumpThreading.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/JumpThreading.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h:1590,Modifiability,variab,variable,1590,"//===- LICM.h - Loop Invariant Code Motion Pass -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs loop invariant code motion, attempting to remove as much; // code from the body of a loop as possible. It does this by either hoisting; // code into the preheader block, or by sinking code to the exit blocks if it is; // safe. This pass also promotes must-aliased memory locations in the loop to; // live in registers, thus hoisting and sinking ""invariant"" loads and stores.; //; // This pass uses alias analysis for two purposes:; //; // 1. Moving loop invariant loads and calls out of loops. If we can determine; // that a load or call inside of a loop never aliases anything stored to,; // we can hoist it or sink it like any other instruction.; // 2. Scalar Promotion of Memory - If there is a store instruction inside of; // the loop, we try to move the store to happen AFTER the loop instead of; // inside of the loop. This can only happen if a few conditions are true:; // A. The pointer stored through is loop invariant; // B. There are no stores or loads in the loop which _may_ alias the; // pointer. There are no calls in the loop which mod/ref the pointer.; // If these conditions are true, we can promote the loads and stores in the; // loop of the pointer to use a temporary alloca'd variable. We then use; // the SSAUpdater to construct the appropriate SSA form for the value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h:383,Performance,perform,performs,383,"//===- LICM.h - Loop Invariant Code Motion Pass -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs loop invariant code motion, attempting to remove as much; // code from the body of a loop as possible. It does this by either hoisting; // code into the preheader block, or by sinking code to the exit blocks if it is; // safe. This pass also promotes must-aliased memory locations in the loop to; // live in registers, thus hoisting and sinking ""invariant"" loads and stores.; //; // This pass uses alias analysis for two purposes:; //; // 1. Moving loop invariant loads and calls out of loops. If we can determine; // that a load or call inside of a loop never aliases anything stored to,; // we can hoist it or sink it like any other instruction.; // 2. Scalar Promotion of Memory - If there is a store instruction inside of; // the loop, we try to move the store to happen AFTER the loop instead of; // inside of the loop. This can only happen if a few conditions are true:; // A. The pointer stored through is loop invariant; // B. There are no stores or loads in the loop which _may_ alias the; // pointer. There are no calls in the loop which mod/ref the pointer.; // If these conditions are true, we can promote the loads and stores in the; // loop of the pointer to use a temporary alloca'd variable. We then use; // the SSAUpdater to construct the appropriate SSA form for the value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h:749,Performance,load,loads,749,"//===- LICM.h - Loop Invariant Code Motion Pass -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs loop invariant code motion, attempting to remove as much; // code from the body of a loop as possible. It does this by either hoisting; // code into the preheader block, or by sinking code to the exit blocks if it is; // safe. This pass also promotes must-aliased memory locations in the loop to; // live in registers, thus hoisting and sinking ""invariant"" loads and stores.; //; // This pass uses alias analysis for two purposes:; //; // 1. Moving loop invariant loads and calls out of loops. If we can determine; // that a load or call inside of a loop never aliases anything stored to,; // we can hoist it or sink it like any other instruction.; // 2. Scalar Promotion of Memory - If there is a store instruction inside of; // the loop, we try to move the store to happen AFTER the loop instead of; // inside of the loop. This can only happen if a few conditions are true:; // A. The pointer stored through is loop invariant; // B. There are no stores or loads in the loop which _may_ alias the; // pointer. There are no calls in the loop which mod/ref the pointer.; // If these conditions are true, we can promote the loads and stores in the; // loop of the pointer to use a temporary alloca'd variable. We then use; // the SSAUpdater to construct the appropriate SSA form for the value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h:856,Performance,load,loads,856,"//===- LICM.h - Loop Invariant Code Motion Pass -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs loop invariant code motion, attempting to remove as much; // code from the body of a loop as possible. It does this by either hoisting; // code into the preheader block, or by sinking code to the exit blocks if it is; // safe. This pass also promotes must-aliased memory locations in the loop to; // live in registers, thus hoisting and sinking ""invariant"" loads and stores.; //; // This pass uses alias analysis for two purposes:; //; // 1. Moving loop invariant loads and calls out of loops. If we can determine; // that a load or call inside of a loop never aliases anything stored to,; // we can hoist it or sink it like any other instruction.; // 2. Scalar Promotion of Memory - If there is a store instruction inside of; // the loop, we try to move the store to happen AFTER the loop instead of; // inside of the loop. This can only happen if a few conditions are true:; // A. The pointer stored through is loop invariant; // B. There are no stores or loads in the loop which _may_ alias the; // pointer. There are no calls in the loop which mod/ref the pointer.; // If these conditions are true, we can promote the loads and stores in the; // loop of the pointer to use a temporary alloca'd variable. We then use; // the SSAUpdater to construct the appropriate SSA form for the value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h:917,Performance,load,load,917,"//===- LICM.h - Loop Invariant Code Motion Pass -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs loop invariant code motion, attempting to remove as much; // code from the body of a loop as possible. It does this by either hoisting; // code into the preheader block, or by sinking code to the exit blocks if it is; // safe. This pass also promotes must-aliased memory locations in the loop to; // live in registers, thus hoisting and sinking ""invariant"" loads and stores.; //; // This pass uses alias analysis for two purposes:; //; // 1. Moving loop invariant loads and calls out of loops. If we can determine; // that a load or call inside of a loop never aliases anything stored to,; // we can hoist it or sink it like any other instruction.; // 2. Scalar Promotion of Memory - If there is a store instruction inside of; // the loop, we try to move the store to happen AFTER the loop instead of; // inside of the loop. This can only happen if a few conditions are true:; // A. The pointer stored through is loop invariant; // B. There are no stores or loads in the loop which _may_ alias the; // pointer. There are no calls in the loop which mod/ref the pointer.; // If these conditions are true, we can promote the loads and stores in the; // loop of the pointer to use a temporary alloca'd variable. We then use; // the SSAUpdater to construct the appropriate SSA form for the value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h:1350,Performance,load,loads,1350,"//===- LICM.h - Loop Invariant Code Motion Pass -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs loop invariant code motion, attempting to remove as much; // code from the body of a loop as possible. It does this by either hoisting; // code into the preheader block, or by sinking code to the exit blocks if it is; // safe. This pass also promotes must-aliased memory locations in the loop to; // live in registers, thus hoisting and sinking ""invariant"" loads and stores.; //; // This pass uses alias analysis for two purposes:; //; // 1. Moving loop invariant loads and calls out of loops. If we can determine; // that a load or call inside of a loop never aliases anything stored to,; // we can hoist it or sink it like any other instruction.; // 2. Scalar Promotion of Memory - If there is a store instruction inside of; // the loop, we try to move the store to happen AFTER the loop instead of; // inside of the loop. This can only happen if a few conditions are true:; // A. The pointer stored through is loop invariant; // B. There are no stores or loads in the loop which _may_ alias the; // pointer. There are no calls in the loop which mod/ref the pointer.; // If these conditions are true, we can promote the loads and stores in the; // loop of the pointer to use a temporary alloca'd variable. We then use; // the SSAUpdater to construct the appropriate SSA form for the value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h:1514,Performance,load,loads,1514,"//===- LICM.h - Loop Invariant Code Motion Pass -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs loop invariant code motion, attempting to remove as much; // code from the body of a loop as possible. It does this by either hoisting; // code into the preheader block, or by sinking code to the exit blocks if it is; // safe. This pass also promotes must-aliased memory locations in the loop to; // live in registers, thus hoisting and sinking ""invariant"" loads and stores.; //; // This pass uses alias analysis for two purposes:; //; // 1. Moving loop invariant loads and calls out of loops. If we can determine; // that a load or call inside of a loop never aliases anything stored to,; // we can hoist it or sink it like any other instruction.; // 2. Scalar Promotion of Memory - If there is a store instruction inside of; // the loop, we try to move the store to happen AFTER the loop instead of; // inside of the loop. This can only happen if a few conditions are true:; // A. The pointer stored through is loop invariant; // B. There are no stores or loads in the loop which _may_ alias the; // pointer. There are no calls in the loop which mod/ref the pointer.; // If these conditions are true, we can promote the loads and stores in the; // loop of the pointer to use a temporary alloca'd variable. We then use; // the SSAUpdater to construct the appropriate SSA form for the value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h:613,Safety,safe,safe,613,"//===- LICM.h - Loop Invariant Code Motion Pass -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs loop invariant code motion, attempting to remove as much; // code from the body of a loop as possible. It does this by either hoisting; // code into the preheader block, or by sinking code to the exit blocks if it is; // safe. This pass also promotes must-aliased memory locations in the loop to; // live in registers, thus hoisting and sinking ""invariant"" loads and stores.; //; // This pass uses alias analysis for two purposes:; //; // 1. Moving loop invariant loads and calls out of loops. If we can determine; // that a load or call inside of a loop never aliases anything stored to,; // we can hoist it or sink it like any other instruction.; // 2. Scalar Promotion of Memory - If there is a store instruction inside of; // the loop, we try to move the store to happen AFTER the loop instead of; // inside of the loop. This can only happen if a few conditions are true:; // A. The pointer stored through is loop invariant; // B. There are no stores or loads in the loop which _may_ alias the; // pointer. There are no calls in the loop which mod/ref the pointer.; // If these conditions are true, we can promote the loads and stores in the; // loop of the pointer to use a temporary alloca'd variable. We then use; // the SSAUpdater to construct the appropriate SSA form for the value.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h:4,Performance,Perform,Performs,4,/// Performs Loop Invariant Code Motion Pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h:4,Performance,Perform,Performs,4,/// Performs LoopNest Invariant Code Motion Pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LICM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopBoundSplit.h:85,Modifiability,variab,variable,85,"/// This pass transforms loops that contain a conditional branch with induction; /// variable. For example, it transforms left code to right code:; ///; /// newbound = min(n, c); /// while (iv < n) { while(iv < newbound) {; /// A A; /// if (iv < c) B; /// B C; /// C }; /// if (iv != n) {; /// while (iv < n) {; /// A; /// C; /// }; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopBoundSplit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopBoundSplit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDataPrefetch.h:418,Integrability,interface,interface,418,"//===-------- LoopDataPrefetch.h - Loop Data Prefetching Pass ---*- C++ -*-===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for LLVM's Loop Data Prefetching Pass.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDataPrefetch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDataPrefetch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDataPrefetch.h:7,Performance,optimiz,optimization,7,/// An optimization pass inserting data prefetches in loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDataPrefetch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDataPrefetch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDeletion.h:406,Integrability,interface,interface,406,"//===- LoopDeletion.h - Loop Deletion ---------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the Loop Deletion Pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDeletion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDeletion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDistribute.h:507,Integrability,depend,dependence,507,"//===- LoopDistribute.cpp - Loop Distribution Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Loop Distribution Pass. Its main focus is to; // distribute loops that cannot be vectorized due to dependence cycles. It; // tries to isolate the offending dependences into a new loop allowing; // vectorization of the remaining parts.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDistribute.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDistribute.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDistribute.h:564,Integrability,depend,dependences,564,"//===- LoopDistribute.cpp - Loop Distribution Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Loop Distribution Pass. Its main focus is to; // distribute loops that cannot be vectorized due to dependence cycles. It; // tries to isolate the offending dependences into a new loop allowing; // vectorization of the remaining parts.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDistribute.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopDistribute.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopFlatten.h:405,Integrability,interface,interface,405,"//===- LoopFlatten.h - Loop Flatten ---------------- -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the Loop Flatten Pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopFlatten.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopFlatten.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopIdiomRecognize.h:536,Performance,perform,performance,536,"//===- LoopIdiomRecognize.h - Loop Idiom Recognize Pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass implements an idiom recognizer that transforms simple loops into a; // non-loop form. In cases that this kicks in, it can be a significant; // performance win.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopIdiomRecognize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopIdiomRecognize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopIdiomRecognize.h:440,Usability,simpl,simple,440,"//===- LoopIdiomRecognize.h - Loop Idiom Recognize Pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass implements an idiom recognizer that transforms simple loops into a; // non-loop form. In cases that this kicks in, it can be a significant; // performance win.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopIdiomRecognize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopIdiomRecognize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopIdiomRecognize.h:4,Performance,Perform,Performs,4,/// Performs Loop Idiom Recognize Pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopIdiomRecognize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopIdiomRecognize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h:393,Performance,perform,performs,393,"//===- LoopInstSimplify.h - Loop Inst Simplify Pass -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs lightweight instruction simplification on loop bodies.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h:38,Usability,Simpl,Simplify,38,"//===- LoopInstSimplify.h - Loop Inst Simplify Pass -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs lightweight instruction simplification on loop bodies.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h:426,Usability,simpl,simplification,426,"//===- LoopInstSimplify.h - Loop Inst Simplify Pass -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs lightweight instruction simplification on loop bodies.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h:4,Performance,Perform,Performs,4,/// Performs Loop Inst Simplify Pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h:23,Usability,Simpl,Simplify,23,/// Performs Loop Inst Simplify Pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopLoadElimination.h:475,Performance,load,loaded,475,"//===- LoopLoadElimination.h ------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This header defines the LoopLoadEliminationPass object. This pass forwards; /// loaded values around loop backedges to allow their use in subsequent; /// iterations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopLoadElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopLoadElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopLoadElimination.h:20,Performance,load,loads,20,/// Pass to forward loads in a loop around the backedge to subsequent; /// iterations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopLoadElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopLoadElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:762,Availability,avail,available,762,"//===- LoopPassManager.h - Loop pass management -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides classes for managing a pipeline of passes over loops; /// in LLVM IR.; ///; /// The primary loop pass pipeline is managed in a very particular way to; /// provide a set of core guarantees:; /// 1) Loops are, where possible, in simplified form.; /// 2) Loops are *always* in LCSSA form.; /// 3) A collection of Loop-specific analysis results are available:; /// - LoopInfo; /// - DominatorTree; /// - ScalarEvolution; /// - AAManager; /// 4) All loop passes preserve #1 (where possible), #2, and #3.; /// 5) Loop passes run over each loop in the loop nest from the innermost to; /// the outermost. Specifically, all inner loops are processed before; /// passes run over outer loops. When running the pipeline across an inner; /// loop creates new inner loops, those are added and processed in this; /// order as well.; ///; /// This process is designed to facilitate transformations which simplify,; /// reduce, and remove loops. For passes which are more oriented towards; /// optimizing loops, especially optimizing loop *nests* instead of single; /// loops in isolation, this framework is less interesting.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:440,Deployability,pipeline,pipeline,440,"//===- LoopPassManager.h - Loop pass management -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides classes for managing a pipeline of passes over loops; /// in LLVM IR.; ///; /// The primary loop pass pipeline is managed in a very particular way to; /// provide a set of core guarantees:; /// 1) Loops are, where possible, in simplified form.; /// 2) Loops are *always* in LCSSA form.; /// 3) A collection of Loop-specific analysis results are available:; /// - LoopInfo; /// - DominatorTree; /// - ScalarEvolution; /// - AAManager; /// 4) All loop passes preserve #1 (where possible), #2, and #3.; /// 5) Loop passes run over each loop in the loop nest from the innermost to; /// the outermost. Specifically, all inner loops are processed before; /// passes run over outer loops. When running the pipeline across an inner; /// loop creates new inner loops, those are added and processed in this; /// order as well.; ///; /// This process is designed to facilitate transformations which simplify,; /// reduce, and remove loops. For passes which are more oriented towards; /// optimizing loops, especially optimizing loop *nests* instead of single; /// loops in isolation, this framework is less interesting.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:519,Deployability,pipeline,pipeline,519,"//===- LoopPassManager.h - Loop pass management -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides classes for managing a pipeline of passes over loops; /// in LLVM IR.; ///; /// The primary loop pass pipeline is managed in a very particular way to; /// provide a set of core guarantees:; /// 1) Loops are, where possible, in simplified form.; /// 2) Loops are *always* in LCSSA form.; /// 3) A collection of Loop-specific analysis results are available:; /// - LoopInfo; /// - DominatorTree; /// - ScalarEvolution; /// - AAManager; /// 4) All loop passes preserve #1 (where possible), #2, and #3.; /// 5) Loop passes run over each loop in the loop nest from the innermost to; /// the outermost. Specifically, all inner loops are processed before; /// passes run over outer loops. When running the pipeline across an inner; /// loop creates new inner loops, those are added and processed in this; /// order as well.; ///; /// This process is designed to facilitate transformations which simplify,; /// reduce, and remove loops. For passes which are more oriented towards; /// optimizing loops, especially optimizing loop *nests* instead of single; /// loops in isolation, this framework is less interesting.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:1116,Deployability,pipeline,pipeline,1116,"//===- LoopPassManager.h - Loop pass management -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides classes for managing a pipeline of passes over loops; /// in LLVM IR.; ///; /// The primary loop pass pipeline is managed in a very particular way to; /// provide a set of core guarantees:; /// 1) Loops are, where possible, in simplified form.; /// 2) Loops are *always* in LCSSA form.; /// 3) A collection of Loop-specific analysis results are available:; /// - LoopInfo; /// - DominatorTree; /// - ScalarEvolution; /// - AAManager; /// 4) All loop passes preserve #1 (where possible), #2, and #3.; /// 5) Loop passes run over each loop in the loop nest from the innermost to; /// the outermost. Specifically, all inner loops are processed before; /// passes run over outer loops. When running the pipeline across an inner; /// loop creates new inner loops, those are added and processed in this; /// order as well.; ///; /// This process is designed to facilitate transformations which simplify,; /// reduce, and remove loops. For passes which are more oriented towards; /// optimizing loops, especially optimizing loop *nests* instead of single; /// loops in isolation, this framework is less interesting.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:1320,Energy Efficiency,reduce,reduce,1320,"//===- LoopPassManager.h - Loop pass management -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides classes for managing a pipeline of passes over loops; /// in LLVM IR.; ///; /// The primary loop pass pipeline is managed in a very particular way to; /// provide a set of core guarantees:; /// 1) Loops are, where possible, in simplified form.; /// 2) Loops are *always* in LCSSA form.; /// 3) A collection of Loop-specific analysis results are available:; /// - LoopInfo; /// - DominatorTree; /// - ScalarEvolution; /// - AAManager; /// 4) All loop passes preserve #1 (where possible), #2, and #3.; /// 5) Loop passes run over each loop in the loop nest from the innermost to; /// the outermost. Specifically, all inner loops are processed before; /// passes run over outer loops. When running the pipeline across an inner; /// loop creates new inner loops, those are added and processed in this; /// order as well.; ///; /// This process is designed to facilitate transformations which simplify,; /// reduce, and remove loops. For passes which are more oriented towards; /// optimizing loops, especially optimizing loop *nests* instead of single; /// loops in isolation, this framework is less interesting.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:1394,Performance,optimiz,optimizing,1394,"//===- LoopPassManager.h - Loop pass management -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides classes for managing a pipeline of passes over loops; /// in LLVM IR.; ///; /// The primary loop pass pipeline is managed in a very particular way to; /// provide a set of core guarantees:; /// 1) Loops are, where possible, in simplified form.; /// 2) Loops are *always* in LCSSA form.; /// 3) A collection of Loop-specific analysis results are available:; /// - LoopInfo; /// - DominatorTree; /// - ScalarEvolution; /// - AAManager; /// 4) All loop passes preserve #1 (where possible), #2, and #3.; /// 5) Loop passes run over each loop in the loop nest from the innermost to; /// the outermost. Specifically, all inner loops are processed before; /// passes run over outer loops. When running the pipeline across an inner; /// loop creates new inner loops, those are added and processed in this; /// order as well.; ///; /// This process is designed to facilitate transformations which simplify,; /// reduce, and remove loops. For passes which are more oriented towards; /// optimizing loops, especially optimizing loop *nests* instead of single; /// loops in isolation, this framework is less interesting.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:1423,Performance,optimiz,optimizing,1423,"//===- LoopPassManager.h - Loop pass management -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides classes for managing a pipeline of passes over loops; /// in LLVM IR.; ///; /// The primary loop pass pipeline is managed in a very particular way to; /// provide a set of core guarantees:; /// 1) Loops are, where possible, in simplified form.; /// 2) Loops are *always* in LCSSA form.; /// 3) A collection of Loop-specific analysis results are available:; /// - LoopInfo; /// - DominatorTree; /// - ScalarEvolution; /// - AAManager; /// 4) All loop passes preserve #1 (where possible), #2, and #3.; /// 5) Loop passes run over each loop in the loop nest from the innermost to; /// the outermost. Specifically, all inner loops are processed before; /// passes run over outer loops. When running the pipeline across an inner; /// loop creates new inner loops, those are added and processed in this; /// order as well.; ///; /// This process is designed to facilitate transformations which simplify,; /// reduce, and remove loops. For passes which are more oriented towards; /// optimizing loops, especially optimizing loop *nests* instead of single; /// loops in isolation, this framework is less interesting.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:644,Usability,simpl,simplified,644,"//===- LoopPassManager.h - Loop pass management -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides classes for managing a pipeline of passes over loops; /// in LLVM IR.; ///; /// The primary loop pass pipeline is managed in a very particular way to; /// provide a set of core guarantees:; /// 1) Loops are, where possible, in simplified form.; /// 2) Loops are *always* in LCSSA form.; /// 3) A collection of Loop-specific analysis results are available:; /// - LoopInfo; /// - DominatorTree; /// - ScalarEvolution; /// - AAManager; /// 4) All loop passes preserve #1 (where possible), #2, and #3.; /// 5) Loop passes run over each loop in the loop nest from the innermost to; /// the outermost. Specifically, all inner loops are processed before; /// passes run over outer loops. When running the pipeline across an inner; /// loop creates new inner loops, those are added and processed in this; /// order as well.; ///; /// This process is designed to facilitate transformations which simplify,; /// reduce, and remove loops. For passes which are more oriented towards; /// optimizing loops, especially optimizing loop *nests* instead of single; /// loops in isolation, this framework is less interesting.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:1305,Usability,simpl,simplify,1305,"//===- LoopPassManager.h - Loop pass management -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides classes for managing a pipeline of passes over loops; /// in LLVM IR.; ///; /// The primary loop pass pipeline is managed in a very particular way to; /// provide a set of core guarantees:; /// 1) Loops are, where possible, in simplified form.; /// 2) Loops are *always* in LCSSA form.; /// 3) A collection of Loop-specific analysis results are available:; /// - LoopInfo; /// - DominatorTree; /// - ScalarEvolution; /// - AAManager; /// 4) All loop passes preserve #1 (where possible), #2, and #3.; /// 5) Loop passes run over each loop in the loop nest from the innermost to; /// the outermost. Specifically, all inner loops are processed before; /// passes run over outer loops. When running the pipeline across an inner; /// loop creates new inner loops, those are added and processed in this; /// order as well.; ///; /// This process is designed to facilitate transformations which simplify,; /// reduce, and remove loops. For passes which are more oriented towards; /// optimizing loops, especially optimizing loop *nests* instead of single; /// loops in isolation, this framework is less interesting.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:30,Deployability,update,update,30,// Forward declarations of an update tracking API used in the pass manager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:125,Availability,error,errors,125,"// FIXME: These are equivalent to the default move constructor/move; // assignment. However, using = default triggers linker errors due to the; // explicit instantiations below. Find a way to use the default and remove the; // duplicated code here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:160,Safety,detect,detection,160,// Specializations of `addPass` for `RepeatedPass`. These are necessary since; // `RepeatedPass` has a templated `run` method that will result in incorrect; // detection of `HasRunOnLoopT`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:247,Deployability,update,update,247,"/// This class provides an interface for updating the loop pass manager based; /// on mutations to the loop nest.; ///; /// A reference to an instance of this class is passed as an argument to each; /// Loop pass, and Loop passes should use it to update LPM infrastructure if; /// they modify the loop nest structure.; ///; /// \c LPMUpdater comes with two modes: the loop mode and the loop-nest mode. In; /// loop mode, all the loops in the function will be pushed into the worklist; /// and when new loops are added to the pipeline, their subloops are also; /// inserted recursively. On the other hand, in loop-nest mode, only top-level; /// loops are contained in the worklist and the addition of new (top-level); /// loops will not trigger the addition of their subloops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:525,Deployability,pipeline,pipeline,525,"/// This class provides an interface for updating the loop pass manager based; /// on mutations to the loop nest.; ///; /// A reference to an instance of this class is passed as an argument to each; /// Loop pass, and Loop passes should use it to update LPM infrastructure if; /// they modify the loop nest structure.; ///; /// \c LPMUpdater comes with two modes: the loop mode and the loop-nest mode. In; /// loop mode, all the loops in the function will be pushed into the worklist; /// and when new loops are added to the pipeline, their subloops are also; /// inserted recursively. On the other hand, in loop-nest mode, only top-level; /// loops are contained in the worklist and the addition of new (top-level); /// loops will not trigger the addition of their subloops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:27,Integrability,interface,interface,27,"/// This class provides an interface for updating the loop pass manager based; /// on mutations to the loop nest.; ///; /// A reference to an instance of this class is passed as an argument to each; /// Loop pass, and Loop passes should use it to update LPM infrastructure if; /// they modify the loop nest structure.; ///; /// \c LPMUpdater comes with two modes: the loop mode and the loop-nest mode. In; /// loop mode, all the loops in the function will be pushed into the worklist; /// and when new loops are added to the pipeline, their subloops are also; /// inserted recursively. On the other hand, in loop-nest mode, only top-level; /// loops are contained in the worklist and the addition of new (top-level); /// loops will not trigger the addition of their subloops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:145,Deployability,update,updates,145,"/// This can be queried by loop passes which run other loop passes (like pass; /// managers) to know whether the loop needs to be skipped due to updates to; /// the loop nest.; ///; /// If this returns true, the loop object may have been deleted, so passes; /// should take care not to touch the object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:202,Integrability,rout,routine,202,"/// Loop passes should use this method to indicate they have deleted a loop; /// from the nest.; ///; /// Note that this loop must either be the current loop or a subloop of the; /// current loop. This routine must be called prior to removing the loop from; /// the loop nest.; ///; /// If this is called for the current loop, in addition to clearing any; /// state, this routine will mark that the current loop should be skipped by; /// the rest of the pass management infrastructure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:372,Integrability,rout,routine,372,"/// Loop passes should use this method to indicate they have deleted a loop; /// from the nest.; ///; /// Note that this loop must either be the current loop or a subloop of the; /// current loop. This routine must be called prior to removing the loop from; /// the loop nest.; ///; /// If this is called for the current loop, in addition to clearing any; /// state, this routine will mark that the current loop should be skipped by; /// the rest of the pass management infrastructure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:342,Usability,clear,clearing,342,"/// Loop passes should use this method to indicate they have deleted a loop; /// from the nest.; ///; /// Note that this loop must either be the current loop or a subloop of the; /// current loop. This routine must be called prior to removing the loop from; /// the loop nest.; ///; /// If this is called for the current loop, in addition to clearing any; /// state, this routine will mark that the current loop should be skipped by; /// the rest of the pass management infrastructure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:209,Deployability,pipeline,pipeline,209,/// Restart the current loop.; ///; /// Loop passes should call this method to indicate the current loop has been; /// sufficiently changed that it should be re-visited from the begining of; /// the loop pass pipeline rather than continuing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:32,Deployability,pipeline,pipeline,32,// Tell the currently in-flight pipeline to stop running.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:62,Testability,assert,asserts,62,// In debug builds we also track the parent loop to implement asserts even in; // the face of loop deletion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:520,Deployability,update,updater,520,"/// Adaptor that maps from a function to its loops.; ///; /// Designed to allow composition of a LoopPass(Manager) and a; /// FunctionPassManager. Note that if this pass is constructed with a \c; /// FunctionAnalysisManager it will run the \c LoopAnalysisManagerFunctionProxy; /// analysis prior to running the loop passes over the function to enable a \c; /// LoopAnalysisManager to be used within this run safely.; ///; /// The adaptor comes with two modes: the loop mode and the loop-nest mode, and; /// the worklist updater lived inside will be in the same mode as the adaptor; /// (refer to the documentation of \c LPMUpdater for more detailed explanation).; /// Specifically, in loop mode, all loops in the function will be pushed into; /// the worklist and processed by \p Pass, while only top-level loops are; /// processed in loop-nest mode. Please refer to the various specializations of; /// \fn createLoopFunctionToLoopPassAdaptor to see when loop mode and loop-nest; /// mode are used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:4,Energy Efficiency,Adapt,Adaptor,4,"/// Adaptor that maps from a function to its loops.; ///; /// Designed to allow composition of a LoopPass(Manager) and a; /// FunctionPassManager. Note that if this pass is constructed with a \c; /// FunctionAnalysisManager it will run the \c LoopAnalysisManagerFunctionProxy; /// analysis prior to running the loop passes over the function to enable a \c; /// LoopAnalysisManager to be used within this run safely.; ///; /// The adaptor comes with two modes: the loop mode and the loop-nest mode, and; /// the worklist updater lived inside will be in the same mode as the adaptor; /// (refer to the documentation of \c LPMUpdater for more detailed explanation).; /// Specifically, in loop mode, all loops in the function will be pushed into; /// the worklist and processed by \p Pass, while only top-level loops are; /// processed in loop-nest mode. Please refer to the various specializations of; /// \fn createLoopFunctionToLoopPassAdaptor to see when loop mode and loop-nest; /// mode are used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:430,Energy Efficiency,adapt,adaptor,430,"/// Adaptor that maps from a function to its loops.; ///; /// Designed to allow composition of a LoopPass(Manager) and a; /// FunctionPassManager. Note that if this pass is constructed with a \c; /// FunctionAnalysisManager it will run the \c LoopAnalysisManagerFunctionProxy; /// analysis prior to running the loop passes over the function to enable a \c; /// LoopAnalysisManager to be used within this run safely.; ///; /// The adaptor comes with two modes: the loop mode and the loop-nest mode, and; /// the worklist updater lived inside will be in the same mode as the adaptor; /// (refer to the documentation of \c LPMUpdater for more detailed explanation).; /// Specifically, in loop mode, all loops in the function will be pushed into; /// the worklist and processed by \p Pass, while only top-level loops are; /// processed in loop-nest mode. Please refer to the various specializations of; /// \fn createLoopFunctionToLoopPassAdaptor to see when loop mode and loop-nest; /// mode are used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:573,Energy Efficiency,adapt,adaptor,573,"/// Adaptor that maps from a function to its loops.; ///; /// Designed to allow composition of a LoopPass(Manager) and a; /// FunctionPassManager. Note that if this pass is constructed with a \c; /// FunctionAnalysisManager it will run the \c LoopAnalysisManagerFunctionProxy; /// analysis prior to running the loop passes over the function to enable a \c; /// LoopAnalysisManager to be used within this run safely.; ///; /// The adaptor comes with two modes: the loop mode and the loop-nest mode, and; /// the worklist updater lived inside will be in the same mode as the adaptor; /// (refer to the documentation of \c LPMUpdater for more detailed explanation).; /// Specifically, in loop mode, all loops in the function will be pushed into; /// the worklist and processed by \p Pass, while only top-level loops are; /// processed in loop-nest mode. Please refer to the various specializations of; /// \fn createLoopFunctionToLoopPassAdaptor to see when loop mode and loop-nest; /// mode are used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:4,Modifiability,Adapt,Adaptor,4,"/// Adaptor that maps from a function to its loops.; ///; /// Designed to allow composition of a LoopPass(Manager) and a; /// FunctionPassManager. Note that if this pass is constructed with a \c; /// FunctionAnalysisManager it will run the \c LoopAnalysisManagerFunctionProxy; /// analysis prior to running the loop passes over the function to enable a \c; /// LoopAnalysisManager to be used within this run safely.; ///; /// The adaptor comes with two modes: the loop mode and the loop-nest mode, and; /// the worklist updater lived inside will be in the same mode as the adaptor; /// (refer to the documentation of \c LPMUpdater for more detailed explanation).; /// Specifically, in loop mode, all loops in the function will be pushed into; /// the worklist and processed by \p Pass, while only top-level loops are; /// processed in loop-nest mode. Please refer to the various specializations of; /// \fn createLoopFunctionToLoopPassAdaptor to see when loop mode and loop-nest; /// mode are used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:430,Modifiability,adapt,adaptor,430,"/// Adaptor that maps from a function to its loops.; ///; /// Designed to allow composition of a LoopPass(Manager) and a; /// FunctionPassManager. Note that if this pass is constructed with a \c; /// FunctionAnalysisManager it will run the \c LoopAnalysisManagerFunctionProxy; /// analysis prior to running the loop passes over the function to enable a \c; /// LoopAnalysisManager to be used within this run safely.; ///; /// The adaptor comes with two modes: the loop mode and the loop-nest mode, and; /// the worklist updater lived inside will be in the same mode as the adaptor; /// (refer to the documentation of \c LPMUpdater for more detailed explanation).; /// Specifically, in loop mode, all loops in the function will be pushed into; /// the worklist and processed by \p Pass, while only top-level loops are; /// processed in loop-nest mode. Please refer to the various specializations of; /// \fn createLoopFunctionToLoopPassAdaptor to see when loop mode and loop-nest; /// mode are used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:573,Modifiability,adapt,adaptor,573,"/// Adaptor that maps from a function to its loops.; ///; /// Designed to allow composition of a LoopPass(Manager) and a; /// FunctionPassManager. Note that if this pass is constructed with a \c; /// FunctionAnalysisManager it will run the \c LoopAnalysisManagerFunctionProxy; /// analysis prior to running the loop passes over the function to enable a \c; /// LoopAnalysisManager to be used within this run safely.; ///; /// The adaptor comes with two modes: the loop mode and the loop-nest mode, and; /// the worklist updater lived inside will be in the same mode as the adaptor; /// (refer to the documentation of \c LPMUpdater for more detailed explanation).; /// Specifically, in loop mode, all loops in the function will be pushed into; /// the worklist and processed by \p Pass, while only top-level loops are; /// processed in loop-nest mode. Please refer to the various specializations of; /// \fn createLoopFunctionToLoopPassAdaptor to see when loop mode and loop-nest; /// mode are used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:408,Safety,safe,safely,408,"/// Adaptor that maps from a function to its loops.; ///; /// Designed to allow composition of a LoopPass(Manager) and a; /// FunctionPassManager. Note that if this pass is constructed with a \c; /// FunctionAnalysisManager it will run the \c LoopAnalysisManagerFunctionProxy; /// analysis prior to running the loop passes over the function to enable a \c; /// LoopAnalysisManager to be used within this run safely.; ///; /// The adaptor comes with two modes: the loop mode and the loop-nest mode, and; /// the worklist updater lived inside will be in the same mode as the adaptor; /// (refer to the documentation of \c LPMUpdater for more detailed explanation).; /// Specifically, in loop mode, all loops in the function will be pushed into; /// the worklist and processed by \p Pass, while only top-level loops are; /// processed in loop-nest mode. Please refer to the various specializations of; /// \fn createLoopFunctionToLoopPassAdaptor to see when loop mode and loop-nest; /// mode are used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:76,Energy Efficiency,adapt,adaptor,76,"/// A function to deduce a loop pass type and wrap it in the templated; /// adaptor.; ///; /// If \p Pass is a loop pass, the returned adaptor will be in loop mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:135,Energy Efficiency,adapt,adaptor,135,"/// A function to deduce a loop pass type and wrap it in the templated; /// adaptor.; ///; /// If \p Pass is a loop pass, the returned adaptor will be in loop mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:46,Integrability,wrap,wrap,46,"/// A function to deduce a loop pass type and wrap it in the templated; /// adaptor.; ///; /// If \p Pass is a loop pass, the returned adaptor will be in loop mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:76,Modifiability,adapt,adaptor,76,"/// A function to deduce a loop pass type and wrap it in the templated; /// adaptor.; ///; /// If \p Pass is a loop pass, the returned adaptor will be in loop mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:135,Modifiability,adapt,adaptor,135,"/// A function to deduce a loop pass type and wrap it in the templated; /// adaptor.; ///; /// If \p Pass is a loop pass, the returned adaptor will be in loop mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:114,Energy Efficiency,adapt,adaptor,114,"/// If \p Pass is a loop-nest pass, \p Pass will first be wrapped into a; /// \c LoopPassManager and the returned adaptor will be in loop-nest mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:58,Integrability,wrap,wrapped,58,"/// If \p Pass is a loop-nest pass, \p Pass will first be wrapped into a; /// \c LoopPassManager and the returned adaptor will be in loop-nest mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:114,Modifiability,adapt,adaptor,114,"/// If \p Pass is a loop-nest pass, \p Pass will first be wrapped into a; /// \c LoopPassManager and the returned adaptor will be in loop-nest mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:66,Energy Efficiency,adapt,adaptor,66,"/// If \p Pass is an instance of \c LoopPassManager, the returned adaptor will; /// be in loop-nest mode if the pass manager contains only loop-nest passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:66,Modifiability,adapt,adaptor,66,"/// If \p Pass is an instance of \c LoopPassManager, the returned adaptor will; /// be in loop-nest mode if the pass manager contains only loop-nest passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:70,Energy Efficiency,adapt,adaptor,70,"// Check if LPM contains any loop pass and if it does not, returns an adaptor; // in loop-nest mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:70,Modifiability,adapt,adaptor,70,"// Check if LPM contains any loop pass and if it does not, returns an adaptor; // in loop-nest mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPredication.h:4,Performance,Perform,Performs,4,/// Performs Loop Predication Pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPredication.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPredication.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopRotation.h:406,Integrability,interface,interface,406,"//===- LoopRotation.h - Loop Rotation -------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the Loop Rotation pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopRotation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopRotation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopRotation.h:6,Usability,simpl,simple,6,/// A simple loop rotation transformation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopRotation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopRotation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h:614,Performance,perform,perform,614,"//===- LoopSimplifyCFG.cpp - Loop CFG Simplification Pass -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Loop SimplifyCFG Pass. This pass is responsible for; // basic loop CFG cleanup, primarily to assist other loop passes. If you; // encounter a noncanonical CFG construct that causes another loop pass to; // perform suboptimally, this is the place to fix it up.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h:38,Usability,Simpl,Simplification,38,"//===- LoopSimplifyCFG.cpp - Loop CFG Simplification Pass -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Loop SimplifyCFG Pass. This pass is responsible for; // basic loop CFG cleanup, primarily to assist other loop passes. If you; // encounter a noncanonical CFG construct that causes another loop pass to; // perform suboptimally, this is the place to fix it up.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h:413,Usability,Simpl,SimplifyCFG,413,"//===- LoopSimplifyCFG.cpp - Loop CFG Simplification Pass -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Loop SimplifyCFG Pass. This pass is responsible for; // basic loop CFG cleanup, primarily to assist other loop passes. If you; // encounter a noncanonical CFG construct that causes another loop pass to; // perform suboptimally, this is the place to fix it up.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h:4,Performance,Perform,Performs,4,/// Performs basic CFG simplifications to assist other loop passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h:23,Usability,simpl,simplifications,23,/// Performs basic CFG simplifications to assist other loop passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h:406,Integrability,interface,interface,406,"//===- LoopSink.h - Loop Sink Pass ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the Loop Sink pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h:174,Deployability,pipeline,pipeline,174,/// A pass that does profile-guided sinking of instructions into loops.; ///; /// This is a function pass as it shouldn't be composed into any kind of; /// unified loop pass pipeline. The goal of it is to sink code into loops that; /// is loop invariant but only required within the loop body when doing so; /// reduces the global expected dynamic frequency with which it executes.; /// A classic example is an extremely cold branch within a loop body.; ///; /// We do this as a separate pass so that during normal optimization all; /// invariant operations can be held outside the loop body to simplify; /// fundamental analyses and transforms of the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h:312,Energy Efficiency,reduce,reduces,312,/// A pass that does profile-guided sinking of instructions into loops.; ///; /// This is a function pass as it shouldn't be composed into any kind of; /// unified loop pass pipeline. The goal of it is to sink code into loops that; /// is loop invariant but only required within the loop body when doing so; /// reduces the global expected dynamic frequency with which it executes.; /// A classic example is an extremely cold branch within a loop body.; ///; /// We do this as a separate pass so that during normal optimization all; /// invariant operations can be held outside the loop body to simplify; /// fundamental analyses and transforms of the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h:515,Performance,optimiz,optimization,515,/// A pass that does profile-guided sinking of instructions into loops.; ///; /// This is a function pass as it shouldn't be composed into any kind of; /// unified loop pass pipeline. The goal of it is to sink code into loops that; /// is loop invariant but only required within the loop body when doing so; /// reduces the global expected dynamic frequency with which it executes.; /// A classic example is an extremely cold branch within a loop body.; ///; /// We do this as a separate pass so that during normal optimization all; /// invariant operations can be held outside the loop body to simplify; /// fundamental analyses and transforms of the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h:29,Usability,guid,guided,29,/// A pass that does profile-guided sinking of instructions into loops.; ///; /// This is a function pass as it shouldn't be composed into any kind of; /// unified loop pass pipeline. The goal of it is to sink code into loops that; /// is loop invariant but only required within the loop body when doing so; /// reduces the global expected dynamic frequency with which it executes.; /// A classic example is an extremely cold branch within a loop body.; ///; /// We do this as a separate pass so that during normal optimization all; /// invariant operations can be held outside the loop body to simplify; /// fundamental analyses and transforms of the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h:595,Usability,simpl,simplify,595,/// A pass that does profile-guided sinking of instructions into loops.; ///; /// This is a function pass as it shouldn't be composed into any kind of; /// unified loop pass pipeline. The goal of it is to sink code into loops that; /// is loop invariant but only required within the loop body when doing so; /// reduces the global expected dynamic frequency with which it executes.; /// A classic example is an extremely cold branch within a loop body.; ///; /// We do this as a separate pass so that during normal optimization all; /// invariant operations can be held outside the loop body to simplify; /// fundamental analyses and transforms of the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h:797,Availability,avail,available,797,"//===- LoopStrengthReduce.h - Loop Strength Reduce Pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation analyzes and transforms the induction variables (and; // computations derived from them) into forms suitable for efficient execution; // on the target.; //; // This pass performs a strength reduction on array references inside loops that; // have as one or more of their components the loop induction variable, it; // rewrites expressions to take advantage of scaled-index addressing modes; // available on the target, and it performs a variety of other optimizations; // related to loop induction variables.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h:44,Energy Efficiency,Reduce,Reduce,44,"//===- LoopStrengthReduce.h - Loop Strength Reduce Pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation analyzes and transforms the induction variables (and; // computations derived from them) into forms suitable for efficient execution; // on the target.; //; // This pass performs a strength reduction on array references inside loops that; // have as one or more of their components the loop induction variable, it; // rewrites expressions to take advantage of scaled-index addressing modes; // available on the target, and it performs a variety of other optimizations; // related to loop induction variables.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h:516,Energy Efficiency,efficient,efficient,516,"//===- LoopStrengthReduce.h - Loop Strength Reduce Pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation analyzes and transforms the induction variables (and; // computations derived from them) into forms suitable for efficient execution; // on the target.; //; // This pass performs a strength reduction on array references inside loops that; // have as one or more of their components the loop induction variable, it; // rewrites expressions to take advantage of scaled-index addressing modes; // available on the target, and it performs a variety of other optimizations; // related to loop induction variables.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h:441,Modifiability,variab,variables,441,"//===- LoopStrengthReduce.h - Loop Strength Reduce Pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation analyzes and transforms the induction variables (and; // computations derived from them) into forms suitable for efficient execution; // on the target.; //; // This pass performs a strength reduction on array references inside loops that; // have as one or more of their components the loop induction variable, it; // rewrites expressions to take advantage of scaled-index addressing modes; // available on the target, and it performs a variety of other optimizations; // related to loop induction variables.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h:704,Modifiability,variab,variable,704,"//===- LoopStrengthReduce.h - Loop Strength Reduce Pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation analyzes and transforms the induction variables (and; // computations derived from them) into forms suitable for efficient execution; // on the target.; //; // This pass performs a strength reduction on array references inside loops that; // have as one or more of their components the loop induction variable, it; // rewrites expressions to take advantage of scaled-index addressing modes; // available on the target, and it performs a variety of other optimizations; // related to loop induction variables.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h:721,Modifiability,rewrite,rewrites,721,"//===- LoopStrengthReduce.h - Loop Strength Reduce Pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation analyzes and transforms the induction variables (and; // computations derived from them) into forms suitable for efficient execution; // on the target.; //; // This pass performs a strength reduction on array references inside loops that; // have as one or more of their components the loop induction variable, it; // rewrites expressions to take advantage of scaled-index addressing modes; // available on the target, and it performs a variety of other optimizations; // related to loop induction variables.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h:901,Modifiability,variab,variables,901,"//===- LoopStrengthReduce.h - Loop Strength Reduce Pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation analyzes and transforms the induction variables (and; // computations derived from them) into forms suitable for efficient execution; // on the target.; //; // This pass performs a strength reduction on array references inside loops that; // have as one or more of their components the loop induction variable, it; // rewrites expressions to take advantage of scaled-index addressing modes; // available on the target, and it performs a variety of other optimizations; // related to loop induction variables.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h:573,Performance,perform,performs,573,"//===- LoopStrengthReduce.h - Loop Strength Reduce Pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation analyzes and transforms the induction variables (and; // computations derived from them) into forms suitable for efficient execution; // on the target.; //; // This pass performs a strength reduction on array references inside loops that; // have as one or more of their components the loop induction variable, it; // rewrites expressions to take advantage of scaled-index addressing modes; // available on the target, and it performs a variety of other optimizations; // related to loop induction variables.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h:829,Performance,perform,performs,829,"//===- LoopStrengthReduce.h - Loop Strength Reduce Pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation analyzes and transforms the induction variables (and; // computations derived from them) into forms suitable for efficient execution; // on the target.; //; // This pass performs a strength reduction on array references inside loops that; // have as one or more of their components the loop induction variable, it; // rewrites expressions to take advantage of scaled-index addressing modes; // available on the target, and it performs a variety of other optimizations; // related to loop induction variables.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h:857,Performance,optimiz,optimizations,857,"//===- LoopStrengthReduce.h - Loop Strength Reduce Pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation analyzes and transforms the induction variables (and; // computations derived from them) into forms suitable for efficient execution; // on the target.; //; // This pass performs a strength reduction on array references inside loops that; // have as one or more of their components the loop induction variable, it; // rewrites expressions to take advantage of scaled-index addressing modes; // available on the target, and it performs a variety of other optimizations; // related to loop induction variables.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h:27,Energy Efficiency,Reduce,Reduce,27,/// Performs Loop Strength Reduce Pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h:4,Performance,Perform,Performs,4,/// Performs Loop Strength Reduce Pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopStrengthReduce.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollAndJamPass.h:6,Usability,simpl,simple,6,/// A simple loop rotation transformation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollAndJamPass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollAndJamPass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h:59,Performance,perform,performed,59,"/// A set of parameters used to control various transforms performed by the; /// LoopUnroll pass. Each of the boolean parameters can be set to:; /// true - enabling the transformation.; /// false - disabling the transformation.; /// None - relying on a global default.; ///; /// There is also OptLevel parameter, which is used for additional loop unroll; /// tuning.; ///; /// Intended use is to create a default object, modify parameters with; /// additional setters and then pass it to LoopUnrollPass.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h:9,Performance,optimiz,optimization,9,"// Sets ""optimization level"" tuning parameter for loop unrolling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h:107,Security,access,access,107,/// Loop unroll pass that will support both full and partial unrolling.; /// It is a function pass to have access to function and module analyses.; /// It will also put loops into canonical form (simplified and LCSSA).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h:196,Usability,simpl,simplified,196,/// Loop unroll pass that will support both full and partial unrolling.; /// It is a function pass to have access to function and module analyses.; /// It will also put loops into canonical form (simplified and LCSSA).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerConstantIntrinsics.h:424,Performance,optimiz,optimized,424,"/// Run the pass over the function.; ///; /// This will lower all remaining 'objectsize' and 'is.constant'`; /// intrinsic calls in this function, even when the argument has no known; /// size or is not a constant respectively. The resulting constant is; /// propagated and conditional branches are resolved where possible.; /// This complements the Instruction Simplification and; /// Instruction Combination passes of the optimized pass chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerConstantIntrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerConstantIntrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerConstantIntrinsics.h:362,Usability,Simpl,Simplification,362,"/// Run the pass over the function.; ///; /// This will lower all remaining 'objectsize' and 'is.constant'`; /// intrinsic calls in this function, even when the argument has no known; /// size or is not a constant respectively. The resulting constant is; /// propagated and conditional branches are resolved where possible.; /// This complements the Instruction Simplification and; /// Instruction Combination passes of the optimized pass chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerConstantIntrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerConstantIntrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerExpectIntrinsic.h:340,Performance,optimiz,optimizer,340,"/// Run the pass over the function.; ///; /// This will lower all of the expect intrinsic calls in this function into; /// branch weight metadata. That metadata will subsequently feed the analysis; /// of the probabilities and frequencies of the CFG. After running this pass,; /// no more expect intrinsics remain, allowing the rest of the optimizer to; /// ignore them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerExpectIntrinsic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerExpectIntrinsic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerMatrixIntrinsics.h:418,Availability,down,down,418,"//===- LowerMatrixIntrinsics.h - Lower matrix intrinsics. -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass lowers matrix intrinsics down to vector operations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerMatrixIntrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerMatrixIntrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MemCpyOptimizer.h:34,Performance,optimiz,optimization,34,"//===- MemCpyOptimizer.h - memcpy optimization ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs various transformations related to eliminating memcpy; // calls, or transforming sets of stores into memset's.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MemCpyOptimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MemCpyOptimizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MemCpyOptimizer.h:393,Performance,perform,performs,393,"//===- MemCpyOptimizer.h - memcpy optimization ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs various transformations related to eliminating memcpy; // calls, or transforming sets of stores into memset's.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MemCpyOptimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MemCpyOptimizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h:54,Performance,load,load,54,"//===- MergedLoadStoreMotion.h - merge and hoist/sink load/stores ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //! \file; //! This pass performs merges of loads and stores on both sides of a; // diamond (hammock). It hoists the loads and sinks the stores.; //; // The algorithm iteratively hoists two loads to the same address out of a; // diamond (hammock) and merges them into a single load in the header. Similar; // it sinks and merges two stores to the tail block (footer). The algorithm; // iterates over the instructions of one side of the diamond and attempts to; // find a matching load/store on the other side. It hoists / sinks when it; // thinks it safe to do so. This optimization helps with eg. hiding load; // latencies, triggering if-conversion, and reducing static code size.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h:405,Performance,perform,performs,405,"//===- MergedLoadStoreMotion.h - merge and hoist/sink load/stores ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //! \file; //! This pass performs merges of loads and stores on both sides of a; // diamond (hammock). It hoists the loads and sinks the stores.; //; // The algorithm iteratively hoists two loads to the same address out of a; // diamond (hammock) and merges them into a single load in the header. Similar; // it sinks and merges two stores to the tail block (footer). The algorithm; // iterates over the instructions of one side of the diamond and attempts to; // find a matching load/store on the other side. It hoists / sinks when it; // thinks it safe to do so. This optimization helps with eg. hiding load; // latencies, triggering if-conversion, and reducing static code size.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h:424,Performance,load,loads,424,"//===- MergedLoadStoreMotion.h - merge and hoist/sink load/stores ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //! \file; //! This pass performs merges of loads and stores on both sides of a; // diamond (hammock). It hoists the loads and sinks the stores.; //; // The algorithm iteratively hoists two loads to the same address out of a; // diamond (hammock) and merges them into a single load in the header. Similar; // it sinks and merges two stores to the tail block (footer). The algorithm; // iterates over the instructions of one side of the diamond and attempts to; // find a matching load/store on the other side. It hoists / sinks when it; // thinks it safe to do so. This optimization helps with eg. hiding load; // latencies, triggering if-conversion, and reducing static code size.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h:497,Performance,load,loads,497,"//===- MergedLoadStoreMotion.h - merge and hoist/sink load/stores ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //! \file; //! This pass performs merges of loads and stores on both sides of a; // diamond (hammock). It hoists the loads and sinks the stores.; //; // The algorithm iteratively hoists two loads to the same address out of a; // diamond (hammock) and merges them into a single load in the header. Similar; // it sinks and merges two stores to the tail block (footer). The algorithm; // iterates over the instructions of one side of the diamond and attempts to; // find a matching load/store on the other side. It hoists / sinks when it; // thinks it safe to do so. This optimization helps with eg. hiding load; // latencies, triggering if-conversion, and reducing static code size.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h:570,Performance,load,loads,570,"//===- MergedLoadStoreMotion.h - merge and hoist/sink load/stores ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //! \file; //! This pass performs merges of loads and stores on both sides of a; // diamond (hammock). It hoists the loads and sinks the stores.; //; // The algorithm iteratively hoists two loads to the same address out of a; // diamond (hammock) and merges them into a single load in the header. Similar; // it sinks and merges two stores to the tail block (footer). The algorithm; // iterates over the instructions of one side of the diamond and attempts to; // find a matching load/store on the other side. It hoists / sinks when it; // thinks it safe to do so. This optimization helps with eg. hiding load; // latencies, triggering if-conversion, and reducing static code size.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h:657,Performance,load,load,657,"//===- MergedLoadStoreMotion.h - merge and hoist/sink load/stores ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //! \file; //! This pass performs merges of loads and stores on both sides of a; // diamond (hammock). It hoists the loads and sinks the stores.; //; // The algorithm iteratively hoists two loads to the same address out of a; // diamond (hammock) and merges them into a single load in the header. Similar; // it sinks and merges two stores to the tail block (footer). The algorithm; // iterates over the instructions of one side of the diamond and attempts to; // find a matching load/store on the other side. It hoists / sinks when it; // thinks it safe to do so. This optimization helps with eg. hiding load; // latencies, triggering if-conversion, and reducing static code size.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h:860,Performance,load,load,860,"//===- MergedLoadStoreMotion.h - merge and hoist/sink load/stores ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //! \file; //! This pass performs merges of loads and stores on both sides of a; // diamond (hammock). It hoists the loads and sinks the stores.; //; // The algorithm iteratively hoists two loads to the same address out of a; // diamond (hammock) and merges them into a single load in the header. Similar; // it sinks and merges two stores to the tail block (footer). The algorithm; // iterates over the instructions of one side of the diamond and attempts to; // find a matching load/store on the other side. It hoists / sinks when it; // thinks it safe to do so. This optimization helps with eg. hiding load; // latencies, triggering if-conversion, and reducing static code size.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h:950,Performance,optimiz,optimization,950,"//===- MergedLoadStoreMotion.h - merge and hoist/sink load/stores ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //! \file; //! This pass performs merges of loads and stores on both sides of a; // diamond (hammock). It hoists the loads and sinks the stores.; //; // The algorithm iteratively hoists two loads to the same address out of a; // diamond (hammock) and merges them into a single load in the header. Similar; // it sinks and merges two stores to the tail block (footer). The algorithm; // iterates over the instructions of one side of the diamond and attempts to; // find a matching load/store on the other side. It hoists / sinks when it; // thinks it safe to do so. This optimization helps with eg. hiding load; // latencies, triggering if-conversion, and reducing static code size.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h:985,Performance,load,load,985,"//===- MergedLoadStoreMotion.h - merge and hoist/sink load/stores ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //! \file; //! This pass performs merges of loads and stores on both sides of a; // diamond (hammock). It hoists the loads and sinks the stores.; //; // The algorithm iteratively hoists two loads to the same address out of a; // diamond (hammock) and merges them into a single load in the header. Similar; // it sinks and merges two stores to the tail block (footer). The algorithm; // iterates over the instructions of one side of the diamond and attempts to; // find a matching load/store on the other side. It hoists / sinks when it; // thinks it safe to do so. This optimization helps with eg. hiding load; // latencies, triggering if-conversion, and reducing static code size.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h:930,Safety,safe,safe,930,"//===- MergedLoadStoreMotion.h - merge and hoist/sink load/stores ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //! \file; //! This pass performs merges of loads and stores on both sides of a; // diamond (hammock). It hoists the loads and sinks the stores.; //; // The algorithm iteratively hoists two loads to the same address out of a; // diamond (hammock) and merges them into a single load in the header. Similar; // it sinks and merges two stores to the tail block (footer). The algorithm; // iterates over the instructions of one side of the diamond and attempts to; // find a matching load/store on the other side. It hoists / sinks when it; // thinks it safe to do so. This optimization helps with eg. hiding load; // latencies, triggering if-conversion, and reducing static code size.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/MergedLoadStoreMotion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:1523,Energy Efficiency,efficient,efficiently,1523,"// }; //; // An ideal compiler should reassociate (a + 2) + b to (a + b) + 2 and simplify; // the above code to; //; // int t = a + b;; // bar(t);; // bar(t + 2);; //; // However, the Reassociate pass is unable to do that because it processes each; // instruction individually and believes (a + 2) + b is the best form according; // to its rank system.; //; // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites; // ((a + c) + b) + d into ((a + c) + d) + b.; //; // Finally, the above dominator-based algorithm may need to be run multiple; // iterations before emitting optimal code. One source of this need is that we; // only split an operand when it is used only once. The above algorithm can; // eliminate an instruction and decrease the usage count of its operands. As a; // result, an instruction that previously had multiple uses may become a; // single-use instruction and thus eligible for split consideration. For; // example,; //; // ac = a + c; // ab = a + b; // abc = ab + c; // ab2 = ab + b",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:1947,Modifiability,rewrite,rewrites,1947," // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites; // ((a + c) + b) + d into ((a + c) + d) + b.; //; // Finally, the above dominator-based algorithm may need to be run multiple; // iterations before emitting optimal code. One source of this need is that we; // only split an operand when it is used only once. The above algorithm can; // eliminate an instruction and decrease the usage count of its operands. As a; // result, an instruction that previously had multiple uses may become a; // single-use instruction and thus eligible for split consideration. For; // example,; //; // ac = a + c; // ab = a + b; // abc = ab + c; // ab2 = ab + b; // ab2c = ab2 + c; //; // In the first iteration, we cannot reassociate abc to ac+b because ab is used; // twice. However, we can reassociate ab2c to abc+b in the first iteration. As a; // result, ab2 becomes dead and ab will be used only once in the second; // iteration.; //; // Limitations and TODO items:; //; // 1) We only considers n-ary adds and mu",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:1993,Modifiability,rewrite,rewrites,1993," // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites; // ((a + c) + b) + d into ((a + c) + d) + b.; //; // Finally, the above dominator-based algorithm may need to be run multiple; // iterations before emitting optimal code. One source of this need is that we; // only split an operand when it is used only once. The above algorithm can; // eliminate an instruction and decrease the usage count of its operands. As a; // result, an instruction that previously had multiple uses may become a; // single-use instruction and thus eligible for split consideration. For; // example,; //; // ac = a + c; // ab = a + b; // abc = ab + c; // ab2 = ab + b; // ab2c = ab2 + c; //; // In the first iteration, we cannot reassociate abc to ac+b because ab is used; // twice. However, we can reassociate ab2c to abc+b in the first iteration. As a; // result, ab2 becomes dead and ab will be used only once in the second; // iteration.; //; // Limitations and TODO items:; //; // 1) We only considers n-ary adds and mu",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:2978,Modifiability,extend,extended,2978,"eassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites; // ((a + c) + b) + d into ((a + c) + d) + b.; //; // Finally, the above dominator-based algorithm may need to be run multiple; // iterations before emitting optimal code. One source of this need is that we; // only split an operand when it is used only once. The above algorithm can; // eliminate an instruction and decrease the usage count of its operands. As a; // result, an instruction that previously had multiple uses may become a; // single-use instruction and thus eligible for split consideration. For; // example,; //; // ac = a + c; // ab = a + b; // abc = ab + c; // ab2 = ab + b; // ab2c = ab2 + c; //; // In the first iteration, we cannot reassociate abc to ac+b because ab is used; // twice. However, we can reassociate ab2c to abc+b in the first iteration. As a; // result, ab2 becomes dead and ab will be used only once in the second; // iteration.; //; // Limitations and TODO items:; //; // 1) We only considers n-ary adds and muls for now. This should be extended; // and generalized.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:447,Safety,redund,redundancy,447,"//===- NaryReassociate.h - Reassociate n-ary expressions --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass reassociates n-ary add expressions and eliminates the redundancy; // exposed by the reassociation.; //; // A motivating example:; //; // void foo(int a, int b) {; // bar(a + b);; // bar((a + 2) + b);; // }; //; // An ideal compiler should reassociate (a + 2) + b to (a + b) + 2 and simplify; // the above code to; //; // int t = a + b;; // bar(t);; // bar(t + 2);; //; // However, the Reassociate pass is unable to do that because it processes each; // instruction individually and believes (a + 2) + b is the best form according; // to its rank system.; //; // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:1177,Safety,detect,detects,1177,"th LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass reassociates n-ary add expressions and eliminates the redundancy; // exposed by the reassociation.; //; // A motivating example:; //; // void foo(int a, int b) {; // bar(a + b);; // bar((a + 2) + b);; // }; //; // An ideal compiler should reassociate (a + 2) + b to (a + b) + 2 and simplify; // the above code to; //; // int t = a + b;; // bar(t);; // bar(t + 2);; //; // However, the Reassociate pass is unable to do that because it processes each; // instruction individually and believes (a + 2) + b is the best form according; // to its rank system.; //; // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites; // ((a + c) + b) + d into ((a + c) + d) + b.; //; // Finally, the above dominator-based algorithm may need to be run multiple; // iterations befo",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:1496,Safety,redund,redundancy,1496," exposed by the reassociation.; //; // A motivating example:; //; // void foo(int a, int b) {; // bar(a + b);; // bar((a + 2) + b);; // }; //; // An ideal compiler should reassociate (a + 2) + b to (a + b) + 2 and simplify; // the above code to; //; // int t = a + b;; // bar(t);; // bar(t + 2);; //; // However, the Reassociate pass is unable to do that because it processes each; // instruction individually and believes (a + 2) + b is the best form according; // to its rank system.; //; // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites; // ((a + c) + b) + d into ((a + c) + d) + b.; //; // Finally, the above dominator-based algorithm may need to be run multiple; // iterations before emitting optimal code. One source of this need is that we; // only split an operand when it is used only once. The above algorithm can; // eliminate an instruction and decrease the usage count of its operands. As a; // result, an instruction that previously had multiple uses may become a; // single-use instru",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:462,Security,expose,exposed,462,"//===- NaryReassociate.h - Reassociate n-ary expressions --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass reassociates n-ary add expressions and eliminates the redundancy; // exposed by the reassociation.; //; // A motivating example:; //; // void foo(int a, int b) {; // bar(a + b);; // bar((a + 2) + b);; // }; //; // An ideal compiler should reassociate (a + 2) + b to (a + b) + 2 and simplify; // the above code to; //; // int t = a + b;; // bar(t);; // bar(t + 2);; //; // However, the Reassociate pass is unable to do that because it processes each; // instruction individually and believes (a + 2) + b is the best form according; // to its rank system.; //; // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:675,Usability,simpl,simplify,675,"//===- NaryReassociate.h - Reassociate n-ary expressions --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass reassociates n-ary add expressions and eliminates the redundancy; // exposed by the reassociation.; //; // A motivating example:; //; // void foo(int a, int b) {; // bar(a + b);; // bar((a + 2) + b);; // }; //; // An ideal compiler should reassociate (a + 2) + b to (a + b) + 2 and simplify; // the above code to; //; // int t = a + b;; // bar(t);; // bar(t + 2);; //; // However, the Reassociate pass is unable to do that because it processes each; // instruction individually and believes (a + 2) + b is the best form according; // to its rank system.; //; // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:114,Modifiability,rewrite,rewrite,114,"// Given GEP's I-th index = LHS + RHS, see whether &Base[..][LHS][..] or; // &Base[..][RHS][..] can be CSE'ed and rewrite GEP accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:3,Modifiability,Rewrite,Rewrites,3,// Rewrites I to (LHS op RHS) if LHS is computed already.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:37,Modifiability,extend,extends,37,"// GetElementPtrInst implicitly sign-extends an index if the index is shorter; // than the pointer size. This function returns whether Index is shorter than; // GEP's pointer size, i.e., whether Index needs to be sign-extended in order; // to be an index of GEP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:218,Modifiability,extend,extended,218,"// GetElementPtrInst implicitly sign-extends an index if the index is shorter; // than the pointer size. This function returns whether Index is shorter than; // GEP's pointer size, i.e., whether Index needs to be sign-extended in order; // to be an index of GEP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NewGVN.h:418,Integrability,interface,interface,418,"//===- NewGVN.h - Global Value Numbering Pass -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for LLVM's Global Value Numbering pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NewGVN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NewGVN.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:2741,Deployability,Patch,Patches,2741,"he stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any call which may need to; // reach a safepoint during the execution of the callee function.; // - Backedge safepoint polls and entry safepoint polls to ensure that; // executing code reaches a safepoint poll in a finite amount of time.; //; // We do not currently support return statepoints, but adding them would not; // be hard. They are not required for correctness - entry safepoints are an; // alternative - but some GCs may prefer them. Patches welcome.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:946,Integrability,wrap,wrapped,946,"//===- PlaceSafepoints.h - Place GC Safepoints ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Place garbage collection safepoints at appropriate locations in the IR. This; // does not make relocation semantics or variable liveness explicit. That's; // done by RewriteStatepointsForGC.; //; // Terminology:; // - A call is said to be ""parseable"" if there is a stack map generated for the; // return PC of the call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:1133,Integrability,rout,routine,1133,"art of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Place garbage collection safepoints at appropriate locations in the IR. This; // does not make relocation semantics or variable liveness explicit. That's; // done by RewriteStatepointsForGC.; //; // Terminology:; // - A call is said to be ""parseable"" if there is a stack map generated for the; // return PC of the call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:1224,Integrability,rout,routine,1224,"tion.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Place garbage collection safepoints at appropriate locations in the IR. This; // does not make relocation semantics or variable liveness explicit. That's; // done by RewriteStatepointsForGC.; //; // Terminology:; // - A call is said to be ""parseable"" if there is a stack map generated for the; // return PC of the call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:502,Modifiability,variab,variable,502,"//===- PlaceSafepoints.h - Place GC Safepoints ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Place garbage collection safepoints at appropriate locations in the IR. This; // does not make relocation semantics or variable liveness explicit. That's; // done by RewriteStatepointsForGC.; //; // Terminology:; // - A call is said to be ""parseable"" if there is a stack map generated for the; // return PC of the call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:549,Modifiability,Rewrite,RewriteStatepointsForGC,549,"//===- PlaceSafepoints.h - Place GC Safepoints ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Place garbage collection safepoints at appropriate locations in the IR. This; // does not make relocation semantics or variable liveness explicit. That's; // done by RewriteStatepointsForGC.; //; // Terminology:; // - A call is said to be ""parseable"" if there is a stack map generated for the; // return PC of the call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:785,Modifiability,Rewrite,RewriteStatepointsForGC,785,"//===- PlaceSafepoints.h - Place GC Safepoints ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Place garbage collection safepoints at appropriate locations in the IR. This; // does not make relocation semantics or variable liveness explicit. That's; // done by RewriteStatepointsForGC.; //; // Terminology:; // - A call is said to be ""parseable"" if there is a stack map generated for the; // return PC of the call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:1866,Performance,optimiz,optimizer,1866,"he stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any call which may need to; // reach a safepoint during the execution of the callee function.; // - Backedge safepoint polls and entry safepoint polls to ensure that; // executing code reaches a safepoint poll in a finite amount of time.; //; // We do not currently support return statepoints, but adding them would not; // be hard. They are not required for correctness - entry safepoints are an; // alternative - but some GCs may prefer them. Patches welcome.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:1939,Performance,optimiz,optimization,1939,"he stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any call which may need to; // reach a safepoint during the execution of the callee function.; // - Backedge safepoint polls and entry safepoint polls to ensure that; // executing code reaches a safepoint poll in a finite amount of time.; //; // We do not currently support return statepoints, but adding them would not; // be hard. They are not required for correctness - entry safepoints are an; // alternative - but some GCs may prefer them. Patches welcome.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:36,Safety,Safe,Safepoints,36,"//===- PlaceSafepoints.h - Place GC Safepoints ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Place garbage collection safepoints at appropriate locations in the IR. This; // does not make relocation semantics or variable liveness explicit. That's; // done by RewriteStatepointsForGC.; //; // Terminology:; // - A call is said to be ""parseable"" if there is a stack map generated for the; // return PC of the call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:408,Safety,safe,safepoints,408,"//===- PlaceSafepoints.h - Place GC Safepoints ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Place garbage collection safepoints at appropriate locations in the IR. This; // does not make relocation semantics or variable liveness explicit. That's; // done by RewriteStatepointsForGC.; //; // Terminology:; // - A call is said to be ""parseable"" if there is a stack map generated for the; // return PC of the call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:1652,Safety,avoid,avoid,1652,"he call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any call which may need to; // reach a safepoint during the execution of the callee function.; // - Backedge safepoint polls and entry safepoint polls to ensure that; // executing code reaches a safepoint poll in a finite amount of time.; //; // We do not currently support return statepoints, but adding them would not; // be hard. They are not required for correctness - entry safepoints are an; ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:1914,Safety,avoid,avoid,1914,"he stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any call which may need to; // reach a safepoint during the execution of the callee function.; // - Backedge safepoint polls and entry safepoint polls to ensure that; // executing code reaches a safepoint poll in a finite amount of time.; //; // We do not currently support return statepoints, but adding them would not; // be hard. They are not required for correctness - entry safepoints are an; // alternative - but some GCs may prefer them. Patches welcome.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:2279,Safety,safe,safepoints,2279,"he stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any call which may need to; // reach a safepoint during the execution of the callee function.; // - Backedge safepoint polls and entry safepoint polls to ensure that; // executing code reaches a safepoint poll in a finite amount of time.; //; // We do not currently support return statepoints, but adding them would not; // be hard. They are not required for correctness - entry safepoints are an; // alternative - but some GCs may prefer them. Patches welcome.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:2335,Safety,safe,safepoint,2335,"he stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any call which may need to; // reach a safepoint during the execution of the callee function.; // - Backedge safepoint polls and entry safepoint polls to ensure that; // executing code reaches a safepoint poll in a finite amount of time.; //; // We do not currently support return statepoints, but adding them would not; // be hard. They are not required for correctness - entry safepoints are an; // alternative - but some GCs may prefer them. Patches welcome.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:2405,Safety,safe,safepoint,2405,"he stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any call which may need to; // reach a safepoint during the execution of the callee function.; // - Backedge safepoint polls and entry safepoint polls to ensure that; // executing code reaches a safepoint poll in a finite amount of time.; //; // We do not currently support return statepoints, but adding them would not; // be hard. They are not required for correctness - entry safepoints are an; // alternative - but some GCs may prefer them. Patches welcome.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:2431,Safety,safe,safepoint,2431,"he stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any call which may need to; // reach a safepoint during the execution of the callee function.; // - Backedge safepoint polls and entry safepoint polls to ensure that; // executing code reaches a safepoint poll in a finite amount of time.; //; // We do not currently support return statepoints, but adding them would not; // be hard. They are not required for correctness - entry safepoints are an; // alternative - but some GCs may prefer them. Patches welcome.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:2491,Safety,safe,safepoint,2491,"he stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any call which may need to; // reach a safepoint during the execution of the callee function.; // - Backedge safepoint polls and entry safepoint polls to ensure that; // executing code reaches a safepoint poll in a finite amount of time.; //; // We do not currently support return statepoints, but adding them would not; // be hard. They are not required for correctness - entry safepoints are an; // alternative - but some GCs may prefer them. Patches welcome.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:2675,Safety,safe,safepoints,2675,"he stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any call which may need to; // reach a safepoint during the execution of the callee function.; // - Backedge safepoint polls and entry safepoint polls to ensure that; // executing code reaches a safepoint poll in a finite amount of time.; //; // We do not currently support return statepoints, but adding them would not; // be hard. They are not required for correctness - entry safepoints are an; // alternative - but some GCs may prefer them. Patches welcome.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h:1279,Testability,log,logic,1279,"-------------------------------------------------------------------===//; //; // Place garbage collection safepoints at appropriate locations in the IR. This; // does not make relocation semantics or variable liveness explicit. That's; // done by RewriteStatepointsForGC.; //; // Terminology:; // - A call is said to be ""parseable"" if there is a stack map generated for the; // return PC of the call. A runtime can determine where values listed in the; // deopt arguments and (after RewriteStatepointsForGC) gc arguments are located; // on the stack when the code is suspended inside such a call. Every parse; // point is represented by a call wrapped in an gc.statepoint intrinsic.; // - A ""poll"" is an explicit check in the generated code to determine if the; // runtime needs the generated code to cooperate by calling a helper routine; // and thus suspending its execution at a known state. The call to the helper; // routine will be parseable. The (gc & runtime specific) logic of a poll is; // assumed to be provided in a function of the name ""gc.safepoint_poll"".; //; // We aim to insert polls such that running code can quickly be brought to a; // well defined state for inspection by the collector. In the current; // implementation, this is done via the insertion of poll sites at method entry; // and the backedge of most loops. We try to avoid inserting more polls than; // are necessary to ensure a finite period between poll sites. This is not; // because the poll itself is expensive in the generated code; it's not. Polls; // do tend to impact the optimizer itself in negative ways; we'd like to avoid; // perturbing the optimization of the method as much as we can.; //; // We also need to make most call sites parseable. The callee might execute a; // poll (or otherwise be inspected by the GC). If so, the entire stack; // (including the suspended frame of the current method) must be parseable.; //; // This pass will insert:; // - Call parse points (""call safepoints"") for any cal",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/PlaceSafepoints.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/Reg2Mem.h:406,Integrability,interface,interface,406,"//===- Reg2Mem.h - Convert registers to allocas -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the RegToMem Pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/Reg2Mem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/Reg2Mem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h:402,Integrability,interface,interface,402,"//===- RewriteStatepointsForGC.h - ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides interface to ""Rewrite Statepoints for GC"" pass.; //; // This passe rewrites call/invoke instructions so as to make potential; // relocations performed by the garbage collector explicit in the IR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h:7,Modifiability,Rewrite,RewriteStatepointsForGC,7,"//===- RewriteStatepointsForGC.h - ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides interface to ""Rewrite Statepoints for GC"" pass.; //; // This passe rewrites call/invoke instructions so as to make potential; // relocations performed by the garbage collector explicit in the IR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h:416,Modifiability,Rewrite,Rewrite,416,"//===- RewriteStatepointsForGC.h - ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides interface to ""Rewrite Statepoints for GC"" pass.; //; // This passe rewrites call/invoke instructions so as to make potential; // relocations performed by the garbage collector explicit in the IR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h:469,Modifiability,rewrite,rewrites,469,"//===- RewriteStatepointsForGC.h - ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides interface to ""Rewrite Statepoints for GC"" pass.; //; // This passe rewrites call/invoke instructions so as to make potential; // relocations performed by the garbage collector explicit in the IR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h:543,Performance,perform,performed,543,"//===- RewriteStatepointsForGC.h - ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides interface to ""Rewrite Statepoints for GC"" pass.; //; // This passe rewrites call/invoke instructions so as to make potential; // relocations performed by the garbage collector explicit in the IR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/RewriteStatepointsForGC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ScalarizeMaskedMemIntrin.h:58,Availability,mask,masked,58,"//===- ScalarizeMaskedMemIntrin.h - Scalarize unsupported masked mem ----===//; // intrinsics; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass replaces masked memory intrinsics - when unsupported by the target; // - with a chain of basic blocks, that deal with the elements one-by-one if the; // appropriate mask bit is set.; //; //===----------------------------------------------------------------------===//; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ScalarizeMaskedMemIntrin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ScalarizeMaskedMemIntrin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ScalarizeMaskedMemIntrin.h:415,Availability,mask,masked,415,"//===- ScalarizeMaskedMemIntrin.h - Scalarize unsupported masked mem ----===//; // intrinsics; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass replaces masked memory intrinsics - when unsupported by the target; // - with a chain of basic blocks, that deal with the elements one-by-one if the; // appropriate mask bit is set.; //; //===----------------------------------------------------------------------===//; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ScalarizeMaskedMemIntrin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ScalarizeMaskedMemIntrin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ScalarizeMaskedMemIntrin.h:571,Availability,mask,mask,571,"//===- ScalarizeMaskedMemIntrin.h - Scalarize unsupported masked mem ----===//; // intrinsics; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass replaces masked memory intrinsics - when unsupported by the target; // - with a chain of basic blocks, that deal with the elements one-by-one if the; // appropriate mask bit is set.; //; //===----------------------------------------------------------------------===//; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ScalarizeMaskedMemIntrin.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ScalarizeMaskedMemIntrin.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/Scalarizer.h:534,Performance,optimiz,optimization,534,"//===- Scalarizer.h --- Scalarize vector operations -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This pass converts vector operations into scalar operations (or, optionally,; /// operations on smaller vector widths), in order to expose optimization; /// opportunities on the individual scalar operations.; /// It is mainly intended for targets that do not have vector units, but it; /// may also be useful for revectorizing code to different vector widths.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/Scalarizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/Scalarizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/Scalarizer.h:527,Security,expose,expose,527,"//===- Scalarizer.h --- Scalarize vector operations -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This pass converts vector operations into scalar operations (or, optionally,; /// operations on smaller vector widths), in order to expose optimization; /// opportunities on the individual scalar operations.; /// It is mainly intended for targets that do not have vector units, but it; /// may also be useful for revectorizing code to different vector widths.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/Scalarizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/Scalarizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SCCP.h:14,Performance,perform,performs,14,/// This pass performs function-level constant propagation and merging.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SCCP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SCCP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimpleLoopUnswitch.h:7,Usability,Simpl,SimpleLoopUnswitch,7,"//===- SimpleLoopUnswitch.h - Hoist loop-invariant control flow -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimpleLoopUnswitch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimpleLoopUnswitch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimpleLoopUnswitch.h:1160,Usability,simpl,simplified,1160,"that contain branches or switches on loop-; /// invariant conditions to have multiple loops. For example, it turns the left; /// into the right code:; ///; /// for (...) if (lic); /// A for (...); /// if (lic) A; B; C; /// B else; /// C for (...); /// A; C; ///; /// This can increase the size of the code exponentially (doubling it every time; /// a loop is unswitched) so we only unswitch if the resultant code will be; /// smaller than a threshold.; ///; /// This pass expects LICM to be run before it to hoist invariant conditions out; /// of the loop, to make the unswitching opportunity obvious.; ///; /// There is a taxonomy of unswitching that we use to classify different forms; /// of this transformaiton:; ///; /// - Trival unswitching: this is when the condition can be unswitched without; /// cloning any code from inside the loop. A non-trivial unswitch requires; /// code duplication.; ///; /// - Full unswitching: this is when the branch or switch is completely moved; /// from inside the loop to outside the loop. Partial unswitching removes the; /// branch from the clone of the loop but must leave a (somewhat simplified); /// branch in the original loop. While theoretically partial unswitching can; /// be done for switches, the requirements are extreme - we need the loop; /// invariant input to the switch to be sufficient to collapse to a single; /// successor in each clone.; ///; /// This pass always does trivial, full unswitching for both branches and; /// switches. For branches, it also always does trivial, partial unswitching.; ///; /// If enabled (via the constructor's `NonTrivial` parameter), this pass will; /// additionally do non-trivial, full unswitching for branches and switches, and; /// will do non-trivial, partial unswitching for branches.; ///; /// Because partial unswitching of switches is extremely unlikely to be possible; /// in practice and significantly complicates the implementation, this pass does; /// not currently implement that in any mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimpleLoopUnswitch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimpleLoopUnswitch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h:414,Integrability,interface,interface,414,"//===- SimplifyCFG.h - Simplify and canonicalize the CFG --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for the pass responsible for both; /// simplifying and canonicalizing the CFG.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h:7,Usability,Simpl,SimplifyCFG,7,"//===- SimplifyCFG.h - Simplify and canonicalize the CFG --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for the pass responsible for both; /// simplifying and canonicalizing the CFG.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h:23,Usability,Simpl,Simplify,23,"//===- SimplifyCFG.h - Simplify and canonicalize the CFG --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for the pass responsible for both; /// simplifying and canonicalizing the CFG.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h:463,Usability,simpl,simplifying,463,"//===- SimplifyCFG.h - Simplify and canonicalize the CFG --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for the pass responsible for both; /// simplifying and canonicalizing the CFG.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h:273,Integrability,Depend,Depending,273,"/// A pass to simplify and canonicalize the CFG of a function.; ///; /// This pass iteratively simplifies the entire CFG of a function. It may change; /// or remove control flow to put the CFG into a canonical form expected by; /// other passes of the mid-level optimizer. Depending on the specified options,; /// it may further optimize control-flow to create non-canonical forms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h:262,Performance,optimiz,optimizer,262,"/// A pass to simplify and canonicalize the CFG of a function.; ///; /// This pass iteratively simplifies the entire CFG of a function. It may change; /// or remove control flow to put the CFG into a canonical form expected by; /// other passes of the mid-level optimizer. Depending on the specified options,; /// it may further optimize control-flow to create non-canonical forms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h:329,Performance,optimiz,optimize,329,"/// A pass to simplify and canonicalize the CFG of a function.; ///; /// This pass iteratively simplifies the entire CFG of a function. It may change; /// or remove control flow to put the CFG into a canonical form expected by; /// other passes of the mid-level optimizer. Depending on the specified options,; /// it may further optimize control-flow to create non-canonical forms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h:14,Usability,simpl,simplify,14,"/// A pass to simplify and canonicalize the CFG of a function.; ///; /// This pass iteratively simplifies the entire CFG of a function. It may change; /// or remove control flow to put the CFG into a canonical form expected by; /// other passes of the mid-level optimizer. Depending on the specified options,; /// it may further optimize control-flow to create non-canonical forms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h:95,Usability,simpl,simplifies,95,"/// A pass to simplify and canonicalize the CFG of a function.; ///; /// This pass iteratively simplifies the entire CFG of a function. It may change; /// or remove control flow to put the CFG into a canonical form expected by; /// other passes of the mid-level optimizer. Depending on the specified options,; /// it may further optimize control-flow to create non-canonical forms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h:181,Performance,perform,performance,181,"/// The default constructor sets the pass options to create canonical IR,; /// rather than optimal IR. That is, by default we bypass transformations that; /// are likely to improve performance but make analysis for other passes more; /// difficult.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h:35,Performance,optimiz,optimizations,35,/// Construct a pass with optional optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h:2123,Deployability,pipeline,pipeline,2123,"e-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass hoists instructions to enable speculative execution on; // targets where branches are expensive. This is aimed at GPUs. It; // currently works on simple if-then and if-then-else; // patterns.; //; // Removing branches is not the only motivation for this; // pass. E.g. consider this code and assume that there is no; // addressing mode for multiplying by sizeof(*a):; //; // if (b > 0); // c = a[i + 1]; // if (d > 0); // e = a[i + 2]; //; // turns into; //; // p = &a[i + 1];; // if (b > 0); // c = *p;; // q = &a[i + 2];; // if (d > 0); // e = *q;; //; // which could later be optimized to; //; // r = &a[i];; // if (b > 0); // c = r[1];; // if (d > 0); // e = r[2];; //; // Later passes sink back much of the speculated code that did not enable; // further optimization.; //; // This pass is more aggressive than the function SpeculativeyExecuteBB in; // SimplifyCFG. SimplifyCFG will not speculate if no selects are introduced and; // it will speculate at most one instruction. It also will not speculate if; // there is a value defined in the if-block that is only used in the then-block.; // These restrictions make sense since the speculation in SimplifyCFG seems; // aimed at introducing cheap selects, while this pass is intended to do more; // aggressive speculation while counting on later passes to either capitalize on; // that or clean it up.; //; // If the pass was created by calling; // createSpeculativeExecutionIfHasBranchDivergencePass or the; // -spec-exec-only-if-divergent-target option is present, this pass only has an; // effect on targets where TargetTransformInfo::hasBranchDivergence() is true;; // on other targets, it is a nop.; //; // This lets you include this pass unconditionally in the IR pass pipeline, but; // only enable it for relevant targets.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h:972,Performance,optimiz,optimized,972,"//===- SpeculativeExecution.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass hoists instructions to enable speculative execution on; // targets where branches are expensive. This is aimed at GPUs. It; // currently works on simple if-then and if-then-else; // patterns.; //; // Removing branches is not the only motivation for this; // pass. E.g. consider this code and assume that there is no; // addressing mode for multiplying by sizeof(*a):; //; // if (b > 0); // c = a[i + 1]; // if (d > 0); // e = a[i + 2]; //; // turns into; //; // p = &a[i + 1];; // if (b > 0); // c = *p;; // q = &a[i + 2];; // if (d > 0); // e = *q;; //; // which could later be optimized to; //; // r = &a[i];; // if (b > 0); // c = r[1];; // if (d > 0); // e = r[2];; //; // Later passes sink back much of the speculated code that did not enable; // further optimization.; //; // This pass is more aggressive than the function SpeculativeyExecuteBB in; // SimplifyCFG. SimplifyCFG will not speculate if no selects are introduced and; // it will speculate at most one instruction. It also will not speculate if; // there is a value defined in the if-block that is only used in the then-block.; // These restrictions make sense since the speculation in SimplifyCFG seems; // aimed at introducing cheap selects, while this pass is intended to do more; // aggressive speculation while counting on later passes to either capitalize on; // that or clean it up.; //; // If the pass was created by calling; // createSpeculativeExecutionIfHasBranchDivergencePass or the; // -spec-exec-only-if-divergent-target option is present, this pass only has an; // effect on targets where TargetTransformInfo::hasBranchDiverg",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h:1153,Performance,optimiz,optimization,1153,"//===- SpeculativeExecution.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass hoists instructions to enable speculative execution on; // targets where branches are expensive. This is aimed at GPUs. It; // currently works on simple if-then and if-then-else; // patterns.; //; // Removing branches is not the only motivation for this; // pass. E.g. consider this code and assume that there is no; // addressing mode for multiplying by sizeof(*a):; //; // if (b > 0); // c = a[i + 1]; // if (d > 0); // e = a[i + 2]; //; // turns into; //; // p = &a[i + 1];; // if (b > 0); // c = *p;; // q = &a[i + 2];; // if (d > 0); // e = *q;; //; // which could later be optimized to; //; // r = &a[i];; // if (b > 0); // c = r[1];; // if (d > 0); // e = r[2];; //; // Later passes sink back much of the speculated code that did not enable; // further optimization.; //; // This pass is more aggressive than the function SpeculativeyExecuteBB in; // SimplifyCFG. SimplifyCFG will not speculate if no selects are introduced and; // it will speculate at most one instruction. It also will not speculate if; // there is a value defined in the if-block that is only used in the then-block.; // These restrictions make sense since the speculation in SimplifyCFG seems; // aimed at introducing cheap selects, while this pass is intended to do more; // aggressive speculation while counting on later passes to either capitalize on; // that or clean it up.; //; // If the pass was created by calling; // createSpeculativeExecutionIfHasBranchDivergencePass or the; // -spec-exec-only-if-divergent-target option is present, this pass only has an; // effect on targets where TargetTransformInfo::hasBranchDiverg",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h:539,Usability,simpl,simple,539,"//===- SpeculativeExecution.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass hoists instructions to enable speculative execution on; // targets where branches are expensive. This is aimed at GPUs. It; // currently works on simple if-then and if-then-else; // patterns.; //; // Removing branches is not the only motivation for this; // pass. E.g. consider this code and assume that there is no; // addressing mode for multiplying by sizeof(*a):; //; // if (b > 0); // c = a[i + 1]; // if (d > 0); // e = a[i + 2]; //; // turns into; //; // p = &a[i + 1];; // if (b > 0); // c = *p;; // q = &a[i + 2];; // if (d > 0); // e = *q;; //; // which could later be optimized to; //; // r = &a[i];; // if (b > 0); // c = r[1];; // if (d > 0); // e = r[2];; //; // Later passes sink back much of the speculated code that did not enable; // further optimization.; //; // This pass is more aggressive than the function SpeculativeyExecuteBB in; // SimplifyCFG. SimplifyCFG will not speculate if no selects are introduced and; // it will speculate at most one instruction. It also will not speculate if; // there is a value defined in the if-block that is only used in the then-block.; // These restrictions make sense since the speculation in SimplifyCFG seems; // aimed at introducing cheap selects, while this pass is intended to do more; // aggressive speculation while counting on later passes to either capitalize on; // that or clean it up.; //; // If the pass was created by calling; // createSpeculativeExecutionIfHasBranchDivergencePass or the; // -spec-exec-only-if-divergent-target option is present, this pass only has an; // effect on targets where TargetTransformInfo::hasBranchDiverg",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h:1251,Usability,Simpl,SimplifyCFG,1251,"e information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass hoists instructions to enable speculative execution on; // targets where branches are expensive. This is aimed at GPUs. It; // currently works on simple if-then and if-then-else; // patterns.; //; // Removing branches is not the only motivation for this; // pass. E.g. consider this code and assume that there is no; // addressing mode for multiplying by sizeof(*a):; //; // if (b > 0); // c = a[i + 1]; // if (d > 0); // e = a[i + 2]; //; // turns into; //; // p = &a[i + 1];; // if (b > 0); // c = *p;; // q = &a[i + 2];; // if (d > 0); // e = *q;; //; // which could later be optimized to; //; // r = &a[i];; // if (b > 0); // c = r[1];; // if (d > 0); // e = r[2];; //; // Later passes sink back much of the speculated code that did not enable; // further optimization.; //; // This pass is more aggressive than the function SpeculativeyExecuteBB in; // SimplifyCFG. SimplifyCFG will not speculate if no selects are introduced and; // it will speculate at most one instruction. It also will not speculate if; // there is a value defined in the if-block that is only used in the then-block.; // These restrictions make sense since the speculation in SimplifyCFG seems; // aimed at introducing cheap selects, while this pass is intended to do more; // aggressive speculation while counting on later passes to either capitalize on; // that or clean it up.; //; // If the pass was created by calling; // createSpeculativeExecutionIfHasBranchDivergencePass or the; // -spec-exec-only-if-divergent-target option is present, this pass only has an; // effect on targets where TargetTransformInfo::hasBranchDivergence() is true;; // on other targets, it is a nop.; //; // This lets you include this pass unconditionally in the IR pass pipeline, but; // only enable it for relevant targets.; //; //===---------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h:1264,Usability,Simpl,SimplifyCFG,1264,"e-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass hoists instructions to enable speculative execution on; // targets where branches are expensive. This is aimed at GPUs. It; // currently works on simple if-then and if-then-else; // patterns.; //; // Removing branches is not the only motivation for this; // pass. E.g. consider this code and assume that there is no; // addressing mode for multiplying by sizeof(*a):; //; // if (b > 0); // c = a[i + 1]; // if (d > 0); // e = a[i + 2]; //; // turns into; //; // p = &a[i + 1];; // if (b > 0); // c = *p;; // q = &a[i + 2];; // if (d > 0); // e = *q;; //; // which could later be optimized to; //; // r = &a[i];; // if (b > 0); // c = r[1];; // if (d > 0); // e = r[2];; //; // Later passes sink back much of the speculated code that did not enable; // further optimization.; //; // This pass is more aggressive than the function SpeculativeyExecuteBB in; // SimplifyCFG. SimplifyCFG will not speculate if no selects are introduced and; // it will speculate at most one instruction. It also will not speculate if; // there is a value defined in the if-block that is only used in the then-block.; // These restrictions make sense since the speculation in SimplifyCFG seems; // aimed at introducing cheap selects, while this pass is intended to do more; // aggressive speculation while counting on later passes to either capitalize on; // that or clean it up.; //; // If the pass was created by calling; // createSpeculativeExecutionIfHasBranchDivergencePass or the; // -spec-exec-only-if-divergent-target option is present, this pass only has an; // effect on targets where TargetTransformInfo::hasBranchDivergence() is true;; // on other targets, it is a nop.; //; // This lets you include this pass unconditionally in the IR pass pipeline, but; // only enable it for relevant targets.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h:1546,Usability,Simpl,SimplifyCFG,1546,"e-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass hoists instructions to enable speculative execution on; // targets where branches are expensive. This is aimed at GPUs. It; // currently works on simple if-then and if-then-else; // patterns.; //; // Removing branches is not the only motivation for this; // pass. E.g. consider this code and assume that there is no; // addressing mode for multiplying by sizeof(*a):; //; // if (b > 0); // c = a[i + 1]; // if (d > 0); // e = a[i + 2]; //; // turns into; //; // p = &a[i + 1];; // if (b > 0); // c = *p;; // q = &a[i + 2];; // if (d > 0); // e = *q;; //; // which could later be optimized to; //; // r = &a[i];; // if (b > 0); // c = r[1];; // if (d > 0); // e = r[2];; //; // Later passes sink back much of the speculated code that did not enable; // further optimization.; //; // This pass is more aggressive than the function SpeculativeyExecuteBB in; // SimplifyCFG. SimplifyCFG will not speculate if no selects are introduced and; // it will speculate at most one instruction. It also will not speculate if; // there is a value defined in the if-block that is only used in the then-block.; // These restrictions make sense since the speculation in SimplifyCFG seems; // aimed at introducing cheap selects, while this pass is intended to do more; // aggressive speculation while counting on later passes to either capitalize on; // that or clean it up.; //; // If the pass was created by calling; // createSpeculativeExecutionIfHasBranchDivergencePass or the; // -spec-exec-only-if-divergent-target option is present, this pass only has an; // effect on targets where TargetTransformInfo::hasBranchDivergence() is true;; // on other targets, it is a nop.; //; // This lets you include this pass unconditionally in the IR pass pipeline, but; // only enable it for relevant targets.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SROA.h:414,Integrability,interface,interface,414,"//===- SROA.h - Scalar Replacement Of Aggregates ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for LLVM's Scalar Replacement of; /// Aggregates pass. This pass provides both aggregate splitting and the; /// primary SSA formation used in the compiler.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SROA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SROA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SROA.h:107,Deployability,update,update,107,"/// If \p PreserveCFG is set, then the pass is not allowed to modify CFG; /// in any way, even if it would update CFG analyses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SROA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SROA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:1098,Energy Efficiency,efficient,efficient,1098,"//===---- TailRecursionElimination.h ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file transforms calls of the current function (self recursion) followed; // by a return instruction with a branch to the entry of the function, creating; // a loop. This pass also implements the following extensions to the basic; // algorithm:; //; // 1. Trivial instructions between the call and return do not prevent the; // transformation from taking place, though currently the analysis cannot; // support moving any really useful instructions (only dead ones).; // 2. This pass transforms functions that are prevented from being tail; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry bloc",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:1012,Modifiability,variab,variable,1012,"//===---- TailRecursionElimination.h ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file transforms calls of the current function (self recursion) followed; // by a return instruction with a branch to the entry of the function, creating; // a loop. This pass also implements the following extensions to the basic; // algorithm:; //; // 1. Trivial instructions between the call and return do not prevent the; // transformation from taking place, though currently the analysis cannot; // support moving any really useful instructions (only dead ones).; // 2. This pass transforms functions that are prevented from being tail; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry bloc",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:1128,Performance,perform,performed,1128,"e information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file transforms calls of the current function (self recursion) followed; // by a return instruction with a branch to the entry of the function, creating; // a loop. This pass also implements the following extensions to the basic; // algorithm:; //; // 1. Trivial instructions between the call and return do not prevent the; // transformation from taking place, though currently the analysis cannot; // support moving any really useful instructions (only dead ones).; // 2. This pass transforms functions that are prevented from being tail; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry block requires analysis to proves that the tail-called; // function does not read or write the stack object.; // 2. Tail recursion is only performed if the call immediately precedes the; // return instruction. It's pos",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:2136,Performance,perform,performed,2136,"; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry block requires analysis to proves that the tail-called; // function does not read or write the stack object.; // 2. Tail recursion is only performed if the call immediately precedes the; // return instruction. It's possible that there could be a jump between; // the call and the return.; // 3. There can be intervening operations between the call and the return that; // prevent the TRE from occurring. For example, there could be GEP's and; // stores to memory that will not be read or written by the call. This; // requires some substantial analysis (such as with DSA) to prove safe to; // move ahead of the call, but doing so could allow many more TREs to be; // performed, for example in TreeAdd/TreeAlloc from the treeadd benchmark.; // 4. The algorithm we use to detect if callees access their caller stack; // frames is very primitive.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:2664,Performance,perform,performed,2664,"; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry block requires analysis to proves that the tail-called; // function does not read or write the stack object.; // 2. Tail recursion is only performed if the call immediately precedes the; // return instruction. It's possible that there could be a jump between; // the call and the return.; // 3. There can be intervening operations between the call and the return that; // prevent the TRE from occurring. For example, there could be GEP's and; // stores to memory that will not be read or written by the call. This; // requires some substantial analysis (such as with DSA) to prove safe to; // move ahead of the call, but doing so could allow many more TREs to be; // performed, for example in TreeAdd/TreeAlloc from the treeadd benchmark.; // 4. The algorithm we use to detect if callees access their caller stack; // frames is very primitive.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:1957,Safety,Safe,Safely,1957,"; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry block requires analysis to proves that the tail-called; // function does not read or write the stack object.; // 2. Tail recursion is only performed if the call immediately precedes the; // return instruction. It's possible that there could be a jump between; // the call and the return.; // 3. There can be intervening operations between the call and the return that; // prevent the TRE from occurring. For example, there could be GEP's and; // stores to memory that will not be read or written by the call. This; // requires some substantial analysis (such as with DSA) to prove safe to; // move ahead of the call, but doing so could allow many more TREs to be; // performed, for example in TreeAdd/TreeAlloc from the treeadd benchmark.; // 4. The algorithm we use to detect if callees access their caller stack; // frames is very primitive.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:2578,Safety,safe,safe,2578,"; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry block requires analysis to proves that the tail-called; // function does not read or write the stack object.; // 2. Tail recursion is only performed if the call immediately precedes the; // return instruction. It's possible that there could be a jump between; // the call and the return.; // 3. There can be intervening operations between the call and the return that; // prevent the TRE from occurring. For example, there could be GEP's and; // stores to memory that will not be read or written by the call. This; // requires some substantial analysis (such as with DSA) to prove safe to; // move ahead of the call, but doing so could allow many more TREs to be; // performed, for example in TreeAdd/TreeAlloc from the treeadd benchmark.; // 4. The algorithm we use to detect if callees access their caller stack; // frames is very primitive.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:2767,Safety,detect,detect,2767,"; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry block requires analysis to proves that the tail-called; // function does not read or write the stack object.; // 2. Tail recursion is only performed if the call immediately precedes the; // return instruction. It's possible that there could be a jump between; // the call and the return.; // 3. There can be intervening operations between the call and the return that; // prevent the TRE from occurring. For example, there could be GEP's and; // stores to memory that will not be read or written by the call. This; // requires some substantial analysis (such as with DSA) to prove safe to; // move ahead of the call, but doing so could allow many more TREs to be; // performed, for example in TreeAdd/TreeAlloc from the treeadd benchmark.; // 4. The algorithm we use to detect if callees access their caller stack; // frames is very primitive.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:1574,Security,access,access,1574,"c; // algorithm:; //; // 1. Trivial instructions between the call and return do not prevent the; // transformation from taking place, though currently the analysis cannot; // support moving any really useful instructions (only dead ones).; // 2. This pass transforms functions that are prevented from being tail; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry block requires analysis to proves that the tail-called; // function does not read or write the stack object.; // 2. Tail recursion is only performed if the call immediately precedes the; // return instruction. It's possible that there could be a jump between; // the call and the return.; // 3. There can be intervening operations between the call and the return that; // prevent the TRE from occurring. For example, there could be GEP's and; // stores to memory that will not be read or written by the call. This; // requires some substantial analysis (such as with DSA) to prove safe to; // move ahead of the call, b",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:2785,Security,access,access,2785,"; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry block requires analysis to proves that the tail-called; // function does not read or write the stack object.; // 2. Tail recursion is only performed if the call immediately precedes the; // return instruction. It's possible that there could be a jump between; // the call and the return.; // 3. There can be intervening operations between the call and the return that; // prevent the TRE from occurring. For example, there could be GEP's and; // stores to memory that will not be read or written by the call. This; // requires some substantial analysis (such as with DSA) to prove safe to; // move ahead of the call, but doing so could allow many more TREs to be; // performed, for example in TreeAdd/TreeAlloc from the treeadd benchmark.; // 4. The algorithm we use to detect if callees access their caller stack; // frames is very primitive.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h:2725,Testability,benchmark,benchmark,2725,"; // recursive by an associative and commutative expression to use an; // accumulator variable, thus compiling the typical naive factorial or; // 'fib' implementation into efficient code.; // 3. TRE is performed if the function returns void, if the return; // returns the result returned by the call, or if the function returns a; // run-time constant on all exits from the function. It is possible, though; // unlikely, that the return returns something else (like constant 0), and; // can still be TRE'd. It can be TRE'd if ALL OTHER return instructions in; // the function return the exact same value.; // 4. If it can prove that callees do not access their caller stack frame,; // they are marked as eligible for tail call elimination (by the code; // generator).; //; // There are several improvements that could be made:; //; // 1. If the function has any alloca instructions, these instructions will be; // moved out of the entry block of the function, causing them to be; // evaluated each time through the tail recursion. Safely keeping allocas; // in the entry block requires analysis to proves that the tail-called; // function does not read or write the stack object.; // 2. Tail recursion is only performed if the call immediately precedes the; // return instruction. It's possible that there could be a jump between; // the call and the return.; // 3. There can be intervening operations between the call and the return that; // prevent the TRE from occurring. For example, there could be GEP's and; // stores to memory that will not be read or written by the call. This; // requires some substantial analysis (such as with DSA) to prove safe to; // move ahead of the call, but doing so could allow many more TREs to be; // performed, for example in TreeAdd/TreeAlloc from the treeadd benchmark.; // 4. The algorithm we use to detect if callees access their caller stack; // frames is very primitive.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TailRecursionElimination.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:39,Availability,Redundant,Redundant,39,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:415,Availability,Redundant,Redundant,415,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:631,Availability,Redundant,Redundant,631,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:1166,Availability,Redundant,Redundant,1166,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:53,Performance,Load,Loads,53,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:429,Performance,Load,Loads,429,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:645,Performance,Load,Loads,645,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:1180,Performance,Load,Loads,1180,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:1200,Performance,perform,performance,1200,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:39,Safety,Redund,Redundant,39,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:415,Safety,Redund,Redundant,415,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:631,Safety,Redund,Redundant,631,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:1166,Safety,Redund,Redundant,1166,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:1462,Testability,test,testl,1462,"//==- TLSVariableHoist.h ------ Remove Redundant TLS Loads -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies/eliminates Redundant TLS Loads if related option is set.; // For example:; // static __thread int x;; // int g();; // int f(int c) {; // int *px = &x;; // while (c--); // *px += g();; // return *px;; // }; //; // will generate Redundant TLS Loads by compiling it with; // clang++ -fPIC -ftls-model=global-dynamic -O2 -S; //; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // movl %eax, %ebp; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // addl _ZL1x@DTPOFF(%rax), %ebp; // movl %ebp, _ZL1x@DTPOFF(%rax); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; // .LBB0_4: # %entry.while.end_crit_edge; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // movl _ZL1x@DTPOFF(%rax), %ebp; //; // The Redundant TLS Loads will hurt the performance, especially in loops.; // So we try to eliminate/move them if required by customers, let it be:; //; // # %bb.0: # %entry; // ...; // movl %edi, %ebx; // leaq _ZL1x@TLSLD(%rip), %rdi; // callq __tls_get_addr@PLT; // leaq _ZL1x@DTPOFF(%rax), %r14; // testl %ebx, %ebx; // je .LBB0_1; // .LBB0_2: # %while.body; // # =>This Inner Loop Header: Depth=1; // callq _Z1gv@PLT; // addl (%r14), %eax; // movl %eax, (%r14); // addl $-1, %ebx; // jne .LBB0_2; // jmp .LBB0_3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:37,Modifiability,variab,variable,37,/// Keeps track of the user of a TLS variable and the operand index; /// where the variable is used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:83,Modifiability,variab,variable,83,/// Keeps track of the user of a TLS variable and the operand index; /// where the variable is used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:25,Modifiability,variab,variable,25,/// Keeps track of a TLS variable candidate and its users.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:37,Deployability,update,update,37,/// Add the user to the use list and update the cost.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:23,Modifiability,variab,variable,23,/// Keeps track of TLS variable candidates found in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/WarnMissedTransforms.h:442,Performance,perform,performed,442,"//===- WarnMissedTransforms.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Emit warnings if forced code transformations have not been performed.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/WarnMissedTransforms.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/WarnMissedTransforms.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:15,Modifiability,variab,variable,15,// Name of the variable that will be displayed by asan; // if a stack-related bug is reported.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:15,Modifiability,variab,variable,15,// Size of the variable in bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:30,Energy Efficiency,power,power,30,// Alignment of the variable (power of 2).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:20,Modifiability,variab,variable,20,// Alignment of the variable (power of 2).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:22,Modifiability,variab,variables,22,// The array of stack variables. The elements may get reordered and changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:85,Energy Efficiency,power,power,85,"// The minimal size of the left-most redzone (header).; // At least 4 pointer sizes, power of 2, and >= Granularity.; // The resulting FrameSize should be multiple of MinHeaderSize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:118,Modifiability,variab,variables,118,// Returns shadow bytes with marked red zones. This shadow represents the state; // if the stack frame when all local variables are inside of the own scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:134,Modifiability,variab,variables,134,// Returns shadow bytes with marked red zones and after scope. This shadow; // represents the state if the stack frame when all local variables are outside; // of the own scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:22,Modifiability,variab,variables,22,// The array of stack variables. The elements may get reordered and changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h:464,Performance,perform,performing,464,"//===- AssumeBundleBuilder.h - utils to build assume bundles ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contain tools to preserve informations. They should be used before; // performing a transformation that may move and delete instructions as those; // transformation may destroy or worsen information that can be derived from the; // IR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h:247,Availability,avail,available,247,/// Calls BuildAssumeFromInst and if the resulting llvm.assume is valid insert; /// if before I. This is usually what need to be done to salvage the knowledge; /// contained in the instruction I.; /// The AssumptionCache must be provided if it is available or the cache may; /// become silently be invalid.; /// The DominatorTree can optionally be provided to enable cross-block; /// reasoning.; /// This returns if a change was made.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h:264,Performance,cache,cache,264,/// Calls BuildAssumeFromInst and if the resulting llvm.assume is valid insert; /// if before I. This is usually what need to be done to salvage the knowledge; /// contained in the instruction I.; /// The AssumptionCache must be provided if it is available or the cache may; /// become silently be invalid.; /// The DominatorTree can optionally be provided to enable cross-block; /// reasoning.; /// This returns if a change was made.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h:115,Availability,redundant,redundant,115,/// Build and return a new assume created from the provided knowledge; /// if the knowledge in the assume is fully redundant this will return nullptr,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h:115,Safety,redund,redundant,115,/// Build and return a new assume created from the provided knowledge; /// if the knowledge in the assume is fully redundant this will return nullptr,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h:111,Testability,test,testing,111,/// This pass will try to build an llvm.assume for every instruction in the; /// function. Its main purpose is testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/AssumeBundleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:408,Performance,perform,perform,408,"//===- Transform/Utils/BasicBlockUtils.h - BasicBlock Utils -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This family of functions perform manipulations on basic blocks, and; // instructions contained within basic blocks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:94,Deployability,Update,Updates,94,"/// Replace contents of every block in \p BBs with single unreachable; /// instruction. If \p Updates is specified, collect all necessary DT updates; /// into this vector. If \p KeepOneInputPHIs is true, one-input Phis in; /// successors of blocks being deleted will be preserved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:141,Deployability,update,updates,141,"/// Replace contents of every block in \p BBs with single unreachable; /// instruction. If \p Updates is specified, collect all necessary DT updates; /// into this vector. If \p KeepOneInputPHIs is true, one-input Phis in; /// successors of blocks being deleted will be preserved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:258,Deployability,update,updates,258,"/// Delete the specified blocks from \p BB. The set of deleted blocks must have; /// no predecessors that are not being deleted themselves. \p BBs must have no; /// duplicating blocks. If there are loops among this set of blocks, all; /// relevant loop info updates should be done before this function is called.; /// If \p KeepOneInputPHIs is true, one-input Phis in successors of blocks; /// being deleted will be preserved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:108,Availability,failure,failure,108,"/// Attempts to merge a block into its predecessor, if possible. The return; /// value indicates success or failure.; /// By default do not merge blocks if BB's predecessor has multiple successors.; /// If PredecessorWithTwoSuccessors = true, the blocks can only be merged; /// if BB's Pred has a branch to BB and to AnotherBB, and BB has a single; /// successor Sing. In this case the branch will be updated with Sing instead of; /// BB, and BB will still be merged into its predecessor and removed.; /// If \p DT is not nullptr, update it directly; in that case, DTU must be; /// nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:401,Deployability,update,updated,401,"/// Attempts to merge a block into its predecessor, if possible. The return; /// value indicates success or failure.; /// By default do not merge blocks if BB's predecessor has multiple successors.; /// If PredecessorWithTwoSuccessors = true, the blocks can only be merged; /// if BB's Pred has a branch to BB and to AnotherBB, and BB has a single; /// successor Sing. In this case the branch will be updated with Sing instead of; /// BB, and BB will still be merged into its predecessor and removed.; /// If \p DT is not nullptr, update it directly; in that case, DTU must be; /// nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:531,Deployability,update,update,531,"/// Attempts to merge a block into its predecessor, if possible. The return; /// value indicates success or failure.; /// By default do not merge blocks if BB's predecessor has multiple successors.; /// If PredecessorWithTwoSuccessors = true, the blocks can only be merged; /// if BB's Pred has a branch to BB and to AnotherBB, and BB has a single; /// successor Sing. In this case the branch will be updated with Sing instead of; /// BB, and BB will still be merged into its predecessor and removed.; /// If \p DT is not nullptr, update it directly; in that case, DTU must be; /// nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:18,Availability,redundant,redundant,18,/// Try to remove redundant dbg.value instructions from given basic block.; /// Returns true if at least one instruction was removed. Remove redundant; /// pseudo ops when RemovePseudoOp is true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:141,Availability,redundant,redundant,141,/// Try to remove redundant dbg.value instructions from given basic block.; /// Returns true if at least one instruction was removed. Remove redundant; /// pseudo ops when RemovePseudoOp is true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:18,Safety,redund,redundant,18,/// Try to remove redundant dbg.value instructions from given basic block.; /// Returns true if at least one instruction was removed. Remove redundant; /// pseudo ops when RemovePseudoOp is true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:141,Safety,redund,redundant,141,/// Try to remove redundant dbg.value instructions from given basic block.; /// Returns true if at least one instruction was removed. Remove redundant; /// pseudo ops when RemovePseudoOp is true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:205,Deployability,update,updated,205,"/// Replace the instruction specified by BI with the instruction specified by I.; /// Copies DebugLoc from BI to I, if I doesn't already have a DebugLoc. The; /// original instruction is deleted and BI is updated to point to the new; /// instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:80,Integrability,interface,interface,80,/// Option class for critical edge splitting.; ///; /// This provides a builder interface for overriding the default options used; /// during critical edge splitting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:53,Usability,simpl,simplify,53,"/// SplitCriticalEdge is guaranteed to preserve loop-simplify form if LI is; /// provided. If it cannot be preserved, no splitting will take place. If it; /// is not set, preserve loop-simplify form if possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:185,Usability,simpl,simplify,185,"/// SplitCriticalEdge is guaranteed to preserve loop-simplify form if LI is; /// provided. If it cannot be preserved, no splitting will take place. If it; /// is not set, preserve loop-simplify form if possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:98,Deployability,update,update,98,"/// If this edge is a critical edge, insert a new node to split the critical; /// edge. This will update the analyses passed in through the option struct.; /// This returns the new block if the edge was split, null otherwise.; ///; /// If MergeIdenticalEdges in the options struct is true (not the default),; /// *all* edges from TI to the specified successor will be merged into the same; /// critical edge block. This is most commonly interesting with switch; /// instructions, which may have many edges to any one destination. This; /// ensures that all edges to that dest go to one block instead of each going; /// to a different block, but isn't the standard definition of a ""critical; /// edge"".; ///; /// It is invalid to call this function on a critical edge that starts at an; /// IndirectBrInst. Splitting these edges will almost always create an invalid; /// program because the address of the new block won't be the one that is jumped; /// to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:180,Deployability,update,updates,180,"/// If an edge from Src to Dst is critical, split the edge and return true,; /// otherwise return false. This method requires that there be an edge between; /// the two blocks. It updates the analyses passed in the options struct",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:564,Deployability,update,updates,564,"/// This method introduces at least one new basic block into the function and; /// moves some of the predecessors of BB to be predecessors of the new block.; /// The new predecessors are indicated by the Preds array. The new block is; /// given a suffix of 'Suffix'. Returns new basic block to which predecessors; /// from Preds are now pointing.; ///; /// If BB is a landingpad block then additional basicblock might be introduced.; /// It will have Suffix+"".split_lp"". See SplitLandingPadPredecessors for more; /// details on this case.; ///; /// This currently updates the LLVM IR, DominatorTree, LoopInfo, and LCCSA but; /// no other analyses. In particular, it does not preserve LoopSimplify; /// (because it's complicated to handle the case where one of the edges being; /// split is an exit of a loop with other exits).; ///; /// FIXME: deprecated, switch to the DomTreeUpdater-based one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:564,Deployability,update,updates,564,"/// This method introduces at least one new basic block into the function and; /// moves some of the predecessors of BB to be predecessors of the new block.; /// The new predecessors are indicated by the Preds array. The new block is; /// given a suffix of 'Suffix'. Returns new basic block to which predecessors; /// from Preds are now pointing.; ///; /// If BB is a landingpad block then additional basicblock might be introduced.; /// It will have Suffix+"".split_lp"". See SplitLandingPadPredecessors for more; /// details on this case.; ///; /// This currently updates the LLVM IR, DominatorTree, LoopInfo, and LCCSA but; /// no other analyses. In particular, it does not preserve LoopSimplify; /// (because it's complicated to handle the case where one of the edges being; /// split is an exit of a loop with other exits).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:471,Deployability,update,updates,471,"/// This method transforms the landing pad, OrigBB, by introducing two new basic; /// blocks into the function. One of those new basic blocks gets the; /// predecessors listed in Preds. The other basic block gets the remaining; /// predecessors of OrigBB. The landingpad instruction OrigBB is clone into both; /// of the new basic blocks. The new blocks are given the suffixes 'Suffix1' and; /// 'Suffix2', and are returned in the NewBBs vector.; ///; /// This currently updates the LLVM IR, DominatorTree, LoopInfo, and LCCSA but; /// no other analyses. In particular, it does not preserve LoopSimplify; /// (because it's complicated to handle the case where one of the edges being; /// split is an exit of a loop with other exits).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:687,Deployability,Update,Updates,687,"/// Split the containing block at the specified instruction - everything before; /// SplitBefore stays in the old basic block, and the rest of the instructions; /// in the BB are moved to a new block. The two blocks are connected by a; /// conditional branch (with value of Cmp being the condition).; /// Before:; /// Head; /// SplitBefore; /// Tail; /// After:; /// Head; /// if (Cond); /// ThenBlock; /// SplitBefore; /// Tail; ///; /// If \p ThenBlock is not specified, a new block will be created for it.; /// If \p Unreachable is true, the newly created block will end with; /// UnreachableInst, otherwise it branches to Tail.; /// Returns the NewBasicBlock's terminator.; ///; /// Updates DTU and LI if given.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:276,Deployability,Update,Updates,276,"/// SplitBlockAndInsertIfThenElse is similar to SplitBlockAndInsertIfThen,; /// but also creates the ElseBlock.; /// Before:; /// Head; /// SplitBefore; /// Tail; /// After:; /// Head; /// if (Cond); /// ThenBlock; /// else; /// ElseBlock; /// SplitBefore; /// Tail; ///; /// Updates DT if given.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:1125,Deployability,Update,Updates,1125,"/// Split the containing block at the specified instruction - everything before; /// SplitBefore stays in the old basic block, and the rest of the instructions; /// in the BB are moved to a new block. The two blocks are connected by a; /// conditional branch (with value of Cmp being the condition).; /// Before:; /// Head; /// SplitBefore; /// Tail; /// After:; /// Head; /// if (Cond); /// TrueBlock; /// else; //// FalseBlock; /// SplitBefore; /// Tail; ///; /// If \p ThenBlock is null, the resulting CFG won't contain the TrueBlock. If; /// \p ThenBlock is non-null and points to non-null BasicBlock pointer, that; /// block will be inserted as the TrueBlock. Otherwise a new block will be; /// created. Likewise for the \p ElseBlock parameter.; /// If \p UnreachableThen or \p UnreachableElse is true, the corresponding newly; /// created blocks will end with UnreachableInst, otherwise with branches to; /// Tail. The function will not modify existing basic blocks passed to it. The; /// caller must ensure that Tail is reachable from Head.; /// Returns the newly created blocks in \p ThenBlock and \p ElseBlock.; /// Updates DTU and LI if given.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:254,Modifiability,variab,variable,254,"/// Insert a for (int i = 0; i < End; i++) loop structure (with the exception; /// that \p End is assumed > 0, and thus not checked on entry) at \p; /// SplitBefore. Returns the first insert point in the loop body, and the; /// PHINode for the induction variable (i.e. ""i"" above).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:267,Integrability,contract,contract,267,"/// Utility function for performing a given action on each lane of a vector; /// with \p EC elements. To simplify porting legacy code, this defaults to; /// unrolling the implied loop for non-scalable element counts, but this is; /// not considered to be part of the contract of this routine, and is; /// expected to change in the future. The callback takes as arguments an; /// IRBuilder whose insert point is correctly set for instantiating the; /// given index, and a value which is (at runtime) the index to access.; /// This index *may* be a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:284,Integrability,rout,routine,284,"/// Utility function for performing a given action on each lane of a vector; /// with \p EC elements. To simplify porting legacy code, this defaults to; /// unrolling the implied loop for non-scalable element counts, but this is; /// not considered to be part of the contract of this routine, and is; /// expected to change in the future. The callback takes as arguments an; /// IRBuilder whose insert point is correctly set for instantiating the; /// given index, and a value which is (at runtime) the index to access.; /// This index *may* be a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:25,Performance,perform,performing,25,"/// Utility function for performing a given action on each lane of a vector; /// with \p EC elements. To simplify porting legacy code, this defaults to; /// unrolling the implied loop for non-scalable element counts, but this is; /// not considered to be part of the contract of this routine, and is; /// expected to change in the future. The callback takes as arguments an; /// IRBuilder whose insert point is correctly set for instantiating the; /// given index, and a value which is (at runtime) the index to access.; /// This index *may* be a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:192,Performance,scalab,scalable,192,"/// Utility function for performing a given action on each lane of a vector; /// with \p EC elements. To simplify porting legacy code, this defaults to; /// unrolling the implied loop for non-scalable element counts, but this is; /// not considered to be part of the contract of this routine, and is; /// expected to change in the future. The callback takes as arguments an; /// IRBuilder whose insert point is correctly set for instantiating the; /// given index, and a value which is (at runtime) the index to access.; /// This index *may* be a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:512,Security,access,access,512,"/// Utility function for performing a given action on each lane of a vector; /// with \p EC elements. To simplify porting legacy code, this defaults to; /// unrolling the implied loop for non-scalable element counts, but this is; /// not considered to be part of the contract of this routine, and is; /// expected to change in the future. The callback takes as arguments an; /// IRBuilder whose insert point is correctly set for instantiating the; /// given index, and a value which is (at runtime) the index to access.; /// This index *may* be a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:105,Usability,simpl,simplify,105,"/// Utility function for performing a given action on each lane of a vector; /// with \p EC elements. To simplify porting legacy code, this defaults to; /// unrolling the implied loop for non-scalable element counts, but this is; /// not considered to be part of the contract of this routine, and is; /// expected to change in the future. The callback takes as arguments an; /// IRBuilder whose insert point is correctly set for instantiating the; /// given index, and a value which is (at runtime) the index to access.; /// This index *may* be a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:296,Integrability,contract,contract,296,"/// Utility function for performing a given action on each lane of a vector; /// with \p EVL effective length. EVL is assumed > 0. To simplify porting legacy; /// code, this defaults to unrolling the implied loop for non-scalable element; /// counts, but this is not considered to be part of the contract of this; /// routine, and is expected to change in the future. The callback takes as; /// arguments an IRBuilder whose insert point is correctly set for instantiating; /// the given index, and a value which is (at runtime) the index to access. This; /// index *may* be a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:318,Integrability,rout,routine,318,"/// Utility function for performing a given action on each lane of a vector; /// with \p EVL effective length. EVL is assumed > 0. To simplify porting legacy; /// code, this defaults to unrolling the implied loop for non-scalable element; /// counts, but this is not considered to be part of the contract of this; /// routine, and is expected to change in the future. The callback takes as; /// arguments an IRBuilder whose insert point is correctly set for instantiating; /// the given index, and a value which is (at runtime) the index to access. This; /// index *may* be a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:25,Performance,perform,performing,25,"/// Utility function for performing a given action on each lane of a vector; /// with \p EVL effective length. EVL is assumed > 0. To simplify porting legacy; /// code, this defaults to unrolling the implied loop for non-scalable element; /// counts, but this is not considered to be part of the contract of this; /// routine, and is expected to change in the future. The callback takes as; /// arguments an IRBuilder whose insert point is correctly set for instantiating; /// the given index, and a value which is (at runtime) the index to access. This; /// index *may* be a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:221,Performance,scalab,scalable,221,"/// Utility function for performing a given action on each lane of a vector; /// with \p EVL effective length. EVL is assumed > 0. To simplify porting legacy; /// code, this defaults to unrolling the implied loop for non-scalable element; /// counts, but this is not considered to be part of the contract of this; /// routine, and is expected to change in the future. The callback takes as; /// arguments an IRBuilder whose insert point is correctly set for instantiating; /// the given index, and a value which is (at runtime) the index to access. This; /// index *may* be a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:541,Security,access,access,541,"/// Utility function for performing a given action on each lane of a vector; /// with \p EVL effective length. EVL is assumed > 0. To simplify porting legacy; /// code, this defaults to unrolling the implied loop for non-scalable element; /// counts, but this is not considered to be part of the contract of this; /// routine, and is expected to change in the future. The callback takes as; /// arguments an IRBuilder whose insert point is correctly set for instantiating; /// the given index, and a value which is (at runtime) the index to access. This; /// index *may* be a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:134,Usability,simpl,simplify,134,"/// Utility function for performing a given action on each lane of a vector; /// with \p EVL effective length. EVL is assumed > 0. To simplify porting legacy; /// code, this defaults to unrolling the implied loop for non-scalable element; /// counts, but this is not considered to be part of the contract of this; /// routine, and is expected to change in the future. The callback takes as; /// arguments an IRBuilder whose insert point is correctly set for instantiating; /// the given index, and a value which is (at runtime) the index to access. This; /// index *may* be a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:523,Deployability,update,update,523,"// Split critical edges where the source of the edge is an indirectbr; // instruction. This isn't always possible, but we can handle some easy cases.; // This is useful because MI is unable to split such critical edges,; // which means it will not be able to sink instructions along those edges.; // This is especially painful for indirect branches with many successors, where; // we end up having to prepare all outgoing values in the origin block.; //; // Our normal algorithm for splitting critical edges requires us to update; // the outgoing edges of the edge origin block, but for an indirectbr this; // is hard, since it would require finding and updating the block addresses; // the indirect branch uses. But if a block only has a single indirectbr; // predecessor, with the others being regular branches, we can do it in a; // different way.; // Say we have A -> D, B -> D, I -> D where only I -> D is an indirectbr.; // We can split D into D0 and D1, where D0 contains only the PHIs from D,; // and D1 is the D block body. We can then duplicate D0 as D0A and D0B, and; // create the following structure:; // A -> D0A, B -> D0A, I -> D0B, D0A -> D1, D0B -> D1; // If BPI and BFI aren't non-null, BPI/BFI will be updated accordingly.; // When `IgnoreBlocksWithoutPHI` is set to `true` critical edges leading to a; // block without phi-instructions will not be split.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:1221,Deployability,update,updated,1221,"// Split critical edges where the source of the edge is an indirectbr; // instruction. This isn't always possible, but we can handle some easy cases.; // This is useful because MI is unable to split such critical edges,; // which means it will not be able to sink instructions along those edges.; // This is especially painful for indirect branches with many successors, where; // we end up having to prepare all outgoing values in the origin block.; //; // Our normal algorithm for splitting critical edges requires us to update; // the outgoing edges of the edge origin block, but for an indirectbr this; // is hard, since it would require finding and updating the block addresses; // the indirect branch uses. But if a block only has a single indirectbr; // predecessor, with the others being regular branches, we can do it in a; // different way.; // Say we have A -> D, B -> D, I -> D where only I -> D is an indirectbr.; // We can split D into D0 and D1, where D0 contains only the PHIs from D,; // and D1 is the D block body. We can then duplicate D0 as D0A and D0B, and; // create the following structure:; // A -> D0A, B -> D0A, I -> D0B, D0A -> D1, D0B -> D1; // If BPI and BFI aren't non-null, BPI/BFI will be updated accordingly.; // When `IgnoreBlocksWithoutPHI` is set to `true` critical edges leading to a; // block without phi-instructions will not be split.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:610,Deployability,update,updates,610,"/// Given a set of incoming and outgoing blocks, create a ""hub"" such that every; /// edge from an incoming block InBB to an outgoing block OutBB is now split; /// into two edges, one from InBB to the hub and another from the hub to; /// OutBB. The hub consists of a series of guard blocks, one for each outgoing; /// block. Each guard block conditionally branches to the corresponding outgoing; /// block, or the next guard block in the chain. These guard blocks are returned; /// in the argument vector.; ///; /// Since the control flow edges from InBB to OutBB have now been replaced, the; /// function also updates any PHINodes in OutBB. For each such PHINode, the; /// operands corresponding to incoming blocks are moved to a new PHINode in the; /// hub, and the hub is made an operand of the original PHINode.; ///; /// Input CFG:; /// ----------; ///; /// Def; /// |; /// v; /// In1 In2; /// | |; /// | |; /// v v; /// Foo ---> Out1 Out2; /// |; /// v; /// Use; ///; ///; /// Create hub: Incoming = {In1, In2}, Outgoing = {Out1, Out2}; /// ----------------------------------------------------------; ///; /// Def; /// |; /// v; /// In1 In2 Foo; /// | Hub | |; /// | + - - | - - + |; /// | ' v ' V; /// +------> Guard1 -----> Out1; /// ' | '; /// ' v '; /// ' Guard2 -----> Out2; /// ' ' |; /// + - - - - - + |; /// v; /// Use; ///; /// Limitations:; /// -----------; /// 1. This assumes that all terminators in the CFG are direct branches (the; /// ""br"" instruction). The presence of any other control flow such as; /// indirectbr, switch or callbr will cause an assert.; ///; /// 2. The updates to the PHINodes are not sufficient to restore SSA; /// form. Consider a definition Def, its use Use, incoming block In2 and; /// outgoing block Out2, such that:; /// a. In2 is reachable from D or contains D.; /// b. U is reachable from Out2 or is contained in Out2.; /// c. U is not a PHINode if U is contained in Out2.; ///; /// Clearly, Def dominates Out2 since the program is valid SSA. But when ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:1594,Deployability,update,updates,1594," the control flow edges from InBB to OutBB have now been replaced, the; /// function also updates any PHINodes in OutBB. For each such PHINode, the; /// operands corresponding to incoming blocks are moved to a new PHINode in the; /// hub, and the hub is made an operand of the original PHINode.; ///; /// Input CFG:; /// ----------; ///; /// Def; /// |; /// v; /// In1 In2; /// | |; /// | |; /// v v; /// Foo ---> Out1 Out2; /// |; /// v; /// Use; ///; ///; /// Create hub: Incoming = {In1, In2}, Outgoing = {Out1, Out2}; /// ----------------------------------------------------------; ///; /// Def; /// |; /// v; /// In1 In2 Foo; /// | Hub | |; /// | + - - | - - + |; /// | ' v ' V; /// +------> Guard1 -----> Out1; /// ' | '; /// ' v '; /// ' Guard2 -----> Out2; /// ' ' |; /// + - - - - - + |; /// v; /// Use; ///; /// Limitations:; /// -----------; /// 1. This assumes that all terminators in the CFG are direct branches (the; /// ""br"" instruction). The presence of any other control flow such as; /// indirectbr, switch or callbr will cause an assert.; ///; /// 2. The updates to the PHINodes are not sufficient to restore SSA; /// form. Consider a definition Def, its use Use, incoming block In2 and; /// outgoing block Out2, such that:; /// a. In2 is reachable from D or contains D.; /// b. U is reachable from Out2 or is contained in Out2.; /// c. U is not a PHINode if U is contained in Out2.; ///; /// Clearly, Def dominates Out2 since the program is valid SSA. But when the; /// hub is introduced, there is a new path through the hub along which Use is; /// reachable from entry without passing through Def, and SSA is no longer; /// valid. To fix this, we need to look at all the blocks post-dominated by; /// the hub on the one hand, and dominated by Out2 on the other. This is left; /// for the caller to accomplish, since each specific use of this function; /// may have additional information which simplifies this fixup. For example,; /// see restoreSSA() in the UnifyLoopExits pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:1569,Testability,assert,assert,1569," the control flow edges from InBB to OutBB have now been replaced, the; /// function also updates any PHINodes in OutBB. For each such PHINode, the; /// operands corresponding to incoming blocks are moved to a new PHINode in the; /// hub, and the hub is made an operand of the original PHINode.; ///; /// Input CFG:; /// ----------; ///; /// Def; /// |; /// v; /// In1 In2; /// | |; /// | |; /// v v; /// Foo ---> Out1 Out2; /// |; /// v; /// Use; ///; ///; /// Create hub: Incoming = {In1, In2}, Outgoing = {Out1, Out2}; /// ----------------------------------------------------------; ///; /// Def; /// |; /// v; /// In1 In2 Foo; /// | Hub | |; /// | + - - | - - + |; /// | ' v ' V; /// +------> Guard1 -----> Out1; /// ' | '; /// ' v '; /// ' Guard2 -----> Out2; /// ' ' |; /// + - - - - - + |; /// v; /// Use; ///; /// Limitations:; /// -----------; /// 1. This assumes that all terminators in the CFG are direct branches (the; /// ""br"" instruction). The presence of any other control flow such as; /// indirectbr, switch or callbr will cause an assert.; ///; /// 2. The updates to the PHINodes are not sufficient to restore SSA; /// form. Consider a definition Def, its use Use, incoming block In2 and; /// outgoing block Out2, such that:; /// a. In2 is reachable from D or contains D.; /// b. U is reachable from Out2 or is contained in Out2.; /// c. U is not a PHINode if U is contained in Out2.; ///; /// Clearly, Def dominates Out2 since the program is valid SSA. But when the; /// hub is introduced, there is a new path through the hub along which Use is; /// reachable from entry without passing through Def, and SSA is no longer; /// valid. To fix this, we need to look at all the blocks post-dominated by; /// the hub on the one hand, and dominated by Out2 on the other. This is left; /// for the caller to accomplish, since each specific use of this function; /// may have additional information which simplifies this fixup. For example,; /// see restoreSSA() in the UnifyLoopExits pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:1932,Usability,Clear,Clearly,1932," the control flow edges from InBB to OutBB have now been replaced, the; /// function also updates any PHINodes in OutBB. For each such PHINode, the; /// operands corresponding to incoming blocks are moved to a new PHINode in the; /// hub, and the hub is made an operand of the original PHINode.; ///; /// Input CFG:; /// ----------; ///; /// Def; /// |; /// v; /// In1 In2; /// | |; /// | |; /// v v; /// Foo ---> Out1 Out2; /// |; /// v; /// Use; ///; ///; /// Create hub: Incoming = {In1, In2}, Outgoing = {Out1, Out2}; /// ----------------------------------------------------------; ///; /// Def; /// |; /// v; /// In1 In2 Foo; /// | Hub | |; /// | + - - | - - + |; /// | ' v ' V; /// +------> Guard1 -----> Out1; /// ' | '; /// ' v '; /// ' Guard2 -----> Out2; /// ' ' |; /// + - - - - - + |; /// v; /// Use; ///; /// Limitations:; /// -----------; /// 1. This assumes that all terminators in the CFG are direct branches (the; /// ""br"" instruction). The presence of any other control flow such as; /// indirectbr, switch or callbr will cause an assert.; ///; /// 2. The updates to the PHINodes are not sufficient to restore SSA; /// form. Consider a definition Def, its use Use, incoming block In2 and; /// outgoing block Out2, such that:; /// a. In2 is reachable from D or contains D.; /// b. U is reachable from Out2 or is contained in Out2.; /// c. U is not a PHINode if U is contained in Out2.; ///; /// Clearly, Def dominates Out2 since the program is valid SSA. But when the; /// hub is introduced, there is a new path through the hub along which Use is; /// reachable from entry without passing through Def, and SSA is no longer; /// valid. To fix this, we need to look at all the blocks post-dominated by; /// the hub on the one hand, and dominated by Out2 on the other. This is left; /// for the caller to accomplish, since each specific use of this function; /// may have additional information which simplifies this fixup. For example,; /// see restoreSSA() in the UnifyLoopExits pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:2435,Usability,simpl,simplifies,2435," the control flow edges from InBB to OutBB have now been replaced, the; /// function also updates any PHINodes in OutBB. For each such PHINode, the; /// operands corresponding to incoming blocks are moved to a new PHINode in the; /// hub, and the hub is made an operand of the original PHINode.; ///; /// Input CFG:; /// ----------; ///; /// Def; /// |; /// v; /// In1 In2; /// | |; /// | |; /// v v; /// Foo ---> Out1 Out2; /// |; /// v; /// Use; ///; ///; /// Create hub: Incoming = {In1, In2}, Outgoing = {Out1, Out2}; /// ----------------------------------------------------------; ///; /// Def; /// |; /// v; /// In1 In2 Foo; /// | Hub | |; /// | + - - | - - + |; /// | ' v ' V; /// +------> Guard1 -----> Out1; /// ' | '; /// ' v '; /// ' Guard2 -----> Out2; /// ' ' |; /// + - - - - - + |; /// v; /// Use; ///; /// Limitations:; /// -----------; /// 1. This assumes that all terminators in the CFG are direct branches (the; /// ""br"" instruction). The presence of any other control flow such as; /// indirectbr, switch or callbr will cause an assert.; ///; /// 2. The updates to the PHINodes are not sufficient to restore SSA; /// form. Consider a definition Def, its use Use, incoming block In2 and; /// outgoing block Out2, such that:; /// a. In2 is reachable from D or contains D.; /// b. U is reachable from Out2 or is contained in Out2.; /// c. U is not a PHINode if U is contained in Out2.; ///; /// Clearly, Def dominates Out2 since the program is valid SSA. But when the; /// hub is introduced, there is a new path through the hub along which Use is; /// reachable from entry without passing through Def, and SSA is no longer; /// valid. To fix this, we need to look at all the blocks post-dominated by; /// the hub on the one hand, and dominated by Out2 on the other. This is left; /// for the caller to accomplish, since each specific use of this function; /// may have additional information which simplifies this fixup. For example,; /// see restoreSSA() in the UnifyLoopExits pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:39,Usability,simpl,simple,39,// Check whether the function only has simple terminator:; // br/brcond/unreachable/ret,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:273,Usability,resume,resume,273,"// Returns true if these basic blocks belong to a presplit coroutine and the; // edge corresponds to the 'default' case in the switch statement in the; // pattern:; //; // %0 = call i8 @llvm.coro.suspend(token none, i1 false); // switch i8 %0, label %suspend [i8 0, label %resume; // i8 1, label %cleanup]; //; // i.e. the edge to the `%suspend` BB. This edge is special in that it will; // be elided by coroutine lowering (coro-split), and the `%suspend` BB needs; // to be kept as-is. It's not a real CFG edge - post-lowering, it will end; // up being a `ret`, and it must be thus lowerable to support symmetric; // transfer. For example:; // - this edge is not a loop exit edge if encountered in a loop (and should; // be ignored); // - must not be split for PGO instrumentation, for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BreakCriticalEdges.h:679,Deployability,update,update,679,"//===- BreakCriticalEdges.h - Critical Edge Elimination Pass --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // BreakCriticalEdges pass - Break all of the critical edges in the CFG by; // inserting a dummy basic block. This pass may be ""required"" by passes that; // cannot deal with critical edges. For this usage, the structure type is; // forward declared. This pass obviously invalidates the CFG, but can update; // dominator trees.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BreakCriticalEdges.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BreakCriticalEdges.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:404,Integrability,interface,interface,404,"//===- BuildLibCalls.h - Utility builder for libcalls -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to build some C language libcalls for; // optimization passes that need to call the various functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:456,Performance,optimiz,optimization,456,"//===- BuildLibCalls.h - Utility builder for libcalls -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to build some C language libcalls for; // optimization passes that need to call the various functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:393,Security,expose,exposes,393,"//===- BuildLibCalls.h - Utility builder for libcalls -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to build some C language libcalls for; // optimization passes that need to call the various functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:125,Performance,optimiz,optimizations,125,"/// Analyze the name and prototype of the given function and set any; /// applicable attributes. Note that this merely helps optimizations on an; /// already existing function but does not consider mandatory attributes.; ///; /// If the library function is unavailable, this doesn't modify it.; ///; /// Returns true if any attributes were set and false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:3,Safety,Avoid,Avoid,3,// Avoid an incorrect ordering that'd otherwise compile incorrectly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:42,Availability,avail,available,42,/// Check whether the library function is available on target and also that; /// it in the current Module is a Function with the right type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:88,Availability,avail,available,88,/// Check whether the overloaded floating point function; /// corresponding to \a Ty is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:78,Integrability,depend,depending,78,"/// Emit a call to the unary function DoubleFn, FloatFn or LongDoubleFn,; /// depending of the type of Op.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h:79,Integrability,depend,depending,79,"/// Emit a call to the binary function DoubleFn, FloatFn or LongDoubleFn,; /// depending of the type of Op1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BuildLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BypassSlowDivision.h:405,Performance,optimiz,optimization,405,"//===- llvm/Transforms/Utils/BypassSlowDivision.h ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains an optimization for div and rem on architectures that; // execute short instructions significantly faster than longer instructions.; // For example, on Intel Atom 32-bit divides are slow enough that during; // runtime it is profitable to check the value of the operands, and if they are; // positive and less than 256 use an unsigned 8-bit divide.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BypassSlowDivision.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BypassSlowDivision.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BypassSlowDivision.h:9,Performance,optimiz,optimization,9,"/// This optimization identifies DIV instructions in a BB that can be; /// profitably bypassed and carried out with a shorter, faster divide.; ///; /// This optimization may add basic blocks immediately after BB; for obvious; /// reasons, you shouldn't pass those blocks to bypassSlowDivision.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BypassSlowDivision.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BypassSlowDivision.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BypassSlowDivision.h:157,Performance,optimiz,optimization,157,"/// This optimization identifies DIV instructions in a BB that can be; /// profitably bypassed and carried out with a shorter, faster divide.; ///; /// This optimization may add basic blocks immediately after BB; for obvious; /// reasons, you shouldn't pass those blocks to bypassSlowDivision.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BypassSlowDivision.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BypassSlowDivision.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h:48,Deployability,update,update,48,"//===- CallGraphUpdater.h - A (lazy) call graph update helper ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides interfaces used to manipulate a call graph, regardless; /// if it is a ""old style"" CallGraph or an ""new style"" LazyCallGraph.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h:415,Integrability,interface,interfaces,415,"//===- CallGraphUpdater.h - A (lazy) call graph update helper ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides interfaces used to manipulate a call graph, regardless; /// if it is a ""old style"" CallGraph or an ""new style"" LazyCallGraph.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h:4,Integrability,Wrap,Wrapper,4,"/// Wrapper to unify ""old style"" CallGraph and ""new style"" LazyCallGraph. This; /// simplifies the interface and the call sites, e.g., new and old pass manager; /// passes can share the same code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h:99,Integrability,interface,interface,99,"/// Wrapper to unify ""old style"" CallGraph and ""new style"" LazyCallGraph. This; /// simplifies the interface and the call sites, e.g., new and old pass manager; /// passes can share the same code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h:84,Usability,simpl,simplifies,84,"/// Wrapper to unify ""old style"" CallGraph and ""new style"" LazyCallGraph. This; /// simplifies the interface and the call sites, e.g., new and old pass manager; /// passes can share the same code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h:17,Modifiability,variab,variables,17,///}; /// Old PM variables; ///{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h:17,Modifiability,variab,variables,17,///}; /// New PM variables; ///{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h:113,Deployability,update,update,113,"/// After an CGSCC pass changes a function in ways that affect the call; /// graph, this method can be called to update it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h:82,Deployability,update,update,82,"/// If a new function was created by outlining, this method can be called; /// to update the call graph for the new function. Note that the old one; /// still needs to be re-analyzed or manually updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h:195,Deployability,update,updated,195,"/// If a new function was created by outlining, this method can be called; /// to update the call graph for the new function. Note that the old one; /// still needs to be re-analyzed or manually updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h:310,Availability,Failure,FailureReason,310,"/// Return true if the given indirect call site can be made to call \p Callee.; ///; /// This function ensures that the number and type of the call site's arguments; /// and return value match those of the given function. If the types do not; /// match exactly, they must at least be bitcast compatible. If \p FailureReason; /// is non-null and the indirect call cannot be promoted, the failure reason; /// will be stored in it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h:387,Availability,failure,failure,387,"/// Return true if the given indirect call site can be made to call \p Callee.; ///; /// This function ensures that the number and type of the call site's arguments; /// and return value match those of the given function. If the types do not; /// match exactly, they must at least be bitcast compatible. If \p FailureReason; /// is non-null and the indirect call cannot be promoted, the failure reason; /// will be stored in it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h:511,Integrability,Interface,Interface,511,"/// Try to promote (devirtualize) a virtual call on an Alloca. Return true on; /// success.; ///; /// Look for a pattern like:; ///; /// %o = alloca %class.Impl; /// %1 = getelementptr %class.Impl, %class.Impl* %o, i64 0, i32 0, i32 0; /// store i32 (...)** bitcast (i8** getelementptr inbounds; /// ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV4Impl, i64 0, inrange i32 0, i64 2); /// to i32 (...)**), i32 (...)*** %1; /// %2 = getelementptr inbounds %class.Impl, %class.Impl* %o, i64 0, i32 0; /// %3 = bitcast %class.Interface* %2 to void (%class.Interface*)***; /// %vtable.i = load void (%class.Interface*)**, void (%class.Interface*)*** %3; /// %4 = load void (%class.Interface*)*, void (%class.Interface*)** %vtable.i; /// call void %4(%class.Interface* nonnull %2); ///; /// @_ZTV4Impl = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] }; /// { [3 x i8*]; /// [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI4Impl to i8*),; /// i8* bitcast (void (%class.Impl*)* @_ZN4Impl3RunEv to i8*)] }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h:541,Integrability,Interface,Interface,541,"/// Try to promote (devirtualize) a virtual call on an Alloca. Return true on; /// success.; ///; /// Look for a pattern like:; ///; /// %o = alloca %class.Impl; /// %1 = getelementptr %class.Impl, %class.Impl* %o, i64 0, i32 0, i32 0; /// store i32 (...)** bitcast (i8** getelementptr inbounds; /// ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV4Impl, i64 0, inrange i32 0, i64 2); /// to i32 (...)**), i32 (...)*** %1; /// %2 = getelementptr inbounds %class.Impl, %class.Impl* %o, i64 0, i32 0; /// %3 = bitcast %class.Interface* %2 to void (%class.Interface*)***; /// %vtable.i = load void (%class.Interface*)**, void (%class.Interface*)*** %3; /// %4 = load void (%class.Interface*)*, void (%class.Interface*)** %vtable.i; /// call void %4(%class.Interface* nonnull %2); ///; /// @_ZTV4Impl = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] }; /// { [3 x i8*]; /// [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI4Impl to i8*),; /// i8* bitcast (void (%class.Impl*)* @_ZN4Impl3RunEv to i8*)] }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h:591,Integrability,Interface,Interface,591,"/// Try to promote (devirtualize) a virtual call on an Alloca. Return true on; /// success.; ///; /// Look for a pattern like:; ///; /// %o = alloca %class.Impl; /// %1 = getelementptr %class.Impl, %class.Impl* %o, i64 0, i32 0, i32 0; /// store i32 (...)** bitcast (i8** getelementptr inbounds; /// ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV4Impl, i64 0, inrange i32 0, i64 2); /// to i32 (...)**), i32 (...)*** %1; /// %2 = getelementptr inbounds %class.Impl, %class.Impl* %o, i64 0, i32 0; /// %3 = bitcast %class.Interface* %2 to void (%class.Interface*)***; /// %vtable.i = load void (%class.Interface*)**, void (%class.Interface*)*** %3; /// %4 = load void (%class.Interface*)*, void (%class.Interface*)** %vtable.i; /// call void %4(%class.Interface* nonnull %2); ///; /// @_ZTV4Impl = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] }; /// { [3 x i8*]; /// [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI4Impl to i8*),; /// i8* bitcast (void (%class.Impl*)* @_ZN4Impl3RunEv to i8*)] }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h:619,Integrability,Interface,Interface,619,"/// Try to promote (devirtualize) a virtual call on an Alloca. Return true on; /// success.; ///; /// Look for a pattern like:; ///; /// %o = alloca %class.Impl; /// %1 = getelementptr %class.Impl, %class.Impl* %o, i64 0, i32 0, i32 0; /// store i32 (...)** bitcast (i8** getelementptr inbounds; /// ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV4Impl, i64 0, inrange i32 0, i64 2); /// to i32 (...)**), i32 (...)*** %1; /// %2 = getelementptr inbounds %class.Impl, %class.Impl* %o, i64 0, i32 0; /// %3 = bitcast %class.Interface* %2 to void (%class.Interface*)***; /// %vtable.i = load void (%class.Interface*)**, void (%class.Interface*)*** %3; /// %4 = load void (%class.Interface*)*, void (%class.Interface*)** %vtable.i; /// call void %4(%class.Interface* nonnull %2); ///; /// @_ZTV4Impl = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] }; /// { [3 x i8*]; /// [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI4Impl to i8*),; /// i8* bitcast (void (%class.Impl*)* @_ZN4Impl3RunEv to i8*)] }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h:665,Integrability,Interface,Interface,665,"/// Try to promote (devirtualize) a virtual call on an Alloca. Return true on; /// success.; ///; /// Look for a pattern like:; ///; /// %o = alloca %class.Impl; /// %1 = getelementptr %class.Impl, %class.Impl* %o, i64 0, i32 0, i32 0; /// store i32 (...)** bitcast (i8** getelementptr inbounds; /// ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV4Impl, i64 0, inrange i32 0, i64 2); /// to i32 (...)**), i32 (...)*** %1; /// %2 = getelementptr inbounds %class.Impl, %class.Impl* %o, i64 0, i32 0; /// %3 = bitcast %class.Interface* %2 to void (%class.Interface*)***; /// %vtable.i = load void (%class.Interface*)**, void (%class.Interface*)*** %3; /// %4 = load void (%class.Interface*)*, void (%class.Interface*)** %vtable.i; /// call void %4(%class.Interface* nonnull %2); ///; /// @_ZTV4Impl = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] }; /// { [3 x i8*]; /// [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI4Impl to i8*),; /// i8* bitcast (void (%class.Impl*)* @_ZN4Impl3RunEv to i8*)] }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h:692,Integrability,Interface,Interface,692,"/// Try to promote (devirtualize) a virtual call on an Alloca. Return true on; /// success.; ///; /// Look for a pattern like:; ///; /// %o = alloca %class.Impl; /// %1 = getelementptr %class.Impl, %class.Impl* %o, i64 0, i32 0, i32 0; /// store i32 (...)** bitcast (i8** getelementptr inbounds; /// ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV4Impl, i64 0, inrange i32 0, i64 2); /// to i32 (...)**), i32 (...)*** %1; /// %2 = getelementptr inbounds %class.Impl, %class.Impl* %o, i64 0, i32 0; /// %3 = bitcast %class.Interface* %2 to void (%class.Interface*)***; /// %vtable.i = load void (%class.Interface*)**, void (%class.Interface*)*** %3; /// %4 = load void (%class.Interface*)*, void (%class.Interface*)** %vtable.i; /// call void %4(%class.Interface* nonnull %2); ///; /// @_ZTV4Impl = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] }; /// { [3 x i8*]; /// [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI4Impl to i8*),; /// i8* bitcast (void (%class.Impl*)* @_ZN4Impl3RunEv to i8*)] }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h:741,Integrability,Interface,Interface,741,"/// Try to promote (devirtualize) a virtual call on an Alloca. Return true on; /// success.; ///; /// Look for a pattern like:; ///; /// %o = alloca %class.Impl; /// %1 = getelementptr %class.Impl, %class.Impl* %o, i64 0, i32 0, i32 0; /// store i32 (...)** bitcast (i8** getelementptr inbounds; /// ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV4Impl, i64 0, inrange i32 0, i64 2); /// to i32 (...)**), i32 (...)*** %1; /// %2 = getelementptr inbounds %class.Impl, %class.Impl* %o, i64 0, i32 0; /// %3 = bitcast %class.Interface* %2 to void (%class.Interface*)***; /// %vtable.i = load void (%class.Interface*)**, void (%class.Interface*)*** %3; /// %4 = load void (%class.Interface*)*, void (%class.Interface*)** %vtable.i; /// call void %4(%class.Interface* nonnull %2); ///; /// @_ZTV4Impl = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] }; /// { [3 x i8*]; /// [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI4Impl to i8*),; /// i8* bitcast (void (%class.Impl*)* @_ZN4Impl3RunEv to i8*)] }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h:573,Performance,load,load,573,"/// Try to promote (devirtualize) a virtual call on an Alloca. Return true on; /// success.; ///; /// Look for a pattern like:; ///; /// %o = alloca %class.Impl; /// %1 = getelementptr %class.Impl, %class.Impl* %o, i64 0, i32 0, i32 0; /// store i32 (...)** bitcast (i8** getelementptr inbounds; /// ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV4Impl, i64 0, inrange i32 0, i64 2); /// to i32 (...)**), i32 (...)*** %1; /// %2 = getelementptr inbounds %class.Impl, %class.Impl* %o, i64 0, i32 0; /// %3 = bitcast %class.Interface* %2 to void (%class.Interface*)***; /// %vtable.i = load void (%class.Interface*)**, void (%class.Interface*)*** %3; /// %4 = load void (%class.Interface*)*, void (%class.Interface*)** %vtable.i; /// call void %4(%class.Interface* nonnull %2); ///; /// @_ZTV4Impl = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] }; /// { [3 x i8*]; /// [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI4Impl to i8*),; /// i8* bitcast (void (%class.Impl*)* @_ZN4Impl3RunEv to i8*)] }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h:647,Performance,load,load,647,"/// Try to promote (devirtualize) a virtual call on an Alloca. Return true on; /// success.; ///; /// Look for a pattern like:; ///; /// %o = alloca %class.Impl; /// %1 = getelementptr %class.Impl, %class.Impl* %o, i64 0, i32 0, i32 0; /// store i32 (...)** bitcast (i8** getelementptr inbounds; /// ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV4Impl, i64 0, inrange i32 0, i64 2); /// to i32 (...)**), i32 (...)*** %1; /// %2 = getelementptr inbounds %class.Impl, %class.Impl* %o, i64 0, i32 0; /// %3 = bitcast %class.Interface* %2 to void (%class.Interface*)***; /// %vtable.i = load void (%class.Interface*)**, void (%class.Interface*)*** %3; /// %4 = load void (%class.Interface*)*, void (%class.Interface*)** %vtable.i; /// call void %4(%class.Interface* nonnull %2); ///; /// @_ZTV4Impl = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] }; /// { [3 x i8*]; /// [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI4Impl to i8*),; /// i8* bitcast (void (%class.Impl*)* @_ZN4Impl3RunEv to i8*)] }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallPromotionUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CanonicalizeAliases.h:4,Usability,Simpl,Simple,4,/// Simple pass that canonicalizes aliases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CanonicalizeAliases.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CanonicalizeAliases.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:200,Usability,simpl,simplification,200,"/// Like VMap, but maps only unsimplified instructions. Values in the map; /// may be dangling, it is only intended to be used via isSimplified(), to; /// check whether the main VMap mapping involves simplification or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:732,Deployability,update,updated,732,"/// Return a copy of the specified basic block, but without; /// embedding the block into a particular function. The block returned is an; /// exact copy of the specified basic block, without any remapping having been; /// performed. Because of this, this is only suitable for applications where; /// the basic block will be inserted into the same function that it was cloned; /// from (loop unrolling would use this, for example).; ///; /// Also, note that this function makes a direct copy of the basic block, and; /// can thus produce illegal LLVM code. In particular, it will copy any PHI; /// nodes from the original block, even though there are no predecessors for the; /// newly cloned block (thus, phi nodes will have to be updated). Also, this; /// block will branch to the old successors of the original block: these; /// successors will have to have any PHI nodes updated to account for the new; /// incoming edges.; ///; /// The correlation between instructions in the source and result basic blocks; /// is recorded in the VMap map.; ///; /// If you have a particular suffix you'd like to use to add to any cloned; /// names, specify it as the optional third parameter.; ///; /// If you would like the basic block to be auto-inserted into the end of a; /// function, you can specify it as the optional fourth parameter.; ///; /// If you would like to collect additional information about the cloned; /// function, you can specify a ClonedCodeInfo object with the optional fifth; /// parameter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:875,Deployability,update,updated,875,"/// Return a copy of the specified basic block, but without; /// embedding the block into a particular function. The block returned is an; /// exact copy of the specified basic block, without any remapping having been; /// performed. Because of this, this is only suitable for applications where; /// the basic block will be inserted into the same function that it was cloned; /// from (loop unrolling would use this, for example).; ///; /// Also, note that this function makes a direct copy of the basic block, and; /// can thus produce illegal LLVM code. In particular, it will copy any PHI; /// nodes from the original block, even though there are no predecessors for the; /// newly cloned block (thus, phi nodes will have to be updated). Also, this; /// block will branch to the old successors of the original block: these; /// successors will have to have any PHI nodes updated to account for the new; /// incoming edges.; ///; /// The correlation between instructions in the source and result basic blocks; /// is recorded in the VMap map.; ///; /// If you have a particular suffix you'd like to use to add to any cloned; /// names, specify it as the optional third parameter.; ///; /// If you would like the basic block to be auto-inserted into the end of a; /// function, you can specify it as the optional fourth parameter.; ///; /// If you would like to collect additional information about the cloned; /// function, you can specify a ClonedCodeInfo object with the optional fifth; /// parameter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:223,Performance,perform,performed,223,"/// Return a copy of the specified basic block, but without; /// embedding the block into a particular function. The block returned is an; /// exact copy of the specified basic block, without any remapping having been; /// performed. Because of this, this is only suitable for applications where; /// the basic block will be inserted into the same function that it was cloned; /// from (loop unrolling would use this, for example).; ///; /// Also, note that this function makes a direct copy of the basic block, and; /// can thus produce illegal LLVM code. In particular, it will copy any PHI; /// nodes from the original block, even though there are no predecessors for the; /// newly cloned block (thus, phi nodes will have to be updated). Also, this; /// block will branch to the old successors of the original block: these; /// successors will have to have any PHI nodes updated to account for the new; /// incoming edges.; ///; /// The correlation between instructions in the source and result basic blocks; /// is recorded in the VMap map.; ///; /// If you have a particular suffix you'd like to use to add to any cloned; /// names, specify it as the optional third parameter.; ///; /// If you would like the basic block to be auto-inserted into the end of a; /// function, you can specify it as the optional fourth parameter.; ///; /// If you would like to collect additional information about the cloned; /// function, you can specify a ClonedCodeInfo object with the optional fifth; /// parameter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:341,Deployability,update,updated,341,"/// Return a copy of the specified function and add it to that; /// function's module. Also, any references specified in the VMap are changed; /// to refer to their mapped value instead of the original one. If any of the; /// arguments to the function are in the VMap, the arguments are deleted from; /// the resultant function. The VMap is updated to include mappings from all of; /// the instructions and basicblocks in the function from their old to new; /// values. The final argument captures information about the cloned code if; /// non-null.; ///; /// \pre VMap contains no non-identity GlobalValue mappings.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:1048,Deployability,update,updated,1048,"/// Clone OldFunc into NewFunc, transforming the old arguments into references; /// to VMap values. Note that if NewFunc already has basic blocks, the ones; /// cloned into it will be added to the end of the function. This function; /// fills in a list of return instructions, and can optionally remap types; /// and/or append the specified suffix to all values cloned.; ///; /// If \p Changes is \a CloneFunctionChangeType::LocalChangesOnly, VMap is; /// required to contain no non-identity GlobalValue mappings. Otherwise,; /// referenced metadata will be cloned.; ///; /// If \p Changes is less than \a CloneFunctionChangeType::DifferentModule; /// indicating cloning into the same module (even if it's LocalChangesOnly), if; /// debug info metadata transitively references a \a DISubprogram, it will be; /// cloned, effectively upgrading \p Changes to GlobalChanges while suppressing; /// cloning of types and compile units.; ///; /// If \p Changes is \a CloneFunctionChangeType::DifferentModule, the new; /// module's \c !llvm.dbg.cu will get updated with any newly created compile; /// units. (\a CloneFunctionChangeType::ClonedModule leaves that work for the; /// caller.); ///; /// FIXME: Consider simplifying this function by splitting out \a; /// CloneFunctionMetadataInto() and expecting / updating callers to call it; /// first when / how it's needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:1206,Usability,simpl,simplifying,1206,"/// Clone OldFunc into NewFunc, transforming the old arguments into references; /// to VMap values. Note that if NewFunc already has basic blocks, the ones; /// cloned into it will be added to the end of the function. This function; /// fills in a list of return instructions, and can optionally remap types; /// and/or append the specified suffix to all values cloned.; ///; /// If \p Changes is \a CloneFunctionChangeType::LocalChangesOnly, VMap is; /// required to contain no non-identity GlobalValue mappings. Otherwise,; /// referenced metadata will be cloned.; ///; /// If \p Changes is less than \a CloneFunctionChangeType::DifferentModule; /// indicating cloning into the same module (even if it's LocalChangesOnly), if; /// debug info metadata transitively references a \a DISubprogram, it will be; /// cloned, effectively upgrading \p Changes to GlobalChanges while suppressing; /// cloning of types and compile units.; ///; /// If \p Changes is \a CloneFunctionChangeType::DifferentModule, the new; /// module's \c !llvm.dbg.cu will get updated with any newly created compile; /// units. (\a CloneFunctionChangeType::ClonedModule leaves that work for the; /// caller.); ///; /// FIXME: Consider simplifying this function by splitting out \a; /// CloneFunctionMetadataInto() and expecting / updating callers to call it; /// first when / how it's needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:77,Usability,simpl,simple,77,"/// This works exactly like CloneFunctionInto,; /// except that it does some simple constant prop and DCE on the fly. The; /// effect of this is to copy significantly less code in cases where (for; /// example) a function call with constant arguments is inlined, and those; /// constant arguments cause a significant amount of code in the callee to be; /// dead. Since this doesn't produce an exactly copy of the input, it can't be; /// used for things like CloneFunction or CloneModule.; ///; /// If ModuleLevelChanges is false, VMap contains no non-identity GlobalValue; /// mappings.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:37,Deployability,update,update,37,"/// If non-null, InlineFunction will update the callgraph to reflect the; /// changes it makes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:4,Deployability,Update,Update,4,"/// Update profile for callee as well as cloned version. We need to do this; /// for regular inlining, but not for inlining from sample profile loader.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:144,Performance,load,loader,144,"/// Update profile for callee as well as cloned version. We need to do this; /// for regular inlining, but not for inlining from sample profile loader.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:524,Integrability,rout,routine,524,"/// This function inlines the called function into the basic; /// block of the caller. This returns false if it is not possible to inline; /// this call. The program is still in a well defined state if this occurs; /// though.; ///; /// Note that this only does one level of inlining. For example, if the; /// instruction 'call B' is inlined, and 'B' calls 'C', then the call to 'C' now; /// exists in the instruction stream. Similarly this will inline a recursive; /// function by one level.; ///; /// Note that while this routine is allowed to cleanup and optimize the; /// *inlined* code to minimize the actual inserted code, it must not delete; /// code in the caller as users of this routine may have pointers to; /// instructions in the caller that need to remain stable.; ///; /// If ForwardVarArgsTo is passed, inlining a function with varargs is allowed; /// and all varargs at the callsite will be passed to any calls to; /// ForwardVarArgsTo. The caller of InlineFunction has to make sure any varargs; /// are only used by ForwardVarArgsTo.; ///; /// The callee's function attributes are merged into the callers' if; /// MergeAttributes is set to true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:689,Integrability,rout,routine,689,"/// This function inlines the called function into the basic; /// block of the caller. This returns false if it is not possible to inline; /// this call. The program is still in a well defined state if this occurs; /// though.; ///; /// Note that this only does one level of inlining. For example, if the; /// instruction 'call B' is inlined, and 'B' calls 'C', then the call to 'C' now; /// exists in the instruction stream. Similarly this will inline a recursive; /// function by one level.; ///; /// Note that while this routine is allowed to cleanup and optimize the; /// *inlined* code to minimize the actual inserted code, it must not delete; /// code in the caller as users of this routine may have pointers to; /// instructions in the caller that need to remain stable.; ///; /// If ForwardVarArgsTo is passed, inlining a function with varargs is allowed; /// and all varargs at the callsite will be passed to any calls to; /// ForwardVarArgsTo. The caller of InlineFunction has to make sure any varargs; /// are only used by ForwardVarArgsTo.; ///; /// The callee's function attributes are merged into the callers' if; /// MergeAttributes is set to true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:558,Performance,optimiz,optimize,558,"/// This function inlines the called function into the basic; /// block of the caller. This returns false if it is not possible to inline; /// this call. The program is still in a well defined state if this occurs; /// though.; ///; /// Note that this only does one level of inlining. For example, if the; /// instruction 'call B' is inlined, and 'B' calls 'C', then the call to 'C' now; /// exists in the instruction stream. Similarly this will inline a recursive; /// function by one level.; ///; /// Note that while this routine is allowed to cleanup and optimize the; /// *inlined* code to minimize the actual inserted code, it must not delete; /// code in the caller as users of this routine may have pointers to; /// instructions in the caller that need to remain stable.; ///; /// If ForwardVarArgsTo is passed, inlining a function with varargs is allowed; /// and all varargs at the callsite will be passed to any calls to; /// ForwardVarArgsTo. The caller of InlineFunction has to make sure any varargs; /// are only used by ForwardVarArgsTo.; ///; /// The callee's function attributes are merged into the callers' if; /// MergeAttributes is set to true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:92,Deployability,Update,Updates,92,/// Clones a loop \p OrigLoop. Returns the loop and the blocks in \p; /// Blocks.; ///; /// Updates LoopInfo and DominatorTree assuming the loop is dominated by block; /// \p LoopDomBB. Insert the new blocks before block specified in \p Before.; /// Note: Only innermost loops are supported.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:4,Deployability,Update,Updates,4,/// Updates profile information by adjusting the entry count by adding; /// EntryDelta then scaling callsite information by the new count divided by the; /// old count. VMap is used during inlinng to also update the new clone,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:205,Deployability,update,update,205,/// Updates profile information by adjusting the entry count by adding; /// EntryDelta then scaling callsite information by the new count divided by the; /// old count. VMap is used during inlinng to also update the new clone,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:4,Energy Efficiency,Adapt,Adapt,4,"/// Adapt the metadata for the specified instruction according to the; /// provided mapping. This is normally used after cloning an instruction, when; /// some noalias scopes needed to be cloned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:4,Modifiability,Adapt,Adapt,4,"/// Adapt the metadata for the specified instruction according to the; /// provided mapping. This is normally used after cloning an instruction, when; /// some noalias scopes needed to be cloned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:50,Energy Efficiency,adapt,adapt,50,/// Clone the specified noalias decl scopes. Then adapt all instructions in the; /// NewBlocks basicblocks to the cloned versions.; /// 'Ext' will be added to the duplicate scope names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:50,Modifiability,adapt,adapt,50,/// Clone the specified noalias decl scopes. Then adapt all instructions in the; /// NewBlocks basicblocks to the cloned versions.; /// 'Ext' will be added to the duplicate scope names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:50,Energy Efficiency,adapt,adapt,50,"/// Clone the specified noalias decl scopes. Then adapt all instructions in the; /// [IStart, IEnd] (IEnd included !) range to the cloned versions. 'Ext' will be; /// added to the duplicate scope names.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:50,Modifiability,adapt,adapt,50,"/// Clone the specified noalias decl scopes. Then adapt all instructions in the; /// [IStart, IEnd] (IEnd included !) range to the cloned versions. 'Ext' will be; /// added to the duplicate scope names.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:6,Performance,cache,cache,6,/// A cache for the CodeExtractor analysis. The operation \ref; /// CodeExtractor::extractCodeRegion is guaranteed not to invalidate this; /// object. This object should conservatively be considered invalid if any; /// other mutating operations on the IR occur.; ///; /// Constructing this object is O(n) in the size of the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:29,Performance,load,load,29,"/// Base memory addresses of load/store instructions, grouped by block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:59,Performance,load,load,59,"/// Check whether \p BB contains an instruction thought to load from, store; /// to, or otherwise clobber the alloca \p Addr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:100,Integrability,interface,interface,100,"/// Utility class for extracting code into a new function.; ///; /// This utility provides a simple interface for extracting some sequence of; /// code into its own function, replacing it with a call to that function. It; /// also provides various methods to query about the nature and result of; /// such a transformation.; ///; /// The rough algorithm used is:; /// 1) Find both the inputs and outputs for the extracted region.; /// 2) Pass the inputs as arguments, remapping them within the extracted; /// function to arguments.; /// 3) Add allocas for any scalar outputs, adding all of the outputs' allocas; /// as arguments, and inserting stores to the arguments for any scalars.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:93,Usability,simpl,simple,93,"/// Utility class for extracting code into a new function.; ///; /// This utility provides a simple interface for extracting some sequence of; /// code into its own function, replacing it with a call to that function. It; /// also provides various methods to query about the nature and result of; /// such a transformation.; ///; /// The rough algorithm used is:; /// 1) Find both the inputs and outputs for the extracted region.; /// 2) Pass the inputs as arguments, remapping them within the extracted; /// function to arguments.; /// 3) Add allocas for any scalar outputs, adding all of the outputs' allocas; /// as arguments, and inserting stores to the arguments for any scalars.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:412,Safety,safe,safe,412,"/// Create a code extractor for a sequence of blocks.; ///; /// Given a sequence of basic blocks where the first block in the sequence; /// dominates the rest, prepare a code extractor object for pulling this; /// sequence out into its new function. When a DominatorTree is also given,; /// extra checking and transformations are enabled. If AllowVarArgs is true,; /// vararg functions can be extracted. This is safe, if all vararg handling; /// code is extracted, including vastart. If AllowAlloca is true, then; /// extraction of blocks containing alloca instructions would be possible,; /// however code extractor won't validate whether extraction is legal.; /// Any new allocations will be placed in the AllocationBlock, unless; /// it is null, in which case it will be placed in the entry block of; /// the function from which the code is being extracted.; /// If ArgsInZeroAddressSpace param is set to true, then the aggregate; /// param pointer of the outlined function is declared in zero address; /// space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:623,Security,validat,validate,623,"/// Create a code extractor for a sequence of blocks.; ///; /// Given a sequence of basic blocks where the first block in the sequence; /// dominates the rest, prepare a code extractor object for pulling this; /// sequence out into its new function. When a DominatorTree is also given,; /// extra checking and transformations are enabled. If AllowVarArgs is true,; /// vararg functions can be extracted. This is safe, if all vararg handling; /// code is extracted, including vastart. If AllowAlloca is true, then; /// extraction of blocks containing alloca instructions would be possible,; /// however code extractor won't validate whether extraction is legal.; /// Any new allocations will be placed in the AllocationBlock, unless; /// it is null, in which case it will be placed in the entry block of; /// the function from which the code is being extracted.; /// If ArgsInZeroAddressSpace param is set to true, then the aggregate; /// param pointer of the outlined function is declared in zero address; /// space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:4,Performance,Perform,Perform,4,"/// Perform the extraction, returning the new function.; ///; /// Returns zero when called on a CodeExtractor instance where isEligible; /// returns false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:77,Integrability,interface,interface,77,"/// Perform the extraction, returning the new function and providing an; /// interface to see what was categorized as inputs and outputs.; ///; /// \param CEAC - Cache to speed up operations for the CodeExtractor when; /// hoisting, and extracting lifetime values and assumes.; /// \param Inputs [out] - filled with values marked as inputs to the; /// newly outlined function.; /// \param Outputs [out] - filled with values marked as outputs to the; /// newly outlined function.; /// \returns zero when called on a CodeExtractor instance where isEligible; /// returns false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:4,Performance,Perform,Perform,4,"/// Perform the extraction, returning the new function and providing an; /// interface to see what was categorized as inputs and outputs.; ///; /// \param CEAC - Cache to speed up operations for the CodeExtractor when; /// hoisting, and extracting lifetime values and assumes.; /// \param Inputs [out] - filled with values marked as inputs to the; /// newly outlined function.; /// \param Outputs [out] - filled with values marked as outputs to the; /// newly outlined function.; /// \returns zero when called on a CodeExtractor instance where isEligible; /// returns false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:162,Performance,Cache,Cache,162,"/// Perform the extraction, returning the new function and providing an; /// interface to see what was categorized as inputs and outputs.; ///; /// \param CEAC - Cache to speed up operations for the CodeExtractor when; /// hoisting, and extracting lifetime values and assumes.; /// \param Inputs [out] - filled with values marked as inputs to the; /// newly outlined function.; /// \param Outputs [out] - filled with values marked as outputs to the; /// newly outlined function.; /// \returns zero when called on a CodeExtractor instance where isEligible; /// returns false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:112,Availability,error,errors,112,/// Verify that assumption cache isn't stale after a region is extracted.; /// Returns true when verifier finds errors. AssumptionCache is passed as; /// parameter to make this function stateless.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:27,Performance,cache,cache,27,/// Verify that assumption cache isn't stale after a region is extracted.; /// Returns true when verifier finds errors. AssumptionCache is passed as; /// parameter to make this function stateless.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:4,Testability,Test,Test,4,"/// Test whether this code extractor is eligible.; ///; /// Based on the blocks used when constructing the code extractor,; /// determine whether it is eligible for extraction.; ///; /// Checks that varargs handling (with vastart and vaend) is only done in; /// the outlined blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:108,Performance,perform,performing,108,"/// Compute the set of input values and output values for the code.; ///; /// These can be used either when performing the extraction or to evaluate; /// the expected size of a call to the extracted function. Note that this; /// work cannot be cached between the two as once we decide to extract; /// a code sequence, that sequence is modified, including changing these; /// sets, before extraction occurs. These modifications won't have any; /// significant impact on the cost however.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:244,Performance,cache,cached,244,"/// Compute the set of input values and output values for the code.; ///; /// These can be used either when performing the extraction or to evaluate; /// the expected size of a call to the extracted function. Note that this; /// work cannot be cached between the two as once we decide to extract; /// a code sequence, that sequence is modified, including changing these; /// sets, before extraction occurs. These modifications won't have any; /// significant impact on the cost however.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:118,Safety,safe,safe,118,/// Check if life time marker nodes can be hoisted/sunk into the outline; /// region.; ///; /// Returns true if it is safe to do the code motion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:322,Integrability,wrap,wrapping,322,/// Find the set of allocas whose life ranges are contained within the; /// outlined region.; ///; /// Allocas which have life_time markers contained in the outlined region; /// should be pushed to the outlined function. The address bitcasts that; /// are used by the lifetime markers are also candidates for shrink-; /// wrapping. The instructions that need to be sunk are collected in; /// 'Allocas'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:57,Performance,optimiz,optimizing,57,"/// Find a layout of nodes (basic blocks) of a given CFG optimizing jump; /// locality and thus processor I-cache utilization. This is achieved via; /// increasing the number of fall-through jumps and co-locating frequently; /// executed nodes together.; /// The nodes are assumed to be indexed by integers from [0, |V|) so that the; /// current order is the identity permutation.; /// \p NodeSizes: The sizes of the nodes (in bytes).; /// \p NodeCounts: The execution counts of the nodes in the profile.; /// \p EdgeCounts: The execution counts of every edge (jump) in the profile. The; /// map also defines the edges in CFG and should include 0-count edges.; /// \returns The best block order found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:108,Performance,cache,cache,108,"/// Find a layout of nodes (basic blocks) of a given CFG optimizing jump; /// locality and thus processor I-cache utilization. This is achieved via; /// increasing the number of fall-through jumps and co-locating frequently; /// executed nodes together.; /// The nodes are assumed to be indexed by integers from [0, |V|) so that the; /// current order is the identity permutation.; /// \p NodeSizes: The sizes of the nodes (in bytes).; /// \p NodeCounts: The execution counts of the nodes in the profile.; /// \p EdgeCounts: The execution counts of every edge (jump) in the profile. The; /// map also defines the edges in CFG and should include 0-count edges.; /// \returns The best block order found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:226,Performance,cache,cache,226,"/// Estimate the ""quality"" of a given node order in CFG. The higher the score,; /// the better the order is. The score is designed to reflect the locality of; /// the given order, which is anti-correlated with the number of I-cache misses; /// in a typical execution of the function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:34,Performance,Cache,Cache-Directed,34,/// Algorithm-specific params for Cache-Directed Sort. The values are tuned for; /// the best performance of large-scale front-end bound binaries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:70,Performance,tune,tuned,70,/// Algorithm-specific params for Cache-Directed Sort. The values are tuned for; /// the best performance of large-scale front-end bound binaries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:94,Performance,perform,performance,94,/// Algorithm-specific params for Cache-Directed Sort. The values are tuned for; /// the best performance of large-scale front-end bound binaries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:20,Performance,cache,cache,20,/// The size of the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:30,Performance,cache,cache,30,/// The size of a line in the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:8,Energy Efficiency,power,power,8,/// The power exponent for the distance-based locality.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:12,Performance,Cache,Cache-Directed,12,/// Apply a Cache-Directed Sort for functions represented by a call graph.; /// The placement is done by optimizing the call locality by co-locating; /// frequently executed functions.; /// \p FuncSizes: The sizes of the nodes (in bytes).; /// \p FuncCounts: The execution counts of the nodes in the profile.; /// \p CallCounts: The execution counts of every edge (jump) in the profile. The; /// map also defines the edges in CFG and should include 0-count edges.; /// \p CallOffsets: The offsets of the calls from their source nodes.; /// \returns The best function order found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:105,Performance,optimiz,optimizing,105,/// Apply a Cache-Directed Sort for functions represented by a call graph.; /// The placement is done by optimizing the call locality by co-locating; /// frequently executed functions.; /// \p FuncSizes: The sizes of the nodes (in bytes).; /// \p FuncCounts: The execution counts of the nodes in the profile.; /// \p CallCounts: The execution counts of every edge (jump) in the profile. The; /// map also defines the edges in CFG and should include 0-count edges.; /// \p CallOffsets: The offsets of the calls from their source nodes.; /// \returns The best function order found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:46,Modifiability,config,config,46,/// Apply a Cache-Directed Sort with a custom config.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:12,Performance,Cache,Cache-Directed,12,/// Apply a Cache-Directed Sort with a custom config.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h:432,Safety,safe,safe,432,"//===- Transform/Utils/CodeMoverUtils.h - CodeMover Utils -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This family of functions determine movements are safe on basic blocks, and; // instructions contained within a function.; //; // Please note that this is work in progress, and the functionality is not; // ready for broader production use.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h:31,Safety,safe,safely,31,/// Return true if \p I can be safely moved before \p InsertPoint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h:81,Safety,safe,safely,81,/// Return true if all instructions (except the terminator) in \p BB can be; /// safely moved before \p InsertPoint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h:114,Safety,safe,safe,114,"/// Move instructions, in an order-preserving manner, from \p FromBB to the; /// beginning of \p ToBB when proven safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h:108,Safety,safe,safe,108,"/// Move instructions, in an order-preserving manner, from \p FromBB to the end; /// of \p ToBB when proven safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeMoverUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:391,Integrability,Interface,Interface,391,"//===- Debugify.h - Check debug info preservation in optimizations --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file Interface to the `debugify` synthetic/original debug info testing; /// utility.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:53,Performance,optimiz,optimizations,53,"//===- Debugify.h - Check debug info preservation in optimizations --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file Interface to the `debugify` synthetic/original debug info testing; /// utility.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:449,Testability,test,testing,449,"//===- Debugify.h - Check debug info preservation in optimizations --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file Interface to the `debugify` synthetic/original debug info testing; /// utility.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:8,Modifiability,variab,variable,8,// Maps variable into dbg users (#dbg values/declares for this variable).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:63,Modifiability,variab,variable,63,// Maps variable into dbg users (#dbg values/declares for this variable).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:233,Availability,error,error,233,"/// Add synthesized debug information to a module.; ///; /// \param M The module to add debug information to.; /// \param Functions A range of functions to add debug information to.; /// \param Banner A prefix string to add to debug/error messages.; /// \param ApplyToMF A call back that will add debug information to the; /// MachineFunction for a Function. If nullptr, then the; /// MachineFunction (if any) will not be modified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:239,Integrability,message,messages,239,"/// Add synthesized debug information to a module.; ///; /// \param M The module to add debug information to.; /// \param Functions A range of functions to add debug information to.; /// \param Banner A prefix string to add to debug/error messages.; /// \param ApplyToMF A call back that will add debug information to the; /// MachineFunction for a Function. If nullptr, then the; /// MachineFunction (if any) will not be modified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:307,Availability,error,error,307,/// Collect original debug information before a pass.; ///; /// \param M The module to collect debug information from.; /// \param Functions A range of functions to collect debug information from.; /// \param DebugInfoBeforePass DI metadata before a pass.; /// \param Banner A prefix string to add to debug/error messages.; /// \param NameOfWrappedPass A name of a pass to add to debug/error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:386,Availability,error,error,386,/// Collect original debug information before a pass.; ///; /// \param M The module to collect debug information from.; /// \param Functions A range of functions to collect debug information from.; /// \param DebugInfoBeforePass DI metadata before a pass.; /// \param Banner A prefix string to add to debug/error messages.; /// \param NameOfWrappedPass A name of a pass to add to debug/error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:313,Integrability,message,messages,313,/// Collect original debug information before a pass.; ///; /// \param M The module to collect debug information from.; /// \param Functions A range of functions to collect debug information from.; /// \param DebugInfoBeforePass DI metadata before a pass.; /// \param Banner A prefix string to add to debug/error messages.; /// \param NameOfWrappedPass A name of a pass to add to debug/error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:392,Integrability,message,messages,392,/// Collect original debug information before a pass.; ///; /// \param M The module to collect debug information from.; /// \param Functions A range of functions to collect debug information from.; /// \param DebugInfoBeforePass DI metadata before a pass.; /// \param Banner A prefix string to add to debug/error messages.; /// \param NameOfWrappedPass A name of a pass to add to debug/error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:304,Availability,error,error,304,/// Check original debug information after a pass.; ///; /// \param M The module to collect debug information from.; /// \param Functions A range of functions to collect debug information from.; /// \param DebugInfoBeforePass DI metadata before a pass.; /// \param Banner A prefix string to add to debug/error messages.; /// \param NameOfWrappedPass A name of a pass to add to debug/error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:383,Availability,error,error,383,/// Check original debug information after a pass.; ///; /// \param M The module to collect debug information from.; /// \param Functions A range of functions to collect debug information from.; /// \param DebugInfoBeforePass DI metadata before a pass.; /// \param Banner A prefix string to add to debug/error messages.; /// \param NameOfWrappedPass A name of a pass to add to debug/error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:310,Integrability,message,messages,310,/// Check original debug information after a pass.; ///; /// \param M The module to collect debug information from.; /// \param Functions A range of functions to collect debug information from.; /// \param DebugInfoBeforePass DI metadata before a pass.; /// \param Banner A prefix string to add to debug/error messages.; /// \param NameOfWrappedPass A name of a pass to add to debug/error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:389,Integrability,message,messages,389,/// Check original debug information after a pass.; ///; /// \param M The module to collect debug information from.; /// \param Functions A range of functions to collect debug information from.; /// \param DebugInfoBeforePass DI metadata before a pass.; /// \param Banner A prefix string to add to debug/error messages.; /// \param NameOfWrappedPass A name of a pass to add to debug/error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:30,Integrability,wrap,wraps,30,/// DebugifyCustomPassManager wraps each pass with the debugify passes if; /// needed.; /// NOTE: We support legacy custom pass manager only.; /// TODO: Add New PM support for custom pass manager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:3,Integrability,Wrap,Wrap,3,"// Wrap each pass with (-check)-debugify passes if requested, making; // exceptions for passes which shouldn't see -debugify instrumentation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h:161,Performance,optimiz,optimizations,161,"// Either apply -debugify/-check-debugify before/after each pass and collect; // debug info loss statistics, or collect and check original debug info in; // the optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Debugify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/DXILUpgrade.h:23,Deployability,Upgrade,Upgrade,23,"//===- DXILUpgrade.h - Upgrade DXIL metadata to LLVM constructs -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/DXILUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/DXILUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/DXILUpgrade.h:4,Deployability,Upgrade,Upgrade,4,/// Upgrade DXIL-style metadata into their LLVM representations,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/DXILUpgrade.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/DXILUpgrade.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h:115,Modifiability,variab,variables,115,"/// This class evaluates LLVM IR, producing the Constant representing each SSA; /// instruction. Changes to global variables are stored in a mapping that can; /// be iterated over after the evaluation is complete. Once an evaluation call; /// fails, the evaluation object should not be reused.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h:20,Safety,detect,detect,20,"/// This is used to detect recursion. In pathological situations we could hit; /// exponential behavior, but at least there is nothing unbounded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h:34,Deployability,update,update,34,"/// For each store we execute, we update this map. Loads check this to get; /// the most up-to-date value. If evaluation is successful, this state is; /// committed to the process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h:51,Performance,Load,Loads,51,"/// For each store we execute, we update this map. Loads check this to get; /// the most up-to-date value. If evaluation is successful, this state is; /// committed to the process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h:57,Modifiability,variab,variable,57,"/// To 'execute' an alloca, we create a temporary global variable to represent; /// its body. This vector is needed so we can delete the temporary globals; /// when we are done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h:17,Modifiability,variab,variables,17,/// These global variables have been marked invariant by the static; /// constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h:55,Usability,simpl,simple,55,/// These are constants we have checked and know to be simple enough to live; /// in a static initializer of a global.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:483,Deployability,update,updated,483,"/// GlobalNumberState assigns an integer to each global value in the program,; /// which is used by the comparison routine to order references to globals. This; /// state must be preserved throughout the pass, because Functions and other; /// globals need to maintain their relative order. Globals are assigned a number; /// when they are first visited. This order is deterministic, and so the; /// assigned numbers are as well. When two functions are merged, neither number; /// is updated. If the symbols are weak, this would be incorrect. If they are; /// strong, then one will be replaced at all references to the other, and so; /// direct callsites will now see one or the other symbol, and no update is; /// necessary. Note that if we were guaranteed unique names, we could just; /// compare those, but this would not work for stripped bitcodes or for those; /// few symbols without a name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:699,Deployability,update,update,699,"/// GlobalNumberState assigns an integer to each global value in the program,; /// which is used by the comparison routine to order references to globals. This; /// state must be preserved throughout the pass, because Functions and other; /// globals need to maintain their relative order. Globals are assigned a number; /// when they are first visited. This order is deterministic, and so the; /// assigned numbers are as well. When two functions are merged, neither number; /// is updated. If the symbols are weak, this would be incorrect. If they are; /// strong, then one will be replaced at all references to the other, and so; /// direct callsites will now see one or the other symbol, and no update is; /// necessary. Note that if we were guaranteed unique names, we could just; /// compare those, but this would not work for stripped bitcodes or for those; /// few symbols without a name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:115,Integrability,rout,routine,115,"/// GlobalNumberState assigns an integer to each global value in the program,; /// which is used by the comparison routine to order references to globals. This; /// state must be preserved throughout the pass, because Functions and other; /// globals need to maintain their relative order. Globals are assigned a number; /// when they are first visited. This order is deterministic, and so the; /// assigned numbers are as well. When two functions are merged, neither number; /// is updated. If the symbols are weak, this would be incorrect. If they are; /// strong, then one will be replaced at all references to the other, and so; /// direct callsites will now see one or the other symbol, and no update is; /// necessary. Note that if we were guaranteed unique names, we could just; /// compare those, but this would not work for stripped bitcodes or for those; /// few symbols without a name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:52,Modifiability,Config,Config,52,"// Each GlobalValue is mapped to an identifier. The Config ensures when RAUW; // occurs, the mapping does not change. Tracking changes is unnecessary, and; // also problematic for weak symbols (which may be overwritten).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:165,Availability,avail,available,165,/// FunctionComparator - Compares two functions to determine whether or not; /// they will generate machine code with the same behaviour. DataLayout is; /// used if available. The comparator always fails conservatively (erring on the; /// side of claiming that two functions are different).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:4,Testability,Test,Test,4,/// Test whether the two functions have equivalent behaviour.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:4,Testability,Test,Test,4,/// Test whether two basic blocks have equivalent behaviour.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:2190,Safety,avoid,avoid,2190,"with greater address space is; /// greater.; /// Stage 4: Types are neither vectors, nor pointers. And they differ.; /// We don't know how to bitcast them. So, we better don't do it,; /// and return types comparison result (so it determines the; /// relationship among constants we don't know how to bitcast).; ///; /// Just for clearance, let's see how the set of constants could look; /// on single dimension axis:; ///; /// [NFCT], [FCT, ""others""], [FCT, pointers], [FCT, vectors]; /// Where: NFCT - Not a FirstClassType; /// FCT - FirstClassTyp:; ///; /// 2. Compare raw contents.; /// It ignores types on this stage and only compares bits from L and R.; /// Returns 0, if L and R has equivalent contents.; /// -1 or 1 if values are different.; /// Pretty trivial:; /// 2.1. If contents are numbers, compare numbers.; /// Ints with greater bitwidth are greater. Ints with same bitwidths; /// compared by their contents.; /// 2.2. ""And so on"". Just to avoid discrepancies with comments; /// perhaps it would be better to read the implementation itself.; /// 3. And again about overall picture. Let's look back at how the ordered set; /// of constants will look like:; /// [NFCT], [FCT, ""others""], [FCT, pointers], [FCT, vectors]; ///; /// Now look, what could be inside [FCT, ""others""], for example:; /// [FCT, ""others""] =; /// [; /// [double 0.1], [double 1.23],; /// [i32 1], [i32 2],; /// { double 1.0 }, ; StructTyID, NumElements = 1; /// { i32 1 }, ; StructTyID, NumElements = 1; /// { double 1, i32 1 }, ; StructTyID, NumElements = 2; /// { i32 1, double 1 } ; StructTyID, NumElements = 2; /// ]; ///; /// Let's explain the order. Float numbers will be less than integers, just; /// because of cmpType terms: FloatTyID < IntegerTyID.; /// Floats (with same fltSemantics) are sorted according to their value.; /// Then you can see integers, and they are, like a floats,; /// could be easy sorted among each others.; /// The structures. Structures are grouped at the tail, again because of thei",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:3427,Testability,log,logic,3427,"], [FCT, vectors]; ///; /// Now look, what could be inside [FCT, ""others""], for example:; /// [FCT, ""others""] =; /// [; /// [double 0.1], [double 1.23],; /// [i32 1], [i32 2],; /// { double 1.0 }, ; StructTyID, NumElements = 1; /// { i32 1 }, ; StructTyID, NumElements = 1; /// { double 1, i32 1 }, ; StructTyID, NumElements = 2; /// { i32 1, double 1 } ; StructTyID, NumElements = 2; /// ]; ///; /// Let's explain the order. Float numbers will be less than integers, just; /// because of cmpType terms: FloatTyID < IntegerTyID.; /// Floats (with same fltSemantics) are sorted according to their value.; /// Then you can see integers, and they are, like a floats,; /// could be easy sorted among each others.; /// The structures. Structures are grouped at the tail, again because of their; /// TypeID: StructTyID > IntegerTyID > FloatTyID.; /// Structures with greater number of elements are greater. Structures with; /// greater elements going first are greater.; /// The same logic with vectors, arrays and other possible complex types.; ///; /// Bitcastable constants.; /// Let's assume, that some constant, belongs to some group of; /// ""so-called-equal"" values with different types, and at the same time; /// belongs to another group of constants with equal types; /// and ""really"" equal values.; ///; /// Now, prove that this is impossible:; ///; /// If constant A with type TyA is bitcastable to B with type TyB, then:; /// 1. All constants with equal types to TyA, are bitcastable to B. Since; /// those should be vectors (if TyA is vector), pointers; /// (if TyA is pointer), or else (if TyA equal to TyB), those types should; /// be equal to TyB.; /// 2. All constants with non-equal, but bitcastable types to TyA, are; /// bitcastable to B.; /// Once again, just because we allow it to vectors and pointers only.; /// This statement could be expanded as below:; /// 2.1. All vectors with equal bitwidth to vector A, has equal bitwidth to; /// vector B, and thus bitcastable to B as well.; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:1564,Usability,clear,clearance,1564,"tage 1: Types that satisfies isFirstClassType conditions are always; /// greater then others.; /// Stage 2: Vector is greater then non-vector.; /// If both types are vectors, then vector with greater bitwidth is; /// greater.; /// If both types are vectors with the same bitwidth, then types; /// are bitcastable, and we can skip other stages, and go to contents; /// comparison.; /// Stage 3: Pointer types are greater than non-pointers. If both types are; /// pointers of the same address space - go to contents comparison.; /// Different address spaces: pointer with greater address space is; /// greater.; /// Stage 4: Types are neither vectors, nor pointers. And they differ.; /// We don't know how to bitcast them. So, we better don't do it,; /// and return types comparison result (so it determines the; /// relationship among constants we don't know how to bitcast).; ///; /// Just for clearance, let's see how the set of constants could look; /// on single dimension axis:; ///; /// [NFCT], [FCT, ""others""], [FCT, pointers], [FCT, vectors]; /// Where: NFCT - Not a FirstClassType; /// FCT - FirstClassTyp:; ///; /// 2. Compare raw contents.; /// It ignores types on this stage and only compares bits from L and R.; /// Returns 0, if L and R has equivalent contents.; /// -1 or 1 if values are different.; /// Pretty trivial:; /// 2.1. If contents are numbers, compare numbers.; /// Ints with greater bitwidth are greater. Ints with same bitwidths; /// compared by their contents.; /// 2.2. ""And so on"". Just to avoid discrepancies with comments; /// perhaps it would be better to read the implementation itself.; /// 3. And again about overall picture. Let's look back at how the ordered set; /// of constants will look like:; /// [NFCT], [FCT, ""others""], [FCT, pointers], [FCT, vectors]; ///; /// Now look, what could be inside [FCT, ""others""], for example:; /// [FCT, ""others""] =; /// [; /// [double 0.1], [double 1.23],; /// [i32 1], [i32 2],; /// { double 1.0 }, ; StructTyID, NumElements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:880,Performance,Load,Load,880,"/// Compare two Instructions for equivalence, similar to; /// Instruction::isSameOperationAs.; ///; /// Stages are listed in ""most significant stage first"" order:; /// On each stage below, we do comparison between some left and right; /// operation parts. If parts are non-equal, we assign parts comparison; /// result to the operation comparison result and exit from method.; /// Otherwise we proceed to the next stage.; /// Stages:; /// 1. Operations opcodes. Compared as numbers.; /// 2. Number of operands.; /// 3. Operation types. Compared with cmpType method.; /// 4. Compare operation subclass optional data as stream of bytes:; /// just convert it to integers and call cmpNumbers.; /// 5. Compare in operation operand types with cmpType in; /// most significant operand first order.; /// 6. Last stage. Check operations for some specific attributes.; /// For example, for Load it would be:; /// 6.1.Load: volatile (as boolean flag); /// 6.2.Load: alignment (as integer numbers); /// 6.3.Load: ordering (as underlying enum class value); /// 6.4.Load: synch-scope (as integer numbers); /// 6.5.Load: range metadata (as integer ranges); /// On this stage its better to see the code, since its not more than 10-15; /// strings for particular instruction, and could change sometimes.; ///; /// Sets \p needToCmpOperands to true if the operands of the instructions; /// still must be compared afterwards. In this case it's already guaranteed; /// that both instructions have the same number of operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:907,Performance,Load,Load,907,"/// Compare two Instructions for equivalence, similar to; /// Instruction::isSameOperationAs.; ///; /// Stages are listed in ""most significant stage first"" order:; /// On each stage below, we do comparison between some left and right; /// operation parts. If parts are non-equal, we assign parts comparison; /// result to the operation comparison result and exit from method.; /// Otherwise we proceed to the next stage.; /// Stages:; /// 1. Operations opcodes. Compared as numbers.; /// 2. Number of operands.; /// 3. Operation types. Compared with cmpType method.; /// 4. Compare operation subclass optional data as stream of bytes:; /// just convert it to integers and call cmpNumbers.; /// 5. Compare in operation operand types with cmpType in; /// most significant operand first order.; /// 6. Last stage. Check operations for some specific attributes.; /// For example, for Load it would be:; /// 6.1.Load: volatile (as boolean flag); /// 6.2.Load: alignment (as integer numbers); /// 6.3.Load: ordering (as underlying enum class value); /// 6.4.Load: synch-scope (as integer numbers); /// 6.5.Load: range metadata (as integer ranges); /// On this stage its better to see the code, since its not more than 10-15; /// strings for particular instruction, and could change sometimes.; ///; /// Sets \p needToCmpOperands to true if the operands of the instructions; /// still must be compared afterwards. In this case it's already guaranteed; /// that both instructions have the same number of operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:949,Performance,Load,Load,949,"/// Compare two Instructions for equivalence, similar to; /// Instruction::isSameOperationAs.; ///; /// Stages are listed in ""most significant stage first"" order:; /// On each stage below, we do comparison between some left and right; /// operation parts. If parts are non-equal, we assign parts comparison; /// result to the operation comparison result and exit from method.; /// Otherwise we proceed to the next stage.; /// Stages:; /// 1. Operations opcodes. Compared as numbers.; /// 2. Number of operands.; /// 3. Operation types. Compared with cmpType method.; /// 4. Compare operation subclass optional data as stream of bytes:; /// just convert it to integers and call cmpNumbers.; /// 5. Compare in operation operand types with cmpType in; /// most significant operand first order.; /// 6. Last stage. Check operations for some specific attributes.; /// For example, for Load it would be:; /// 6.1.Load: volatile (as boolean flag); /// 6.2.Load: alignment (as integer numbers); /// 6.3.Load: ordering (as underlying enum class value); /// 6.4.Load: synch-scope (as integer numbers); /// 6.5.Load: range metadata (as integer ranges); /// On this stage its better to see the code, since its not more than 10-15; /// strings for particular instruction, and could change sometimes.; ///; /// Sets \p needToCmpOperands to true if the operands of the instructions; /// still must be compared afterwards. In this case it's already guaranteed; /// that both instructions have the same number of operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:995,Performance,Load,Load,995,"/// Compare two Instructions for equivalence, similar to; /// Instruction::isSameOperationAs.; ///; /// Stages are listed in ""most significant stage first"" order:; /// On each stage below, we do comparison between some left and right; /// operation parts. If parts are non-equal, we assign parts comparison; /// result to the operation comparison result and exit from method.; /// Otherwise we proceed to the next stage.; /// Stages:; /// 1. Operations opcodes. Compared as numbers.; /// 2. Number of operands.; /// 3. Operation types. Compared with cmpType method.; /// 4. Compare operation subclass optional data as stream of bytes:; /// just convert it to integers and call cmpNumbers.; /// 5. Compare in operation operand types with cmpType in; /// most significant operand first order.; /// 6. Last stage. Check operations for some specific attributes.; /// For example, for Load it would be:; /// 6.1.Load: volatile (as boolean flag); /// 6.2.Load: alignment (as integer numbers); /// 6.3.Load: ordering (as underlying enum class value); /// 6.4.Load: synch-scope (as integer numbers); /// 6.5.Load: range metadata (as integer ranges); /// On this stage its better to see the code, since its not more than 10-15; /// strings for particular instruction, and could change sometimes.; ///; /// Sets \p needToCmpOperands to true if the operands of the instructions; /// still must be compared afterwards. In this case it's already guaranteed; /// that both instructions have the same number of operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:1052,Performance,Load,Load,1052,"/// Compare two Instructions for equivalence, similar to; /// Instruction::isSameOperationAs.; ///; /// Stages are listed in ""most significant stage first"" order:; /// On each stage below, we do comparison between some left and right; /// operation parts. If parts are non-equal, we assign parts comparison; /// result to the operation comparison result and exit from method.; /// Otherwise we proceed to the next stage.; /// Stages:; /// 1. Operations opcodes. Compared as numbers.; /// 2. Number of operands.; /// 3. Operation types. Compared with cmpType method.; /// 4. Compare operation subclass optional data as stream of bytes:; /// just convert it to integers and call cmpNumbers.; /// 5. Compare in operation operand types with cmpType in; /// most significant operand first order.; /// 6. Last stage. Check operations for some specific attributes.; /// For example, for Load it would be:; /// 6.1.Load: volatile (as boolean flag); /// 6.2.Load: alignment (as integer numbers); /// 6.3.Load: ordering (as underlying enum class value); /// 6.4.Load: synch-scope (as integer numbers); /// 6.5.Load: range metadata (as integer ranges); /// On this stage its better to see the code, since its not more than 10-15; /// strings for particular instruction, and could change sometimes.; ///; /// Sets \p needToCmpOperands to true if the operands of the instructions; /// still must be compared afterwards. In this case it's already guaranteed; /// that both instructions have the same number of operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:1100,Performance,Load,Load,1100,"/// Compare two Instructions for equivalence, similar to; /// Instruction::isSameOperationAs.; ///; /// Stages are listed in ""most significant stage first"" order:; /// On each stage below, we do comparison between some left and right; /// operation parts. If parts are non-equal, we assign parts comparison; /// result to the operation comparison result and exit from method.; /// Otherwise we proceed to the next stage.; /// Stages:; /// 1. Operations opcodes. Compared as numbers.; /// 2. Number of operands.; /// 3. Operation types. Compared with cmpType method.; /// 4. Compare operation subclass optional data as stream of bytes:; /// just convert it to integers and call cmpNumbers.; /// 5. Compare in operation operand types with cmpType in; /// most significant operand first order.; /// 6. Last stage. Check operations for some specific attributes.; /// For example, for Load it would be:; /// 6.1.Load: volatile (as boolean flag); /// 6.2.Load: alignment (as integer numbers); /// 6.3.Load: ordering (as underlying enum class value); /// 6.4.Load: synch-scope (as integer numbers); /// 6.5.Load: range metadata (as integer ranges); /// On this stage its better to see the code, since its not more than 10-15; /// strings for particular instruction, and could change sometimes.; ///; /// Sets \p needToCmpOperands to true if the operands of the instructions; /// still must be compared afterwards. In this case it's already guaranteed; /// that both instructions have the same number of operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:1238,Integrability,depend,depends,1238,"/// Assign serial numbers to values from left function, and values from; /// right function.; /// Explanation:; /// Being comparing functions we need to compare values we meet at left and; /// right sides.; /// Its easy to sort things out for external values. It just should be; /// the same value at left and right.; /// But for local values (those were introduced inside function body); /// we have to ensure they were introduced at exactly the same place,; /// and plays the same role.; /// Let's assign serial number to each value when we meet it first time.; /// Values that were met at same place will be with same serial numbers.; /// In this case it would be good to explain few points about values assigned; /// to BBs and other ways of implementation (see below).; ///; /// 1. Safety of BB reordering.; /// It's safe to change the order of BasicBlocks in function.; /// Relationship with other functions and serial numbering will not be; /// changed in this case.; /// As follows from FunctionComparator::compare(), we do CFG walk: we start; /// from the entry, and then take each terminator. So it doesn't matter how in; /// fact BBs are ordered in function. And since cmpValues are called during; /// this walk, the numbering depends only on how BBs located inside the CFG.; /// So the answer is - yes. We will get the same numbering.; ///; /// 2. Impossibility to use dominance properties of values.; /// If we compare two instruction operands: first is usage of local; /// variable AL from function FL, and second is usage of local variable AR; /// from FR, we could compare their origins and check whether they are; /// defined at the same place.; /// But, we are still not able to compare operands of PHI nodes, since those; /// could be operands from further BBs we didn't scan yet.; /// So it's impossible to use dominance properties in general.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:1487,Modifiability,variab,variable,1487,"/// Assign serial numbers to values from left function, and values from; /// right function.; /// Explanation:; /// Being comparing functions we need to compare values we meet at left and; /// right sides.; /// Its easy to sort things out for external values. It just should be; /// the same value at left and right.; /// But for local values (those were introduced inside function body); /// we have to ensure they were introduced at exactly the same place,; /// and plays the same role.; /// Let's assign serial number to each value when we meet it first time.; /// Values that were met at same place will be with same serial numbers.; /// In this case it would be good to explain few points about values assigned; /// to BBs and other ways of implementation (see below).; ///; /// 1. Safety of BB reordering.; /// It's safe to change the order of BasicBlocks in function.; /// Relationship with other functions and serial numbering will not be; /// changed in this case.; /// As follows from FunctionComparator::compare(), we do CFG walk: we start; /// from the entry, and then take each terminator. So it doesn't matter how in; /// fact BBs are ordered in function. And since cmpValues are called during; /// this walk, the numbering depends only on how BBs located inside the CFG.; /// So the answer is - yes. We will get the same numbering.; ///; /// 2. Impossibility to use dominance properties of values.; /// If we compare two instruction operands: first is usage of local; /// variable AL from function FL, and second is usage of local variable AR; /// from FR, we could compare their origins and check whether they are; /// defined at the same place.; /// But, we are still not able to compare operands of PHI nodes, since those; /// could be operands from further BBs we didn't scan yet.; /// So it's impossible to use dominance properties in general.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:1546,Modifiability,variab,variable,1546,"/// Assign serial numbers to values from left function, and values from; /// right function.; /// Explanation:; /// Being comparing functions we need to compare values we meet at left and; /// right sides.; /// Its easy to sort things out for external values. It just should be; /// the same value at left and right.; /// But for local values (those were introduced inside function body); /// we have to ensure they were introduced at exactly the same place,; /// and plays the same role.; /// Let's assign serial number to each value when we meet it first time.; /// Values that were met at same place will be with same serial numbers.; /// In this case it would be good to explain few points about values assigned; /// to BBs and other ways of implementation (see below).; ///; /// 1. Safety of BB reordering.; /// It's safe to change the order of BasicBlocks in function.; /// Relationship with other functions and serial numbering will not be; /// changed in this case.; /// As follows from FunctionComparator::compare(), we do CFG walk: we start; /// from the entry, and then take each terminator. So it doesn't matter how in; /// fact BBs are ordered in function. And since cmpValues are called during; /// this walk, the numbering depends only on how BBs located inside the CFG.; /// So the answer is - yes. We will get the same numbering.; ///; /// 2. Impossibility to use dominance properties of values.; /// If we compare two instruction operands: first is usage of local; /// variable AL from function FL, and second is usage of local variable AR; /// from FR, we could compare their origins and check whether they are; /// defined at the same place.; /// But, we are still not able to compare operands of PHI nodes, since those; /// could be operands from further BBs we didn't scan yet.; /// So it's impossible to use dominance properties in general.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:787,Safety,Safe,Safety,787,"/// Assign serial numbers to values from left function, and values from; /// right function.; /// Explanation:; /// Being comparing functions we need to compare values we meet at left and; /// right sides.; /// Its easy to sort things out for external values. It just should be; /// the same value at left and right.; /// But for local values (those were introduced inside function body); /// we have to ensure they were introduced at exactly the same place,; /// and plays the same role.; /// Let's assign serial number to each value when we meet it first time.; /// Values that were met at same place will be with same serial numbers.; /// In this case it would be good to explain few points about values assigned; /// to BBs and other ways of implementation (see below).; ///; /// 1. Safety of BB reordering.; /// It's safe to change the order of BasicBlocks in function.; /// Relationship with other functions and serial numbering will not be; /// changed in this case.; /// As follows from FunctionComparator::compare(), we do CFG walk: we start; /// from the entry, and then take each terminator. So it doesn't matter how in; /// fact BBs are ordered in function. And since cmpValues are called during; /// this walk, the numbering depends only on how BBs located inside the CFG.; /// So the answer is - yes. We will get the same numbering.; ///; /// 2. Impossibility to use dominance properties of values.; /// If we compare two instruction operands: first is usage of local; /// variable AL from function FL, and second is usage of local variable AR; /// from FR, we could compare their origins and check whether they are; /// defined at the same place.; /// But, we are still not able to compare operands of PHI nodes, since those; /// could be operands from further BBs we didn't scan yet.; /// So it's impossible to use dominance properties in general.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:822,Safety,safe,safe,822,"/// Assign serial numbers to values from left function, and values from; /// right function.; /// Explanation:; /// Being comparing functions we need to compare values we meet at left and; /// right sides.; /// Its easy to sort things out for external values. It just should be; /// the same value at left and right.; /// But for local values (those were introduced inside function body); /// we have to ensure they were introduced at exactly the same place,; /// and plays the same role.; /// Let's assign serial number to each value when we meet it first time.; /// Values that were met at same place will be with same serial numbers.; /// In this case it would be good to explain few points about values assigned; /// to BBs and other ways of implementation (see below).; ///; /// 1. Safety of BB reordering.; /// It's safe to change the order of BasicBlocks in function.; /// Relationship with other functions and serial numbering will not be; /// changed in this case.; /// As follows from FunctionComparator::compare(), we do CFG walk: we start; /// from the entry, and then take each terminator. So it doesn't matter how in; /// fact BBs are ordered in function. And since cmpValues are called during; /// this walk, the numbering depends only on how BBs located inside the CFG.; /// So the answer is - yes. We will get the same numbering.; ///; /// 2. Impossibility to use dominance properties of values.; /// If we compare two instruction operands: first is usage of local; /// variable AL from function FL, and second is usage of local variable AR; /// from FR, we could compare their origins and check whether they are; /// defined at the same place.; /// But, we are still not able to compare operands of PHI nodes, since those; /// could be operands from further BBs we didn't scan yet.; /// So it's impossible to use dominance properties in general.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:462,Performance,perform,perform,462,"//===- FunctionImportUtils.h - Importing support utilities -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the FunctionImportGlobalProcessing class which is used; // to perform the necessary global value handling for function importing.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:351,Availability,avail,available,351,"/// Set to true (only applicatable to ELF -fpic) if dso_local should be; /// dropped for a declaration.; ///; /// On ELF, the assembler is conservative and assumes a global default; /// visibility symbol can be interposable. No direct access relocation is; /// allowed, if the definition is not in the translation unit, even if the; /// definition is available in the linkage unit. Thus we need to clear; /// dso_local to disable direct access.; ///; /// This flag should not be set for -fno-pic or -fpie, which would; /// unnecessarily disable direct access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:235,Security,access,access,235,"/// Set to true (only applicatable to ELF -fpic) if dso_local should be; /// dropped for a declaration.; ///; /// On ELF, the assembler is conservative and assumes a global default; /// visibility symbol can be interposable. No direct access relocation is; /// allowed, if the definition is not in the translation unit, even if the; /// definition is available in the linkage unit. Thus we need to clear; /// dso_local to disable direct access.; ///; /// This flag should not be set for -fno-pic or -fpie, which would; /// unnecessarily disable direct access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:437,Security,access,access,437,"/// Set to true (only applicatable to ELF -fpic) if dso_local should be; /// dropped for a declaration.; ///; /// On ELF, the assembler is conservative and assumes a global default; /// visibility symbol can be interposable. No direct access relocation is; /// allowed, if the definition is not in the translation unit, even if the; /// definition is available in the linkage unit. Thus we need to clear; /// dso_local to disable direct access.; ///; /// This flag should not be set for -fno-pic or -fpie, which would; /// unnecessarily disable direct access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:552,Security,access,access,552,"/// Set to true (only applicatable to ELF -fpic) if dso_local should be; /// dropped for a declaration.; ///; /// On ELF, the assembler is conservative and assumes a global default; /// visibility symbol can be interposable. No direct access relocation is; /// allowed, if the definition is not in the translation unit, even if the; /// definition is available in the linkage unit. Thus we need to clear; /// dso_local to disable direct access.; ///; /// This flag should not be set for -fno-pic or -fpie, which would; /// unnecessarily disable direct access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:398,Usability,clear,clear,398,"/// Set to true (only applicatable to ELF -fpic) if dso_local should be; /// dropped for a declaration.; ///; /// On ELF, the assembler is conservative and assumes a global default; /// visibility symbol can be interposable. No direct access relocation is; /// allowed, if the definition is not in the translation unit, even if the; /// definition is available in the linkage unit. Thus we need to clear; /// dso_local to disable direct access.; ///; /// This flag should not be set for -fno-pic or -fpie, which would; /// unnecessarily disable direct access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:42,Security,validat,validate,42,"/// Set of llvm.*used values, in order to validate that we don't try; /// to promote any non-renamable values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:92,Testability,assert,assertion,92,"/// Check if the given value is a local that can't be renamed (promoted).; /// Only used in assertion checking, and disabled under NDEBUG since the Used; /// set will not be populated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:92,Modifiability,variab,variables,92,/// Process globals so that they can be used in ThinLTO. This includes; /// promoting local variables so that they can be reference externally by; /// thin lto imported globals and converting strong external globals to; /// available_externally.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:4,Performance,Perform,Perform,4,/// Perform in-place global value handling on the given Module for; /// exported local functions renamed and promoted for ThinLTO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h:10,Safety,safe,safe,10,"/// It is safe to destroy a constant iff it is only used by constants itself.; /// Note that constants cannot be cyclic, so this test is pretty easy to; /// implement recursively.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h:129,Testability,test,test,129,"/// It is safe to destroy a constant iff it is only used by constants itself.; /// Note that constants cannot be cyclic, so this test is pretty easy to; /// implement recursively.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h:31,Performance,load,loaded,31,/// True if the global is ever loaded. If the global isn't ever loaded it; /// can be deleted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h:64,Performance,load,loaded,64,/// True if the global is ever loaded. If the global isn't ever loaded it; /// can be deleted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h:47,Security,access,accessing,47,"/// These start out null/false. When the first accessing function is noticed,; /// it is recorded. When a second different accessing function is noticed,; /// HasMultipleAccessingFunctions is set to true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h:123,Security,access,accessing,123,"/// These start out null/false. When the first accessing function is noticed,; /// it is recorded. When a second different accessing function is noticed,; /// HasMultipleAccessingFunctions is set to true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GlobalStatus.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GuardUtils.h:402,Performance,perform,perform,402,"//===-- GuardUtils.h - Utils for work with guards ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Utils that are used to perform transformations related to guards and their; // conditions.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GuardUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/GuardUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h:7,Integrability,Inject,InjectTLIMAppings,7,"//===- InjectTLIMAppings.h - TLI to VFABI attribute injection ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Populates the VFABI attribute with the scalar-to-vector mappings; // from the TargetLibraryInfo.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h:52,Integrability,inject,injection,52,"//===- InjectTLIMAppings.h - TLI to VFABI attribute injection ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Populates the VFABI attribute with the scalar-to-vector mappings; // from the TargetLibraryInfo.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h:7,Security,Inject,InjectTLIMAppings,7,"//===- InjectTLIMAppings.h - TLI to VFABI attribute injection ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Populates the VFABI attribute with the scalar-to-vector mappings; // from the TargetLibraryInfo.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h:52,Security,inject,injection,52,"//===- InjectTLIMAppings.h - TLI to VFABI attribute injection ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Populates the VFABI attribute with the scalar-to-vector mappings; // from the TargetLibraryInfo.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InjectTLIMappings.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h:58,Testability,log,logic,58,/// InstructionWorklist - This is the worklist management logic for; /// InstCombine and other simplification passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h:95,Usability,simpl,simplification,95,/// InstructionWorklist - This is the worklist management logic for; /// InstCombine and other simplification passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h:34,Availability,down,down,34,"// Don't bother moving everything down, just null out the slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h:27,Usability,simpl,simplified,27,"/// When an instruction is simplified, add all users of the instruction; /// to the work lists because they might get more simplified now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h:123,Usability,simpl,simplified,123,"/// When an instruction is simplified, add all users of the instruction; /// to the work lists because they might get more simplified now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h:18,Usability,clear,clear,18,"// Do an explicit clear, this shrinks the map if needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/IntegerDivision.h:615,Performance,tune,tuned,615,"//===- llvm/Transforms/Utils/IntegerDivision.h ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains an implementation of 32bit and 64bit scalar integer; // division for targets that don't have native support. It's largely derived; // from compiler-rt's implementations of __udivsi3 and __udivmoddi4,; // but hand-tuned for targets that prefer less control flow.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/IntegerDivision.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/IntegerDivision.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h:824,Availability,redundant,redundant,824,"//===- LCSSA.h - Loop-closed SSA transform Pass -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms loops by placing phi nodes at the end of the loops for; // all values that are live across the loop boundary. For example, it turns; // the left into the right code:; //; // for (...) for (...); // if (c) if (c); // X1 = ... X1 = ...; // else else; // X2 = ... X2 = ...; // X3 = phi(X1, X2) X3 = phi(X1, X2); // ... = X3 + 4 X4 = phi(X3); // ... = X4 + 4; //; // This is still valid LLVM; the extra phi nodes are purely redundant, and will; // be trivially eliminated by InstCombine. The major benefit of this; // transformation is that it makes many other loop optimizations, such as; // LoopUnswitching, simpler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h:966,Performance,optimiz,optimizations,966,"//===- LCSSA.h - Loop-closed SSA transform Pass -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms loops by placing phi nodes at the end of the loops for; // all values that are live across the loop boundary. For example, it turns; // the left into the right code:; //; // for (...) for (...); // if (c) if (c); // X1 = ... X1 = ...; // else else; // X2 = ... X2 = ...; // X3 = phi(X1, X2) X3 = phi(X1, X2); // ... = X3 + 4 X4 = phi(X3); // ... = X4 + 4; //; // This is still valid LLVM; the extra phi nodes are purely redundant, and will; // be trivially eliminated by InstCombine. The major benefit of this; // transformation is that it makes many other loop optimizations, such as; // LoopUnswitching, simpler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h:824,Safety,redund,redundant,824,"//===- LCSSA.h - Loop-closed SSA transform Pass -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms loops by placing phi nodes at the end of the loops for; // all values that are live across the loop boundary. For example, it turns; // the left into the right code:; //; // for (...) for (...); // if (c) if (c); // X1 = ... X1 = ...; // else else; // X2 = ... X2 = ...; // X3 = phi(X1, X2) X3 = phi(X1, X2); // ... = X3 + 4 X4 = phi(X3); // ... = X4 + 4; //; // This is still valid LLVM; the extra phi nodes are purely redundant, and will; // be trivially eliminated by InstCombine. The major benefit of this; // transformation is that it makes many other loop optimizations, such as; // LoopUnswitching, simpler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h:1010,Usability,simpl,simpler,1010,"//===- LCSSA.h - Loop-closed SSA transform Pass -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms loops by placing phi nodes at the end of the loops for; // all values that are live across the loop boundary. For example, it turns; // the left into the right code:; //; // for (...) for (...); // if (c) if (c); // X1 = ... X1 = ...; // else else; // X2 = ... X2 = ...; // X3 = phi(X1, X2) X3 = phi(X1, X2); // ... = X3 + 4 X4 = phi(X3); // ... = X4 + 4; //; // This is still valid LLVM; the extra phi nodes are purely redundant, and will; // be trivially eliminated by InstCombine. The major benefit of this; // transformation is that it makes many other loop optimizations, such as; // LoopUnswitching, simpler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LibCallsShrinkWrap.h:37,Integrability,Wrap,Wrap,37,"//===- LibCallsShrinkWrap.h - Shrink Wrap Library Calls -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LibCallsShrinkWrap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LibCallsShrinkWrap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:30,Performance,perform,perform,30,"//===- Local.h - Functions to perform local transformations -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This family of functions perform various local transformations to the; // program.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:408,Performance,perform,perform,408,"//===- Local.h - Functions to perform local transformations -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This family of functions perform various local transformations to the; // program.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:369,Deployability,update,updated,369,"//===----------------------------------------------------------------------===//; // Local constant propagation.; //; /// If a terminator instruction is predicated on a constant value, convert it; /// into an unconditional branch to the constant destination.; /// This is a nontrivial operation because the successors of this basic block; /// must have their PHI nodes updated.; /// Also calls RecursivelyDeleteTriviallyDeadInstructions() on any branch/switch; /// conditions and indirectbr addresses this might make dead if; /// DeleteDeadConditions is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:344,Availability,down,down,344,/// Return true if the result produced by the instruction has no side effects on; /// any paths other than where it is used. This is less conservative than; /// wouldInstructionBeTriviallyDead which is based on the assumption; /// that the use count will be 0. An example usage of this API is for; /// identifying instructions that can be sunk down to use(s).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:338,Integrability,rout,routine,338,"/// Delete all of the instructions in `DeadInsts`, and all other instructions; /// that deleting these in turn causes to be trivially dead.; ///; /// The initial instructions in the provided vector must all have empty use; /// lists and satisfy `isInstructionTriviallyDead`.; ///; /// `DeadInsts` will be used as scratch storage for this routine and will be; /// empty afterward.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:46,Usability,simpl,simplify,46,"/// Scan the specified basic block and try to simplify any instructions in it; /// and recursively delete dead instructions.; ///; /// This returns true if it changed the code, note that it can delete; /// instructions in other blocks as well in this block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:118,Modifiability,variab,variable,118,"/// Replace all the uses of an SSA value in @llvm.dbg intrinsics with; /// undef. This is useful for signaling that a variable, e.g. has been; /// found dead and hence it's unavailable at a given program point.; /// Returns true if the dbg values have been changed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:204,Performance,optimiz,optimization,204,"/// This function is used to do simplification of a CFG. For example, it; /// adjusts branches to branches to eliminate the extra hop, it eliminates; /// unreachable basic blocks, and does other peephole optimization of the CFG.; /// It returns true if a modification was made, possibly deleting the basic; /// block that was pointed to. LoopHeaders is an optional input parameter; /// providing the set of loop headers that SimplifyCFG should not eliminate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:32,Usability,simpl,simplification,32,"/// This function is used to do simplification of a CFG. For example, it; /// adjusts branches to branches to eliminate the extra hop, it eliminates; /// unreachable basic blocks, and does other peephole optimization of the CFG.; /// It returns true if a modification was made, possibly deleting the basic; /// block that was pointed to. LoopHeaders is an optional input parameter; /// providing the set of loop headers that SimplifyCFG should not eliminate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:425,Usability,Simpl,SimplifyCFG,425,"/// This function is used to do simplification of a CFG. For example, it; /// adjusts branches to branches to eliminate the extra hop, it eliminates; /// unreachable basic blocks, and does other peephole optimization of the CFG.; /// It returns true if a modification was made, possibly deleting the basic; /// block that was pointed to. LoopHeaders is an optional input parameter; /// providing the set of loop headers that SimplifyCFG should not eliminate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:171,Testability,log,logical,171,"/// If this basic block is ONLY a setcc and a branch, and if a predecessor; /// branches to us and one of our successors, fold the setcc into the; /// predecessor and use logical operations to pick the right destination.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:123,Energy Efficiency,allocate,allocated,123,"/// This function takes a virtual register computed by an Instruction and; /// replaces it with a slot in the stack frame, allocated via alloca.; /// This allows the CFG to be changed around without fear of invalidating the; /// SSA information for the value. It returns the pointer to the alloca inserted; /// to create a stack slot for X.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:119,Energy Efficiency,allocate,allocated,119,"/// This function takes a virtual register computed by a phi node and replaces; /// it with a slot in the stack frame, allocated via alloca. The phi node is; /// deleted and it returns the pointer to the alloca inserted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:335,Availability,reliab,reliable,335,"/// If the specified pointer points to an object that we control, try to modify; /// the object's alignment to PrefAlign. Returns a minimum known alignment of; /// the value after the operation, which may be lower than PrefAlign.; ///; /// Increating value alignment isn't often possible though. If alignment is; /// important, a more reliable approach is to simply align all global variables; /// and allocation instructions to their preferred alignment from the beginning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:383,Modifiability,variab,variables,383,"/// If the specified pointer points to an object that we control, try to modify; /// the object's alignment to PrefAlign. Returns a minimum known alignment of; /// the value after the operation, which may be lower than PrefAlign.; ///; /// Increating value alignment isn't often possible though. If alignment is; /// important, a more reliable approach is to simply align all global variables; /// and allocation instructions to their preferred alignment from the beginning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:359,Usability,simpl,simply,359,"/// If the specified pointer points to an object that we control, try to modify; /// the object's alignment to PrefAlign. Returns a minimum known alignment of; /// the value after the operation, which may be lower than PrefAlign.; ///; /// Increating value alignment isn't often possible though. If alignment is; /// important, a more reliable approach is to simply align all global variables; /// and allocation instructions to their preferred alignment from the beginning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:434,Availability,reliab,reliable,434,"/// Try to ensure that the alignment of \p V is at least \p PrefAlign bytes. If; /// the owning object can be modified and has an alignment less than \p; /// PrefAlign, it will be increased and \p PrefAlign returned. If the alignment; /// cannot be increased, the known alignment of the value is returned.; ///; /// It is not always possible to modify the alignment of the underlying object,; /// so if alignment is important, a more reliable approach is to simply align; /// all global variables and allocation instructions to their preferred; /// alignment from the beginning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:487,Modifiability,variab,variables,487,"/// Try to ensure that the alignment of \p V is at least \p PrefAlign bytes. If; /// the owning object can be modified and has an alignment less than \p; /// PrefAlign, it will be increased and \p PrefAlign returned. If the alignment; /// cannot be increased, the known alignment of the value is returned.; ///; /// It is not always possible to modify the alignment of the underlying object,; /// so if alignment is important, a more reliable approach is to simply align; /// all global variables and allocation instructions to their preferred; /// alignment from the beginning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:458,Usability,simpl,simply,458,"/// Try to ensure that the alignment of \p V is at least \p PrefAlign bytes. If; /// the owning object can be modified and has an alignment less than \p; /// PrefAlign, it will be increased and \p PrefAlign returned. If the alignment; /// cannot be increased, the known alignment of the value is returned.; ///; /// It is not always possible to modify the alignment of the underlying object,; /// so if alignment is important, a more reliable approach is to simply align; /// all global variables and allocation instructions to their preferred; /// alignment from the beginning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:48,Performance,load,load,48,/// Inserts a llvm.dbg.value intrinsic before a load of an alloca'd value; /// that has an associated llvm.dbg.declare intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:643,Deployability,update,updates,643,"/// Point debug users of \p From to \p To or salvage them. Use this function; /// only when replacing all uses of \p From with \p To, with a guarantee that; /// \p From is going to be deleted.; ///; /// Follow these rules to prevent use-before-def of \p To:; /// . If \p To is a linked Instruction, set \p DomPoint to \p To.; /// . If \p To is an unlinked Instruction, set \p DomPoint to the Instruction; /// \p To will be inserted after.; /// . If \p To is not an Instruction (e.g a Constant), the choice of; /// \p DomPoint is arbitrary. Pick \p From for simplicity.; ///; /// If a debug user cannot be preserved without reordering variable updates or; /// introducing a use-before-def, it is either salvaged (\ref salvageDebugInfo); /// or deleted. Returns true if any debug users were updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:789,Deployability,update,updated,789,"/// Point debug users of \p From to \p To or salvage them. Use this function; /// only when replacing all uses of \p From with \p To, with a guarantee that; /// \p From is going to be deleted.; ///; /// Follow these rules to prevent use-before-def of \p To:; /// . If \p To is a linked Instruction, set \p DomPoint to \p To.; /// . If \p To is an unlinked Instruction, set \p DomPoint to the Instruction; /// \p To will be inserted after.; /// . If \p To is not an Instruction (e.g a Constant), the choice of; /// \p DomPoint is arbitrary. Pick \p From for simplicity.; ///; /// If a debug user cannot be preserved without reordering variable updates or; /// introducing a use-before-def, it is either salvaged (\ref salvageDebugInfo); /// or deleted. Returns true if any debug users were updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:634,Modifiability,variab,variable,634,"/// Point debug users of \p From to \p To or salvage them. Use this function; /// only when replacing all uses of \p From with \p To, with a guarantee that; /// \p From is going to be deleted.; ///; /// Follow these rules to prevent use-before-def of \p To:; /// . If \p To is a linked Instruction, set \p DomPoint to \p To.; /// . If \p To is an unlinked Instruction, set \p DomPoint to the Instruction; /// \p To will be inserted after.; /// . If \p To is not an Instruction (e.g a Constant), the choice of; /// \p DomPoint is arbitrary. Pick \p From for simplicity.; ///; /// If a debug user cannot be preserved without reordering variable updates or; /// introducing a use-before-def, it is either salvaged (\ref salvageDebugInfo); /// or deleted. Returns true if any debug users were updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:557,Usability,simpl,simplicity,557,"/// Point debug users of \p From to \p To or salvage them. Use this function; /// only when replacing all uses of \p From with \p To, with a guarantee that; /// \p From is going to be deleted.; ///; /// Follow these rules to prevent use-before-def of \p To:; /// . If \p To is a linked Instruction, set \p DomPoint to \p To.; /// . If \p To is an unlinked Instruction, set \p DomPoint to the Instruction; /// \p To will be inserted after.; /// . If \p To is not an Instruction (e.g a Constant), the choice of; /// \p DomPoint is arbitrary. Pick \p From for simplicity.; ///; /// If a debug user cannot be preserved without reordering variable updates or; /// introducing a use-before-def, it is either salvaged (\ref salvageDebugInfo); /// or deleted. Returns true if any debug users were updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:123,Deployability,Update,Updates,123,"/// Replace 'BB's terminator with one that does not have an unwind successor; /// block. Rewrites `invoke` to `call`, etc. Updates any PHIs in unwind; /// successor. Returns the instruction that replaced the original terminator,; /// which might be a call in case the original terminator was an invoke.; ///; /// \param BB Block whose terminator will be replaced. Its terminator must; /// have an unwind successor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:89,Modifiability,Rewrite,Rewrites,89,"/// Replace 'BB's terminator with one that does not have an unwind successor; /// block. Rewrites `invoke` to `call`, etc. Updates any PHIs in unwind; /// successor. Returns the instruction that replaced the original terminator,; /// which might be a call in case the original terminator was an invoke.; ///; /// \param BB Block whose terminator will be replaced. Its terminator must; /// have an unwind successor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:4,Deployability,Patch,Patch,4,/// Patch the replacement so that it is not more restrictive than the value; /// being replaced. It assumes that the replacement does not get moved from; /// its original position.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:109,Safety,safe,safepoint,109,"/// Return true if this call calls a gc leaf function.; ///; /// A leaf function is a function that does not safepoint the thread during its; /// execution. During a call or invoke to such a function, the callers stack; /// does not have to be made parseable.; ///; /// Most passes can and should ignore this information, and it is only used; /// during lowering by the GC infrastructure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:42,Performance,load,load,42,/// Copy a nonnull metadata node to a new load instruction.; ///; /// This handles mapping it to range metadata if the new load is an integer; /// load instead of a pointer load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:123,Performance,load,load,123,/// Copy a nonnull metadata node to a new load instruction.; ///; /// This handles mapping it to range metadata if the new load is an integer; /// load instead of a pointer load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:147,Performance,load,load,147,/// Copy a nonnull metadata node to a new load instruction.; ///; /// This handles mapping it to range metadata if the new load is an integer; /// load instead of a pointer load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:173,Performance,load,load,173,/// Copy a nonnull metadata node to a new load instruction.; ///; /// This handles mapping it to range metadata if the new load is an integer; /// load instead of a pointer load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:40,Performance,load,load,40,/// Copy a range metadata node to a new load instruction.; ///; /// This handles mapping it to nonnull metadata if the new load is a pointer; /// load instead of an integer load and the range doesn't cover null.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:123,Performance,load,load,123,/// Copy a range metadata node to a new load instruction.; ///; /// This handles mapping it to nonnull metadata if the new load is a pointer; /// load instead of an integer load and the range doesn't cover null.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:146,Performance,load,load,146,/// Copy a range metadata node to a new load instruction.; ///; /// This handles mapping it to nonnull metadata if the new load is a pointer; /// load instead of an integer load and the range doesn't cover null.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:173,Performance,load,load,173,/// Copy a range metadata node to a new load instruction.; ///; /// This handles mapping it to nonnull metadata if the new load is a pointer; /// load instead of an integer load and the range doesn't cover null.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:309,Safety,avoid,avoid,309,"//===----------------------------------------------------------------------===//; // Sanitizer utilities; //; /// Given a CallInst, check if it calls a string function known to CodeGen,; /// and mark it with NoBuiltin if so. To be used by sanitizers that intend; /// to intercept string functions and want to avoid converting them to target; /// specific instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:85,Security,Sanitiz,Sanitizer,85,"//===----------------------------------------------------------------------===//; // Sanitizer utilities; //; /// Given a CallInst, check if it calls a string function known to CodeGen,; /// and mark it with NoBuiltin if so. To be used by sanitizers that intend; /// to intercept string functions and want to avoid converting them to target; /// specific instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:239,Security,sanitiz,sanitizers,239,"//===----------------------------------------------------------------------===//; // Sanitizer utilities; //; /// Given a CallInst, check if it calls a string function known to CodeGen,; /// and mark it with NoBuiltin if so. To be used by sanitizers that intend; /// to intercept string functions and want to avoid converting them to target; /// specific instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h:367,Modifiability,variab,variable,367,"// Keeps track of the structure of a loop. This is similar to llvm::Loop,; // except that it is more lightweight and can track the state of a loop through; // changing and potentially invalid IR. This structure also formalizes the; // kinds of loops we can deal with -- ones that have a single latch that is also; // an exiting block *and* have a canonical induction variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h:308,Modifiability,variab,variable,308,"/// This class is used to constrain loops to run within a given iteration space.; /// The algorithm this class implements is given a Loop and a range [Begin,; /// End). The algorithm then tries to break out a ""main loop"" out of the loop; /// it is given in a way that the ""main loop"" runs with the induction variable; /// in a subset of [Begin, End). The algorithm emits appropriate pre and post; /// loops to run any remaining iterations. The pre loop runs any iterations in; /// which the induction variable is < Begin, and the post loop runs any; /// iterations in which the induction variable is >= End.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h:501,Modifiability,variab,variable,501,"/// This class is used to constrain loops to run within a given iteration space.; /// The algorithm this class implements is given a Loop and a range [Begin,; /// End). The algorithm then tries to break out a ""main loop"" out of the loop; /// it is given in a way that the ""main loop"" runs with the induction variable; /// in a subset of [Begin, End). The algorithm emits appropriate pre and post; /// loops to run any remaining iterations. The pre loop runs any iterations in; /// which the induction variable is < Begin, and the post loop runs any; /// iterations in which the induction variable is >= End.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h:588,Modifiability,variab,variable,588,"/// This class is used to constrain loops to run within a given iteration space.; /// The algorithm this class implements is given a Loop and a range [Begin,; /// End). The algorithm then tries to break out a ""main loop"" out of the loop; /// it is given in a way that the ""main loop"" runs with the induction variable; /// in a subset of [Begin, End). The algorithm emits appropriate pre and post; /// loops to run any remaining iterations. The pre loop runs any iterations in; /// which the induction variable is < Begin, and the post loop runs any; /// iterations in which the induction variable is >= End.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h:3,Modifiability,Rewrite,Rewrite,3,"// Rewrite the iteration space of the loop denoted by (LS, Preheader). The; // iteration space of the rewritten loop ends at ExitLoopAt. The start of the; // iteration space is not changed. `ExitLoopAt' is assumed to be slt; // `OriginalHeaderCount'.; //; // If there are iterations left to execute, control is made to jump to; // `ContinuationBlock', otherwise they take the normal loop exit. The; // returned `RewrittenRangeInfo' object is populated as follows:; //; // .PseudoExit is a basic block that unconditionally branches to; // `ContinuationBlock'.; //; // .ExitSelector is a basic block that decides, on exit from the loop,; // whether to branch to the ""true"" exit or to `PseudoExit'.; //; // .PHIValuesAtPseudoExit are PHINodes in `PseudoExit' that compute the value; // for each PHINode in the loop header on taking the pseudo exit.; //; // After changeIterationSpaceEnd, `Preheader' is no longer a legitimate; // preheader because it is made to branch to the loop header only; // conditionally.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h:177,Modifiability,rewrite,rewrites,177,// `ContinuationBlockAndPreheader' was the continuation block for some call to; // `changeIterationSpaceEnd' and is the preheader to the loop denoted by `LS'.; // This function rewrites the PHI nodes in `LS.Header' to start with the; // correct value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h:42,Performance,perform,perform,42,"//===- LoopRotationUtils.h - Utilities to perform loop rotation -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides utilities to convert a loop into a loop with bottom test.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h:454,Testability,test,test,454,"//===- LoopRotationUtils.h - Utilities to perform loop rotation -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides utilities to convert a loop into a loop with bottom test.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h:61,Performance,perform,perform,61,"/// Convert a loop into a loop with bottom test. It may; /// perform loop latch simplication as well if the flag RotationOnly; /// is false. The flag Threshold represents the size threshold of the loop; /// header. If the loop header's size exceeds the threshold, the loop rotation; /// will give up. The flag IsUtilMode controls the heuristic used in the; /// LoopRotation. If it is true, the profitability heuristic will be ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h:43,Testability,test,test,43,"/// Convert a loop into a loop with bottom test. It may; /// perform loop latch simplication as well if the flag RotationOnly; /// is false. The flag Threshold represents the size threshold of the loop; /// header. If the loop header's size exceeds the threshold, the loop rotation; /// will give up. The flag IsUtilMode controls the heuristic used in the; /// LoopRotation. If it is true, the profitability heuristic will be ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h:80,Usability,simpl,simplication,80,"/// Convert a loop into a loop with bottom test. It may; /// perform loop latch simplication as well if the flag RotationOnly; /// is false. The flag Threshold represents the size threshold of the loop; /// header. If the loop header's size exceeds the threshold, the loop rotation; /// will give up. The flag IsUtilMode controls the heuristic used in the; /// LoopRotation. If it is true, the profitability heuristic will be ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h:1727,Deployability,update,updates,1727,"//===- LoopSimplify.h - Loop Canonicalization Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs several transformations to transform natural loops into a; // simpler form, which makes subsequent analyses and transformations simpler and; // more effective.; //; // Loop pre-header insertion guarantees that there is a single, non-critical; // entry edge from outside of the loop to the loop header. This simplifies a; // number of analyses and transformations, such as LICM.; //; // Loop exit-block insertion guarantees that all exit blocks from the loop; // (blocks which are outside of the loop that have predecessors inside of the; // loop) only have predecessors from inside of the loop (and are thus dominated; // by the loop header). This simplifies transformations such as store-sinking; // that are built into LICM.; //; // This pass also guarantees that loops will have exactly one backedge.; //; // Indirectbr instructions introduce several complications. If the loop; // contains or is entered by an indirectbr instruction, it may not be possible; // to transform the loop and make these guarantees. Client code should check; // that these conditions are true before relying on them.; //; // Note that the simplifycfg pass will clean up blocks which are split out but; // end up being unnecessary, so usage of this pass should not pessimize; // generated code.; //; // This pass obviously modifies the CFG, but updates loop information and; // dominator information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h:393,Performance,perform,performs,393,"//===- LoopSimplify.h - Loop Canonicalization Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs several transformations to transform natural loops into a; // simpler form, which makes subsequent analyses and transformations simpler and; // more effective.; //; // Loop pre-header insertion guarantees that there is a single, non-critical; // entry edge from outside of the loop to the loop header. This simplifies a; // number of analyses and transformations, such as LICM.; //; // Loop exit-block insertion guarantees that all exit blocks from the loop; // (blocks which are outside of the loop that have predecessors inside of the; // loop) only have predecessors from inside of the loop (and are thus dominated; // by the loop header). This simplifies transformations such as store-sinking; // that are built into LICM.; //; // This pass also guarantees that loops will have exactly one backedge.; //; // Indirectbr instructions introduce several complications. If the loop; // contains or is entered by an indirectbr instruction, it may not be possible; // to transform the loop and make these guarantees. Client code should check; // that these conditions are true before relying on them.; //; // Note that the simplifycfg pass will clean up blocks which are split out but; // end up being unnecessary, so usage of this pass should not pessimize; // generated code.; //; // This pass obviously modifies the CFG, but updates loop information and; // dominator information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h:464,Usability,simpl,simpler,464,"//===- LoopSimplify.h - Loop Canonicalization Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs several transformations to transform natural loops into a; // simpler form, which makes subsequent analyses and transformations simpler and; // more effective.; //; // Loop pre-header insertion guarantees that there is a single, non-critical; // entry edge from outside of the loop to the loop header. This simplifies a; // number of analyses and transformations, such as LICM.; //; // Loop exit-block insertion guarantees that all exit blocks from the loop; // (blocks which are outside of the loop that have predecessors inside of the; // loop) only have predecessors from inside of the loop (and are thus dominated; // by the loop header). This simplifies transformations such as store-sinking; // that are built into LICM.; //; // This pass also guarantees that loops will have exactly one backedge.; //; // Indirectbr instructions introduce several complications. If the loop; // contains or is entered by an indirectbr instruction, it may not be possible; // to transform the loop and make these guarantees. Client code should check; // that these conditions are true before relying on them.; //; // Note that the simplifycfg pass will clean up blocks which are split out but; // end up being unnecessary, so usage of this pass should not pessimize; // generated code.; //; // This pass obviously modifies the CFG, but updates loop information and; // dominator information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h:530,Usability,simpl,simpler,530,"//===- LoopSimplify.h - Loop Canonicalization Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs several transformations to transform natural loops into a; // simpler form, which makes subsequent analyses and transformations simpler and; // more effective.; //; // Loop pre-header insertion guarantees that there is a single, non-critical; // entry edge from outside of the loop to the loop header. This simplifies a; // number of analyses and transformations, such as LICM.; //; // Loop exit-block insertion guarantees that all exit blocks from the loop; // (blocks which are outside of the loop that have predecessors inside of the; // loop) only have predecessors from inside of the loop (and are thus dominated; // by the loop header). This simplifies transformations such as store-sinking; // that are built into LICM.; //; // This pass also guarantees that loops will have exactly one backedge.; //; // Indirectbr instructions introduce several complications. If the loop; // contains or is entered by an indirectbr instruction, it may not be possible; // to transform the loop and make these guarantees. Client code should check; // that these conditions are true before relying on them.; //; // Note that the simplifycfg pass will clean up blocks which are split out but; // end up being unnecessary, so usage of this pass should not pessimize; // generated code.; //; // This pass obviously modifies the CFG, but updates loop information and; // dominator information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h:709,Usability,simpl,simplifies,709,"//===- LoopSimplify.h - Loop Canonicalization Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs several transformations to transform natural loops into a; // simpler form, which makes subsequent analyses and transformations simpler and; // more effective.; //; // Loop pre-header insertion guarantees that there is a single, non-critical; // entry edge from outside of the loop to the loop header. This simplifies a; // number of analyses and transformations, such as LICM.; //; // Loop exit-block insertion guarantees that all exit blocks from the loop; // (blocks which are outside of the loop that have predecessors inside of the; // loop) only have predecessors from inside of the loop (and are thus dominated; // by the loop header). This simplifies transformations such as store-sinking; // that are built into LICM.; //; // This pass also guarantees that loops will have exactly one backedge.; //; // Indirectbr instructions introduce several complications. If the loop; // contains or is entered by an indirectbr instruction, it may not be possible; // to transform the loop and make these guarantees. Client code should check; // that these conditions are true before relying on them.; //; // Note that the simplifycfg pass will clean up blocks which are split out but; // end up being unnecessary, so usage of this pass should not pessimize; // generated code.; //; // This pass obviously modifies the CFG, but updates loop information and; // dominator information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h:1050,Usability,simpl,simplifies,1050,"//===- LoopSimplify.h - Loop Canonicalization Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs several transformations to transform natural loops into a; // simpler form, which makes subsequent analyses and transformations simpler and; // more effective.; //; // Loop pre-header insertion guarantees that there is a single, non-critical; // entry edge from outside of the loop to the loop header. This simplifies a; // number of analyses and transformations, such as LICM.; //; // Loop exit-block insertion guarantees that all exit blocks from the loop; // (blocks which are outside of the loop that have predecessors inside of the; // loop) only have predecessors from inside of the loop (and are thus dominated; // by the loop header). This simplifies transformations such as store-sinking; // that are built into LICM.; //; // This pass also guarantees that loops will have exactly one backedge.; //; // Indirectbr instructions introduce several complications. If the loop; // contains or is entered by an indirectbr instruction, it may not be possible; // to transform the loop and make these guarantees. Client code should check; // that these conditions are true before relying on them.; //; // Note that the simplifycfg pass will clean up blocks which are split out but; // end up being unnecessary, so usage of this pass should not pessimize; // generated code.; //; // This pass obviously modifies the CFG, but updates loop information and; // dominator information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h:1522,Usability,simpl,simplifycfg,1522,"//===- LoopSimplify.h - Loop Canonicalization Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs several transformations to transform natural loops into a; // simpler form, which makes subsequent analyses and transformations simpler and; // more effective.; //; // Loop pre-header insertion guarantees that there is a single, non-critical; // entry edge from outside of the loop to the loop header. This simplifies a; // number of analyses and transformations, such as LICM.; //; // Loop exit-block insertion guarantees that all exit blocks from the loop; // (blocks which are outside of the loop that have predecessors inside of the; // loop) only have predecessors from inside of the loop (and are thus dominated; // by the loop header). This simplifies transformations such as store-sinking; // that are built into LICM.; //; // This pass also guarantees that loops will have exactly one backedge.; //; // Indirectbr instructions introduce several complications. If the loop; // contains or is entered by an indirectbr instruction, it may not be possible; // to transform the loop and make these guarantees. Client code should check; // that these conditions are true before relying on them.; //; // Note that the simplifycfg pass will clean up blocks which are split out but; // end up being unnecessary, so usage of this pass should not pessimize; // generated code.; //; // This pass obviously modifies the CFG, but updates loop information and; // dominator information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h:223,Deployability,update,update,223,"/// Simplify each loop in a loop nest recursively.; ///; /// This takes a potentially un-simplified loop L (and its children) and turns; /// it into a simplified loop nest with preheaders and single backedges. It will; /// update \c DominatorTree, \c LoopInfo, \c ScalarEvolution and \c MemorySSA; /// analyses if they're non-null, and LCSSA if \c PreserveLCSSA is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h:4,Usability,Simpl,Simplify,4,"/// Simplify each loop in a loop nest recursively.; ///; /// This takes a potentially un-simplified loop L (and its children) and turns; /// it into a simplified loop nest with preheaders and single backedges. It will; /// update \c DominatorTree, \c LoopInfo, \c ScalarEvolution and \c MemorySSA; /// analyses if they're non-null, and LCSSA if \c PreserveLCSSA is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h:89,Usability,simpl,simplified,89,"/// Simplify each loop in a loop nest recursively.; ///; /// This takes a potentially un-simplified loop L (and its children) and turns; /// it into a simplified loop nest with preheaders and single backedges. It will; /// update \c DominatorTree, \c LoopInfo, \c ScalarEvolution and \c MemorySSA; /// analyses if they're non-null, and LCSSA if \c PreserveLCSSA is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h:151,Usability,simpl,simplified,151,"/// Simplify each loop in a loop nest recursively.; ///; /// This takes a potentially un-simplified loop L (and its children) and turns; /// it into a simplified loop nest with preheaders and single backedges. It will; /// update \c DominatorTree, \c LoopInfo, \c ScalarEvolution and \c MemorySSA; /// analyses if they're non-null, and LCSSA if \c PreserveLCSSA is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:202,Deployability,update,update,202,"/// Ensure that all exit blocks of the loop are dedicated exits.; ///; /// For any loop exit block with non-loop predecessors, we split the loop; /// predecessors to use a dedicated loop exit block. We update the dominator; /// tree and loop info if provided, and will preserve LCSSA if requested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:351,Integrability,rout,routine,351,"/// Ensures LCSSA form for every instruction from the Worklist in the scope of; /// innermost containing loop.; ///; /// For the given instruction which have uses outside of the loop, an LCSSA PHI; /// node is inserted and the uses outside the loop are rewritten to use this; /// node.; ///; /// LoopInfo and DominatorTree are required and, since the routine makes no; /// changes to CFG, preserved.; ///; /// Returns true if any modifications are made.; ///; /// This function may introduce unused PHI nodes. If \p PHIsToRemove is not; /// nullptr, those are added to it (before removing, the caller has to check if; /// they still do not have any uses). Otherwise the PHIs are directly removed.; ///; /// If \p InsertedPHIs is not nullptr, inserted phis will be added to this; /// vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:107,Security,access,access,107,/// Flags controlling how much is checked when sinking or hoisting; /// instructions. The number of memory access in the loop (and whether there; /// are too many) is determined in the constructors when using MemorySSA.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:471,Safety,safe,safety,471,"/// Walk the specified region of the CFG (defined by all blocks; /// dominated by the specified block, and that are in the current loop) in; /// reverse depth first order w.r.t the DominatorTree. This allows us to visit; /// uses before definitions, allowing us to sink a loop body in one pass without; /// iteration. Takes DomTreeNode, AAResults, LoopInfo, DominatorTree,; /// TargetLibraryInfo, Loop, AliasSet information for all; /// instructions of the loop and loop safety information as; /// arguments. Diagnostics is emitted via \p ORE. It returns changed status.; /// \p CurLoop is a loop to do sinking on. \p OutermostLoop is used only when; /// this function is called by \p sinkRegionForLoopNest.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:464,Safety,safe,safety,464,"/// Walk the specified region of the CFG (defined by all blocks; /// dominated by the specified block, and that are in the current loop) in depth; /// first order w.r.t the DominatorTree. This allows us to visit definitions; /// before uses, allowing us to hoist a loop body in one pass without iteration.; /// Takes DomTreeNode, AAResults, LoopInfo, DominatorTree,; /// TargetLibraryInfo, Loop, AliasSet information for all; /// instructions of the loop and loop safety information as arguments.; /// Diagnostics is emitted via \p ORE. It returns changed status.; /// \p AllowSpeculation is whether values should be hoisted even if they are not; /// guaranteed to execute in the loop, but are safe to speculatively execute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:694,Safety,safe,safe,694,"/// Walk the specified region of the CFG (defined by all blocks; /// dominated by the specified block, and that are in the current loop) in depth; /// first order w.r.t the DominatorTree. This allows us to visit definitions; /// before uses, allowing us to hoist a loop body in one pass without iteration.; /// Takes DomTreeNode, AAResults, LoopInfo, DominatorTree,; /// TargetLibraryInfo, Loop, AliasSet information for all; /// instructions of the loop and loop safety information as arguments.; /// Diagnostics is emitted via \p ORE. It returns changed status.; /// \p AllowSpeculation is whether values should be hoisted even if they are not; /// guaranteed to execute in the loop, but are safe to speculatively execute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:33,Modifiability,variab,variable,33,/// Return true if the induction variable \p IV in a Loop whose latch is; /// \p LatchBlock would become dead if the exit test \p Cond were removed.; /// Conservatively returns false if analysis is insufficient.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:122,Testability,test,test,122,/// Return true if the induction variable \p IV in a Loop whose latch is; /// \p LatchBlock would become dead if the exit test \p Cond were removed.; /// Conservatively returns false if analysis is insufficient.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:339,Deployability,update,updates,339,"/// This function deletes dead loops. The caller of this function needs to; /// guarantee that the loop is infact dead.; /// The function requires a bunch or prerequisites to be present:; /// - The loop needs to be in LCSSA form; /// - The loop needs to have a Preheader; /// - A unique dedicated exit block must exist; ///; /// This also updates the relevant analysis information in \p DT, \p SE, \p LI; /// and \p MSSA if pointers to those are provided.; /// It also updates the loop PM if an updater struct is provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:469,Deployability,update,updates,469,"/// This function deletes dead loops. The caller of this function needs to; /// guarantee that the loop is infact dead.; /// The function requires a bunch or prerequisites to be present:; /// - The loop needs to be in LCSSA form; /// - The loop needs to have a Preheader; /// - A unique dedicated exit block must exist; ///; /// This also updates the relevant analysis information in \p DT, \p SE, \p LI; /// and \p MSSA if pointers to those are provided.; /// It also updates the loop PM if an updater struct is provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:495,Deployability,update,updater,495,"/// This function deletes dead loops. The caller of this function needs to; /// guarantee that the loop is infact dead.; /// The function requires a bunch or prerequisites to be present:; /// - The loop needs to be in LCSSA form; /// - The loop needs to have a Preheader; /// - A unique dedicated exit block must exist; ///; /// This also updates the relevant analysis information in \p DT, \p SE, \p LI; /// and \p MSSA if pointers to those are provided.; /// It also updates the loop PM if an updater struct is provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:94,Performance,load,loads,94,"/// Try to promote memory values to scalars by sinking stores out of; /// the loop and moving loads to before the loop. We do this by looping over; /// the stores in the loop, looking for stores to Must pointers which are; /// loop invariant. It takes a set of must-alias values, Loop exit blocks; /// vector, loop exit blocks insertion point vector, PredIteratorCache,; /// LoopInfo, DominatorTree, Loop, AliasSet information for all instructions; /// of the loop and loop safety information as arguments.; /// Diagnostics is emitted via \p ORE. It returns changed status.; /// \p AllowSpeculation is whether values should be hoisted even if they are not; /// guaranteed to execute in the loop, but are safe to speculatively execute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:474,Safety,safe,safety,474,"/// Try to promote memory values to scalars by sinking stores out of; /// the loop and moving loads to before the loop. We do this by looping over; /// the stores in the loop, looking for stores to Must pointers which are; /// loop invariant. It takes a set of must-alias values, Loop exit blocks; /// vector, loop exit blocks insertion point vector, PredIteratorCache,; /// LoopInfo, DominatorTree, Loop, AliasSet information for all instructions; /// of the loop and loop safety information as arguments.; /// Diagnostics is emitted via \p ORE. It returns changed status.; /// \p AllowSpeculation is whether values should be hoisted even if they are not; /// guaranteed to execute in the loop, but are safe to speculatively execute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:704,Safety,safe,safe,704,"/// Try to promote memory values to scalars by sinking stores out of; /// the loop and moving loads to before the loop. We do this by looping over; /// the stores in the loop, looking for stores to Must pointers which are; /// loop invariant. It takes a set of must-alias values, Loop exit blocks; /// vector, loop exit blocks insertion point vector, PredIteratorCache,; /// LoopInfo, DominatorTree, Loop, AliasSet information for all instructions; /// of the loop and loop safety information as arguments.; /// Diagnostics is emitted via \p ORE. It returns changed status.; /// \p AllowSpeculation is whether values should be hoisted even if they are not; /// guaranteed to execute in the loop, but are safe to speculatively execute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:94,Performance,scalab,scalable,94,"/// Find a combination of metadata (""llvm.loop.vectorize.width"" and; /// ""llvm.loop.vectorize.scalable.enable"") for a loop and use it to construct a; /// ElementCount. If the metadata ""llvm.loop.vectorize.width"" cannot be found; /// then std::nullopt is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:282,Modifiability,Inherit,InheritOptionsAttrsPrefix,282,"/// Create a new loop identifier for a loop created from a loop transformation.; ///; /// @param OrigLoopID The loop ID of the loop before the transformation.; /// @param FollowupAttrs List of attribute names that contain attributes to be; /// added to the new loop ID.; /// @param InheritOptionsAttrsPrefix Selects which attributes should be inherited; /// from the original loop. The following values; /// are considered:; /// nullptr : Inherit all attributes from @p OrigLoopID.; /// """" : Do not inherit any attribute from @p OrigLoopID; only use; /// those specified by a followup attribute.; /// ""<prefix>"": Inherit all attributes except those which start with; /// <prefix>; commonly used to remove metadata for the; /// applied transformation.; /// @param AlwaysNew If true, do not try to reuse OrigLoopID and never return; /// std::nullopt.; ///; /// @return The loop ID for the after-transformation loop. The following values; /// can be returned:; /// std::nullopt : No followup attribute was found; it is up to the; /// transformation to choose attributes that make sense.; /// @p OrigLoopID: The original identifier can be reused.; /// nullptr : The new loop has no attributes.; /// MDNode* : A new unique loop identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:343,Modifiability,inherit,inherited,343,"/// Create a new loop identifier for a loop created from a loop transformation.; ///; /// @param OrigLoopID The loop ID of the loop before the transformation.; /// @param FollowupAttrs List of attribute names that contain attributes to be; /// added to the new loop ID.; /// @param InheritOptionsAttrsPrefix Selects which attributes should be inherited; /// from the original loop. The following values; /// are considered:; /// nullptr : Inherit all attributes from @p OrigLoopID.; /// """" : Do not inherit any attribute from @p OrigLoopID; only use; /// those specified by a followup attribute.; /// ""<prefix>"": Inherit all attributes except those which start with; /// <prefix>; commonly used to remove metadata for the; /// applied transformation.; /// @param AlwaysNew If true, do not try to reuse OrigLoopID and never return; /// std::nullopt.; ///; /// @return The loop ID for the after-transformation loop. The following values; /// can be returned:; /// std::nullopt : No followup attribute was found; it is up to the; /// transformation to choose attributes that make sense.; /// @p OrigLoopID: The original identifier can be reused.; /// nullptr : The new loop has no attributes.; /// MDNode* : A new unique loop identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:439,Modifiability,Inherit,Inherit,439,"/// Create a new loop identifier for a loop created from a loop transformation.; ///; /// @param OrigLoopID The loop ID of the loop before the transformation.; /// @param FollowupAttrs List of attribute names that contain attributes to be; /// added to the new loop ID.; /// @param InheritOptionsAttrsPrefix Selects which attributes should be inherited; /// from the original loop. The following values; /// are considered:; /// nullptr : Inherit all attributes from @p OrigLoopID.; /// """" : Do not inherit any attribute from @p OrigLoopID; only use; /// those specified by a followup attribute.; /// ""<prefix>"": Inherit all attributes except those which start with; /// <prefix>; commonly used to remove metadata for the; /// applied transformation.; /// @param AlwaysNew If true, do not try to reuse OrigLoopID and never return; /// std::nullopt.; ///; /// @return The loop ID for the after-transformation loop. The following values; /// can be returned:; /// std::nullopt : No followup attribute was found; it is up to the; /// transformation to choose attributes that make sense.; /// @p OrigLoopID: The original identifier can be reused.; /// nullptr : The new loop has no attributes.; /// MDNode* : A new unique loop identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:499,Modifiability,inherit,inherit,499,"/// Create a new loop identifier for a loop created from a loop transformation.; ///; /// @param OrigLoopID The loop ID of the loop before the transformation.; /// @param FollowupAttrs List of attribute names that contain attributes to be; /// added to the new loop ID.; /// @param InheritOptionsAttrsPrefix Selects which attributes should be inherited; /// from the original loop. The following values; /// are considered:; /// nullptr : Inherit all attributes from @p OrigLoopID.; /// """" : Do not inherit any attribute from @p OrigLoopID; only use; /// those specified by a followup attribute.; /// ""<prefix>"": Inherit all attributes except those which start with; /// <prefix>; commonly used to remove metadata for the; /// applied transformation.; /// @param AlwaysNew If true, do not try to reuse OrigLoopID and never return; /// std::nullopt.; ///; /// @return The loop ID for the after-transformation loop. The following values; /// can be returned:; /// std::nullopt : No followup attribute was found; it is up to the; /// transformation to choose attributes that make sense.; /// @p OrigLoopID: The original identifier can be reused.; /// nullptr : The new loop has no attributes.; /// MDNode* : A new unique loop identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:613,Modifiability,Inherit,Inherit,613,"/// Create a new loop identifier for a loop created from a loop transformation.; ///; /// @param OrigLoopID The loop ID of the loop before the transformation.; /// @param FollowupAttrs List of attribute names that contain attributes to be; /// added to the new loop ID.; /// @param InheritOptionsAttrsPrefix Selects which attributes should be inherited; /// from the original loop. The following values; /// are considered:; /// nullptr : Inherit all attributes from @p OrigLoopID.; /// """" : Do not inherit any attribute from @p OrigLoopID; only use; /// those specified by a followup attribute.; /// ""<prefix>"": Inherit all attributes except those which start with; /// <prefix>; commonly used to remove metadata for the; /// applied transformation.; /// @param AlwaysNew If true, do not try to reuse OrigLoopID and never return; /// std::nullopt.; ///; /// @return The loop ID for the after-transformation loop. The following values; /// can be returned:; /// std::nullopt : No followup attribute was found; it is up to the; /// transformation to choose attributes that make sense.; /// @p OrigLoopID: The original identifier can be reused.; /// nullptr : The new loop has no attributes.; /// MDNode* : A new unique loop identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:127,Deployability,update,update,127,/// @}; /// Set input string into loop metadata by keeping other values intact.; /// If the string is already in loop metadata update value if it is; /// different.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:207,Deployability,update,updated,207,"/// Set a loop's branch weight metadata to reflect that loop has \p; /// EstimatedTripCount iterations and \p EstimatedLoopInvocationWeight exits; /// through latch. Returns true if metadata is successfully updated, false; /// otherwise. Note that loop must have a latch block which controls loop exit; /// in order to succeed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:110,Availability,fault,faults,110,"/// Returns true if is legal to hoist or sink this instruction disregarding the; /// possible introduction of faults. Reasoning about potential faulting; /// instructions is the responsibility of the caller since it is challenging to; /// do efficiently from within this routine.; /// \p TargetExecutesOncePerLoop is true only when it is guaranteed that the; /// target executes at most once per execution of the loop body. This is used; /// to assess the legality of duplicating atomic loads. Generally, this is; /// true when moving out of loop and not true when moving into loops.; /// If \p ORE is set use it to emit optimization remarks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:144,Availability,fault,faulting,144,"/// Returns true if is legal to hoist or sink this instruction disregarding the; /// possible introduction of faults. Reasoning about potential faulting; /// instructions is the responsibility of the caller since it is challenging to; /// do efficiently from within this routine.; /// \p TargetExecutesOncePerLoop is true only when it is guaranteed that the; /// target executes at most once per execution of the loop body. This is used; /// to assess the legality of duplicating atomic loads. Generally, this is; /// true when moving out of loop and not true when moving into loops.; /// If \p ORE is set use it to emit optimization remarks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:242,Energy Efficiency,efficient,efficiently,242,"/// Returns true if is legal to hoist or sink this instruction disregarding the; /// possible introduction of faults. Reasoning about potential faulting; /// instructions is the responsibility of the caller since it is challenging to; /// do efficiently from within this routine.; /// \p TargetExecutesOncePerLoop is true only when it is guaranteed that the; /// target executes at most once per execution of the loop body. This is used; /// to assess the legality of duplicating atomic loads. Generally, this is; /// true when moving out of loop and not true when moving into loops.; /// If \p ORE is set use it to emit optimization remarks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:271,Integrability,rout,routine,271,"/// Returns true if is legal to hoist or sink this instruction disregarding the; /// possible introduction of faults. Reasoning about potential faulting; /// instructions is the responsibility of the caller since it is challenging to; /// do efficiently from within this routine.; /// \p TargetExecutesOncePerLoop is true only when it is guaranteed that the; /// target executes at most once per execution of the loop body. This is used; /// to assess the legality of duplicating atomic loads. Generally, this is; /// true when moving out of loop and not true when moving into loops.; /// If \p ORE is set use it to emit optimization remarks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:487,Performance,load,loads,487,"/// Returns true if is legal to hoist or sink this instruction disregarding the; /// possible introduction of faults. Reasoning about potential faulting; /// instructions is the responsibility of the caller since it is challenging to; /// do efficiently from within this routine.; /// \p TargetExecutesOncePerLoop is true only when it is guaranteed that the; /// target executes at most once per execution of the loop body. This is used; /// to assess the legality of duplicating atomic loads. Generally, this is; /// true when moving out of loop and not true when moving into loops.; /// If \p ORE is set use it to emit optimization remarks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:621,Performance,optimiz,optimization,621,"/// Returns true if is legal to hoist or sink this instruction disregarding the; /// possible introduction of faults. Reasoning about potential faulting; /// instructions is the responsibility of the caller since it is challenging to; /// do efficiently from within this routine.; /// \p TargetExecutesOncePerLoop is true only when it is guaranteed that the; /// target executes at most once per execution of the loop body. This is used; /// to assess the legality of duplicating atomic loads. Generally, this is; /// true when moving out of loop and not true when moving into loops.; /// If \p ORE is set use it to emit optimization remarks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:60,Energy Efficiency,reduce,reduce,60,/// Generates an ordered vector reduction using extracts to reduce the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:57,Energy Efficiency,reduce,reduce,57,/// Generates a vector reduction using shufflevectors to reduce the value.; /// Fast-math-flags are propagated using the IRBuilder's setting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:26,Testability,log,logical,26,"/// Get the intersection (logical and) of all of the potential IR flags; /// of each scalar operation (VL) that will be converted into a vector (I).; /// If OpValue is non-null, we only consider operations similar to OpValue; /// when intersecting.; /// Flag set: NSW, NUW (if IncludeWrapFlags is true), exact, and all of; /// fast-math.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:495,Deployability,update,updated,495,"/// Set weights for \p UnrolledLoop and \p RemainderLoop based on weights for; /// \p OrigLoop and the following distribution of \p OrigLoop iteration among \p; /// UnrolledLoop and \p RemainderLoop. \p UnrolledLoop receives weights that; /// reflect TC/UF iterations, and \p RemainderLoop receives weights that reflect; /// the remaining TC%UF iterations.; ///; /// Note that \p OrigLoop may be equal to either \p UnrolledLoop or \p; /// RemainderLoop in which case weights for \p OrigLoop are updated accordingly.; /// Note also behavior is undefined if \p UnrolledLoop and \p RemainderLoop are; /// equal. \p UF must be greater than zero.; /// If \p OrigLoop has no profile info associated nothing happens.; ///; /// This utility may be useful for such optimizations as unroller and; /// vectorizer as it's typical transformation for them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:756,Performance,optimiz,optimizations,756,"/// Set weights for \p UnrolledLoop and \p RemainderLoop based on weights for; /// \p OrigLoop and the following distribution of \p OrigLoop iteration among \p; /// UnrolledLoop and \p RemainderLoop. \p UnrolledLoop receives weights that; /// reflect TC/UF iterations, and \p RemainderLoop receives weights that reflect; /// the remaining TC%UF iterations.; ///; /// Note that \p OrigLoop may be equal to either \p UnrolledLoop or \p; /// RemainderLoop in which case weights for \p OrigLoop are updated accordingly.; /// Note also behavior is undefined if \p UnrolledLoop and \p RemainderLoop are; /// equal. \p UF must be greater than zero.; /// If \p OrigLoop has no profile info associated nothing happens.; ///; /// This utility may be useful for such optimizations as unroller and; /// vectorizer as it's typical transformation for them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:453,Usability,simpl,simplifications,453,"/// Utility that implements appending of loops onto a worklist given LoopInfo.; /// Calls the templated utility taking a Range of loops, handing it the Loops; /// in LoopInfo, iterated in reverse. This is because the loops are stored in; /// RPO w.r.t. the control flow graph in LoopInfo. For the purpose of unrolling,; /// loop deletion, and LICM, we largely want to work forward across the CFG so; /// that we visit defs before uses and can propagate simplifications from one; /// loop nest into the next. Calls appendReversedLoopsToWorklist with the; /// already reversed loops in LI.; /// FIXME: Consider changing the order in LoopInfo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:43,Security,access,accessed,43,/// Add code that checks at runtime if the accessed arrays in \p PointerChecks; /// overlap. Returns the final comparator value or NULL if no check is needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:695,Deployability,update,update,695,"/// Check if the loop header has a conditional branch that is not; /// loop-invariant, because it involves load instructions. If all paths from; /// either the true or false successor to the header or loop exists do not; /// modify the memory feeding the condition, perform 'partial unswitching'. That; /// is, duplicate the instructions feeding the condition in the pre-header. Then; /// unswitch on the duplicated condition. The condition is now known in the; /// unswitched version for the 'invariant' path through the original loop.; ///; /// If the branch condition of the header is partially invariant, return a pair; /// containing the instructions to duplicate and a boolean Constant to update; /// the condition in the loops created for the true or false successors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:107,Performance,load,load,107,"/// Check if the loop header has a conditional branch that is not; /// loop-invariant, because it involves load instructions. If all paths from; /// either the true or false successor to the header or loop exists do not; /// modify the memory feeding the condition, perform 'partial unswitching'. That; /// is, duplicate the instructions feeding the condition in the pre-header. Then; /// unswitch on the duplicated condition. The condition is now known in the; /// unswitched version for the 'invariant' path through the original loop.; ///; /// If the branch condition of the header is partially invariant, return a pair; /// containing the instructions to duplicate and a boolean Constant to update; /// the condition in the loops created for the true or false successors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:266,Performance,perform,perform,266,"/// Check if the loop header has a conditional branch that is not; /// loop-invariant, because it involves load instructions. If all paths from; /// either the true or false successor to the header or loop exists do not; /// modify the memory feeding the condition, perform 'partial unswitching'. That; /// is, duplicate the instructions feeding the condition in the pre-header. Then; /// unswitch on the duplicated condition. The condition is now known in the; /// unswitched version for the 'invariant' path through the original loop.; ///; /// If the branch condition of the header is partially invariant, return a pair; /// containing the instructions to duplicate and a boolean Constant to update; /// the condition in the loops created for the true or false successors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h:420,Performance,perform,perform,420,"//===- LoopVersioning.h - Utility to version a loop -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a utility class to perform loop versioning. The versioned; // loop speculates that otherwise may-aliasing memory accesses don't overlap and; // emits checks to prove this.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h:514,Security,access,accesses,514,"//===- LoopVersioning.h - Utility to version a loop -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a utility class to perform loop versioning. The versioned; // loop speculates that otherwise may-aliasing memory accesses don't overlap and; // emits checks to prove this.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h:108,Deployability,update,updates,108,"/// Performs the CFG manipulation part of versioning the loop including; /// the DominatorTree and LoopInfo updates.; ///; /// The loop that was used to construct the class will be the ""versioned"" loop; /// i.e. the loop that will receive control if all the memchecks pass.; ///; /// This allows the loop transform pass to operate on the same loop regardless; /// of whether versioning was necessary or not:; ///; /// for each loop L:; /// analyze L; /// if versioning is necessary version L; /// transform L",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h:4,Performance,Perform,Performs,4,"/// Performs the CFG manipulation part of versioning the loop including; /// the DominatorTree and LoopInfo updates.; ///; /// The loop that was used to construct the class will be the ""versioned"" loop; /// i.e. the loop that will receive control if all the memchecks pass.; ///; /// This allows the loop transform pass to operate on the same loop regardless; /// of whether versioning was necessary or not:; ///; /// for each loop L:; /// analyze L; /// if versioning is necessary version L; /// transform L",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h:137,Integrability,wrap,wrapper,137,/// Annotate memory instructions in the versioned loop with no-alias; /// metadata based on the memchecks issued.; ///; /// This is just wrapper that calls prepareNoAliasMetadata and; /// annotateInstWithNoAlias on the instructions of the versioned loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h:4,Security,Expose,Expose,4,/// Expose LoopVersioning as a pass. Currently this is only used for; /// unit-testing. It adds all memchecks necessary to remove all may-aliasing; /// array accesses from the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h:158,Security,access,accesses,158,/// Expose LoopVersioning as a pass. Currently this is only used for; /// unit-testing. It adds all memchecks necessary to remove all may-aliasing; /// array accesses from the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h:79,Testability,test,testing,79,/// Expose LoopVersioning as a pass. Currently this is only used for; /// unit-testing. It adds all memchecks necessary to remove all may-aliasing; /// array accesses from the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopVersioning.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerAtomic.h:45,Performance,load,load,45,/// Convert the given Cmpxchg into primitive load and compare.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerAtomic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerAtomic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerAtomic.h:42,Performance,load,load,42,"/// Convert the given RMWI into primitive load and stores,; /// assuming that doing so is legal. Return true if the lowering; /// succeeds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerAtomic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerAtomic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerGlobalDtors.h:431,Integrability,wrap,wrapper,431,"//===- LowerGlobalDtors.h - Lower @llvm.global_dtors ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass lowers @llvm.global_dtors by creating wrapper functions that are; // registered in @llvm.global_ctors and which contain a call to `__cxa_atexit`; // to register their destructor functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerGlobalDtors.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerGlobalDtors.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerIFunc.h:127,Performance,load,loader,127,/// Pass to replace calls to ifuncs with indirect calls. This could be used to; /// support ifunc on systems where the program loader does not natively support; /// it. Constant initializer uses of ifuncs are not handled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerIFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerIFunc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerInvoke.h:668,Usability,simpl,simplifycfg,668,"//===- LowerInvoke.h - Eliminate Invoke instructions ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation is designed for use by code generators which do not yet; // support stack unwinding. This pass converts 'invoke' instructions to 'call'; // instructions, so that any exception-handling 'landingpad' blocks become dead; // code (which can be removed by running the '-simplifycfg' pass afterwards).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerInvoke.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerInvoke.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerSwitch.h:414,Modifiability,rewrite,rewrites,414,"//===- LowerSwitch.h - Eliminate Switch instructions ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The LowerSwitch transformation rewrites switch instructions with a sequence; // of branches, which allows targets to get away with not implementing the; // switch instruction until it is convenient.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerSwitch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerSwitch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MatrixUtils.h:14,Deployability,update,updated,14,/// The index updated on every iteration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MatrixUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MatrixUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MatrixUtils.h:94,Deployability,Update,Updates,94,"/// Creates a new loop with header, body and latch blocks that iterates from; /// [0, Bound). Updates \p Preheader to branch to the new header and uses \p; /// Exit as exit block. Adds the new loop blocks to \L and applies dominator; /// tree updates to \p DTU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MatrixUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MatrixUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MatrixUtils.h:243,Deployability,update,updates,243,"/// Creates a new loop with header, body and latch blocks that iterates from; /// [0, Bound). Updates \p Preheader to branch to the new header and uses \p; /// Exit as exit block. Adds the new loop blocks to \L and applies dominator; /// tree updates to \p DTU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MatrixUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MatrixUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h:40,Integrability,wrap,wrapper,40,"//===- Mem2Reg.h - The -mem2reg pass, a wrapper around the Utils lib ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is a simple pass wrapper around the PromoteMemToReg function call; // exposed by the Utils library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h:410,Integrability,wrap,wrapper,410,"//===- Mem2Reg.h - The -mem2reg pass, a wrapper around the Utils lib ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is a simple pass wrapper around the PromoteMemToReg function call; // exposed by the Utils library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h:463,Security,expose,exposed,463,"//===- Mem2Reg.h - The -mem2reg pass, a wrapper around the Utils lib ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is a simple pass wrapper around the PromoteMemToReg function call; // exposed by the Utils library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h:398,Usability,simpl,simple,398,"//===- Mem2Reg.h - The -mem2reg pass, a wrapper around the Utils lib ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is a simple pass wrapper around the PromoteMemToReg function call; // exposed by the Utils library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h:97,Testability,log,logic,97,"// FIXME: Once we get to more remarks like this one, we need to re-evaluate how; // much of this logic should actually go into the remark emitter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h:44,Modifiability,variab,variable,44,"/// Gather more information about \p V as a variable. This can be debug info,; /// information from the alloca, etc. Since \p V can represent more than a; /// single variable, they will all be added to the remark.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h:166,Modifiability,variab,variable,166,"/// Gather more information about \p V as a variable. This can be debug info,; /// information from the alloca, etc. Since \p V can represent more than a; /// single variable, they will all be added to the remark.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MisExpect.h:421,Integrability,message,messages,421,"//===--- MisExpect.h - Check the use of llvm.expect with PGO data ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This contains code to emit diagnostic messages for potentially incorrect; // usage of the llvm.expect intrinsic. This utility extracts the threshold; // values from metadata associated with the instrumented Branch or Switch; // instruction. The threshold values are then used to determine if a diagnostic; // should be emitted.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MisExpect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MisExpect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MisExpect.h:460,Integrability,wrap,wrapper,460,"/// checkExpectAnnotations - compares PGO counters to the thresholds used; /// for llvm.expect and warns if the PGO counters are outside of the expected; /// range. It extracts the expected weights from the MD_prof weights attatched; /// to the instruction, which are assumed to come from lowered llvm.expect; /// intrinsics. The RealWeights parameter and the extracted expected weights are; /// then passed to verifyMisexpect() for verification. It is a thin wrapper; /// around the checkFrontendInstrumentation and checkBackendInstrumentation APIs; ///; /// \param I The Instruction being checked; /// \param ExistingWeights A vector of profile weights for each target block; /// \param IsFrontend A boolean describing if this is Frontend instrumentation",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MisExpect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MisExpect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:408,Performance,perform,perform,408,"//===-- ModuleUtils.h - Functions to manipulate Modules ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This family of functions perform manipulations on Modules.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:88,Integrability,wrap,wraps,88,/// Append F to the list of global ctors of module M with the given Priority.; /// This wraps the function in the appropriate structure and stores it along; /// side other global constructors. For details see; /// https://llvm.org/docs/LangRef.html#the-llvm-global-ctors-global-variable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:278,Modifiability,variab,variable,278,/// Append F to the list of global ctors of module M with the given Priority.; /// This wraps the function in the appropriate structure and stores it along; /// side other global constructors. For details see; /// https://llvm.org/docs/LangRef.html#the-llvm-global-ctors-global-variable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:12,Security,sanitiz,sanitizer,12,/// Creates sanitizer constructor function.; /// \return Returns pointer to constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:12,Security,sanitiz,sanitizer,12,"/// Creates sanitizer constructor function, and calls sanitizer's init; /// function from it.; /// \return Returns pair of pointers to constructor, and init functions; /// respectively.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:54,Security,sanitiz,sanitizer,54,"/// Creates sanitizer constructor function, and calls sanitizer's init; /// function from it.; /// \return Returns pair of pointers to constructor, and init functions; /// respectively.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:12,Security,sanitiz,sanitizer,12,"/// Creates sanitizer constructor function lazily. If a constructor and init; /// function already exist, this function returns it. Otherwise it calls \c; /// createSanitizerCtorAndInitFunctions. The FunctionsCreatedCallback is invoked; /// in that case, passing the new Ctor and Init function.; ///; /// \return Returns pair of pointers to constructor, and init functions; /// respectively.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:54,Security,hash,hash,54,/// Rename all the anon globals in the module using a hash computed from; /// the list of public globals in the module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:103,Availability,alive,alive,103,"/// Filter out potentially dead comdat functions where other entries keep the; /// entire comdat group alive.; ///; /// This is designed for cases where functions appear to become dead but remain; /// alive due to other live entries in their comdat group.; ///; /// The \p DeadComdatFunctions container should only have pointers to; /// `Function`s which are members of a comdat group and are believed to be; /// dead.; ///; /// After this routine finishes, the only remaining `Function`s in \p; /// DeadComdatFunctions are those where every member of the comdat is listed; /// and thus removing them is safe (provided *all* are removed).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:201,Availability,alive,alive,201,"/// Filter out potentially dead comdat functions where other entries keep the; /// entire comdat group alive.; ///; /// This is designed for cases where functions appear to become dead but remain; /// alive due to other live entries in their comdat group.; ///; /// The \p DeadComdatFunctions container should only have pointers to; /// `Function`s which are members of a comdat group and are believed to be; /// dead.; ///; /// After this routine finishes, the only remaining `Function`s in \p; /// DeadComdatFunctions are those where every member of the comdat is listed; /// and thus removing them is safe (provided *all* are removed).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:440,Integrability,rout,routine,440,"/// Filter out potentially dead comdat functions where other entries keep the; /// entire comdat group alive.; ///; /// This is designed for cases where functions appear to become dead but remain; /// alive due to other live entries in their comdat group.; ///; /// The \p DeadComdatFunctions container should only have pointers to; /// `Function`s which are members of a comdat group and are believed to be; /// dead.; ///; /// After this routine finishes, the only remaining `Function`s in \p; /// DeadComdatFunctions are those where every member of the comdat is listed; /// and thus removing them is safe (provided *all* are removed).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:604,Safety,safe,safe,604,"/// Filter out potentially dead comdat functions where other entries keep the; /// entire comdat group alive.; ///; /// This is designed for cases where functions appear to become dead but remain; /// alive due to other live entries in their comdat group.; ///; /// The \p DeadComdatFunctions container should only have pointers to; /// `Function`s which are members of a comdat group and are believed to be; /// dead.; ///; /// After this routine finishes, the only remaining `Function`s in \p; /// DeadComdatFunctions are those where every member of the comdat is listed; /// and thus removing them is safe (provided *all* are removed).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:411,Performance,perform,performs,411,"/// Produce a unique identifier for this module by taking the MD5 sum of; /// the names of the module's strong external symbols that are not comdat; /// members.; ///; /// This identifier is normally guaranteed to be unique, or the program would; /// fail to link due to multiply defined symbols.; ///; /// If the module has no strong external symbols (such a module may still have a; /// semantic effect if it performs global initialization), we cannot produce a; /// unique identifier for this module, so we return the empty string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:68,Performance,load,loaded,68,"/// Lower all calls to ifuncs by replacing uses with indirect calls loaded out; /// of a global table initialized in a global constructor. This will introduce; /// one constructor function and adds it to llvm.global_ctors. The constructor; /// will call the resolver function once for each ifunc.; ///; /// Leaves any unhandled constant initializer uses as-is.; ///; /// If \p IFuncsToLower is empty, all ifuncs in the module will be lowered.; /// If \p IFuncsToLower is non-empty, only the selected ifuncs will be lowered.; ///; /// The processed ifuncs without remaining users will be removed from the; /// module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/NameAnonGlobals.h:4,Usability,Simpl,Simple,4,/// Simple pass that provides a name to every anonymous globals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/NameAnonGlobals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/NameAnonGlobals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h:1537,Energy Efficiency,reduce,reduce,1537,"//===- PredicateInfo.h - Build PredicateInfo ----------------------*-C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements the PredicateInfo analysis, which creates an Extended; /// SSA form for operations used in branch comparisons and llvm.assume; /// comparisons.; ///; /// Copies of these operations are inserted into the true/false edge (and after; /// assumes), and information attached to the copies. All uses of the original; /// operation in blocks dominated by the true/false edge (and assume), are; /// replaced with uses of the copies. This enables passes to easily and sparsely; /// propagate condition based info into the operations that may be affected.; ///; /// Example:; /// %cmp = icmp eq i32 %x, 50; /// br i1 %cmp, label %true, label %false; /// true:; /// ret i32 %x; /// false:; /// ret i32 1; ///; /// will become; ///; /// %cmp = icmp eq i32, %x, 50; /// br i1 %cmp, label %true, label %false; /// true:; /// %x.0 = call \@llvm.ssa_copy.i32(i32 %x); /// ret i32 %x.0; /// false:; /// ret i32 1; ///; /// Using getPredicateInfoFor on x.0 will give you the comparison it is; /// dominated by (the icmp), and that you are located in the true edge of that; /// comparison, which tells you x.0 is 50.; ///; /// In order to reduce the number of copies inserted, predicateinfo is only; /// inserted where it would actually be live. This means if there are no uses of; /// an operation dominated by the branch edges, or by an assume, the associated; /// predicate info is never inserted.; ///; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h:462,Modifiability,Extend,Extended,462,"//===- PredicateInfo.h - Build PredicateInfo ----------------------*-C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements the PredicateInfo analysis, which creates an Extended; /// SSA form for operations used in branch comparisons and llvm.assume; /// comparisons.; ///; /// Copies of these operations are inserted into the true/false edge (and after; /// assumes), and information attached to the copies. All uses of the original; /// operation in blocks dominated by the true/false edge (and assume), are; /// replaced with uses of the copies. This enables passes to easily and sparsely; /// propagate condition based info into the operations that may be affected.; ///; /// Example:; /// %cmp = icmp eq i32 %x, 50; /// br i1 %cmp, label %true, label %false; /// true:; /// ret i32 %x; /// false:; /// ret i32 1; ///; /// will become; ///; /// %cmp = icmp eq i32, %x, 50; /// br i1 %cmp, label %true, label %false; /// true:; /// %x.0 = call \@llvm.ssa_copy.i32(i32 %x); /// ret i32 %x.0; /// false:; /// ret i32 1; ///; /// Using getPredicateInfoFor on x.0 will give you the comparison it is; /// dominated by (the icmp), and that you are located in the true edge of that; /// comparison, which tells you x.0 is 50.; ///; /// In order to reduce the number of copies inserted, predicateinfo is only; /// inserted where it would actually be live. This means if there are no uses of; /// an operation dominated by the branch edges, or by an assume, the associated; /// predicate info is never inserted.; ///; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h:85,Usability,simpl,simply,85,"// Provides predicate information for assumes. Since assumes are always true,; // we simply provide the assume instruction, so you can tell your relative; // position to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h:79,Security,access,accesses,79,"/// Encapsulates PredicateInfo, including all data associated with memory; /// accesses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h:49,Integrability,wrap,wrapper,49,"// Used by PredicateInfo annotater, dumpers, and wrapper pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PredicateInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h:404,Integrability,interface,interface,404,"//===- PromoteMemToReg.h - Promote Allocas to Scalars -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to promote alloca instructions to SSA; // registers, by using the SSA construction algorithm.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h:393,Security,expose,exposes,393,"//===- PromoteMemToReg.h - Promote Allocas to Scalars -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to promote alloca instructions to SSA; // registers, by using the SSA construction algorithm.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h:96,Performance,load,loads,96,"/// Return true if this alloca is legal for promotion.; ///; /// This is true if there are only loads, stores, and lifetime markers; /// (transitively) using this alloca. This also enforces that there is only; /// ever one layer of bitcasts or GEPs between the alloca and the lifetime; /// markers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/PromoteMemToReg.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/RelLookupTableConverter.h:1061,Performance,load,load,1061,"==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file implements relative lookup table converter that converts; /// lookup tables to relative lookup tables to make them PIC-friendly.; ///; /// Switch lookup table example:; /// @switch.table.foo = private unnamed_addr constant [3 x i8*]; /// [; /// i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0),; /// i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0),; /// i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0); /// ], align 8; ///; /// switch.lookup:; /// %1 = sext i32 %cond to i64; /// %switch.gep = getelementptr inbounds [3 x i8*],; /// [3 x i8*]* @switch.table.foo, i64 0, i64 %1; /// %switch.load = load i8*, i8** %switch.gep, align 8; /// ret i8* %switch.load; ///; /// Switch lookup table will become a relative lookup table that; /// consists of relative offsets.; ///; /// @reltable.foo = private unnamed_addr constant [3 x i32]; /// [; /// i32 trunc (i64 sub (i64 ptrtoint ([5 x i8]* @.str to i64),; /// i64 ptrtoint ([3 x i32]* @reltable.foo to i64)) to i32),; /// i32 trunc (i64 sub (i64 ptrtoint ([4 x i8]* @.str.1 to i64),; /// i64 ptrtoint ([3 x i32]* @reltable.foo to i64)) to i32),; /// i32 trunc (i64 sub (i64 ptrtoint ([4 x i8]* @.str.2 to i64),; /// i64 ptrtoint ([3 x i32]* @reltable.foo to i64)) to i32); /// ], align 4; ///; /// IR after converting to a relative lookup table:; /// switch.lookup:; /// %1 = sext i32 %cond to i64; /// %reltable.shift = shl i64 %1, 2; /// %reltable.intrinsic = call i8* @llvm.load.relative.i64(; /// i8* bitcast ([3 x i32]* @reltable.foo to i8*),; /// i64 %reltable.shift); /// ret i8* %reltable.intrinsic; //===---------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/RelLookupTableConverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/RelLookupTableConverter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/RelLookupTableConverter.h:1068,Performance,load,load,1068,"==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file implements relative lookup table converter that converts; /// lookup tables to relative lookup tables to make them PIC-friendly.; ///; /// Switch lookup table example:; /// @switch.table.foo = private unnamed_addr constant [3 x i8*]; /// [; /// i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0),; /// i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0),; /// i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0); /// ], align 8; ///; /// switch.lookup:; /// %1 = sext i32 %cond to i64; /// %switch.gep = getelementptr inbounds [3 x i8*],; /// [3 x i8*]* @switch.table.foo, i64 0, i64 %1; /// %switch.load = load i8*, i8** %switch.gep, align 8; /// ret i8* %switch.load; ///; /// Switch lookup table will become a relative lookup table that; /// consists of relative offsets.; ///; /// @reltable.foo = private unnamed_addr constant [3 x i32]; /// [; /// i32 trunc (i64 sub (i64 ptrtoint ([5 x i8]* @.str to i64),; /// i64 ptrtoint ([3 x i32]* @reltable.foo to i64)) to i32),; /// i32 trunc (i64 sub (i64 ptrtoint ([4 x i8]* @.str.1 to i64),; /// i64 ptrtoint ([3 x i32]* @reltable.foo to i64)) to i32),; /// i32 trunc (i64 sub (i64 ptrtoint ([4 x i8]* @.str.2 to i64),; /// i64 ptrtoint ([3 x i32]* @reltable.foo to i64)) to i32); /// ], align 4; ///; /// IR after converting to a relative lookup table:; /// switch.lookup:; /// %1 = sext i32 %cond to i64; /// %reltable.shift = shl i64 %1, 2; /// %reltable.intrinsic = call i8* @llvm.load.relative.i64(; /// i8* bitcast ([3 x i32]* @reltable.foo to i8*),; /// i64 %reltable.shift); /// ret i8* %reltable.intrinsic; //===---------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/RelLookupTableConverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/RelLookupTableConverter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/RelLookupTableConverter.h:1125,Performance,load,load,1125,"Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file implements relative lookup table converter that converts; /// lookup tables to relative lookup tables to make them PIC-friendly.; ///; /// Switch lookup table example:; /// @switch.table.foo = private unnamed_addr constant [3 x i8*]; /// [; /// i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0),; /// i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0),; /// i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0); /// ], align 8; ///; /// switch.lookup:; /// %1 = sext i32 %cond to i64; /// %switch.gep = getelementptr inbounds [3 x i8*],; /// [3 x i8*]* @switch.table.foo, i64 0, i64 %1; /// %switch.load = load i8*, i8** %switch.gep, align 8; /// ret i8* %switch.load; ///; /// Switch lookup table will become a relative lookup table that; /// consists of relative offsets.; ///; /// @reltable.foo = private unnamed_addr constant [3 x i32]; /// [; /// i32 trunc (i64 sub (i64 ptrtoint ([5 x i8]* @.str to i64),; /// i64 ptrtoint ([3 x i32]* @reltable.foo to i64)) to i32),; /// i32 trunc (i64 sub (i64 ptrtoint ([4 x i8]* @.str.1 to i64),; /// i64 ptrtoint ([3 x i32]* @reltable.foo to i64)) to i32),; /// i32 trunc (i64 sub (i64 ptrtoint ([4 x i8]* @.str.2 to i64),; /// i64 ptrtoint ([3 x i32]* @reltable.foo to i64)) to i32); /// ], align 4; ///; /// IR after converting to a relative lookup table:; /// switch.lookup:; /// %1 = sext i32 %cond to i64; /// %reltable.shift = shl i64 %1, 2; /// %reltable.intrinsic = call i8* @llvm.load.relative.i64(; /// i8* bitcast ([3 x i32]* @reltable.foo to i8*),; /// i64 %reltable.shift); /// ret i8* %reltable.intrinsic; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/RelLookupTableConverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/RelLookupTableConverter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/RelLookupTableConverter.h:1895,Performance,load,load,1895,"Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file implements relative lookup table converter that converts; /// lookup tables to relative lookup tables to make them PIC-friendly.; ///; /// Switch lookup table example:; /// @switch.table.foo = private unnamed_addr constant [3 x i8*]; /// [; /// i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0),; /// i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0),; /// i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0); /// ], align 8; ///; /// switch.lookup:; /// %1 = sext i32 %cond to i64; /// %switch.gep = getelementptr inbounds [3 x i8*],; /// [3 x i8*]* @switch.table.foo, i64 0, i64 %1; /// %switch.load = load i8*, i8** %switch.gep, align 8; /// ret i8* %switch.load; ///; /// Switch lookup table will become a relative lookup table that; /// consists of relative offsets.; ///; /// @reltable.foo = private unnamed_addr constant [3 x i32]; /// [; /// i32 trunc (i64 sub (i64 ptrtoint ([5 x i8]* @.str to i64),; /// i64 ptrtoint ([3 x i32]* @reltable.foo to i64)) to i32),; /// i32 trunc (i64 sub (i64 ptrtoint ([4 x i8]* @.str.1 to i64),; /// i64 ptrtoint ([3 x i32]* @reltable.foo to i64)) to i32),; /// i32 trunc (i64 sub (i64 ptrtoint ([4 x i8]* @.str.2 to i64),; /// i64 ptrtoint ([3 x i32]* @reltable.foo to i64)) to i32); /// ], align 4; ///; /// IR after converting to a relative lookup table:; /// switch.lookup:; /// %1 = sext i32 %cond to i64; /// %reltable.shift = shl i64 %1, 2; /// %reltable.intrinsic = call i8* @llvm.load.relative.i64(; /// i8* bitcast ([3 x i32]* @reltable.foo to i8*),; /// i64 %reltable.shift); /// ret i8* %reltable.intrinsic; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/RelLookupTableConverter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/RelLookupTableConverter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h:412,Integrability,interface,interface,412,"//===- Transforms/Utils/SampleProfileInference.h ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for the profile inference algorithm, profi.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h:6,Integrability,wrap,wrapper,6,/// A wrapper of a binary basic block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h:6,Integrability,wrap,wrapper,6,/// A wrapper of a jump between two basic blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h:6,Integrability,wrap,wrapper,6,/// A wrapper of binary function with basic blocks and jumps.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h:120,Performance,tune,tuned,120,"/// Various thresholds and options controlling the behavior of the profile; /// inference algorithm. Default values are tuned for several large-scale; /// applications, and can be modified via corresponding command-line flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h:170,Safety,avoid,avoid,170,/// Try to infer branch probabilities mimicking implementation of; /// BranchProbabilityInfo. Unlikely taken branches are marked so that the; /// inference algorithm can avoid sending flow along corresponding edges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h:113,Availability,error,errors,113,// Extract the resulting weights from the control flow; // All weights are increased by one to avoid propagation errors introduced by; // zero weights.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h:95,Safety,avoid,avoid,95,// Extract the resulting weights from the control flow; // All weights are increased by one to avoid propagation errors introduced by; // zero weights.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileInference.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:418,Integrability,interface,interface,418,"////===- SampleProfileLoadBaseImpl.h - Profile loader base impl --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for the sampled PGO profile loader base; /// implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:47,Performance,load,loader,47,"////===- SampleProfileLoadBaseImpl.h - Profile loader base impl --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for the sampled PGO profile loader base; /// implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:456,Performance,load,loader,456,"////===- SampleProfileLoadBaseImpl.h - Profile loader base impl --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for the sampled PGO profile loader base; /// implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:163,Integrability,inject,injected,163,// end namespace afdo_detail; // This class serves sample counts correlation for SampleProfileLoader by; // analyzing pseudo probes and their function descriptors injected by; // SampleProfileProber.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:163,Security,inject,injected,163,// end namespace afdo_detail; // This class serves sample counts correlation for SampleProfileLoader by; // analyzing pseudo probes and their function descriptors injected by; // SampleProfileProber.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:32,Performance,load,load,32,/// Name of the profile file to load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:42,Performance,load,load,42,/// Name of the profile remapping file to load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:25,Performance,load,load,25,/// VirtualFileSystem to load profile files from.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:4,Performance,Optimiz,Optimization,4,/// Optimization Remark Emitter used to emit diagnostic remarks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:44,Performance,load,load,44,/// Clear all the per-function data used to load samples and propagate weights.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:4,Usability,Clear,Clear,4,/// Clear all the per-function data used to load samples and propagate weights.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:357,Security,checksum,checksum,357,"// If none of the instruction has FunctionSample, we choose to return zero; // value sample to indicate the BB is cold. This could happen when the; // instruction is from inlinee and no profile data is found.; // FIXME: This should not be affected by the source drift issue as 1) if the; // newly added function is top-level inliner, it won't match the CFG checksum; // in the function profile or 2) if it's the inlinee, the inlinee should have; // a profile, otherwise it wouldn't be inlined. For non-probe based profile,; // we can improve it by adding a switch for profile-sample-block-accurate for; // block level counts in the future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:377,Deployability,Update,UpdateBlockCount,377,"/// Propagate weights through incoming/outgoing edges.; ///; /// If the weight of a basic block is known, and there is only one edge; /// with an unknown weight, we can calculate the weight of that edge.; ///; /// Similarly, if all the edges have a known count, we can calculate the; /// count of the basic block, if needed.; ///; /// \param F Function to process.; /// \param UpdateBlockCount Whether we should update basic block counts that; /// has already been annotated.; ///; /// \returns True if new weights were assigned to edges or blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:412,Deployability,update,update,412,"/// Propagate weights through incoming/outgoing edges.; ///; /// If the weight of a basic block is known, and there is only one edge; /// with an unknown weight, we can calculate the weight of that edge.; ///; /// Similarly, if all the edges have a known count, we can calculate the; /// count of the basic block, if needed.; ///; /// \param F Function to process.; /// \param UpdateBlockCount Whether we should update basic block counts that; /// has already been annotated.; ///; /// \returns True if new weights were assigned to edges or blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:183,Usability,simpl,simply,183,"// After visiting all the edges, there are three cases that we; // can handle immediately:; //; // - All the edge weights are known (i.e., NumUnknownEdges == 0).; // In this case, we simply check that the sum of all the edges; // is the same as BB's weight. If not, we change BB's weight; // to match. Additionally, if BB had not been visited before,; // we mark it visited.; //; // - Only one edge is unknown and BB has already been visited.; // In this case, we can compute the weight of the edge by; // subtracting the total block weight from all the known; // edge weights. If the edges weight more than BB, then the; // edge of the last remaining edge is set to zero.; //; // - There exists a self-referential edge and the weight of BB is; // known. In this case, this edge can be based on BB's weight.; // We add up all the other known edges and set the weight on; // the self-referential edge as we did in the previous case.; //; // In any other case, we must continue iterating. Eventually,; // all edges will get a weight, or iteration will stop when; // it reaches SampleProfileMaxPropagateIterations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:40,Usability,usab,usable,40,// Flow-based profile inference is only usable with BasicBlock instantiation; // of SampleProfileLoaderBaseImpl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:869,Usability,simpl,simple,869,"/// Generate branch weight metadata for all branches in \p F.; ///; /// Branch weights are computed out of instruction samples using a; /// propagation heuristic. Propagation proceeds in 3 phases:; ///; /// 1- Assignment of block weights. All the basic blocks in the function; /// are initial assigned the same weight as their most frequently; /// executed instruction.; ///; /// 2- Creation of equivalence classes. Since samples may be missing from; /// blocks, we can fill in the gaps by setting the weights of all the; /// blocks in the same equivalence class to the same weight. To compute; /// the concept of equivalence, we use dominance and loop information.; /// Two blocks B1 and B2 are in the same equivalence class if B1; /// dominates B2, B2 post-dominates B1 and both are in the same loop.; ///; /// 3- Propagation of block weights into edges. This uses a simple; /// propagation heuristic. The following rules are applied to every; /// block BB in the CFG:; ///; /// - If BB has a single predecessor/successor, then the weight; /// of that edge is the weight of the block.; ///; /// - If all the edges are known except one, and the weight of the; /// block is already known, the weight of the unknown edge will; /// be the weight of the block minus the sum of all the known; /// edges. If the sum of all the known edges is larger than BB's weight,; /// we set the unknown edge weight to zero.; ///; /// - If there is a self-referential edge, and the weight of the block is; /// known, the weight for that edge is set to the weight of the block; /// minus the weight of the other incoming edges to that block (if; /// known).; ///; /// Since this propagation is not guaranteed to finalize for every CFG, we; /// only allow it to proceed for a limited number of iterations (controlled; /// by -sample-profile-max-propagate-iterations).; ///; /// FIXME: Try to replace this propagation heuristic with a scheme; /// that is guaranteed to finalize. A work-list approach similar to; /// the st",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:105,Usability,GUID,GUIDs,105,"// Add an entry count to the function using the samples gathered at the; // function entry.; // Sets the GUIDs that are inlined in the profiled binary. This is used; // for ThinLink to make correct liveness analysis, and also make the IR; // match the profiled binary before annotation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:383,Safety,avoid,avoid,383,"// If we utilize a flow-based count inference, then we trust the computed; // counts and set the entry count as computed by the algorithm. This is; // primarily done to sync the counts produced by profi and BFI inference,; // which uses the entry count for mass propagation.; // If profi produces a zero-value for the entry count, we fallback to; // Samples->getHeadSamples() + 1 to avoid functions with zero count.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:471,Availability,avail,available,471,"/// Get the line number for the function header.; ///; /// This looks up function \p F in the current compilation unit and; /// retrieves the line number where the function is defined. This is; /// line 0 for all the samples read from the profile file. Every line; /// number is relative to this line.; ///; /// \param F Function object to query.; ///; /// \returns the line number where \p F is defined. If it returns 0,; /// it means that there is no debug information available for \p F.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h:47,Performance,load,loader,47,"////===- SampleProfileLoadBaseUtil.h - Profile loader util func --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the utility functions for the sampled PGO loader base; /// implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h:456,Performance,load,loader,456,"////===- SampleProfileLoadBaseUtil.h - Profile loader util func --*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the utility functions for the sampled PGO loader base; /// implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h:159,Safety,detect,detect,159,/// Coverage map for sampling records.; ///; /// This map keeps a record of sampling records that have been matched to; /// an IR instruction. This is used to detect some form of staleness in; /// profiles (see flag -sample-profile-check-coverage).; ///; /// Each entry in the map corresponds to a FunctionSamples instance. This is; /// another map that counts how many times the sample record at the; /// given location has been used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h:240,Availability,avail,available,240,"/// Number of samples used from the profile.; ///; /// When a sampling record is used for the first time, the samples from; /// that record are added to this accumulator. Coverage is later computed; /// based on the total number of samples available in this function and; /// its callsites.; ///; /// Note that this accumulator tracks samples used from a single function; /// and all the inlined callsites. Strictly, we should have a map of counters; /// keyed by FunctionSamples pointers, but these stats are cleared after; /// every function, so we just need to keep a single counter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h:510,Usability,clear,cleared,510,"/// Number of samples used from the profile.; ///; /// When a sampling record is used for the first time, the samples from; /// that record are added to this accumulator. Coverage is later computed; /// based on the total number of samples available in this function and; /// its callsites.; ///; /// Note that this accumulator tracks samples used from a single function; /// and all the inlined callsites. Strictly, we should have a map of counters; /// keyed by FunctionSamples pointers, but these stats are cleared after; /// every function, so we just need to keep a single counter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h:20,Modifiability,variab,variable,20,/// Create a global variable to flag FSDiscriminators are used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h:7,Security,Sanitiz,SanitizerStats,7,"//===- SanitizerStats.h - Sanitizer statistics gathering -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Declares functions and data structures for sanitizer statistics gathering.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h:26,Security,Sanitiz,Sanitizer,26,"//===- SanitizerStats.h - Sanitizer statistics gathering -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Declares functions and data structures for sanitizer statistics gathering.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h:425,Security,sanitiz,sanitizer,425,"//===- SanitizerStats.h - Sanitizer statistics gathering -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Declares functions and data structures for sanitizer statistics gathering.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h:48,Security,sanitiz,sanitizer,48,// Number of bits in data that are used for the sanitizer kind. Needs to match; // __sanitizer::kKindBits in compiler-rt/lib/stats/stats.h,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h:97,Security,sanitiz,sanitizer,97,/// Generates code into B that increments a location-specific counter tagged; /// with the given sanitizer kind SK.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SanitizerStats.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:232,Deployability,release,release,232,"/// This class uses information about analyze scalars to rewrite expressions; /// in canonical form.; ///; /// Clients should create an instance of this class when rewriting is needed,; /// and destroy it when finished to allow the release of the associated; /// memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:57,Modifiability,rewrite,rewrite,57,"/// This class uses information about analyze scalars to rewrite expressions; /// in canonical form.; ///; /// Clients should create an instance of this class when rewriting is needed,; /// and destroy it when finished to allow the release of the associated; /// memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:23,Performance,cache,caches,23,"// InsertedExpressions caches Values for reuse, so must track RAUW.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:17,Modifiability,variab,variables,17,// The induction variables generated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:244,Modifiability,variab,variable,244,"/// When true, SCEVExpander tries to expand expressions in ""canonical"" form.; /// When false, expressions are expanded in a more literal form.; ///; /// In ""canonical"" form addrecs are expanded as arithmetic based on a; /// canonical induction variable. Note that CanonicalMode doesn't guarantee; /// that all expressions are expanded in ""canonical"" form. For some; /// expressions literal mode can be preferred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:217,Deployability,update,updated,217,// RAII object that stores the current insertion point and restores it when; // the object is destroyed. This includes the debug location. Duplicated; // from InsertPointGuard to add SetInsertPoint() which is used to updated; // InsertPointGuards stack when insert points are moved during SCEV; // expansion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:26,Safety,avoid,avoid,26,"// In assert-less builds, avoid crashing",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:6,Testability,assert,assert-less,6,"// In assert-less builds, avoid crashing",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:25,Modifiability,variab,variable,25,/// Return the induction variable increment's IV operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:43,Safety,safe,safe,43,"/// Return true if the given expression is safe to expand in the sense that; /// all materialized values are safe to speculate anywhere their operands are; /// defined, and the expander is capable of expanding the expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:109,Safety,safe,safe,109,"/// Return true if the given expression is safe to expand in the sense that; /// all materialized values are safe to speculate anywhere their operands are; /// defined, and the expander is capable of expanding the expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:43,Safety,safe,safe,43,/// Return true if the given expression is safe to expand in the sense that; /// all materialized values are defined and safe to speculate at the specified; /// location and their operands are defined at this location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:121,Safety,safe,safe,121,/// Return true if the given expression is safe to expand in the sense that; /// all materialized values are defined and safe to speculate at the specified; /// location and their operands are defined at this location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:41,Performance,cache,cached,41,"// When we change the post-inc loop set, cached expansions may no; // longer be valid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:152,Performance,optimiz,optimization,152,/// Disable the behavior of expanding expressions in canonical form rather; /// than in a more literal form. Non-canonical mode is useful for late; /// optimization passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:4,Usability,Clear,Clear,4,/// Clear the current insertion point. This is useful if the instruction; /// that had been serving as the insertion point may have been deleted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:75,Modifiability,rewrite,rewriter,75,"/// Return true if the specified instruction was inserted by the code; /// rewriter. If so, the client should not modify the instruction. Note that; /// this also includes instructions re-used during expansion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:263,Performance,perform,perform,263,/// Determine whether there is an existing expansion of S that can be reused.; /// This is used to check whether S can be expanded cheaply.; ///; /// L is a hint which tells in which loop to look for the suitable value.; ///; /// Note that this function does not perform an exhaustive search. I.e if it; /// didn't find any value it does not mean that there is no such value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:108,Availability,redundant,redundant,108,"/// Insert the specified binary operator, doing a small amount of work to; /// avoid inserting an obviously redundant operation, and hoisting to an; /// outer loop when the opportunity is there and it is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:79,Safety,avoid,avoid,79,"/// Insert the specified binary operator, doing a small amount of work to; /// avoid inserting an obviously redundant operation, and hoisting to an; /// outer loop when the opportunity is there and it is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:108,Safety,redund,redundant,108,"/// Insert the specified binary operator, doing a small amount of work to; /// avoid inserting an obviously redundant operation, and hoisting to an; /// outer loop when the opportunity is there and it is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:204,Safety,safe,safe,204,"/// Insert the specified binary operator, doing a small amount of work to; /// avoid inserting an obviously redundant operation, and hoisting to an; /// outer loop when the opportunity is there and it is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h:108,Integrability,interface,interface,108,//===----------------------------------------------------------------------===//; //; /// SCCPSolver - This interface class is a general purpose solver for Sparse; /// Conditional Constant Propagation (SCCP).; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h:158,Modifiability,variab,variable,158,/// trackValueOfGlobalVariable - Clients can use this method to; /// inform the SCCPSolver that it should track loads and stores to the; /// specified global variable if it can. This is only legal to call if; /// performing Interprocedural SCCP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h:112,Performance,load,loads,112,/// trackValueOfGlobalVariable - Clients can use this method to; /// inform the SCCPSolver that it should track loads and stores to the; /// specified global variable if it can. This is only legal to call if; /// performing Interprocedural SCCP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h:213,Performance,perform,performing,213,/// trackValueOfGlobalVariable - Clients can use this method to; /// inform the SCCPSolver that it should track loads and stores to the; /// specified global variable if it can. This is only legal to call if; /// performing Interprocedural SCCP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h:177,Safety,safe,safe,177,"/// resolvedUndefsIn - While solving the dataflow for a function, we assume; /// that branches on undef values cannot reach any of their successors.; /// However, this is not a safe assumption. After we solve dataflow, this; /// method should be use to handle this. If this returns true, the solver; /// should be rerun.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h:88,Modifiability,variab,variables,88,/// getTrackedGlobals - Get and return the set of inferred initializers for; /// global variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h:228,Modifiability,inherit,inherited,228,"/// Set the Lattice Value for the arguments of a specialization \p F.; /// If an argument is Constant then its lattice value is marked with the; /// corresponding actual argument in \p Args. Otherwise, its lattice value; /// is inherited (copied) from the corresponding formal argument in \p Args.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h:528,Deployability,pipeline,pipeline,528,"//===- SimplifyCFGOptions.h - Control structure for SimplifyCFG -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A set of parameters used to control the transforms in the SimplifyCFG pass.; // Options may change depending on the position in the optimization pipeline.; // For example, canonical form that includes switches and branches may later be; // replaced by lookup tables and selects.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h:482,Integrability,depend,depending,482,"//===- SimplifyCFGOptions.h - Control structure for SimplifyCFG -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A set of parameters used to control the transforms in the SimplifyCFG pass.; // Options may change depending on the position in the optimization pipeline.; // For example, canonical form that includes switches and branches may later be; // replaced by lookup tables and selects.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h:515,Performance,optimiz,optimization,515,"//===- SimplifyCFGOptions.h - Control structure for SimplifyCFG -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A set of parameters used to control the transforms in the SimplifyCFG pass.; // Options may change depending on the position in the optimization pipeline.; // For example, canonical form that includes switches and branches may later be; // replaced by lookup tables and selects.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h:7,Usability,Simpl,SimplifyCFGOptions,7,"//===- SimplifyCFGOptions.h - Control structure for SimplifyCFG -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A set of parameters used to control the transforms in the SimplifyCFG pass.; // Options may change depending on the position in the optimization pipeline.; // For example, canonical form that includes switches and branches may later be; // replaced by lookup tables and selects.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h:52,Usability,Simpl,SimplifyCFG,52,"//===- SimplifyCFGOptions.h - Control structure for SimplifyCFG -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A set of parameters used to control the transforms in the SimplifyCFG pass.; // Options may change depending on the position in the optimization pipeline.; // For example, canonical form that includes switches and branches may later be; // replaced by lookup tables and selects.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h:441,Usability,Simpl,SimplifyCFG,441,"//===- SimplifyCFGOptions.h - Control structure for SimplifyCFG -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A set of parameters used to control the transforms in the SimplifyCFG pass.; // Options may change depending on the position in the optimization pipeline.; // For example, canonical form that includes switches and branches may later be; // replaced by lookup tables and selects.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:404,Integrability,interface,interface,404,"//===-- llvm/Transforms/Utils/SimplifyIndVar.h - Indvar Utils ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines in interface for induction variable simplification. It does; // not define any actual pass or policy, but provides a single function to; // simplify a loop's induction variables based on ScalarEvolution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:428,Modifiability,variab,variable,428,"//===-- llvm/Transforms/Utils/SimplifyIndVar.h - Indvar Utils ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines in interface for induction variable simplification. It does; // not define any actual pass or policy, but provides a single function to; // simplify a loop's induction variables based on ScalarEvolution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:569,Modifiability,variab,variables,569,"//===-- llvm/Transforms/Utils/SimplifyIndVar.h - Indvar Utils ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines in interface for induction variable simplification. It does; // not define any actual pass or policy, but provides a single function to; // simplify a loop's induction variables based on ScalarEvolution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:30,Usability,Simpl,SimplifyIndVar,30,"//===-- llvm/Transforms/Utils/SimplifyIndVar.h - Indvar Utils ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines in interface for induction variable simplification. It does; // not define any actual pass or policy, but provides a single function to; // simplify a loop's induction variables based on ScalarEvolution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:437,Usability,simpl,simplification,437,"//===-- llvm/Transforms/Utils/SimplifyIndVar.h - Indvar Utils ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines in interface for induction variable simplification. It does; // not define any actual pass or policy, but provides a single function to; // simplify a loop's induction variables based on ScalarEvolution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:541,Usability,simpl,simplify,541,"//===-- llvm/Transforms/Utils/SimplifyIndVar.h - Indvar Utils ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines in interface for induction variable simplification. It does; // not define any actual pass or policy, but provides a single function to; // simplify a loop's induction variables based on ScalarEvolution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:4,Integrability,Interface,Interface,4,/// Interface for visiting interesting IV users that are recognized but not; /// simplified by this utility.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:81,Usability,simpl,simplified,81,/// Interface for visiting interesting IV users that are recognized but not; /// simplified by this utility.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:70,Modifiability,variab,variable,70,/// simplifyUsersOfIV - Simplify instructions that use this induction variable; /// by using ScalarEvolution to analyze the IV's recurrence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:4,Usability,simpl,simplifyUsersOfIV,4,/// simplifyUsersOfIV - Simplify instructions that use this induction variable; /// by using ScalarEvolution to analyze the IV's recurrence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:24,Usability,Simpl,Simplify,24,/// simplifyUsersOfIV - Simplify instructions that use this induction variable; /// by using ScalarEvolution to analyze the IV's recurrence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:50,Modifiability,variab,variables,50,/// SimplifyLoopIVs - Simplify users of induction variables within this; /// loop. This does not actually change or add IVs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:4,Usability,Simpl,SimplifyLoopIVs,4,/// SimplifyLoopIVs - Simplify users of induction variables within this; /// loop. This does not actually change or add IVs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:22,Usability,Simpl,Simplify,22,/// SimplifyLoopIVs - Simplify users of induction variables within this; /// loop. This does not actually change or add IVs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:40,Modifiability,variab,variables,40,/// Collect information about induction variables that are used by sign/zero; /// extend operations. This information is recorded by CollectExtend and provides; /// the input to WidenIV.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:82,Modifiability,extend,extend,82,/// Collect information about induction variables that are used by sign/zero; /// extend operations. This information is recorded by CollectExtend and provides; /// the input to WidenIV.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:20,Modifiability,Variab,Variables,20,/// Widen Induction Variables - Extend the width of an IV to cover its; /// widest uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:32,Modifiability,Extend,Extend,32,/// Widen Induction Variables - Extend the width of an IV to cover its; /// widest uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:404,Integrability,interface,interface,404,"//===- SimplifyLibCalls.h - Library call simplifier -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to build some C language libcalls for; // optimization passes that need to call the various functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:456,Performance,optimiz,optimization,456,"//===- SimplifyLibCalls.h - Library call simplifier -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to build some C language libcalls for; // optimization passes that need to call the various functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:393,Security,expose,exposes,393,"//===- SimplifyLibCalls.h - Library call simplifier -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to build some C language libcalls for; // optimization passes that need to call the various functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:7,Usability,Simpl,SimplifyLibCalls,7,"//===- SimplifyLibCalls.h - Library call simplifier -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to build some C language libcalls for; // optimization passes that need to call the various functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:41,Usability,simpl,simplifier,41,"//===- SimplifyLibCalls.h - Library call simplifier -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to build some C language libcalls for; // optimization passes that need to call the various functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:233,Performance,optimiz,optimizations,233,"/// This class implements simplifications for calls to fortified library; /// functions (__st*cpy_chk, __memcpy_chk, __memmove_chk, __memset_chk), to,; /// when possible, replace them with their non-checking counterparts.; /// Other optimizations can also be done, but it's possible to disable them and; /// only simplify needless use of the checking versions (when the object size; /// is unknown) by passing true for OnlyLowerUnknownSize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:26,Usability,simpl,simplifications,26,"/// This class implements simplifications for calls to fortified library; /// functions (__st*cpy_chk, __memcpy_chk, __memmove_chk, __memset_chk), to,; /// when possible, replace them with their non-checking counterparts.; /// Other optimizations can also be done, but it's possible to disable them and; /// only simplify needless use of the checking versions (when the object size; /// is unknown) by passing true for OnlyLowerUnknownSize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:313,Usability,simpl,simplify,313,"/// This class implements simplifications for calls to fortified library; /// functions (__st*cpy_chk, __memcpy_chk, __memmove_chk, __memset_chk), to,; /// when possible, replace them with their non-checking counterparts.; /// Other optimizations can also be done, but it's possible to disable them and; /// only simplify needless use of the checking versions (when the object size; /// is unknown) by passing true for OnlyLowerUnknownSize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:62,Performance,optimiz,optimizations,62,"/// LibCallSimplifier - This class implements a collection of optimizations; /// that replace well formed calls to library functions with a more optimal; /// form. For example, replacing 'printf(""Hello!"")' with 'puts(""Hello!"")'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:13,Integrability,wrap,wrapper,13,/// Internal wrapper for RAUW that is the default implementation.; ///; /// Other users may provide an alternate function with this signature instead; /// of this one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:13,Integrability,wrap,wrapper,13,/// Internal wrapper for eraseFromParent that is the default implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:4,Performance,optimiz,optimizeCall,4,/// optimizeCall - Take the given call instruction and return a more; /// optimal value to replace the instruction with or 0 if a more; /// optimal form can't be found. Note that the returned value may; /// be equal to the instruction being optimized. In this case all; /// other instructions that use the given instruction were modified; /// and the given instruction is dead.; /// The call must not be an indirect call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:241,Performance,optimiz,optimized,241,/// optimizeCall - Take the given call instruction and return a more; /// optimal value to replace the instruction with or 0 if a more; /// optimal form can't be found. Note that the returned value may; /// be equal to the instruction being optimized. In this case all; /// other instructions that use the given instruction were modified; /// and the given instruction is dead.; /// The call must not be an indirect call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:34,Performance,Optimiz,Optimizations,34,// String and Memory Library Call Optimizations,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:13,Performance,optimiz,optimize,13,// Helper to optimize stpncpy and strncpy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:3,Integrability,Wrap,Wrapper,3,// Wrapper for all String/Memory Library Call Optimizations,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:46,Performance,Optimiz,Optimizations,46,// Wrapper for all String/Memory Library Call Optimizations,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:16,Performance,Optimiz,Optimizations,16,// Math Library Optimizations,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:3,Integrability,Wrap,Wrapper,3,// Wrapper for all floating point library call optimizations,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:47,Performance,optimiz,optimizations,47,// Wrapper for all floating point library call optimizations,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:24,Performance,Optimiz,Optimizations,24,// Integer Library Call Optimizations,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:34,Performance,Optimiz,Optimizations,34,// Formatting and IO Library Call Optimizations,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:19,Performance,optimiz,optimize,19,/// Shared code to optimize strlen+wcslen and strnlen+wcsnlen.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h:47,Performance,optimiz,optimization,47,"//===- llvm/Transforms/Utils/SizeOpts.h - size optimization -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains some shared code size optimization related code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h:424,Performance,optimiz,optimization,424,"//===- llvm/Transforms/Utils/SizeOpts.h - size optimization -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains some shared code size optimization related code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h:28,Testability,test,test,28,// A query call from a unit test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h:58,Performance,optimiz,optimized,58,/// Returns true if function \p F is suggested to be size-optimized based on the; /// profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h:62,Performance,optimiz,optimized,62,/// Returns true if basic block \p BB is suggested to be size-optimized based on; /// the profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SizeOpts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SplitModule.h:565,Performance,optimiz,optimization,565,"//===- SplitModule.h - Split a module into partitions -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the function llvm::SplitModule, which splits a module; // into multiple linkable partitions. It can be used to implement parallel code; // generation for link-time optimization.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SplitModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SplitModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h:39,Deployability,Update,Update,39,"//===- SSAUpdater.h - Unstructured SSA Update Tool --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the SSAUpdater class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h:185,Modifiability,rewrite,rewrite,185,/// Helper class for SSA formation on a set of values defined in; /// multiple blocks.; ///; /// This is used when code duplication or another unstructured; /// transformation wants to rewrite a set of uses of one value with uses of a; /// set of values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h:56,Deployability,update,updates,56,/// Reset this object to get ready for a new set of SSA updates with; /// type 'Ty'.; ///; /// PHI nodes get a name based on 'Name'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h
